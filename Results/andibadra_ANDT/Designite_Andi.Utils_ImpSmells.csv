Implementation smell,Namespace,Class,File,Method,Description
Long Method,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The method has 118 lines of code.
Long Method,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The method has 109 lines of code.
Long Method,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,FileLoad,The method has 125 lines of code.
Long Method,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The method has 120 lines of code.
Long Method,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The method has 120 lines of code.
Complex Method,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,Cyclomatic complexity of the method is 9
Complex Method,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,Cyclomatic complexity of the method is 10
Complex Method,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,Cyclomatic complexity of the method is 12
Complex Method,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,Cyclomatic complexity of the method is 17
Complex Method,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,Cyclomatic complexity of the method is 16
Complex Method,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,Cyclomatic complexity of the method is 19
Complex Method,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,SEARCH,Cyclomatic complexity of the method is 8
Complex Method,Andi.Utils.Renderer,ToolStripHelper,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,FlagsToStringFormat,Cyclomatic complexity of the method is 15
Complex Method,Andi.Utils.Renderer,ToolStripHelper,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,MenuPanelPaint,Cyclomatic complexity of the method is 8
Complex Method,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,Cyclomatic complexity of the method is 18
Complex Method,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,Cyclomatic complexity of the method is 12
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_0.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_0.Count]; " is 123.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "		_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO); " is 151.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_1.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_0.Count]; " is 123.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_2.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_2.Count]; " is 123.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_3.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_3.Count]; " is 123.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_4.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_4.Count]; " is 123.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_5.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_5.Count]; " is 123.
Long Statement,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The length of the statement  "	_INFOHeader.SubFile.SubSections.SEC_6.Entry = new Header.INFO.SubSectionEntry[_INFOHeader.SubFile.SubSections.SEC_6.Count]; " is 123.
Long Statement,Andi.Utils.Database,Database,C:\repos\andibadra_ANDT\Andi.Utils\Database\Database.cs,Connect,The length of the statement  "	sql_con.ConnectionString = "Data Source=" + Application.StartupPath + @"\dir\Database\ninfia_ff7b20" + ".db;Version=3;"; " is 120.
Long Statement,Andi.Utils.Database,Database,C:\repos\andibadra_ANDT\Andi.Utils\Database\Database.cs,GetPokemonAlternativeName,The length of the statement  "	string query = "SELECT a.id_alternative'a.name FROM pokemon_name_alternative as a WHERE a.country = " + idcountry + " And a.game_ver < " + idgamever + " And a.generation < " + idgen + " And a.id = " + id; " is 204.
Long Statement,Andi.Utils.Database,MVGList,C:\repos\andibadra_ANDT\Andi.Utils\Database\MoveList.cs,Load,The length of the statement  "	query = "SELECT a.id' a.name FROM app_moveseteditor as a WHERE a.country = " + idcountry + " AND a.game_ver = " + gamever + " ORDER BY a.id"; " is 141.
Long Statement,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,Usage,The length of the statement  "	EXIT ("Usage: BLZ command filename [filename [...]]\n" + "\n" + "command:\n" + "  -d ....... decode 'filename'\n" + "  -en[9] ... encode 'filename'' normal mode\n" + "  -eo[9] ... encode 'filename'' optimal mode (LZ-CUE)\n" + "\n" + "* '9' compress an ARM9 file with 0x4000 bytes decoded\n" + "* multiple filenames and wildcards are permitted\n" + "* the original file is overwritten with the new file\n" + "* this codification is used in the DS overlay files\n"); " is 464.
Long Statement,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,readUnsigned,The length of the statement  "	return buffer [offset] | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | ((buffer [offset + 3] & 0x7F) << 24); " is 121.
Long Statement,Andi.Utils.Renderer,ToolStripHelper,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,MenuPanelPaint,The length of the statement  "	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (new RectangleF (0' 0' 1' area.Height)' Color.Black' Color.White' LinearGradientMode.Vertical)) { " is 164.
Long Statement,Andi.Utils.Renderer,ToolStripHelper,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,MenuPanelPaint,The length of the statement  "	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (new RectangleF (0' 0' 1' area.Bottom)' Color.FromArgb (0xff' 0x92' 0x9b' 0xa2)' Color.FromArgb (0xff' 0x99' 0xa7' 0xb3)' LinearGradientMode.Vertical)) { " is 220.
Long Statement,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The length of the statement  "			RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2); " is 133.
Long Statement,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The length of the statement  "				using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) { " is 133.
Long Statement,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderToolStripBackground,The length of the statement  "		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (e.AffectedBounds' startColor' endColor' LinearGradientMode.Vertical)) " is 137.
Complex Conditional,Andi.Utils.Events,RemoveEvents,C:\repos\andibadra_ANDT\Andi.Utils\Events\RemoveEvents.cs,RemoveSpecialCharacter,The conditional expression  "(c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '.' || c == '_'"  is complex.
Magic Number,Andi.Utils.Citro.Archive,AndiGarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Archive\AndiGarcReader.cs,Reverse,The following statement contains a magic number: for (int i = 0; i < 32; ++i) {  	y <<= 1;  	y |= (x & 1);  	x >>= 1;  }  
Magic Number,Andi.Utils.Citro.Archive,AndiGarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Archive\AndiGarcReader.cs,Open,The following statement contains a magic number: _GARCARC.MagicHeader = br.ReadChars (4);  
Magic Number,Andi.Utils.Citro.Archive,AndiGarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Archive\AndiGarcReader.cs,Open,The following statement contains a magic number: _GARCARC.OTAF.MagicHeader = br.ReadChars (4);  
Magic Number,Andi.Utils.Citro.Archive,AndiGarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Archive\AndiGarcReader.cs,Open,The following statement contains a magic number: _GARCARC.BTAF.MagicHeader = br.ReadChars (4);  
Magic Number,Andi.Utils.Citro.Archive,AndiGarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Archive\AndiGarcReader.cs,Open,The following statement contains a magic number: _GARCARC.GMIF.MagicHeader = br.ReadChars (4);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition = 6;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Info.Lenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Info.Version = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Info.FileSize = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.HeaderLenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Offset.STRG = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Lenght.STRG = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.u1 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Offset.INFO = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Lenght.INFO = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.u2 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Offset.FILE = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.Lenght.FILE = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.u3 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: _CSARHeader.Partition.u4 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,CSAR,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.Info.Lenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.Info.u1 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.Lenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.u1 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.MaskOffset = _CSARHeader.Partition.Offset.STRG + GetInt (4' sPosition) + 8;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.MaskOffset = _CSARHeader.Partition.Offset.STRG + GetInt (4' sPosition) + 8;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: for (int i = 0; i < _STRGHeader.SubFile.Count; i++) {  	_STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  	sPosition += 4;  	_STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.FileEntry [i].RootID = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.FileEntry [i].Offset = GetInt (4' sPosition) + 24 + _CSARHeader.Partition.Offset.STRG;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: _STRGHeader.SubFile.FileEntry [i].Lenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,STRG,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,FILEEntryLoad,The following statement contains a magic number: for (int i = 0; i < FILEe.Length; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1;  	byte[] temp = new byte[4];  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].Offset = _CSARHeader.Partition.Offset.FILE + 8 + BitConverter.ToInt32 (temp' 0);  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1 + 4;  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].Lenght = BitConverter.ToInt32 (temp' 0);  	_Stream.Position = FILEe [i].Offset;  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].MagicHeader = Encoding.ASCII.GetString (temp);  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,FILEEntryLoad,The following statement contains a magic number: for (int i = 0; i < FILEe.Length; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1;  	byte[] temp = new byte[4];  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].Offset = _CSARHeader.Partition.Offset.FILE + 8 + BitConverter.ToInt32 (temp' 0);  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1 + 4;  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].Lenght = BitConverter.ToInt32 (temp' 0);  	_Stream.Position = FILEe [i].Offset;  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].MagicHeader = Encoding.ASCII.GetString (temp);  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,FILEEntryLoad,The following statement contains a magic number: for (int i = 0; i < FILEe.Length; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1;  	byte[] temp = new byte[4];  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].Offset = _CSARHeader.Partition.Offset.FILE + 8 + BitConverter.ToInt32 (temp' 0);  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1 + 4;  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].Lenght = BitConverter.ToInt32 (temp' 0);  	_Stream.Position = FILEe [i].Offset;  	_Stream.Read (temp' 0' temp.Length);  	FILEe [i].MagicHeader = Encoding.ASCII.GetString (temp);  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,FILEEntryLoad,The following statement contains a magic number: FILEe [i].Offset = _CSARHeader.Partition.Offset.FILE + 8 + BitConverter.ToInt32 (temp' 0);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,FILEEntryLoad,The following statement contains a magic number: _Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i + index].Offset + num1 + 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: if (id == 0) {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 10;  	_temp.FileID = GetInt (4' sPosition);  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	sPosition += 1;  	_Stream.Position = sPosition;  	_temp.TypeID = _Stream.ReadByte ();  	sPosition += 1;  	_temp.Const = GetInt (2' sPosition);  	sPosition += 2;  }  else {  	sPosition = _STRGHeader.SubFile.MaskOffset + num1;  	sPosition += 30 + (((int)id - 1) * 40);  	//_Stream.Position = sPosition;  	_temp.FileID = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.TypeIndex = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_Stream.Position = sPosition;  	_temp.u1 = _Stream.ReadByte ();  	//1  	_temp.TypeID = _Stream.ReadByte ();  	//1  	sPosition += 2;  	_temp.u2 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u3 = GetInt (2' sPosition);  	//2  	sPosition += 2;  	_temp.u4 = GetInt (4' sPosition);  	//4  	sPosition += 4;  	_temp.u5 = GetInt (4' sPosition);  	//4  	sPosition += 12;  	_temp.Const = GetInt (2' sPosition);  	//2  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 10;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.FileID = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.TypeIndex = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.Const = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 30 + (((int)id - 1) * 40);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 30 + (((int)id - 1) * 40);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.FileID = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.TypeIndex = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.u2 = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.u3 = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 2;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.u4 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.u5 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: sPosition += 12;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetMaskEntry,The following statement contains a magic number: _temp.Const = GetInt (2' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.Info.Lenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.Info.u1 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Lenght = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_1 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_1 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_1 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_2 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_2 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_2 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_3 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_3 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_3 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_4 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_4 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_4 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_5 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_5 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_5 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_6 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_6 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_6 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Id.SEC_7 = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_7 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.Offset.SEC_7 = GetInt (4' sPosition) + 8 + _CSARHeader.Partition.Offset.INFO;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_0.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_0.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_0.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_0.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_0.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_0.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_0.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Lenght + 12 + _CSARHeader.Partition.Offset.INFO);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_1.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: if (_INFOHeader.SubFile.SubSections.SEC_1.Count == 0) {  	for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  		sPosition += 4;  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  		sPosition += 4;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: if (_INFOHeader.SubFile.SubSections.SEC_1.Count == 0) {  	for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  		sPosition += 4;  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  		sPosition += 4;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: if (_INFOHeader.SubFile.SubSections.SEC_1.Count == 0) {  	for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  		sPosition += 4;  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  		sPosition += 4;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: if (_INFOHeader.SubFile.SubSections.SEC_1.Count == 0) {  	for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  		sPosition += 4;  		_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  		sPosition += 4;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_1.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_1.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_1);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_2.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_2.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_2);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_2.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_2);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_2.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_2);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_2.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_2);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_2.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_2);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_3.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_3.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_3);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_3.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_3);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_3.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_3);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_3.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_3);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_3.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_3);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_4.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_4.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_4);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_4.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_4);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_4.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_4);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_4.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_4);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_4.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_4);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_5.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_5.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_5);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_5.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_5);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_5.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_5);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_5.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_5);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_5.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_5);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_6.Count = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_6);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_6);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_6);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Type = GetInt (4' sPosition);  	sPosition += 4;  	_INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_6);  	sPosition += 4;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Type = GetInt (4' sPosition);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: _INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset = GetInt (4' sPosition) + (_INFOHeader.SubFile.Offset.SEC_6);  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,INFO,The following statement contains a magic number: sPosition += 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,getLastStream,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset;  	byte[] temp = new byte[2];  	_Stream.Read (temp' 0' temp.Length);  	if (BitConverter.ToInt16 (temp' 0) == 8716) {  		return i;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,getLastStream,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset;  	byte[] temp = new byte[2];  	_Stream.Read (temp' 0' temp.Length);  	if (BitConverter.ToInt16 (temp' 0) == 8716) {  		return i;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,getLastStream,The following statement contains a magic number: if (BitConverter.ToInt16 (temp' 0) == 8716) {  	return i;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,getLastStream2,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset;  	byte[] temp = new byte[2];  	_Stream.Read (temp' 0' temp.Length);  	if (BitConverter.ToInt16 (temp' 0) == 8716) {  		return i;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,getLastStream2,The following statement contains a magic number: for (int i = 0; i < _INFOHeader.SubFile.SubSections.SEC_6.Count; i++) {  	_Stream.Position = _INFOHeader.SubFile.SubSections.SEC_6.Entry [i].Offset;  	byte[] temp = new byte[2];  	_Stream.Read (temp' 0' temp.Length);  	if (BitConverter.ToInt16 (temp' 0) == 8716) {  		return i;  	}  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,getLastStream2,The following statement contains a magic number: if (BitConverter.ToInt16 (temp' 0) == 8716) {  	return i;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetInt,The following statement contains a magic number: if (lenght < 3) {  	return BitConverter.ToInt16 (vartemp' 0);  }  else {  	return BitConverter.ToInt32 (vartemp' 0);  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetInt,The following statement contains a magic number: if (lenght < 3) {  	return BitConverter.ToInt16 (vartemp' 0);  }  else {  	return BitConverter.ToInt32 (vartemp' 0);  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetEndian,The following statement contains a magic number: _Stream.Position = 4;  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetEndian,The following statement contains a magic number: if (vartemp [0] == (byte)254 && vartemp [1] == (byte)255) {  	return Header.Endian.LittleEndian;  }  else {  	return Header.Endian.BigEndian;  }  
Magic Number,Andi.Utils.Citro.Audio,BCSAR,C:\repos\andibadra_ANDT\Andi.Utils\Citro\Audio\BCSAR.cs,GetEndian,The following statement contains a magic number: if (vartemp [0] == (byte)254 && vartemp [1] == (byte)255) {  	return Header.Endian.LittleEndian;  }  else {  	return Header.Endian.BigEndian;  }  
Magic Number,Andi.Utils.Database,Database,C:\repos\andibadra_ANDT\Andi.Utils\Database\Database.cs,GetLocationName,The following statement contains a magic number: if (idpkm == 9999) {  	query = "SELECT a.id' a.name FROM app_hiddengrotto As a WHERE a.country = " + idcountry;  }  else {  	query = "SELECT a.id' a.name FROM app_hiddengrotto As a WHERE a.country = " + idcountry + " And a.id = " + idpkm;  }  
Magic Number,Andi.Utils.Database,MVGList,C:\repos\andibadra_ANDT\Andi.Utils\Database\MoveList.cs,Load,The following statement contains a magic number: if (gamever < 17) {  	gen = 4;  }  
Magic Number,Andi.Utils.Database,MVGList,C:\repos\andibadra_ANDT\Andi.Utils\Database\MoveList.cs,Load,The following statement contains a magic number: if (gamever < 17) {  	gen = 4;  }  
Magic Number,Andi.Utils.Database,MVGList,C:\repos\andibadra_ANDT\Andi.Utils\Database\MoveList.cs,Load,The following statement contains a magic number: gen = 4;  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	b = bytes [i] >> 4;  	c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  	b = bytes [i] & 0xF;  	c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  }  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: b = bytes [i] >> 4;  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,ByteConverter,C:\repos\andibadra_ANDT\Andi.Utils\Io\ByteConverter.cs,ByteToHexBit,The following statement contains a magic number: c [i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));  
Magic Number,Andi.Utils.Io,Utils,C:\repos\andibadra_ANDT\Andi.Utils\Io\Utils.cs,ReadToEnd,The following statement contains a magic number: try {  	byte[] readBuffer = new byte[4096];  	int totalBytesRead = 0;  	int bytesRead;  	while ((bytesRead = stream.Read (readBuffer' totalBytesRead' readBuffer.Length - totalBytesRead)) > 0) {  		totalBytesRead += bytesRead;  		if (totalBytesRead == readBuffer.Length) {  			int nextByte = stream.ReadByte ();  			if (nextByte != -1) {  				byte[] temp = new byte[readBuffer.Length * 2];  				Buffer.BlockCopy (readBuffer' 0' temp' 0' readBuffer.Length);  				Buffer.SetByte (temp' totalBytesRead' (byte)nextByte);  				readBuffer = temp;  				totalBytesRead++;  			}  		}  	}  	byte[] buffer = readBuffer;  	if (readBuffer.Length != totalBytesRead) {  		buffer = new byte[totalBytesRead];  		Buffer.BlockCopy (readBuffer' 0' buffer' 0' totalBytesRead);  	}  	return buffer;  }  finally {  	if (stream.CanSeek) {  		stream.Position = originalPosition;  	}  }  
Magic Number,Andi.Utils.Io,Utils,C:\repos\andibadra_ANDT\Andi.Utils\Io\Utils.cs,ReadToEnd,The following statement contains a magic number: try {  	byte[] readBuffer = new byte[4096];  	int totalBytesRead = 0;  	int bytesRead;  	while ((bytesRead = stream.Read (readBuffer' totalBytesRead' readBuffer.Length - totalBytesRead)) > 0) {  		totalBytesRead += bytesRead;  		if (totalBytesRead == readBuffer.Length) {  			int nextByte = stream.ReadByte ();  			if (nextByte != -1) {  				byte[] temp = new byte[readBuffer.Length * 2];  				Buffer.BlockCopy (readBuffer' 0' temp' 0' readBuffer.Length);  				Buffer.SetByte (temp' totalBytesRead' (byte)nextByte);  				readBuffer = temp;  				totalBytesRead++;  			}  		}  	}  	byte[] buffer = readBuffer;  	if (readBuffer.Length != totalBytesRead) {  		buffer = new byte[totalBytesRead];  		Buffer.BlockCopy (readBuffer' 0' buffer' 0' totalBytesRead);  	}  	return buffer;  }  finally {  	if (stream.CanSeek) {  		stream.Position = originalPosition;  	}  }  
Magic Number,Andi.Utils.Io,Utils,C:\repos\andibadra_ANDT\Andi.Utils\Io\Utils.cs,ReadToEnd,The following statement contains a magic number: while ((bytesRead = stream.Read (readBuffer' totalBytesRead' readBuffer.Length - totalBytesRead)) > 0) {  	totalBytesRead += bytesRead;  	if (totalBytesRead == readBuffer.Length) {  		int nextByte = stream.ReadByte ();  		if (nextByte != -1) {  			byte[] temp = new byte[readBuffer.Length * 2];  			Buffer.BlockCopy (readBuffer' 0' temp' 0' readBuffer.Length);  			Buffer.SetByte (temp' totalBytesRead' (byte)nextByte);  			readBuffer = temp;  			totalBytesRead++;  		}  	}  }  
Magic Number,Andi.Utils.Io,Utils,C:\repos\andibadra_ANDT\Andi.Utils\Io\Utils.cs,ReadToEnd,The following statement contains a magic number: if (totalBytesRead == readBuffer.Length) {  	int nextByte = stream.ReadByte ();  	if (nextByte != -1) {  		byte[] temp = new byte[readBuffer.Length * 2];  		Buffer.BlockCopy (readBuffer' 0' temp' 0' readBuffer.Length);  		Buffer.SetByte (temp' totalBytesRead' (byte)nextByte);  		readBuffer = temp;  		totalBytesRead++;  	}  }  
Magic Number,Andi.Utils.Io,Utils,C:\repos\andibadra_ANDT\Andi.Utils\Io\Utils.cs,ReadToEnd,The following statement contains a magic number: if (nextByte != -1) {  	byte[] temp = new byte[readBuffer.Length * 2];  	Buffer.BlockCopy (readBuffer' 0' temp' 0' readBuffer.Length);  	Buffer.SetByte (temp' totalBytesRead' (byte)nextByte);  	readBuffer = temp;  	totalBytesRead++;  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,setData,The following statement contains a magic number: binaryReader.Read (buffer1' 0' 16);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,setData,The following statement contains a magic number: this.MemorySize = (long)BitConverter.ToUInt32 (buffer1' 8);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,setData,The following statement contains a magic number: this.SectionNarc = BitConverter.ToInt16 (buffer1' 14);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,setData,The following statement contains a magic number: binaryReader.Read (buffer2' 0' 12);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,setData,The following statement contains a magic number: this.FileCount = BitConverter.ToInt32 (buffer2' 8);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,setData,The following statement contains a magic number: binaryReader.Read (buffer3' 0' 16);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = this.FileCount - 1; index1 > index; --index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream ();  	this.FsMemoryStream.Write (this.CachedData' 0' this.CachedData.Length + num1);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  else {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = this.FileCount - 1; index1 > index; --index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream ();  	this.FsMemoryStream.Write (this.CachedData' 0' this.CachedData.Length + num1);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  else {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = this.FileCount - 1; index1 > index; --index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream ();  	this.FsMemoryStream.Write (this.CachedData' 0' this.CachedData.Length + num1);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  else {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = this.FileCount - 1; index1 > index; --index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream ();  	this.FsMemoryStream.Write (this.CachedData' 0' this.CachedData.Length + num1);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  else {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: for (int index1 = index; index1 < this.FileCount; ++index1) {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  	if (index1 == index) {  		this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this.FileInformation [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this.FileInformation [index1].Ofs += num1;  	}  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: for (int index1 = index; index1 < this.FileCount; ++index1) {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  	if (index1 == index) {  		this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this.FileInformation [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this.FileInformation [index1].Ofs += num1;  	}  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: if (num1 < 0) {  	for (int index1 = index + 1; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream ();  	this.FsMemoryStream.Write (this.CachedData' 0' this.CachedData.Length + num1);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  else {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: if (num1 < 0) {  	for (int index1 = index + 1; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)this.FileInformation [index1].Ofs' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		byte[] buffer = new byte[this.FileInformation [index1].Size];  		binaryReader.Read (buffer' 0' this.FileInformation [index1].Size);  		this.FsMemoryStream.Seek ((long)(-this.FileInformation [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this.FileInformation [index1].Size);  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  	for (int index1 = index; index1 < this.FileCount; ++index1) {  		this.FsMemoryStream = new MemoryStream (this.CachedData);  		this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  		if (index1 == index) {  			this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this.FileInformation [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this.FileInformation [index1].Ofs += num1;  		}  		this.WriteCachedData (this.FsMemoryStream);  		this.FsMemoryStream.Close ();  	}  	this.FsMemoryStream = new MemoryStream ();  	this.FsMemoryStream.Write (this.CachedData' 0' this.CachedData.Length + num1);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  else {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)this.FileInformation [index].Ofs' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this.FsMemoryStream).Write (replacement);  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: for (int index1 = index; index1 < this.FileCount; ++index1) {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  	if (index1 == index) {  		this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this.FileInformation [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this.FileInformation [index1].Ofs += num1;  	}  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: for (int index1 = index; index1 < this.FileCount; ++index1) {  	this.FsMemoryStream = new MemoryStream (this.CachedData);  	this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this.FsMemoryStream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this.FsMemoryStream);  	if (index1 == index) {  		this.FsMemoryStream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this.FileInformation [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this.FsMemoryStream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this.FileInformation [index1].Ofs += num1;  	}  	this.WriteCachedData (this.FsMemoryStream);  	this.FsMemoryStream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The following statement contains a magic number: this.FsMemoryStream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,Narc,The following statement contains a magic number: FileOpener (2' input);  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,FileLoad,The following statement contains a magic number: if (_temp [0] == (byte)254 && _temp [1] == (byte)255) {  	_Narcs.ByteMarkOrder = BCSAR.Header.Endian.LittleEndian;  }  else {  	_Narcs.ByteMarkOrder = BCSAR.Header.Endian.BigEndian;  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,FileLoad,The following statement contains a magic number: if (_temp [0] == (byte)254 && _temp [1] == (byte)255) {  	_Narcs.ByteMarkOrder = BCSAR.Header.Endian.LittleEndian;  }  else {  	_Narcs.ByteMarkOrder = BCSAR.Header.Endian.BigEndian;  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (mode == 1 || mode == 2) {  	byte[] cached = _cad;  	try {  		int num1 = newsize - this._Narcs.FATBEntry [index].Size;  		_Stream = new MemoryStream ();  		_Stream.Write (_cad' 0' this._cad.Length);  		if (num1 > 0) {  			_Stream.SetLength (_Stream.Length + num1);  		}  		this._Stream.Seek (8L' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		_Stream.Close ();  		if (num1 > 0) {  			for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  		}  		else if (num1 < 0) {  			for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream ();  			this._Stream.Write (this._cad' 0' this._cad.Length + num1);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		else {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	catch {  		_cad = cached;  	}  }  else {  	// Not Complete' but it will done shortly  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (mode == 1 || mode == 2) {  	byte[] cached = _cad;  	try {  		int num1 = newsize - this._Narcs.FATBEntry [index].Size;  		_Stream = new MemoryStream ();  		_Stream.Write (_cad' 0' this._cad.Length);  		if (num1 > 0) {  			_Stream.SetLength (_Stream.Length + num1);  		}  		this._Stream.Seek (8L' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		_Stream.Close ();  		if (num1 > 0) {  			for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  		}  		else if (num1 < 0) {  			for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream ();  			this._Stream.Write (this._cad' 0' this._cad.Length + num1);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		else {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	catch {  		_cad = cached;  	}  }  else {  	// Not Complete' but it will done shortly  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (mode == 1 || mode == 2) {  	byte[] cached = _cad;  	try {  		int num1 = newsize - this._Narcs.FATBEntry [index].Size;  		_Stream = new MemoryStream ();  		_Stream.Write (_cad' 0' this._cad.Length);  		if (num1 > 0) {  			_Stream.SetLength (_Stream.Length + num1);  		}  		this._Stream.Seek (8L' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		_Stream.Close ();  		if (num1 > 0) {  			for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  		}  		else if (num1 < 0) {  			for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream ();  			this._Stream.Write (this._cad' 0' this._cad.Length + num1);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		else {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	catch {  		_cad = cached;  	}  }  else {  	// Not Complete' but it will done shortly  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (mode == 1 || mode == 2) {  	byte[] cached = _cad;  	try {  		int num1 = newsize - this._Narcs.FATBEntry [index].Size;  		_Stream = new MemoryStream ();  		_Stream.Write (_cad' 0' this._cad.Length);  		if (num1 > 0) {  			_Stream.SetLength (_Stream.Length + num1);  		}  		this._Stream.Seek (8L' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		_Stream.Close ();  		if (num1 > 0) {  			for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  		}  		else if (num1 < 0) {  			for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream ();  			this._Stream.Write (this._cad' 0' this._cad.Length + num1);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		else {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	catch {  		_cad = cached;  	}  }  else {  	// Not Complete' but it will done shortly  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (mode == 1 || mode == 2) {  	byte[] cached = _cad;  	try {  		int num1 = newsize - this._Narcs.FATBEntry [index].Size;  		_Stream = new MemoryStream ();  		_Stream.Write (_cad' 0' this._cad.Length);  		if (num1 > 0) {  			_Stream.SetLength (_Stream.Length + num1);  		}  		this._Stream.Seek (8L' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		_Stream.Close ();  		if (num1 > 0) {  			for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  		}  		else if (num1 < 0) {  			for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  				binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  				binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  			for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  				this._Stream = new MemoryStream (this._cad);  				this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  				BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  				BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  				if (index1 == index) {  					this._Stream.Seek (4L' SeekOrigin.Current);  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					this._Narcs.FATBEntry [index].Size += num1;  				}  				else {  					long num2 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num2 + num1);  					long num3 = (long)binaryReader.ReadUInt32 ();  					this._Stream.Seek (-4L' SeekOrigin.Current);  					binaryWriter.Write ((int)num3 + num1);  					this._Narcs.FATBEntry [index1].Offset += num1;  				}  				_cad = Io.Utils.ReadToEnd (_Stream);  				this._Stream.Close ();  			}  			this._Stream = new MemoryStream ();  			this._Stream.Write (this._cad' 0' this._cad.Length + num1);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		else {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  			new BinaryWriter ((Stream)this._Stream).Write (replacement);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	catch {  		_cad = cached;  	}  }  else {  	// Not Complete' but it will done shortly  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: try {  	int num1 = newsize - this._Narcs.FATBEntry [index].Size;  	_Stream = new MemoryStream ();  	_Stream.Write (_cad' 0' this._cad.Length);  	if (num1 > 0) {  		_Stream.SetLength (_Stream.Length + num1);  	}  	this._Stream.Seek (8L' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	_Stream.Close ();  	if (num1 > 0) {  		for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	else if (num1 < 0) {  		for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream ();  		this._Stream.Write (this._cad' 0' this._cad.Length + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	else {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  catch {  	_cad = cached;  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: try {  	int num1 = newsize - this._Narcs.FATBEntry [index].Size;  	_Stream = new MemoryStream ();  	_Stream.Write (_cad' 0' this._cad.Length);  	if (num1 > 0) {  		_Stream.SetLength (_Stream.Length + num1);  	}  	this._Stream.Seek (8L' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	_Stream.Close ();  	if (num1 > 0) {  		for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	else if (num1 < 0) {  		for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream ();  		this._Stream.Write (this._cad' 0' this._cad.Length + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	else {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  catch {  	_cad = cached;  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: try {  	int num1 = newsize - this._Narcs.FATBEntry [index].Size;  	_Stream = new MemoryStream ();  	_Stream.Write (_cad' 0' this._cad.Length);  	if (num1 > 0) {  		_Stream.SetLength (_Stream.Length + num1);  	}  	this._Stream.Seek (8L' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	_Stream.Close ();  	if (num1 > 0) {  		for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	else if (num1 < 0) {  		for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream ();  		this._Stream.Write (this._cad' 0' this._cad.Length + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	else {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  catch {  	_cad = cached;  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: try {  	int num1 = newsize - this._Narcs.FATBEntry [index].Size;  	_Stream = new MemoryStream ();  	_Stream.Write (_cad' 0' this._cad.Length);  	if (num1 > 0) {  		_Stream.SetLength (_Stream.Length + num1);  	}  	this._Stream.Seek (8L' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write ((int)_Narcs.FileSize + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	_Stream.Close ();  	if (num1 > 0) {  		for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  	}  	else if (num1 < 0) {  		for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  			binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  			binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  		for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  			this._Stream = new MemoryStream (this._cad);  			this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  			BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  			BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  			if (index1 == index) {  				this._Stream.Seek (4L' SeekOrigin.Current);  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				this._Narcs.FATBEntry [index].Size += num1;  			}  			else {  				long num2 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num2 + num1);  				long num3 = (long)binaryReader.ReadUInt32 ();  				this._Stream.Seek (-4L' SeekOrigin.Current);  				binaryWriter.Write ((int)num3 + num1);  				this._Narcs.FATBEntry [index1].Offset += num1;  			}  			_cad = Io.Utils.ReadToEnd (_Stream);  			this._Stream.Close ();  		}  		this._Stream = new MemoryStream ();  		this._Stream.Write (this._cad' 0' this._cad.Length + num1);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	else {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  		new BinaryWriter ((Stream)this._Stream).Write (replacement);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  catch {  	_cad = cached;  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream ();  	this._Stream.Write (this._cad' 0' this._cad.Length + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  else {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream ();  	this._Stream.Write (this._cad' 0' this._cad.Length + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  else {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream ();  	this._Stream.Write (this._cad' 0' this._cad.Length + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  else {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (num1 > 0) {  	for (int index1 = (int)_Narcs.FATBheader.Count - 1; index1 > index; --index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  }  else if (num1 < 0) {  	for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream ();  	this._Stream.Write (this._cad' 0' this._cad.Length + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  else {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  	if (index1 == index) {  		this._Stream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this._Narcs.FATBEntry [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this._Narcs.FATBEntry [index1].Offset += num1;  	}  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  	if (index1 == index) {  		this._Stream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this._Narcs.FATBEntry [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this._Narcs.FATBEntry [index1].Offset += num1;  	}  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (num1 < 0) {  	for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream ();  	this._Stream.Write (this._cad' 0' this._cad.Length + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  else {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: if (num1 < 0) {  	for (int index1 = index + 1; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)this._Narcs.FATBEntry [index1].Offset' SeekOrigin.Begin);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		byte[] buffer = new byte[this._Narcs.FATBEntry [index1].Size];  		binaryReader.Read (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		this._Stream.Seek ((long)(-this._Narcs.FATBEntry [index1].Size + num1)' SeekOrigin.Current);  		binaryWriter.Write (buffer' 0' this._Narcs.FATBEntry [index1].Size);  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  	for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  		this._Stream = new MemoryStream (this._cad);  		this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  		BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  		BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  		if (index1 == index) {  			this._Stream.Seek (4L' SeekOrigin.Current);  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			this._Narcs.FATBEntry [index].Size += num1;  		}  		else {  			long num2 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num2 + num1);  			long num3 = (long)binaryReader.ReadUInt32 ();  			this._Stream.Seek (-4L' SeekOrigin.Current);  			binaryWriter.Write ((int)num3 + num1);  			this._Narcs.FATBEntry [index1].Offset += num1;  		}  		_cad = Io.Utils.ReadToEnd (_Stream);  		this._Stream.Close ();  	}  	this._Stream = new MemoryStream ();  	this._Stream.Write (this._cad' 0' this._cad.Length + num1);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  else {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)this._Narcs.FATBEntry [index].Offset' SeekOrigin.Begin);  	new BinaryWriter ((Stream)this._Stream).Write (replacement);  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  	if (index1 == index) {  		this._Stream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this._Narcs.FATBEntry [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this._Narcs.FATBEntry [index1].Offset += num1;  	}  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: for (int index1 = index; index1 < this._Narcs.FATBheader.Count; ++index1) {  	this._Stream = new MemoryStream (this._cad);  	this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  	BinaryWriter binaryWriter = new BinaryWriter ((Stream)this._Stream);  	BinaryReader binaryReader = new BinaryReader ((Stream)this._Stream);  	if (index1 == index) {  		this._Stream.Seek (4L' SeekOrigin.Current);  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		this._Narcs.FATBEntry [index].Size += num1;  	}  	else {  		long num2 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num2 + num1);  		long num3 = (long)binaryReader.ReadUInt32 ();  		this._Stream.Seek (-4L' SeekOrigin.Current);  		binaryWriter.Write ((int)num3 + num1);  		this._Narcs.FATBEntry [index1].Offset += num1;  	}  	_cad = Io.Utils.ReadToEnd (_Stream);  	this._Stream.Close ();  }  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The following statement contains a magic number: this._Stream.Seek ((long)(28 + index1 * 8)' SeekOrigin.Begin);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,The following statement contains a magic number: if (args.Length < 2) {  	EXIT ("Filename not specified\n");  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,The following statement contains a magic number: switch (cmd) {  case 0:  	for (arg = 1; arg < args.Length; arg++)  		BLZ_Decode (args [arg]);  	break;  case 1:  	arm9 = (args [0].Length > 3 && args [0] [3] == '9');  	for (arg = 1; arg < args.Length; arg++)  		BLZ_Encode (args [arg]' mode);  	break;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,The following statement contains a magic number: switch (cmd) {  case 0:  	for (arg = 1; arg < args.Length; arg++)  		BLZ_Decode (args [arg]);  	break;  case 1:  	arm9 = (args [0].Length > 3 && args [0] [3] == '9');  	for (arg = 1; arg < args.Length; arg++)  		BLZ_Encode (args [arg]' mode);  	break;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,The following statement contains a magic number: arm9 = (args [0].Length > 3 && args [0] [3] == '9');  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,The following statement contains a magic number: arm9 = (args [0].Length > 3 && args [0] [3] == '9');  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: pak_len = pak_buffer.Length - 3;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: inc_len = readUnsigned (pak_buffer' pak_len - 4);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len < 1) {  	Console.Write ("' WARNING: not coded file!");  	enc_len = 0;  	dec_len = pak_len;  	pak_len = 0;  	raw_len = dec_len;  }  else {  	if (pak_len < 8) {  		EXIT ("\nFile has a bad header\n");  		return null;  	}  	hdr_len = pak_buffer [pak_len - 5];  	if (hdr_len < 8 || hdr_len > 0xB) {  		EXIT ("\nBad header length\n");  		return null;  	}  	if (pak_len <= hdr_len) {  		EXIT ("\nBad length\n");  		return null;  	}  	enc_len = readUnsigned (pak_buffer' pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM) {  		EXIT ("\nBad decoded length\n");  		return null;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len < 1) {  	Console.Write ("' WARNING: not coded file!");  	enc_len = 0;  	dec_len = pak_len;  	pak_len = 0;  	raw_len = dec_len;  }  else {  	if (pak_len < 8) {  		EXIT ("\nFile has a bad header\n");  		return null;  	}  	hdr_len = pak_buffer [pak_len - 5];  	if (hdr_len < 8 || hdr_len > 0xB) {  		EXIT ("\nBad header length\n");  		return null;  	}  	if (pak_len <= hdr_len) {  		EXIT ("\nBad length\n");  		return null;  	}  	enc_len = readUnsigned (pak_buffer' pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM) {  		EXIT ("\nBad decoded length\n");  		return null;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len < 1) {  	Console.Write ("' WARNING: not coded file!");  	enc_len = 0;  	dec_len = pak_len;  	pak_len = 0;  	raw_len = dec_len;  }  else {  	if (pak_len < 8) {  		EXIT ("\nFile has a bad header\n");  		return null;  	}  	hdr_len = pak_buffer [pak_len - 5];  	if (hdr_len < 8 || hdr_len > 0xB) {  		EXIT ("\nBad header length\n");  		return null;  	}  	if (pak_len <= hdr_len) {  		EXIT ("\nBad length\n");  		return null;  	}  	enc_len = readUnsigned (pak_buffer' pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM) {  		EXIT ("\nBad decoded length\n");  		return null;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if (inc_len < 1) {  	Console.Write ("' WARNING: not coded file!");  	enc_len = 0;  	dec_len = pak_len;  	pak_len = 0;  	raw_len = dec_len;  }  else {  	if (pak_len < 8) {  		EXIT ("\nFile has a bad header\n");  		return null;  	}  	hdr_len = pak_buffer [pak_len - 5];  	if (hdr_len < 8 || hdr_len > 0xB) {  		EXIT ("\nBad header length\n");  		return null;  	}  	if (pak_len <= hdr_len) {  		EXIT ("\nBad length\n");  		return null;  	}  	enc_len = readUnsigned (pak_buffer' pak_len - 8) & 0x00FFFFFF;  	dec_len = pak_len - enc_len;  	pak_len = enc_len - hdr_len;  	raw_len = dec_len + enc_len + inc_len;  	if (raw_len > RAW_MAXIM) {  		EXIT ("\nBad decoded length\n");  		return null;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if (pak_len < 8) {  	EXIT ("\nFile has a bad header\n");  	return null;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: hdr_len = pak_buffer [pak_len - 5];  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if (hdr_len < 8 || hdr_len > 0xB) {  	EXIT ("\nBad header length\n");  	return null;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: enc_len = readUnsigned (pak_buffer' pak_len - 8) & 0x00FFFFFF;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		if (pak == pak_end) {  			break;  		}  		flags = pak_buffer [pak++];  		mask = BLZ_MASK;  	}  	if ((flags & mask) == 0) {  		if (pak == pak_end) {  			break;  		}  		raw_buffer [raw++] = pak_buffer [pak++];  	}  	else {  		if ((pak + 1) >= pak_end) {  			break;  		}  		pos = pak_buffer [pak++] << 8;  		pos |= pak_buffer [pak++];  		len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  		if (raw + len > raw_end) {  			Console.Write ("' WARNING: wrong decoded length!");  			len = raw_end - raw;  		}  		pos = (pos & 0xFFF) + 3;  		while ((len--) > 0) {  			int charHere = raw_buffer [raw - pos];  			raw_buffer [raw++] = charHere;  		}  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		if (pak == pak_end) {  			break;  		}  		flags = pak_buffer [pak++];  		mask = BLZ_MASK;  	}  	if ((flags & mask) == 0) {  		if (pak == pak_end) {  			break;  		}  		raw_buffer [raw++] = pak_buffer [pak++];  	}  	else {  		if ((pak + 1) >= pak_end) {  			break;  		}  		pos = pak_buffer [pak++] << 8;  		pos |= pak_buffer [pak++];  		len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  		if (raw + len > raw_end) {  			Console.Write ("' WARNING: wrong decoded length!");  			len = raw_end - raw;  		}  		pos = (pos & 0xFFF) + 3;  		while ((len--) > 0) {  			int charHere = raw_buffer [raw - pos];  			raw_buffer [raw++] = charHere;  		}  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		if (pak == pak_end) {  			break;  		}  		flags = pak_buffer [pak++];  		mask = BLZ_MASK;  	}  	if ((flags & mask) == 0) {  		if (pak == pak_end) {  			break;  		}  		raw_buffer [raw++] = pak_buffer [pak++];  	}  	else {  		if ((pak + 1) >= pak_end) {  			break;  		}  		pos = pak_buffer [pak++] << 8;  		pos |= pak_buffer [pak++];  		len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  		if (raw + len > raw_end) {  			Console.Write ("' WARNING: wrong decoded length!");  			len = raw_end - raw;  		}  		pos = (pos & 0xFFF) + 3;  		while ((len--) > 0) {  			int charHere = raw_buffer [raw - pos];  			raw_buffer [raw++] = charHere;  		}  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if ((flags & mask) == 0) {  	if (pak == pak_end) {  		break;  	}  	raw_buffer [raw++] = pak_buffer [pak++];  }  else {  	if ((pak + 1) >= pak_end) {  		break;  	}  	pos = pak_buffer [pak++] << 8;  	pos |= pak_buffer [pak++];  	len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  	if (raw + len > raw_end) {  		Console.Write ("' WARNING: wrong decoded length!");  		len = raw_end - raw;  	}  	pos = (pos & 0xFFF) + 3;  	while ((len--) > 0) {  		int charHere = raw_buffer [raw - pos];  		raw_buffer [raw++] = charHere;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if ((flags & mask) == 0) {  	if (pak == pak_end) {  		break;  	}  	raw_buffer [raw++] = pak_buffer [pak++];  }  else {  	if ((pak + 1) >= pak_end) {  		break;  	}  	pos = pak_buffer [pak++] << 8;  	pos |= pak_buffer [pak++];  	len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  	if (raw + len > raw_end) {  		Console.Write ("' WARNING: wrong decoded length!");  		len = raw_end - raw;  	}  	pos = (pos & 0xFFF) + 3;  	while ((len--) > 0) {  		int charHere = raw_buffer [raw - pos];  		raw_buffer [raw++] = charHere;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: if ((flags & mask) == 0) {  	if (pak == pak_end) {  		break;  	}  	raw_buffer [raw++] = pak_buffer [pak++];  }  else {  	if ((pak + 1) >= pak_end) {  		break;  	}  	pos = pak_buffer [pak++] << 8;  	pos |= pak_buffer [pak++];  	len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  	if (raw + len > raw_end) {  		Console.Write ("' WARNING: wrong decoded length!");  		len = raw_end - raw;  	}  	pos = (pos & 0xFFF) + 3;  	while ((len--) > 0) {  		int charHere = raw_buffer [raw - pos];  		raw_buffer [raw++] = charHere;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: pos = pak_buffer [pak++] << 8;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: len = (int)((uint)pos >> 12) + BLZ_THRESHOLD + 1;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Decode,The following statement contains a magic number: pos = (pos & 0xFFF) + 3;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,readUnsigned,The following statement contains a magic number: return buffer [offset] | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | ((buffer [offset + 3] & 0x7F) << 24);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,readUnsigned,The following statement contains a magic number: return buffer [offset] | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | ((buffer [offset + 3] & 0x7F) << 24);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,readUnsigned,The following statement contains a magic number: return buffer [offset] | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | ((buffer [offset + 3] & 0x7F) << 24);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,readUnsigned,The following statement contains a magic number: return buffer [offset] | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | ((buffer [offset + 3] & 0x7F) << 24);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,readUnsigned,The following statement contains a magic number: return buffer [offset] | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | ((buffer [offset + 3] & 0x7F) << 24);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,writeUnsigned,The following statement contains a magic number: buffer [offset + 1] = (value >> 8) & 0xFF;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,writeUnsigned,The following statement contains a magic number: buffer [offset + 2] = (value >> 16) & 0xFF;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,writeUnsigned,The following statement contains a magic number: buffer [offset + 2] = (value >> 16) & 0xFF;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,writeUnsigned,The following statement contains a magic number: buffer [offset + 3] = (value >> 24) & 0x7F;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,writeUnsigned,The following statement contains a magic number: buffer [offset + 3] = (value >> 24) & 0x7F;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Encode,The following statement contains a magic number: raw_len = raw_buffer.Length - 3;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_len = raw_len + ((raw_len + 7) / 8) + 11;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_len = raw_len + ((raw_len + 7) / 8) + 11;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_len = raw_len + ((raw_len + 7) / 8) + 11;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		pak_buffer [(flg = pak++)] = 0;  		mask = BLZ_MASK;  	}  	SearchPair sl1 = SEARCH (pos_best' raw_buffer' raw' raw_end);  	len_best = sl1.l;  	pos_best = sl1.p;  	// LZ-CUE optimization start  	if (best == BLZ_BEST) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SearchPair sl2 = SEARCH (pos_next' raw_buffer' raw' raw_end);  				len_next = sl2.l;  				pos_next = sl2.p;  				raw -= (len_best - 1);  				SearchPair sl3 = SEARCH (pos_post' raw_buffer' raw' raw_end);  				len_post = sl3.l;  				pos_post = sl3.p;  				raw--;  				if (len_next <= BLZ_THRESHOLD) {  					len_next = 1;  				}  				if (len_post <= BLZ_THRESHOLD) {  					len_post = 1;  				}  				if ((len_best + len_next) <= (1 + len_post)) {  					len_best = 1;  				}  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] = (pak_buffer [flg] << 1);  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  		pak_buffer [pak++] = (pos_best - 3) & 0xFF;  	}  	else {  		pak_buffer [pak++] = raw_buffer [raw++];  	}  	if (pak + raw_len - raw < pak_tmp + raw_tmp) {  		pak_tmp = pak;  		raw_tmp = raw_len - raw;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		pak_buffer [(flg = pak++)] = 0;  		mask = BLZ_MASK;  	}  	SearchPair sl1 = SEARCH (pos_best' raw_buffer' raw' raw_end);  	len_best = sl1.l;  	pos_best = sl1.p;  	// LZ-CUE optimization start  	if (best == BLZ_BEST) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SearchPair sl2 = SEARCH (pos_next' raw_buffer' raw' raw_end);  				len_next = sl2.l;  				pos_next = sl2.p;  				raw -= (len_best - 1);  				SearchPair sl3 = SEARCH (pos_post' raw_buffer' raw' raw_end);  				len_post = sl3.l;  				pos_post = sl3.p;  				raw--;  				if (len_next <= BLZ_THRESHOLD) {  					len_next = 1;  				}  				if (len_post <= BLZ_THRESHOLD) {  					len_post = 1;  				}  				if ((len_best + len_next) <= (1 + len_post)) {  					len_best = 1;  				}  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] = (pak_buffer [flg] << 1);  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  		pak_buffer [pak++] = (pos_best - 3) & 0xFF;  	}  	else {  		pak_buffer [pak++] = raw_buffer [raw++];  	}  	if (pak + raw_len - raw < pak_tmp + raw_tmp) {  		pak_tmp = pak;  		raw_tmp = raw_len - raw;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		pak_buffer [(flg = pak++)] = 0;  		mask = BLZ_MASK;  	}  	SearchPair sl1 = SEARCH (pos_best' raw_buffer' raw' raw_end);  	len_best = sl1.l;  	pos_best = sl1.p;  	// LZ-CUE optimization start  	if (best == BLZ_BEST) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SearchPair sl2 = SEARCH (pos_next' raw_buffer' raw' raw_end);  				len_next = sl2.l;  				pos_next = sl2.p;  				raw -= (len_best - 1);  				SearchPair sl3 = SEARCH (pos_post' raw_buffer' raw' raw_end);  				len_post = sl3.l;  				pos_post = sl3.p;  				raw--;  				if (len_next <= BLZ_THRESHOLD) {  					len_next = 1;  				}  				if (len_post <= BLZ_THRESHOLD) {  					len_post = 1;  				}  				if ((len_best + len_next) <= (1 + len_post)) {  					len_best = 1;  				}  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] = (pak_buffer [flg] << 1);  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  		pak_buffer [pak++] = (pos_best - 3) & 0xFF;  	}  	else {  		pak_buffer [pak++] = raw_buffer [raw++];  	}  	if (pak + raw_len - raw < pak_tmp + raw_tmp) {  		pak_tmp = pak;  		raw_tmp = raw_len - raw;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: while (raw < raw_end) {  	if ((mask = (int)((uint)mask >> BLZ_SHIFT)) == 0) {  		pak_buffer [(flg = pak++)] = 0;  		mask = BLZ_MASK;  	}  	SearchPair sl1 = SEARCH (pos_best' raw_buffer' raw' raw_end);  	len_best = sl1.l;  	pos_best = sl1.p;  	// LZ-CUE optimization start  	if (best == BLZ_BEST) {  		if (len_best > BLZ_THRESHOLD) {  			if (raw + len_best < raw_end) {  				raw += len_best;  				SearchPair sl2 = SEARCH (pos_next' raw_buffer' raw' raw_end);  				len_next = sl2.l;  				pos_next = sl2.p;  				raw -= (len_best - 1);  				SearchPair sl3 = SEARCH (pos_post' raw_buffer' raw' raw_end);  				len_post = sl3.l;  				pos_post = sl3.p;  				raw--;  				if (len_next <= BLZ_THRESHOLD) {  					len_next = 1;  				}  				if (len_post <= BLZ_THRESHOLD) {  					len_post = 1;  				}  				if ((len_best + len_next) <= (1 + len_post)) {  					len_best = 1;  				}  			}  		}  	}  	// LZ-CUE optimization end  	pak_buffer [flg] = (pak_buffer [flg] << 1);  	if (len_best > BLZ_THRESHOLD) {  		raw += len_best;  		pak_buffer [flg] |= 1;  		pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  		pak_buffer [pak++] = (pos_best - 3) & 0xFF;  	}  	else {  		pak_buffer [pak++] = raw_buffer [raw++];  	}  	if (pak + raw_len - raw < pak_tmp + raw_tmp) {  		pak_tmp = pak;  		raw_tmp = raw_len - raw;  	}  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  	pak_buffer [pak++] = (pos_best - 3) & 0xFF;  }  else {  	pak_buffer [pak++] = raw_buffer [raw++];  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  	pak_buffer [pak++] = (pos_best - 3) & 0xFF;  }  else {  	pak_buffer [pak++] = raw_buffer [raw++];  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  	pak_buffer [pak++] = (pos_best - 3) & 0xFF;  }  else {  	pak_buffer [pak++] = raw_buffer [raw++];  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (len_best > BLZ_THRESHOLD) {  	raw += len_best;  	pak_buffer [flg] |= 1;  	pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  	pak_buffer [pak++] = (pos_best - 3) & 0xFF;  }  else {  	pak_buffer [pak++] = raw_buffer [raw++];  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak++] = ((len_best - (BLZ_THRESHOLD + 1)) << 4) | (int)((uint)(pos_best - 3) >> 8);  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak_buffer [pak++] = (pos_best - 3) & 0xFF;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: if (pak_tmp == 0 || (raw_len + 4 < ((pak_tmp + raw_tmp + 3) & 0xFFFFFFFC) + 8)) {  	pak = 0;  	raw = 0;  	raw_end = raw_len;  	while (raw < raw_end) {  		pak_buffer [pak] = raw_buffer [raw];  	}  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0;  	}  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  	pak_buffer [pak++] = 0;  }  else {  	tmp = new int[raw_tmp + pak_tmp + 11];  	for (len = 0; len < raw_tmp; len++) {  		tmp [len] = raw_buffer [len];  	}  	for (len = 0; len < pak_tmp; len++) {  		tmp [raw_tmp + len] = pak_buffer [len + pak_len - pak_tmp];  	}  	pak = 0;  	pak_buffer = tmp;  	pak = raw_tmp + pak_tmp;  	enc_len = pak_tmp;  	hdr_len = 8;  	inc_len = raw_len - pak_tmp - raw_tmp;  	while ((pak & 3) > 0) {  		pak_buffer [pak++] = 0xFF;  		hdr_len++;  	}  	writeUnsigned (pak_buffer' pak' enc_len + hdr_len);  	pak += 3;  	pak_buffer [pak++] = hdr_len;  	writeUnsigned (pak_buffer' pak' inc_len - hdr_len);  	pak += 4;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: while ((pak & 3) > 0) {  	pak_buffer [pak++] = 0;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: tmp = new int[raw_tmp + pak_tmp + 11];  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: hdr_len = 8;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: while ((pak & 3) > 0) {  	pak_buffer [pak++] = 0xFF;  	hdr_len++;  }  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak += 3;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZ_Code,The following statement contains a magic number: pak += 4;  
Magic Number,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,SEARCH,The following statement contains a magic number: for (int pos = 3; pos <= max; pos++) {  	int len;  	for (len = 0; len < BLZ_F; len++) {  		if (raw + len == raw_end) {  			break;  		}  		if (len >= pos) {  			break;  		}  		if (raw_buffer [raw + len] != raw_buffer [raw + len - pos]) {  			break;  		}  	}  	if (len > l) {  		p = pos;  		if ((l = len) == BLZ_F) {  			break;  		}  	}  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.Margin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.Margin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.Margin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.Margin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.Margin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.Margin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.Margin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.Margin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatMainToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.Margin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.Margin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderGrip,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (98' 113' 140)' 2)) {  	linePen.DashPattern = new float[] {  		1f'  		1f  	};  	// Top position is determined by the toolstrip's padding' the inner border and the grip's size'  	// which we shorten by 8 pixels to make it more appealing.  	Point gripStart = new Point (e.GripBounds.X' e.GripBounds.Y + e.ToolStrip.GripMargin.Top);  	Point gripEnd = new Point (gripStart.X' e.GripBounds.Y + e.GripBounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' gripStart' gripEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.GripMargin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.GripMargin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.GripMargin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.GripMargin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,FlatSubToolStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderSeparator,The following statement contains a magic number: using (Pen linePen = new Pen (Color.FromArgb (131' 146' 165))) {  	Point lineStart = new Point (e.Item.Bounds.Width / 2' e.ToolStrip.GripMargin.Top);  	Point lineEnd = new Point (e.Item.Bounds.Width / 2' e.Item.Bounds.Height - e.ToolStrip.GripMargin.Bottom);  	e.Graphics.DrawLine (linePen' lineStart' lineEnd);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Is it a dropped down submenu?  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  				using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  					e.Graphics.FillPath (brush' outline);  				bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			bounds.Inflate (-2' 0);  			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  				gradientBrush.InterpolationColors = selectionGradient;  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 2;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  					e.Graphics.FillPath (gradientBrush' outline);  					bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  				}  				using (GraphicsPath outline = new GraphicsPath ()) {  					float cornerSize = 3;  					outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  					outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  					outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  					outline.CloseAllFigures ();  					using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  						e.Graphics.DrawPath (pen' outline);  				}  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (e.Item.Margin.Left + 0.5f' 0.5f' e.Item.Width - e.Item.Margin.Horizontal - 2' e.Item.Height - 2);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Is it a dropped down submenu?  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  				e.Graphics.FillPath (brush' outline);  			bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		bounds.Inflate (-2' 0);  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  			gradientBrush.InterpolationColors = selectionGradient;  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 2;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				e.Graphics.FillPath (gradientBrush' outline);  				bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  			}  			using (GraphicsPath outline = new GraphicsPath ()) {  				float cornerSize = 3;  				outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  				outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  				outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  				outline.CloseAllFigures ();  				using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  			e.Graphics.FillPath (brush' outline);  		bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	bounds.Inflate (-2' 0);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  		gradientBrush.InterpolationColors = selectionGradient;  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 2;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  			e.Graphics.FillPath (gradientBrush' outline);  			bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  		}  		using (GraphicsPath outline = new GraphicsPath ()) {  			float cornerSize = 3;  			outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  			outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  			outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  			outline.CloseAllFigures ();  			using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  		e.Graphics.FillPath (brush' outline);  	bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  		e.Graphics.FillPath (brush' outline);  	bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  		e.Graphics.FillPath (brush' outline);  	bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  		e.Graphics.FillPath (brush' outline);  	bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 1' bounds.Top + cornerSize' bounds.Right - 1' bounds.Bottom);  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xff' 0xe9' 0xec' 0xee)))  		e.Graphics.FillPath (brush' outline);  	bounds = new RectangleF (e.Item.Margin.Left' 0' e.Item.Width - e.Item.Margin.Horizontal' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 1' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddLine (bounds.Left' bounds.Bottom - 1' bounds.Left' bounds.Top + cornerSize);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0x9b' 0xa7' 0xb7)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddLine (bounds.Right - 2' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: bounds.Inflate (-2' 0);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (bounds' Color.Black' Color.White' LinearGradientMode.Vertical)) {  	gradientBrush.InterpolationColors = selectionGradient;  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 2;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  		e.Graphics.FillPath (gradientBrush' outline);  		bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  	}  	using (GraphicsPath outline = new GraphicsPath ()) {  		float cornerSize = 3;  		outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  		outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  		outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  		outline.CloseAllFigures ();  		using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  			e.Graphics.DrawPath (pen' outline);  	}  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 2;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  	e.Graphics.FillPath (gradientBrush' outline);  	bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Bottom - cornerSize' cornerSize' cornerSize' 90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize' bounds.Bottom - cornerSize' cornerSize' cornerSize' 0' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: bounds = new RectangleF (e.Item.Margin.Left + 3' 0' e.Item.Width - e.Item.Margin.Horizontal - 4' e.Item.Height);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: using (GraphicsPath outline = new GraphicsPath ()) {  	float cornerSize = 3;  	outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  	outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  	outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  	outline.CloseAllFigures ();  	using (Pen pen = new Pen (Color.FromArgb (0xff' 0xe5' 0xc3' 0x65)))  		e.Graphics.DrawPath (pen' outline);  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Left' bounds.Top' cornerSize' cornerSize' -180' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Top' cornerSize' cornerSize' -90' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: outline.AddArc (bounds.Right - cornerSize - 2' bounds.Bottom - cornerSize - 1' cornerSize' cornerSize' 0' 90);  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (Logo != null && e.ToolStrip.Dock == DockStyle.Top) {  	int x = e.ToolStrip.Width - Logo.Width - 8;  	int y = 6;  	e.Graphics.DrawImageUnscaled (Logo' new Point (x' y));  }  
Magic Number,Andi.Utils.Renderer,TransparentMenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (Logo != null && e.ToolStrip.Dock == DockStyle.Top) {  	int x = e.ToolStrip.Width - Logo.Width - 8;  	int y = 6;  	e.Graphics.DrawImageUnscaled (Logo' new Point (x' y));  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (0.5f' 0.5f' e.Item.Width - 1' e.Item.Height - 1);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Simple solid background and border if dropped down.  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xe7' 0xe8' 0xe9)))  				e.Graphics.FillRectangle (brush' bounds);  			bounds.X = 0;  			bounds.Y = 0;  			using (GraphicsPath outline = new GraphicsPath ()) {  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top);  				outline.AddLine (bounds.Left' bounds.Top' bounds.Right' bounds.Top);  				outline.AddLine (bounds.Right' bounds.Top' bounds.Right' bounds.Bottom);  				using (Pen pen = new Pen (Color.FromArgb (0xcb' 0xcd' 0xda)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			if (e.Item.IsOnDropDown) {  				bounds.X += 3;  				bounds.Width -= 5;  			}  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xd1' 0xe2' 0xf2)))  				e.Graphics.FillRectangle (brush' bounds);  			bounds.X -= 0.5f;  			bounds.Y = 0;  			using (Pen pen = new Pen (Color.FromArgb (0x78' 0xae' 0xe5)))  				e.Graphics.DrawRectangle (pen' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled) {  	bool highlight = e.Item.IsOnDropDown && e.Item.Selected;  	if (!highlight)  		highlight = e.Item.Selected || ((ToolStripMenuItem)e.Item).DropDown.Visible;  	if (highlight) {  		RectangleF bounds = new RectangleF (0.5f' 0.5f' e.Item.Width - 1' e.Item.Height - 1);  		e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  		// Simple solid background and border if dropped down.  		if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xe7' 0xe8' 0xe9)))  				e.Graphics.FillRectangle (brush' bounds);  			bounds.X = 0;  			bounds.Y = 0;  			using (GraphicsPath outline = new GraphicsPath ()) {  				outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top);  				outline.AddLine (bounds.Left' bounds.Top' bounds.Right' bounds.Top);  				outline.AddLine (bounds.Right' bounds.Top' bounds.Right' bounds.Bottom);  				using (Pen pen = new Pen (Color.FromArgb (0xcb' 0xcd' 0xda)))  					e.Graphics.DrawPath (pen' outline);  			}  		}  		else {  			if (e.Item.IsOnDropDown) {  				bounds.X += 3;  				bounds.Width -= 5;  			}  			using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xd1' 0xe2' 0xf2)))  				e.Graphics.FillRectangle (brush' bounds);  			bounds.X -= 0.5f;  			bounds.Y = 0;  			using (Pen pen = new Pen (Color.FromArgb (0x78' 0xae' 0xe5)))  				e.Graphics.DrawRectangle (pen' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  	}  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (0.5f' 0.5f' e.Item.Width - 1' e.Item.Height - 1);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Simple solid background and border if dropped down.  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xe7' 0xe8' 0xe9)))  			e.Graphics.FillRectangle (brush' bounds);  		bounds.X = 0;  		bounds.Y = 0;  		using (GraphicsPath outline = new GraphicsPath ()) {  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top);  			outline.AddLine (bounds.Left' bounds.Top' bounds.Right' bounds.Top);  			outline.AddLine (bounds.Right' bounds.Top' bounds.Right' bounds.Bottom);  			using (Pen pen = new Pen (Color.FromArgb (0xcb' 0xcd' 0xda)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		if (e.Item.IsOnDropDown) {  			bounds.X += 3;  			bounds.Width -= 5;  		}  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xd1' 0xe2' 0xf2)))  			e.Graphics.FillRectangle (brush' bounds);  		bounds.X -= 0.5f;  		bounds.Y = 0;  		using (Pen pen = new Pen (Color.FromArgb (0x78' 0xae' 0xe5)))  			e.Graphics.DrawRectangle (pen' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (highlight) {  	RectangleF bounds = new RectangleF (0.5f' 0.5f' e.Item.Width - 1' e.Item.Height - 1);  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	// Simple solid background and border if dropped down.  	if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xe7' 0xe8' 0xe9)))  			e.Graphics.FillRectangle (brush' bounds);  		bounds.X = 0;  		bounds.Y = 0;  		using (GraphicsPath outline = new GraphicsPath ()) {  			outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top);  			outline.AddLine (bounds.Left' bounds.Top' bounds.Right' bounds.Top);  			outline.AddLine (bounds.Right' bounds.Top' bounds.Right' bounds.Bottom);  			using (Pen pen = new Pen (Color.FromArgb (0xcb' 0xcd' 0xda)))  				e.Graphics.DrawPath (pen' outline);  		}  	}  	else {  		if (e.Item.IsOnDropDown) {  			bounds.X += 3;  			bounds.Width -= 5;  		}  		using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xd1' 0xe2' 0xf2)))  			e.Graphics.FillRectangle (brush' bounds);  		bounds.X -= 0.5f;  		bounds.Y = 0;  		using (Pen pen = new Pen (Color.FromArgb (0x78' 0xae' 0xe5)))  			e.Graphics.DrawRectangle (pen' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xe7' 0xe8' 0xe9)))  		e.Graphics.FillRectangle (brush' bounds);  	bounds.X = 0;  	bounds.Y = 0;  	using (GraphicsPath outline = new GraphicsPath ()) {  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top);  		outline.AddLine (bounds.Left' bounds.Top' bounds.Right' bounds.Top);  		outline.AddLine (bounds.Right' bounds.Top' bounds.Right' bounds.Bottom);  		using (Pen pen = new Pen (Color.FromArgb (0xcb' 0xcd' 0xda)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	if (e.Item.IsOnDropDown) {  		bounds.X += 3;  		bounds.Width -= 5;  	}  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xd1' 0xe2' 0xf2)))  		e.Graphics.FillRectangle (brush' bounds);  	bounds.X -= 0.5f;  	bounds.Y = 0;  	using (Pen pen = new Pen (Color.FromArgb (0x78' 0xae' 0xe5)))  		e.Graphics.DrawRectangle (pen' bounds.X' bounds.Y' bounds.Width' bounds.Height);  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (!e.Item.IsOnDropDown && ((ToolStripMenuItem)e.Item).DropDown.Visible) {  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xe7' 0xe8' 0xe9)))  		e.Graphics.FillRectangle (brush' bounds);  	bounds.X = 0;  	bounds.Y = 0;  	using (GraphicsPath outline = new GraphicsPath ()) {  		outline.AddLine (bounds.Left' bounds.Bottom' bounds.Left' bounds.Top);  		outline.AddLine (bounds.Left' bounds.Top' bounds.Right' bounds.Top);  		outline.AddLine (bounds.Right' bounds.Top' bounds.Right' bounds.Bottom);  		using (Pen pen = new Pen (Color.FromArgb (0xcb' 0xcd' 0xda)))  			e.Graphics.DrawPath (pen' outline);  	}  }  else {  	if (e.Item.IsOnDropDown) {  		bounds.X += 3;  		bounds.Width -= 5;  	}  	using (SolidBrush brush = new SolidBrush (Color.FromArgb (0xd1' 0xe2' 0xf2)))  		e.Graphics.FillRectangle (brush' bounds);  	bounds.X -= 0.5f;  	bounds.Y = 0;  	using (Pen pen = new Pen (Color.FromArgb (0x78' 0xae' 0xe5)))  		e.Graphics.DrawRectangle (pen' bounds.X' bounds.Y' bounds.Width' bounds.Height);  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.IsOnDropDown) {  	bounds.X += 3;  	bounds.Width -= 5;  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.IsOnDropDown) {  	bounds.X += 3;  	bounds.Width -= 5;  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: bounds.X += 3;  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderMenuItemBackground,The following statement contains a magic number: bounds.Width -= 5;  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (Logo != null && e.ToolStrip.Dock == DockStyle.Top) {  	int x = e.ToolStrip.Width - Logo.Width - 8;  	int y = 6;  	e.Graphics.DrawImageUnscaled (Logo' new Point (x' y));  }  
Magic Number,Andi.Utils.Renderer,Win8MenuStripRenderer,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\WbToolStripRenderers.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (Logo != null && e.ToolStrip.Dock == DockStyle.Top) {  	int x = e.ToolStrip.Width - Logo.Width - 8;  	int y = 6;  	e.Graphics.DrawImageUnscaled (Logo' new Point (x' y));  }  
Duplicate Code,Andi.Utils.Nitro.Archive,AndiNarcReader,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\AndiNarcReader.cs,ReplaceEntry,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 53)' (57' 96))
Duplicate Code,Andi.Utils.Nitro.Archive,Narc,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\Archive\Narc.cs,ReplaceFile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 56)' (60' 99))
Missing Default,Andi.Utils.Nitro,BLZCoder,C:\repos\andibadra_ANDT\Andi.Utils\Nitro\BLZCoder.cs,BLZCoder,The following switch statement is missing a default case: switch (cmd) {  case 0:  	for (arg = 1; arg < args.Length; arg++)  		BLZ_Decode (args [arg]);  	break;  case 1:  	arm9 = (args [0].Length > 3 && args [0] [3] == '9');  	for (arg = 1; arg < args.Length; arg++)  		BLZ_Encode (args [arg]' mode);  	break;  }  
Missing Default,Andi.Utils.Renderer,Theme,C:\repos\andibadra_ANDT\Andi.Utils\Renderer\Theme.cs,setTheme,The following switch statement is missing a default case: switch (id) {  case 0:  	ToolStripManager.Renderer = new VS2012LightRenderer ();  	break;  case 1:  	ToolStripManager.Renderer = new Win8MenuStripRenderer ();  	break;  }  
