Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The method has 148 lines of code.
Long Method,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The method has 746 lines of code.
Long Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The method has 156 lines of code.
Long Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The method has 126 lines of code.
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,Cyclomatic complexity of the method is 10
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,Cyclomatic complexity of the method is 15
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,GetBody,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,AppendInsertionStatement,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildInsertColumns,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildInsertValues,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsTemplate.cs,AppendFullTemplate,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,Cyclomatic complexity of the method is 112
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateSchema,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateAudit,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,Cyclomatic complexity of the method is 18
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLDeleteBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLDeleteBusinessObjectTemplate.cs,BuildParameterList,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,BuildParameterList,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendORTemplate,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateBusinessObjectTemplate.cs,BuildParameterList,Cyclomatic complexity of the method is 12
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateComponentTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateComponentTemplate.cs,GenerateContent,Cyclomatic complexity of the method is 10
Complex Method,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateComponentTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateComponentTemplate.cs,BuildSetStatement,Cyclomatic complexity of the method is 8
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseCreateRelations,CreateRelationsGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseCreateRelations\CreateRelationsGenerator.cs,Generate,The length of the statement  "			var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseCreateRelations,CreateRelationsTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseCreateRelations\CreateRelationsTemplate.cs,AppendAll,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggersGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "            var isTracking = _model.Database.Tables.Any(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly && x.AllowAuditTracking); " is 134.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                sb.AppendLine("if exists(select * from sysobjects where name = '__TR_" + table.DatabaseName + "__INSERT' AND xtype = 'TR')"); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                sb.AppendLine("if exists(select * from sysobjects where name = '__TR_" + table.DatabaseName + "__UPDATE' AND xtype = 'TR')"); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                sb.AppendLine("if exists(select * from sysobjects where name = '__TR_" + table.DatabaseName + "__DELETE' AND xtype = 'TR')"); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                        if (column.Generated && !(column.DataType == System.Data.SqlDbType.Text || column.DataType == System.Data.SqlDbType.NText || column.DataType == System.Data.SqlDbType.Image)) " is 173.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                    sb.AppendLine("INSERT INTO [" + table.GetSQLSchema() + "].[__AUDIT__" + table.DatabaseName + "] ([__action]'" + columnText + ")"); " is 130.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                    sb.AppendLine("INSERT INTO [" + table.GetSQLSchema() + "].[__AUDIT__" + table.DatabaseName + "] ([__action]'" + columnText + ")"); " is 130.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The length of the statement  "                    sb.AppendLine("INSERT INTO [" + table.GetSQLSchema() + "].[__AUDIT__" + table.DatabaseName + "] ([__action]'" + columnText + ")"); " is 130.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                if ((index < columnList.Count - 1) || (component.Parent.AllowCreateAudit) || (component.Parent.AllowModifiedAudit) || (component.Parent.AllowTimestamp)) " is 152.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{0}].[{1}]'"' GetTableDatabaseName(model' component.Parent)' model.Database.CreatedByColumnName); " is 120.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{0}].[{1}]"' GetTableDatabaseName(model' component.Parent)' model.Database.CreatedDateColumnName); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{0}].[{1}]'"' GetTableDatabaseName(model' component.Parent)' model.Database.ModifiedByColumnName); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{0}].[{1}]"' GetTableDatabaseName(model' component.Parent)' model.Database.ModifiedDateColumnName); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{0}].[{1}]"' GetTableDatabaseName(model' component.Parent.GetAbsoluteBaseTable())' model.Database.TimestampColumnName); " is 142.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("\t[{2}].[{0}].[{1}]"' GetTableDatabaseName(model' parentTable)' column.DatabaseName' parentTable.GetSQLSchema()); " is 134.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{2}].[{0}].[{1}]'"' GetTableDatabaseName(model' table)' model.Database.CreatedByColumnName' table.GetSQLSchema()); " is 137.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{2}].[{0}].[{1}]"' GetTableDatabaseName(model' table)' model.Database.CreatedDateColumnName' table.GetSQLSchema()); " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{2}].[{0}].[{1}]'"' GetTableDatabaseName(model' table)' model.Database.ModifiedByColumnName' table.GetSQLSchema()); " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{2}].[{0}].[{1}]"' GetTableDatabaseName(model' table)' model.Database.ModifiedDateColumnName' table.GetSQLSchema()); " is 139.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The length of the statement  "                output.AppendFormat("	[{2}].[{0}].[{1}]"' GetTableDatabaseName(model' table.GetAbsoluteBaseTable())' model.Database.TimestampColumnName' table.GetAbsoluteBaseTable().GetSQLSchema()); " is 182.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendCreateAudit,The length of the statement  "                var dateTimeString = (model.SQLServerType == Common.GeneratorFramework.SQLServerTypeConstants.SQL2005) ? "[DateTime]" : "[DateTime2]"; " is 134.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendCreateAudit,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + table.DatabaseName + "' and type = 'U') and not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.CreatedByColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 296.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendCreateAudit,The length of the statement  "                sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] ADD [" + model.Database.CreatedByColumnName + "] [NVarchar] (50) NULL"); " is 159.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendCreateAudit,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + table.DatabaseName + "' and type = 'U') and not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.CreatedDateColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 298.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendCreateAudit,The length of the statement  "                sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] ADD [" + model.Database.CreatedDateColumnName + "] " + dateTimeString + " CONSTRAINT [" + dfName + "] DEFAULT " + model.GetSQLDefaultDate() + " NULL"); " is 238.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendModifiedAudit,The length of the statement  "                var dateTimeString = (model.SQLServerType == Common.GeneratorFramework.SQLServerTypeConstants.SQL2005) ? "[DateTime]" : "[DateTime2]"; " is 134.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendModifiedAudit,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + table.DatabaseName + "' and type = 'U') and not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.ModifiedByColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 297.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendModifiedAudit,The length of the statement  "                sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] ADD [" + model.Database.ModifiedByColumnName + "] [NVarchar] (50) NULL"); " is 160.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendModifiedAudit,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + table.DatabaseName + "' and type = 'U') and not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.ModifiedDateColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 299.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendModifiedAudit,The length of the statement  "                sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] ADD [" + model.Database.ModifiedDateColumnName + "] " + dateTimeString + " CONSTRAINT [" + dfName + "] DEFAULT " + model.GetSQLDefaultDate() + " NULL"); " is 239.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendTimestampAudit,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + table.DatabaseName + "' and type = 'U') and not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.TimestampColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 296.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,AppendTimestampAudit,The length of the statement  "                sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] ADD [" + model.Database.TimestampColumnName + "] [ROWVERSION] NOT NULL"); " is 160.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropCreateAudit,The length of the statement  "            sb.AppendLine("if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.CreatedByColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 197.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropCreateAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP COLUMN [" + model.Database.CreatedByColumnName + "]"); " is 146.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropCreateAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP CONSTRAINT [" + dfName + "]"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropCreateAudit,The length of the statement  "            sb.AppendLine("if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.CreatedDateColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 199.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropCreateAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP COLUMN [" + model.Database.CreatedDateColumnName + "]"); " is 148.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropModifiedAudit,The length of the statement  "            sb.AppendLine("if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.ModifiedByColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 198.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropModifiedAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP COLUMN [" + model.Database.ModifiedByColumnName + "]"); " is 147.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropModifiedAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP CONSTRAINT [" + dfName + "]"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropModifiedAudit,The length of the statement  "            sb.AppendLine("if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.ModifiedDateColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 200.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropModifiedAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP COLUMN [" + model.Database.ModifiedDateColumnName + "]"); " is 149.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropTimestampAudit,The length of the statement  "            sb.AppendLine("if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + model.Database.TimestampColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 197.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,DropTimestampAudit,The length of the statement  "            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] DROP COLUMN [" + model.Database.TimestampColumnName + "]"); " is 146.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.Append("	(@orderByColumn = '" + column.DatabaseName + "' and (((@filter is null) or (" + tableName + ".[" + column.DatabaseName + "] is null)) or (@filter is not null and " + tableName + ".[" + column.DatabaseName + "] " + comparer + " @filter)))"); " is 252.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.AppendLine("	CASE @ascending WHEN 0 THEN CASE @orderByColumn WHEN '" + column.DatabaseName + "' THEN " + tableName + ".[" + column.DatabaseName + "] END END DESC' "); " is 169.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.Append("	CASE @ascending WHEN 1 THEN CASE @orderByColumn WHEN '" + column.DatabaseName + "' THEN " + tableName + ".[" + column.DatabaseName + "] END END"); " is 158.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.Append("	(@orderByColumn = '" + column.DatabaseName + "' and (((@filter is null) or (" + tableName + ".[" + column.DatabaseName + "] is null)) or (@filter is not null and " + tableName + ".[" + column.DatabaseName + "] " + comparer + " @filter)))"); " is 252.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.AppendFormat("#tmpTable.[{0}] = [{2}].[{1}].[{0}]"' pkColumn.DatabaseName' Globals.GetTableDatabaseName(model' table).ToUpper()' table.GetSQLSchema()); " is 154.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.AppendLine("	CASE @ascending WHEN 0 THEN CASE @orderByColumn WHEN '" + column.DatabaseName + "' THEN " + tableName + ".[" + column.DatabaseName + "] END END DESC' "); " is 169.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildStoredProcedure,The length of the statement  "                    sb.Append("	CASE @ascending WHEN 1 THEN CASE @orderByColumn WHEN '" + column.DatabaseName + "' THEN " + tableName + ".[" + column.DatabaseName + "] END END"); " is 158.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,GetBody,The length of the statement  "                            sb.AppendLine("SET @" + column.ToDatabaseCodeIdentifier() + " = (select case when max([" + column.DatabaseName + "]) is null then 1 else max([" + column.DatabaseName + "]) + 1 end from [" + Globals.GetTableDatabaseName(model' table) + "])"); " is 241.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,AppendInsertionStatement,The length of the statement  "                    sb.AppendLine("IF (@" + column.ToDatabaseCodeIdentifier() + " < 0) SET @" + column.ToDatabaseCodeIdentifier() + " = NULL;"); " is 124.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildInsertColumns,The length of the statement  "                foreach (var column in table.GeneratedColumns.Where(x => !x.ComputedColumn && x.Identity != IdentityTypeConstants.Database && !x.IsReadOnly)) " is 141.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildInsertSelectWhereStatement,The length of the statement  "                    output.Append("[" + table.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' table) + "].[" + column.DatabaseName + "]"); " is 131.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedInsertBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildInsertValues,The length of the statement  "                foreach (var column in table.GeneratedColumns.Where(x => !x.ComputedColumn && x.Identity != IdentityTypeConstants.Database && !x.IsReadOnly)) " is 141.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedUpdateBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,GetBody,The length of the statement  "                            sb.AppendLine("\t" + BuildUpdateWhereStatement(t' model' ((table.GetAbsoluteBaseTable() == t) && table.AllowTimestamp))); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedUpdateBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildSetStatement,The length of the statement  "                    foreach (var column in table.GeneratedColumns.Where(x => !x.ComputedColumn && !x.PrimaryKey && x.Identity != IdentityTypeConstants.Database && !x.IsReadOnly)) " is 158.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedUpdateBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,BuildUpdateWhereStatement,The length of the statement  "                        output.AppendFormat("[" + table.GetSQLSchema() + "].[" + table.DatabaseName + "].[{0}] = "' model.Database.TimestampColumnName); " is 128.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedDeleteBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,GetBody,The length of the statement  "                    sb.Append("exec [" + table.ParentTable.GetSQLSchema() + "].[" + model.GetStoredProcedurePrefix() + "_" + table.ParentTable.PascalName + moduleName + "_Delete]"); " is 161.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.UnversionedUpgrade,UpgradeUnversionedScriptGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\UnversionedUpgrade\UpgradeUnversionedScriptGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' false); " is 154.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.UnversionedUpgrade,UpgradeUnversionedScriptTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\UnversionedUpgrade\UpgradeUnversionedScriptTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("--UNCOMMENT TO DROP ALL DEFAULTS IF NEEDED. IF THIS MODEL WAS IMPORTED FROM AN EXISTSING DATABASE THE MODEL WILL RECREATE ALL DEFAULTS WITH A GENERATED NAME."); " is 175.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.UnversionedUpgrade,UpgradeUnversionedScriptTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\UnversionedUpgrade\UpgradeUnversionedScriptTemplate.cs,GenerateContent,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.UnversionedUpgrade,UpgradeUnversionedScriptTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\UnversionedUpgrade\UpgradeUnversionedScriptTemplate.cs,GenerateContent,The length of the statement  "                                sb.AppendLine("EXEC sp_rename N'" + table.DatabaseName + "." + index.ImportedName + "'' N'" + indexName + "'' N'INDEX';"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.ScriptOrder,ScriptOrderGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\ScriptOrder\ScriptOrderGenerator.cs,Generate,The length of the statement  "			var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsTemplate.cs,AppendFullTemplate,The length of the statement  "                        if (function.IsTable) sb.AppendFormat("GRANT ALL ON [" + function.GetSQLSchema() + "].[{0}] TO [{1}]"' function.PascalName' _model.Database.GrantExecUser).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsTemplate.cs,AppendFullTemplate,The length of the statement  "                        else sb.AppendFormat("GRANT ALL ON [" + function.GetSQLSchema() + "].[{0}] TO [{1}]"' function.PascalName' _model.Database.GrantExecUser).AppendLine(); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsTemplate.cs,AppendFullTemplate,The length of the statement  "                var tableList = _model.Database.Tables.Where(x => x.Generated && x.Security.IsValid()).OrderBy(x => x.PascalName).ToList(); " is 123.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsTemplate.cs,AppendFullTemplate,The length of the statement  "                        sb.AppendFormat("GRANT ALL ON [" + table.GetSQLSchema() + "].[{0}] TO [{1}]"' objectName' _model.Database.GrantExecUser).AppendLine(); " is 134.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseCreateData,CreateDataGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseCreateData\CreateDataGenerator.cs,Generate,The length of the statement  "			var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseCreateData,CreateDataTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseCreateData\CreateDataTemplate.cs,GenerateContent,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder1,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will always run first in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 212.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder1,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run first on a database creation in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 231.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder1,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run first on an existing non-versioned database in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 246.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder1,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run first on an existing versioned database in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 242.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder2,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Scripts in this folder are generated once and can be modified by the user after generation.\r\nEverything under this folder will be run in versioned number order.\r\nThese scripts will only be run on a previous versioned database' not on a create or unversioned database."' ProjectName' this' true); " is 356.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder3,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Do not modify the generated scripts in this folder."' ProjectName' this' true); " is 136.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder4,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will always run after schema and upgrades in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 232.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder4,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run after schema and upgrades on a database creation in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 251.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder4,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run after schema and upgrades on an existing non-versioned database in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 266.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder4,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run after schema and upgrades on an existing versioned database in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 262.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder5,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add user-defined scripts for database functions in this folder."' ProjectName' this' true); " is 148.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder5,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add user-defined scripts for database stored procedures in this folder."' ProjectName' this' true); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder5,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add user-defined scripts for database views in this folder."' ProjectName' this' true); " is 144.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder6,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will always run after all other scripts in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 230.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder6,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run after all other scripts on a database creation in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 249.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder6,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run after all other scripts on an existing non-versioned database in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 264.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateFolder6,The length of the statement  "			eventArgs = new ProjectItemGeneratedEventArgs(fileName' "Add scripts that will be run after all other scripts on an existing versioned database in this folder. Make them embedded resources and they will be run in alphabetical order."' ProjectName' this' true); " is 260.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder1ReadMe,The length of the statement  "			sb.AppendLine("Please place any custom scripts that need to run prior to all generated scripts here. Make sure they are an embedded resource"); " is 143.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder1ReadMe,The length of the statement  "			sb.AppendLine("\"NewDatabase\" Folder - During the process of installation the user chooses to create a new database. "); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder1ReadMe,The length of the statement  "			sb.AppendLine("\"Unversioned\" Folder - During the process of installation the user chooses to upgrade a database that has not been versioned by nHydrate"); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder1ReadMe,The length of the statement  "			sb.AppendLine("\"Versioned\" Folder - During the process of installation the user chooses to upgrade a database that has been versioned by nHydrate"); " is 150.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder1ReadMe,The length of the statement  "			sb.AppendLine("\"Always\" Folder: After the scenario specific scripts have run. Scripts in the \"Always\" folder will be run regardless of scenario."); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder1ReadMe,The length of the statement  "			sb.AppendLine("For each specific folder custom scripts are run in Alphabetical order. For this reason it is best practice to use a number based prefix as part of your naming standard example:"); " is 194.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder4ReadMe,The length of the statement  "			sb.AppendLine("Please place any custom scripts that need to run after the generated schema and data files have been run.  Make sure they are an embedded resource."); " is 165.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder4ReadMe,The length of the statement  "			sb.AppendLine("\"NewDatabase\" Folder - During the process of installation the user chooses to create a new database. "); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder4ReadMe,The length of the statement  "			sb.AppendLine("\"Unversioned\" Folder - During the process of installation the user chooses to upgrade a database that has not been versioned by nHydrate"); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder4ReadMe,The length of the statement  "			sb.AppendLine("\"Versioned\" Folder - During the process of installation the user chooses to upgrade a database that has been versioned by nHydrate"); " is 150.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder4ReadMe,The length of the statement  "			sb.AppendLine("\"Always\" Folder: After the scenario specific scripts have run. Scripts in the \"Always\" folder will be run regardless of scenario."); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder4ReadMe,The length of the statement  "			sb.AppendLine("For each specific folder custom scripts are run in Alphabetical order. For this reason it is best practice to use a number "); " is 141.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder6ReadMe,The length of the statement  "			sb.AppendLine("Please place any custom scripts that need to run after everything else here. Make sure they are an embedded resource."); " is 135.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder6ReadMe,The length of the statement  "			sb.AppendLine("\"NewDatabase\" Folder - During the process of installation the user chooses to create a new database. "); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder6ReadMe,The length of the statement  "			sb.AppendLine("\"Unversioned\" Folder - During the process of installation the user chooses to upgrade a database that has not been versioned by nHydrate"); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder6ReadMe,The length of the statement  "			sb.AppendLine("\"Versioned\" Folder - During the process of installation the user chooses to upgrade a database that has been versioned by nHydrate"); " is 150.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder6ReadMe,The length of the statement  "			sb.AppendLine("\"Always\" Folder: After the scenario specific scripts have run. Scripts in the \"Always\" folder will be run regardless of scenario."); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetTextFolder6ReadMe,The length of the statement  "			sb.AppendLine("For each specific folder custom scripts are run in Alphabetical order. For this reason it is best practice to use a number "); " is 141.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateSqlServersCs,The length of the statement  "			//  sb.Append("					command = new SqlCommand(\"insert into [__nhydratemetadata] (name'type'codefacade'immutable'isassociative'parent'summary'typedtable) values ("); " is 164.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateSqlServersCs,The length of the statement  "			//  sb.Append(StringHelper.ConvertTextToSingleLineCodeString((item.ParentTable == null ? "null" : item.ParentTable.Name)) + "'"); " is 129.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,ReplaceNHydrateSpecifics,The length of the statement  "			retVal = retVal.Replace("\"UPGRADE_VERSION\""' major + "' " + minor + "' " + revision + "' " + build + "' " + generated); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,DatabaseProjectGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\DatabaseProjectGenerator.cs,OnAfterGenerate,The length of the statement  "            preBuildProperty.Value = "if not exist \"$(SolutionDir)bin\" mkdir \"$(SolutionDir)bin\"\r\nattrib -r \"$(SolutionDir)Bin\\*.*\""; " is 130.
Long Statement,nHydrate.Generator.SQLInstaller,DatabaseProjectGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\DatabaseProjectGenerator.cs,OnAfterGenerate,The length of the statement  "            config.Properties.Item("StartProgram").Value = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory() + "InstallUtil.exe"; " is 139.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                foreach (var newT in modelNew.Database.Tables.Where(x => x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name).ToList()) " is 133.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                foreach (var newT in modelNew.Database.Tables.Where(x => x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name).ToList()) " is 133.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var newT = modelNew.Database.Tables.FirstOrDefault(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly) && x.Key.ToLower() == oldT.Key.ToLower()); " is 160.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                        sb.AppendLine("--The previous model had audit tracking turn on for table '" + Globals.GetTableDatabaseName(modelOld' oldT) + "' and now it is turned off."); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                        sb.AppendLine("--The audit table will not be removed automatically. If you want to remove it' uncomment the following script."); " is 128.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                foreach (var newT in modelNew.Database.Tables.Where(x => x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name).ToList()) " is 133.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                //string sql = "if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + oldC.DatabaseName + "' and o.name = '" + newT.DatabaseName + "')" + " is 180.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                //             "AND not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + newC.DatabaseName + "' and o.name = '" + newT.DatabaseName + "')" + Environment.NewLine + " is 207.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                //             "EXEC sp_rename @objname = '" + newT.DatabaseName + "." + oldC.DatabaseName + "'' @newname = '" + newC.DatabaseName + "'' @objtype = 'COLUMN'"; " is 158.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                if (!string.IsNullOrEmpty(newC.Default) && ((oldC.Default != newC.Default) || (oldC.DataType != newC.DataType) || (oldC.DatabaseName != newC.DatabaseName))) " is 156.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                        var newF = splitTable.GeneratedColumns.FirstOrDefault(x => new Guid(x.Key) == split.ReMappedFieldIDList[new Guid(item.Key)]); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                                sb.AppendLine("SET identity_insert [" + splitTable.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(modelNew' splitTable) + "] on"); " is 137.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                                sb.AppendLine("SET identity_insert [" + splitTable.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(modelNew' splitTable) + "] off"); " is 138.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                        var deletedFields = deletedOrigDeletedT.GeneratedColumns.Where(x => split.ReMappedFieldIDList.Keys.Contains(new Guid(x.Key))).ToList(); " is 135.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                                    sb.Append("[_A].[" + newT.PrimaryKeyColumns.First().DatabaseName + "] = [_deleted].[" + deletedTable.PrimaryKeyColumns.First().DatabaseName + "]"); " is 147.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine("ALTER TABLE [" + newT.GetSQLSchema() + "].[" + newT.DatabaseName + "] DROP CONSTRAINT [" + defaultName + "]"); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                sb.AppendLine("ALTER TABLE [" + newT.GetSQLSchema() + "].[" + newT.DatabaseName + "] DROP CONSTRAINT [" + defaultName + "]"); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine("if exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + modelNew.TenantColumnName + "' and o.name = '" + newT.DatabaseName + "')"); " is 187.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine("ALTER TABLE [" + newT.GetSQLSchema() + "].[" + newT.DatabaseName + "] DROP COLUMN [" + modelNew.TenantColumnName + "]"); " is 135.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                sb.AppendLine("--if exists(select * from sys.objects where name = '" + pkName + "' and type = 'PK' and type_desc = 'PRIMARY_KEY_CONSTRAINT')"); " is 143.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine(nHydrate.Core.SQLGeneration.SQLEmit.GetSqlRenameColumn(newT.DatabaseName' modelOld.Database.CreatedByColumnName' modelNew.Database.CreatedByColumnName)); " is 167.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine(nHydrate.Core.SQLGeneration.SQLEmit.GetSqlRenameColumn(newT.DatabaseName' modelOld.Database.CreatedDateColumnName' modelNew.Database.CreatedDateColumnName)); " is 171.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine(nHydrate.Core.SQLGeneration.SQLEmit.GetSqlRenameColumn(newT.DatabaseName' modelOld.Database.ModifiedByColumnName' modelNew.Database.ModifiedByColumnName)); " is 169.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine(nHydrate.Core.SQLGeneration.SQLEmit.GetSqlRenameColumn(newT.DatabaseName' modelOld.Database.ModifiedDateColumnName' modelNew.Database.ModifiedDateColumnName)); " is 173.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine(nHydrate.Core.SQLGeneration.SQLEmit.GetSqlRenameColumn(newT.DatabaseName' modelOld.Database.TimestampColumnName' modelNew.Database.TimestampColumnName)); " is 167.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                foreach (var newT in modelNew.Database.Tables.Where(x => x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name).ToList()) " is 133.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine("if exists (select * from sys.tables t inner join sys.schemas s on t.schema_id = s.schema_id where t.name = '" + newT.DatabaseName + "' and s.name = '" + oldT.GetSQLSchema() + "')"); " is 196.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                            sb.AppendLine("	ALTER SCHEMA [" + newT.GetSQLSchema() + "] TRANSFER [" + oldT.GetSQLSchema() + "].[" + newT.DatabaseName + "];"); " is 129.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                foreach (var newT in modelNew.Database.Tables.Where(x => x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 124.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                        sb.AppendLine("if exists (select * from sys.objects where name = '" + oldT.DatabaseName + "' and [type] in ('FN'''IF'''TF'''FS'''FT'))"); " is 137.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                        sb.AppendLine("if exists (select * from sys.objects where name = '" + oldT.DatabaseName + "' and [type] in ('FN'''IF'''TF'''FS'''FT'))"); " is 137.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                foreach (var newT in modelNew.Database.Tables.Where(x => x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name).ToList()) " is 133.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                    var oldT = modelOld.Database.Tables.GetByKey(newT.Key).FirstOrDefault(x => x.TypedTable != TypedTableConstants.EnumOnly); " is 121.
Long Statement,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The length of the statement  "                                sb.AppendLine("if exists(select o.name' c.name from sys.columns c inner join sys.objects o on c.object_id = o.object_id where o.type = 'U' and o.name = '" + newT.DatabaseName + "' and c.name = '" + newC.DatabaseName + "')"); " is 224.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateSchema,The length of the statement  "            foreach (var item in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 137.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateTable,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateTable,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateTable,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateTable,The length of the statement  "                    sb.AppendLine("GRANT DELETE' INSERT' REFERENCES' SELECT' UPDATE ON [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] TO [" + _model.Database.GrantExecUser + "]"); " is 172.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                        if (!(column.DataType == System.Data.SqlDbType.Text || column.DataType == System.Data.SqlDbType.NText || column.DataType == System.Data.SqlDbType.Image)) " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                            sb.AppendLine("if not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + column.DatabaseName + "' and o.name = '" + tableName + "')"); " is 177.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + tableName + "] ADD [" + column.DatabaseName + "] " + column.DatabaseType + " NULL"); " is 147.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                            sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + tableName + "] ALTER COLUMN [" + column.DatabaseName + "] " + column.DatabaseType + " NULL"); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                        sb.AppendLine("if not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + _model.Database.ModifiedByDatabaseName + "' and o.name = '" + tableName + "')"); " is 196.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + tableName + "] ADD [" + _model.Database.ModifiedByDatabaseName + "] [NVarchar] (50) NULL"); " is 154.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTracking,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + tableName + "] ALTER COLUMN [" + _model.Database.ModifiedByDatabaseName + "] [NVarchar] (50) NULL"); " is 163.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreatePrimaryKey,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreatePrimaryKey,The length of the statement  "                    sb.AppendLine("SET @pkfix" + table.PascalName + " = (SELECT top 1 i.name AS IndexName FROM sys.indexes AS i WHERE i.is_primary_key = 1 AND OBJECT_NAME(i.OBJECT_ID) = '" + table.DatabaseName + "')"); " is 198.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreatePrimaryKey,The length of the statement  "                    sb.AppendLine("if @pkfix" + table.PascalName + " <> '' and (BINARY_CHECKSUM(@pkfix" + table.PascalName + ") <> BINARY_CHECKSUM('PK_" + table.DatabaseName.ToUpper() + "')) exec('sp_rename '''+@pkfix" + table.PascalName + "+'''' ''PK_" + table.DatabaseName.ToUpper() + "''')"); " is 275.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreatePrimaryKey,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly && !x.EnforcePrimaryKey).OrderBy(x => x.Name)) " is 162.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreatePrimaryKey,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendAuditTables,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateIndexes,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateUniqueKey,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateUniqueKey,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + tableName + "] ADD CONSTRAINT [" + indexName + "] UNIQUE ([" + column.DatabaseName + "]) "); " is 155.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendClearSP,The length of the statement  "            sb.AppendLine("if exists (select * from dbo.sysobjects where id = object_id(N''' + @test + ''') and OBJECTPROPERTY(id' N''IsProcedure'') = 1)"); " is 144.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateAudit,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateAudit,The length of the statement  "                    var dateTimeString = (_model.SQLServerType == Common.GeneratorFramework.SQLServerTypeConstants.SQL2005) ? "[DateTime]" : "[DateTime2]"; " is 135.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateAudit,The length of the statement  "                        sb.AppendLine("if exists(select * from sys.objects where name = '" + table.DatabaseName + "' and type = 'U') and not exists (select * from syscolumns c inner join sysobjects o on c.id = o.id where c.name = '" + _model.TenantColumnName + "' and o.name = '" + table.DatabaseName + "')"); " is 285.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateAudit,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] ADD [" + _model.TenantColumnName + "] [nvarchar] (128) NOT NULL CONSTRAINT [DF__" + table.PascalName.ToUpper() + "_" + _model.TenantColumnName.ToUpper() + "] DEFAULT (suser_sname())"); " is 271.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateAudit,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendRemoveDefaults,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendCreateDefaults,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendFixNulls,The length of the statement  "            //foreach (var t in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 136.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendFixNulls,The length of the statement  "            //        sb.AppendLine("if not exists(select * from sys.objects where type_desc = 'DEFAULT_CONSTRAINT' and name = '" + nHydrate.Core.SQLGeneration.SQLEmit.GetDefaultValueConstraintName(c) + "')"); " is 197.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendFixNulls,The length of the statement  "            //        sb.AppendLine("ALTER TABLE [" + t.GetSQLSchema() + "].[" + t.DatabaseName + "] ADD CONSTRAINT [" + nHydrate.Core.SQLGeneration.SQLEmit.GetDefaultValueConstraintName(c) + "] DEFAULT (" + dv + ") FOR [" + c.DatabaseName + "]"); " is 235.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendFixNulls,The length of the statement  "            //    sb.AppendLine("if exists(select s.name as schemaname' o.name as tablename' c.name as columnname' c.is_nullable from sys.objects o inner join sys.columns c on o.object_id = c.object_id inner join sys.schemas s on o.schema_id = s.schema_id where s.name = '" + t.GetSQLSchema() + "' AND o.name = '" + t.DatabaseName + "' and c.name = '" + c.DatabaseName + "' and o.type = 'U' and c.is_nullable = " + (c.AllowNull ? "0" : "1") + ")"); " is 436.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendFixNulls,The length of the statement  "            //    sb.Append("ALTER TABLE [" + t.GetSQLSchema() + "].[" + t.DatabaseName + "] ALTER COLUMN [" + c.DatabaseName + "] " + c.DatabaseType + " " + (c.AllowNull ? "NULL" : "NOT NULL")); " is 183.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendFixNulls,The length of the statement  "            //      sb.Append("CREATE INDEX [" + indexName + "] ON [" + t.GetSQLSchema() + "].[" + t.DatabaseName + "] ([" + c.DatabaseName + "])"); " is 136.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendVersionTable,The length of the statement  "            sb.AppendLine("ALTER TABLE [__nhydrateschema] WITH NOCHECK ADD CONSTRAINT [__pk__nhydrateschema] PRIMARY KEY CLUSTERED ([ModelKey])"); " is 134.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendVersionTable,The length of the statement  "                sb.AppendLine("GRANT DELETE' INSERT' REFERENCES' SELECT' UPDATE ON [__nhydrateschema] TO [" + _model.Database.GrantExecUser + "]"); " is 131.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendVersionTable,The length of the statement  "                sb.AppendLine("GRANT DELETE' INSERT' REFERENCES' SELECT' UPDATE ON [__nhydrateobjects] TO [" + _model.Database.GrantExecUser + "]"); " is 132.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaTemplate.cs,AppendVersionTable,The length of the statement  "            //  sb.AppendLine("GRANT DELETE' INSERT' REFERENCES' SELECT' UPDATE ON [__nhydratemetadata] TO [" + _model.Database.GrantExecUser + "]"); " is 137.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseUpgrade,UpgradeVersionedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseUpgrade\UpgradeVersionedScriptGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' false); " is 154.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLSelectStoredProcedure,SQLSelectStoredProcedureGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLSelectStoredProcedure\SQLSelectStoredProcedureGenerator.cs,Generate,The length of the statement  "					var eventArgs = new ProjectItemGeneratedEventArgs("StoredProcedures.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 159.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLSelectStoredProcedure,SQLSelectStoredProcedureGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLSelectStoredProcedure\SQLSelectStoredProcedureGenerator.cs,Generate,The length of the statement  "						var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLSelectStoredProcedure,SQLSelectStoredProcedureTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLSelectStoredProcedure\SQLSelectStoredProcedureTemplate.cs,AppendFullTemplate,The length of the statement  "                sb.AppendLine("--This SQL is generated for the model defined stored procedure [" + _currentStoredProcedure.DatabaseName + "]"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLSelectStoredProcedure,SQLSelectStoredProcedureTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLSelectStoredProcedure\SQLSelectStoredProcedureTemplate.cs,AppendFullTemplate,The length of the statement  "                    _grantSB.AppendFormat("GRANT EXECUTE ON [" + _currentStoredProcedure.GetSQLSchema() + "].[{0}] TO [{1}]"' _currentStoredProcedure.GetDatabaseObjectName()' _model.Database.GrantExecUser).AppendLine(); " is 199.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("if exists(select * from sys.objects where name = '" + storedProcName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 146.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__auditType IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__action = @__auditType)) AND"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__startDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate >= @__startDate)) AND"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__endDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate < @__endDate)) AND"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	ORDER BY [__AUDIT__" + _currentTable.DatabaseName + "].__insertdate DESC' [__AUDIT__" + _currentTable.DatabaseName + "].__rowid DESC"); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	(SELECT  ROW_NUMBER() OVER (ORDER BY [__AUDIT__" + _currentTable.DatabaseName + "].__insertdate DESC' [__AUDIT__" + _currentTable.DatabaseName + "].__rowid DESC)"); " is 180.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("		((@__auditType IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__action = @__auditType)) AND"); " is 123.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__startDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate >= @__startDate)) AND"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__endDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate < @__endDate)) AND"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("		((@__auditType IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__action = @__auditType)) AND"); " is 123.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__startDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate >= @__startDate)) AND"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "				sb.AppendLine("	((@__endDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate < @__endDate)) AND"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQuerySpecificRecords,The length of the statement  "					sb.AppendFormat("GRANT EXECUTE ON [" + _currentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' storedProcName' _model.Database.GrantExecUser).AppendLine(); " is 150.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("if exists(select * from sys.objects where name = '" + storedProcName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 146.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("	((@__auditType IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__action = @__auditType)) AND"); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("	((@__startDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate >= @__startDate)) AND"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("	ORDER BY [__AUDIT__" + _currentTable.DatabaseName + "].__insertdate DESC' [__AUDIT__" + _currentTable.DatabaseName + "].__rowid DESC"); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("	(SELECT  ROW_NUMBER() OVER (ORDER BY [__AUDIT__" + _currentTable.DatabaseName + "].__insertdate DESC' [__AUDIT__" + _currentTable.DatabaseName + "].__rowid DESC)"); " is 180.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("		((@__auditType IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__action = @__auditType)) AND"); " is 123.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("	((@__startDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate >= @__startDate)) AND"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("		((@__auditType IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__action = @__auditType)) AND"); " is 123.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "				sb.AppendLine("	((@__startDate IS NULL) OR ([__AUDIT__" + _currentTable.DatabaseName + "].__insertdate >= @__startDate)) AND"); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectAuditBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectAuditBusinessObjectTemplate.cs,AppendQueryAllRecords,The length of the statement  "					sb.AppendFormat("GRANT EXECUTE ON [" + _currentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' storedProcName' _model.Database.GrantExecUser).AppendLine(); " is 150.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLDeleteBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLDeleteBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "				var storedProcedureName = _model.GetStoredProcedurePrefix() + "_" + _currentTable.PascalName + "_" + moduleSuffix + "Delete"; " is 125.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLDeleteBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLDeleteBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "				sb.AppendLine("if exists(select * from sys.objects where name = '" + storedProcedureName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLDeleteBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLDeleteBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "					sb.AppendFormat("GRANT EXECUTE ON [" + _currentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' storedProcedureName' _model.Database.GrantExecUser).AppendLine(); " is 155.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLDeleteBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLDeleteBusinessObjectTemplate.cs,BuildParameterList,The length of the statement  "							output.Append("\t@" + relation.RoleName + parentTable.DatabaseName + "_" + parentColumn.ToDatabaseCodeIdentifier() + " "); " is 122.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + GetStoredProcedureName(table' model' moduleSuffix) + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 182.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "                sb.AppendLine("	drop procedure [" + table.GetSQLSchema() + "].[" + GetStoredProcedureName(table' model' moduleSuffix) + "]"); " is 125.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "                sb.AppendLine("CREATE PROCEDURE [" + table.GetSQLSchema() + "].[" + GetStoredProcedureName(table' model' moduleSuffix) + "]"); " is 126.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,AppendFullTemplate,The length of the statement  "                    sb.AppendFormat("GRANT EXECUTE ON [" + table.GetSQLSchema() + "].[{0}] TO [{1}]"' GetStoredProcedureName(table' model' moduleSuffix)' model.Database.GrantExecUser).AppendLine(); " is 177.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,BuildParameterList,The length of the statement  "            var columnList = table.GetColumnsFullHierarchy().Where(x => x.Generated && !x.ComputedColumn && !x.IsReadOnly).OrderBy(x => x.Name).AsEnumerable(); " is 147.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLInsertBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLInsertBusinessObjectTemplate.cs,BuildParameterList,The length of the statement  "                if (string.IsNullOrEmpty(defaultValue) && column.PrimaryKey && (column.ParentTable.GetBasePKColumn(column).Identity == IdentityTypeConstants.Database)) " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,BuildParameterList,The length of the statement  "			var parameterList = _currentRule.GetParameters().Where(x => x.Generated && x.SortOrder > 0).OrderBy(x => x.SortOrder).ToList(); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,BuildParameterList,The length of the statement  "			parameterList.AddRange(_currentRule.GetParameters().Where(x => x.Generated && x.SortOrder == 0).OrderBy(x => x.Name).ToList()); " is 127.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendNormalTemplate,The length of the statement  "				var SPName = string.Format("" + _model.GetStoredProcedurePrefix() + "_{0}CustomSelectBy{1}"' this.ParentTable.PascalName' _currentRule.PascalName); " is 147.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendNormalTemplate,The length of the statement  "				sb.AppendLine("if exists(select * from sys.objects where name = '" + SPName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendNormalTemplate,The length of the statement  "					sb.AppendFormat("GRANT EXECUTE ON [" + this.ParentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' SPName' _model.Database.GrantExecUser).AppendLine(); " is 145.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendANDTemplate,The length of the statement  "				var SPName = string.Format("" + _model.GetStoredProcedurePrefix() + "_{0}CustomSelectBy{1}And"' this.ParentTable.PascalName' _currentRule.PascalName); " is 150.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendANDTemplate,The length of the statement  "				sb.AppendLine("if exists(select * from sys.objects where name = '" + SPName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendANDTemplate,The length of the statement  "					sb.AppendFormat("	@{0} " + parameter.DatabaseType + (ModelHelper.VariableLengthType(parameter.DataType) ? "(" + parameter.Length + ")" : "") + " = null' " + System.Environment.NewLine' parameter.DatabaseName); " is 209.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendANDTemplate,The length of the statement  "					tempSB.AppendFormat("(@{1} is null or [{0}].[{1}] LIKE @{1})"' this.ParentTable.DatabaseName' column.ToDatabaseCodeIdentifier()); " is 129.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendANDTemplate,The length of the statement  "					sb.AppendFormat("GRANT EXECUTE ON [" + this.ParentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' SPName' _model.Database.GrantExecUser).AppendLine(); " is 145.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendORTemplate,The length of the statement  "				var SPName = string.Format("" + _model.GetStoredProcedurePrefix() + "_{0}CustomSelectBy{1}Or"' this.ParentTable.PascalName' _currentRule.PascalName); " is 149.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendORTemplate,The length of the statement  "				sb.AppendLine("if exists(select * from sys.objects where name = '" + SPName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 138.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendORTemplate,The length of the statement  "					sb.AppendFormat("	@{0} " + parameter.DatabaseType + (ModelHelper.VariableLengthType(parameter.DataType) ? "(" + parameter.Length + ")" : "") + " = null' " + System.Environment.NewLine' parameter.DatabaseName); " is 209.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,AppendORTemplate,The length of the statement  "					sb.AppendFormat("GRANT EXECUTE ON [" + this.ParentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' SPName' _model.Database.GrantExecUser).AppendLine(); " is 145.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectViewTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectViewTemplate.cs,AppendFullTemplate,The length of the statement  "					_grantSB.AppendFormat("GRANT ALL ON [" + _currentView.GetSQLSchema() + "].[{0}] TO [{1}]"' _currentView.DatabaseName' _model.Database.GrantExecUser).AppendLine(); " is 162.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllTableGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllTableGenerator.cs,Generate,The length of the statement  "                        foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 140.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllTableGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllTableGenerator.cs,Generate,The length of the statement  "                    var eventArgs = new ProjectItemGeneratedEventArgs("StoredProcedures.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 159.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllTableGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllTableGenerator.cs,Generate,The length of the statement  "                        foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 140.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllTableGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllTableGenerator.cs,Generate,The length of the statement  "                            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 156.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllViewGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllViewGenerator.cs,Generate,The length of the statement  "                    var eventArgs = new ProjectItemGeneratedEventArgs("Views.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 148.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllViewGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllViewGenerator.cs,Generate,The length of the statement  "                        var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true); " is 149.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateBusinessObjectTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + StoredProcedureName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateBusinessObjectTemplate.cs,GenerateContent,The length of the statement  "                    sb.AppendFormat("GRANT EXECUTE ON [" + _currentTable.GetSQLSchema() + "].[{0}] TO [{1}]"' StoredProcedureName' _model.Database.GrantExecUser); " is 142.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateBusinessObjectTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateBusinessObjectTemplate.cs,BuildParameterList,The length of the statement  "            var columnList = _currentTable.GetColumnsFullHierarchy(true).Where(x => x.Generated && !x.ComputedColumn && !x.IsReadOnly).OrderBy(x => x.Name).ToList(); " is 153.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateComponentTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateComponentTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("if exists(select * from sys.objects where name = '" + StoredProcedureName + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 151.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateComponentTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateComponentTemplate.cs,GenerateContent,The length of the statement  "                    sb.AppendFormat("GRANT EXECUTE ON [" + _currentComponent.GetSQLSchema() + "].[{0}] TO [{1}]"' StoredProcedureName' _model.Database.GrantExecUser); " is 146.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateComponentTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateComponentTemplate.cs,BuildUpdateWhereStatement,The length of the statement  "                var IsTimeStamp = (table == _currentComponent.Parent.GetAbsoluteBaseTable()) && _currentComponent.Parent.AllowTimestamp; " is 120.
Long Statement,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLUpdateComponentTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLUpdateComponentTemplate.cs,BuildUpdateWhereStatement,The length of the statement  "                    output.AppendFormat("[" + _currentComponent.Parent.GetAbsoluteBaseTable().GetSQLSchema() + "].[" + _currentComponent.Parent.GetAbsoluteBaseTable().DatabaseName + "].[{0}] = @Original_{0}"' _model.Database.TimestampColumnName); " is 226.
Complex Conditional,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggerTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerTemplate.cs,AppendAll,The conditional expression  "column.Generated && !(column.DataType == System.Data.SqlDbType.Text || column.DataType == System.Data.SqlDbType.NText || column.DataType == System.Data.SqlDbType.Image)"  is complex.
Complex Conditional,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,GetValidSearchColumns,The conditional expression  "!(column.DataType == System.Data.SqlDbType.Binary ||                          column.DataType == System.Data.SqlDbType.Image ||                          column.DataType == System.Data.SqlDbType.NText ||                          column.DataType == System.Data.SqlDbType.Text ||                          column.DataType == System.Data.SqlDbType.Timestamp ||                          column.DataType == System.Data.SqlDbType.Udt ||                          column.DataType == System.Data.SqlDbType.VarBinary ||                          column.DataType == System.Data.SqlDbType.Variant ||                      column.DataType == System.Data.SqlDbType.Money)"  is complex.
Complex Conditional,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The conditional expression  "(index < columnList.Count - 1) || (component.Parent.AllowCreateAudit) || (component.Parent.AllowModifiedAudit) || (component.Parent.AllowTimestamp)"  is complex.
Complex Conditional,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,Globals,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Globals.cs,BuildSelectList,The conditional expression  "(index < columnList.Count - 1) || (table.AllowCreateAudit) || (table.AllowModifiedAudit) || (table.AllowTimestamp)"  is complex.
Complex Conditional,nHydrate.Generator.SQLInstaller.ProjectItemGenerators,SQLGeneratedPagedSelcetBodyHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLGeneratedBodyHelper.cs,GetBody,The conditional expression  "!(column.DataType == System.Data.SqlDbType.Binary ||                              column.DataType == System.Data.SqlDbType.Image ||                              column.DataType == System.Data.SqlDbType.NText ||                              column.DataType == System.Data.SqlDbType.Text ||                              column.DataType == System.Data.SqlDbType.Timestamp ||                              column.DataType == System.Data.SqlDbType.Udt ||                              column.DataType == System.Data.SqlDbType.VarBinary ||                              column.DataType == System.Data.SqlDbType.Variant ||                          column.DataType == System.Data.SqlDbType.Money)"  is complex.
Complex Conditional,nHydrate.Generator.SQLInstaller,SqlHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\SQLHelper.cs,GetModelDifferenceSql,The conditional expression  "!string.IsNullOrEmpty(newC.Default) && ((oldC.Default != newC.Default) || (oldC.DataType != newC.DataType) || (oldC.DatabaseName != newC.DatabaseName))"  is complex.
Complex Conditional,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLSelectRetrieveRuleTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLSelectRetrieveRuleTemplate.cs,GetValidSearchColumns,The conditional expression  "!(column.DataType == System.Data.SqlDbType.Binary ||  						column.DataType == System.Data.SqlDbType.Image ||  						column.DataType == System.Data.SqlDbType.NText ||  						column.DataType == System.Data.SqlDbType.Text ||  						column.DataType == System.Data.SqlDbType.Timestamp ||  						column.DataType == System.Data.SqlDbType.Udt ||  						column.DataType == System.Data.SqlDbType.VarBinary ||  						column.DataType == System.Data.SqlDbType.Variant ||  					column.DataType == System.Data.SqlDbType.Money)"  is complex.
Empty Catch Block,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GetResource,The method has an empty catch block.
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseCreateRelations,CreateRelationsGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseCreateRelations\CreateRelationsGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.AuditTriggers,CreateAuditTriggersGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\AuditTriggers\CreateAuditTriggerGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.UnversionedUpgrade,UpgradeUnversionedScriptGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\UnversionedUpgrade\UpgradeUnversionedScriptGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.ScriptOrder,ScriptOrderGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\ScriptOrder\ScriptOrderGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.Functions,FunctionsGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\Functions\FunctionsGenerator.cs,Generate,The following statement contains a magic number: try  			{  				var template = new FunctionsTemplate(_model);  				var fullFileName = template.FileName;  				var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);  				eventArgs.Properties.Add("BuildAction"' 3);  				OnProjectItemGenerated(this' eventArgs);  				var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);  				OnGenerationComplete(this' gcEventArgs);  			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseCreateData,CreateDataGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseCreateData\CreateDataGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateIdentifyDatabaseFormResx,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateInstallSettingsUIResx,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateAzureCopyControlResx,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateSqlErrorResx,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,GenerateHistoryFormResx,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,ReplaceNHydrateSpecifics,The following statement contains a magic number: var revision = int.Parse(versionNumbers[2]);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseEmbeddedClasses,DatabaseEmbeddedClassGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseEmbeddedClasses\DatabaseEmbeddedClassGenerator.cs,ReplaceNHydrateSpecifics,The following statement contains a magic number: var build = int.Parse(versionNumbers[3]);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseSchema,CreateSchemaGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseSchema\CreateSchemaGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseUpgrade,UpgradeVersionedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseUpgrade\UpgradeVersionedScriptGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseUpgrade,UpgradeVersionedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseUpgrade\UpgradeVersionedScriptTemplate.cs,GenerateContent,The following statement contains a magic number: try              {                  sb = new StringBuilder();                  sb.AppendLine("--Generated Upgrade For Version " + _model.Version + "." + _model.GeneratedVersion);                  sb.AppendLine("--Generated on " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));                  sb.AppendLine();                    //***********************************************************                  //ATTEMPT TO GENERATE AN UPGRADE SCRIPT FROM PREVIOUS VERSION                  //***********************************************************                    #region Generate Upgrade Script                    //Find the previous model file if one exists                  var fileName = this._model.GeneratorProject.FileName;                  var prevFileName = fileName + ".sql.lastgen";                  var fiPrev = new System.IO.FileInfo(prevFileName);                  var fi = new System.IO.FileInfo(fileName);                    if (fiPrev.Exists)                  {                      var newFileName = string.Format(fileName' "sql.");                        //Rename old style to new style                      if (File.Exists(prevFileName) && !File.Exists(fileName))                      {                          File.Move(fileName' newFileName);                      }                        fileName = newFileName;                        fi = new System.IO.FileInfo(fileName);                      if (fi.Exists)                      {                          var newFile = fileName + ".converting";                          if (File.Exists(newFile))                          {                              File.Delete(newFile);                              System.Threading.Thread.Sleep(250);                          }                          File.Copy(fileName' newFile);                          var fileText = File.ReadAllText(newFile);                          fileText = fileText.Replace("Widgetsphere.Generator."' "nHydrate.Generator.");                          fileText = fileText.Replace("WidgetsphereGeneratorProject"' "nHydrateGeneratorProject");                          File.WriteAllText(newFile' fileText);                          System.Threading.Thread.Sleep(500);                            //Load the previous model                          var generator = nHydrate.Generator.Common.GeneratorFramework.GeneratorHelper.OpenModel(prevFileName);                          var oldRoot = generator.Model as ModelRoot;                          sb.Append(SqlHelper.GetModelDifferenceSql(oldRoot' _model));                            if (File.Exists(newFile))                              File.Delete(newFile);                            //Copy the current LASTGEN file to BACKUP                          //fi.CopyTo(fileName + ".bak"' true);                      }                  }                    //Just in case it was there' but there is already a new file name' just remove it                  if (File.Exists(prevFileName))                      File.Delete(prevFileName);                    //Save this version on top of the old version                  var currentFile = new System.IO.FileInfo(this._model.GeneratorProject.FileName);                  currentFile.CopyTo(prevFileName' true);                    #endregion                }              catch (Exception ex)              {                  throw;              }
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.DatabaseUpgrade,UpgradeVersionedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\DatabaseUpgrade\UpgradeVersionedScriptTemplate.cs,GenerateContent,The following statement contains a magic number: try              {                  sb = new StringBuilder();                  sb.AppendLine("--Generated Upgrade For Version " + _model.Version + "." + _model.GeneratedVersion);                  sb.AppendLine("--Generated on " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));                  sb.AppendLine();                    //***********************************************************                  //ATTEMPT TO GENERATE AN UPGRADE SCRIPT FROM PREVIOUS VERSION                  //***********************************************************                    #region Generate Upgrade Script                    //Find the previous model file if one exists                  var fileName = this._model.GeneratorProject.FileName;                  var prevFileName = fileName + ".sql.lastgen";                  var fiPrev = new System.IO.FileInfo(prevFileName);                  var fi = new System.IO.FileInfo(fileName);                    if (fiPrev.Exists)                  {                      var newFileName = string.Format(fileName' "sql.");                        //Rename old style to new style                      if (File.Exists(prevFileName) && !File.Exists(fileName))                      {                          File.Move(fileName' newFileName);                      }                        fileName = newFileName;                        fi = new System.IO.FileInfo(fileName);                      if (fi.Exists)                      {                          var newFile = fileName + ".converting";                          if (File.Exists(newFile))                          {                              File.Delete(newFile);                              System.Threading.Thread.Sleep(250);                          }                          File.Copy(fileName' newFile);                          var fileText = File.ReadAllText(newFile);                          fileText = fileText.Replace("Widgetsphere.Generator."' "nHydrate.Generator.");                          fileText = fileText.Replace("WidgetsphereGeneratorProject"' "nHydrateGeneratorProject");                          File.WriteAllText(newFile' fileText);                          System.Threading.Thread.Sleep(500);                            //Load the previous model                          var generator = nHydrate.Generator.Common.GeneratorFramework.GeneratorHelper.OpenModel(prevFileName);                          var oldRoot = generator.Model as ModelRoot;                          sb.Append(SqlHelper.GetModelDifferenceSql(oldRoot' _model));                            if (File.Exists(newFile))                              File.Delete(newFile);                            //Copy the current LASTGEN file to BACKUP                          //fi.CopyTo(fileName + ".bak"' true);                      }                  }                    //Just in case it was there' but there is already a new file name' just remove it                  if (File.Exists(prevFileName))                      File.Delete(prevFileName);                    //Save this version on top of the old version                  var currentFile = new System.IO.FileInfo(this._model.GeneratorProject.FileName);                  currentFile.CopyTo(prevFileName' true);                    #endregion                }              catch (Exception ex)              {                  throw;              }
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLSelectStoredProcedure,SQLSelectStoredProcedureGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLSelectStoredProcedure\SQLSelectStoredProcedureGenerator.cs,Generate,The following statement contains a magic number: try  			{  				if (this.UseSingleFile)  				{  					//Process all views  					var sb = new StringBuilder();  					sb.AppendLine("--DO NOT MODIFY THIS FILE. IT IS ALWAYS OVERWRITTEN ON GENERATION.");  					sb.AppendLine();    					var grantSB = new StringBuilder();  					foreach (var storedProcedure in _model.Database.CustomStoredProcedures.Where(x => x.Generated).OrderBy(x => x.Name))  					{  						var template = new SQLSelectStoredProcedureTemplate(_model' storedProcedure' true' grantSB);  						sb.Append(template.FileContent);  					}    					//Add Grants  					sb.Append(grantSB.ToString());    					var eventArgs = new ProjectItemGeneratedEventArgs("StoredProcedures.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);  					eventArgs.Properties.Add("BuildAction"' 3);  					OnProjectItemGenerated(this' eventArgs);  				}  				else  				{  					foreach (var storedProcedure in _model.Database.CustomStoredProcedures.Where(x => x.Generated).OrderBy(x => x.Name))  					{  						var grantSB = new StringBuilder();  						var template = new SQLSelectStoredProcedureTemplate(_model' storedProcedure' false' grantSB);    						//Add grants  						var sb = new StringBuilder();  						sb.Append(template.FileContent);  						sb.Append(grantSB.ToString());    						var fullFileName = template.FileName;  						var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);  						eventArgs.Properties.Add("BuildAction"' 3);  						OnProjectItemGenerated(this' eventArgs);  					}  				}    				var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);  				OnGenerationComplete(this' gcEventArgs);  			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLSelectStoredProcedure,SQLSelectStoredProcedureGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLSelectStoredProcedure\SQLSelectStoredProcedureGenerator.cs,Generate,The following statement contains a magic number: try  			{  				if (this.UseSingleFile)  				{  					//Process all views  					var sb = new StringBuilder();  					sb.AppendLine("--DO NOT MODIFY THIS FILE. IT IS ALWAYS OVERWRITTEN ON GENERATION.");  					sb.AppendLine();    					var grantSB = new StringBuilder();  					foreach (var storedProcedure in _model.Database.CustomStoredProcedures.Where(x => x.Generated).OrderBy(x => x.Name))  					{  						var template = new SQLSelectStoredProcedureTemplate(_model' storedProcedure' true' grantSB);  						sb.Append(template.FileContent);  					}    					//Add Grants  					sb.Append(grantSB.ToString());    					var eventArgs = new ProjectItemGeneratedEventArgs("StoredProcedures.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);  					eventArgs.Properties.Add("BuildAction"' 3);  					OnProjectItemGenerated(this' eventArgs);  				}  				else  				{  					foreach (var storedProcedure in _model.Database.CustomStoredProcedures.Where(x => x.Generated).OrderBy(x => x.Name))  					{  						var grantSB = new StringBuilder();  						var template = new SQLSelectStoredProcedureTemplate(_model' storedProcedure' false' grantSB);    						//Add grants  						var sb = new StringBuilder();  						sb.Append(template.FileContent);  						sb.Append(grantSB.ToString());    						var fullFileName = template.FileName;  						var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);  						eventArgs.Properties.Add("BuildAction"' 3);  						OnProjectItemGenerated(this' eventArgs);  					}  				}    				var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);  				OnGenerationComplete(this' gcEventArgs);  			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllTableGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllTableGenerator.cs,Generate,The following statement contains a magic number: try              {                  if (this.UseSingleFile)                  {                      //Process all views                      var sb = new StringBuilder();                      sb.AppendLine("--DO NOT MODIFY THIS FILE. IT IS ALWAYS OVERWRITTEN ON GENERATION.");                      sb.AppendLine();                        if (_model.EmitSafetyScripts)                      {                          sb.AppendLine("--##SECTION BEGIN [INTERNAL STORED PROCS]");                          sb.AppendLine();                            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name))                          {                              var template = new SQLStoredProcedureTableAllTemplate(_model' table' true);                              sb.Append(template.FileContent);                          }                            sb.AppendLine("--##SECTION END [INTERNAL STORED PROCS]");                          sb.AppendLine();                      }                        var eventArgs = new ProjectItemGeneratedEventArgs("StoredProcedures.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                      eventArgs.Properties.Add("BuildAction"' 3);                      OnProjectItemGenerated(this' eventArgs);                  }                  else                  {                      if (_model.EmitSafetyScripts)                      {                          //Process all tables                          foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name))                          {                              var template = new SQLStoredProcedureTableAllTemplate(_model' table' false);                              var fullFileName = template.FileName;                              var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                              eventArgs.Properties.Add("BuildAction"' 3);                              OnProjectItemGenerated(this' eventArgs);                          }                      }                  }                    var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);                  OnGenerationComplete(this' gcEventArgs);              }              catch (Exception ex)              {                  throw;              }
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllTableGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllTableGenerator.cs,Generate,The following statement contains a magic number: try              {                  if (this.UseSingleFile)                  {                      //Process all views                      var sb = new StringBuilder();                      sb.AppendLine("--DO NOT MODIFY THIS FILE. IT IS ALWAYS OVERWRITTEN ON GENERATION.");                      sb.AppendLine();                        if (_model.EmitSafetyScripts)                      {                          sb.AppendLine("--##SECTION BEGIN [INTERNAL STORED PROCS]");                          sb.AppendLine();                            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name))                          {                              var template = new SQLStoredProcedureTableAllTemplate(_model' table' true);                              sb.Append(template.FileContent);                          }                            sb.AppendLine("--##SECTION END [INTERNAL STORED PROCS]");                          sb.AppendLine();                      }                        var eventArgs = new ProjectItemGeneratedEventArgs("StoredProcedures.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                      eventArgs.Properties.Add("BuildAction"' 3);                      OnProjectItemGenerated(this' eventArgs);                  }                  else                  {                      if (_model.EmitSafetyScripts)                      {                          //Process all tables                          foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name))                          {                              var template = new SQLStoredProcedureTableAllTemplate(_model' table' false);                              var fullFileName = template.FileName;                              var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                              eventArgs.Properties.Add("BuildAction"' 3);                              OnProjectItemGenerated(this' eventArgs);                          }                      }                  }                    var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);                  OnGenerationComplete(this' gcEventArgs);              }              catch (Exception ex)              {                  throw;              }
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllViewGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllViewGenerator.cs,Generate,The following statement contains a magic number: try              {                  if (this.UseSingleFile)                  {                      //Process all views                      var sb = new StringBuilder();                      sb.AppendLine("--DO NOT MODIFY THIS FILE. IT IS ALWAYS OVERWRITTEN ON GENERATION.");                      sb.AppendLine();                        var grantSB = new StringBuilder();                      foreach (var view in _model.Database.CustomViews.Where(x => x.Generated).OrderBy(x => x.Name))                      {                          var template = new SQLStoredProcedureViewAllTemplate(_model' view' true' grantSB);                          sb.Append(template.FileContent);                      }                        //Tenant Views                      foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.IsTenant).OrderBy(x => x.Name))                      {                          var template = new SQLSelectTenantViewTemplate(_model' table' grantSB);                          sb.Append(template.FileContent);                      }                        //Add grants                      sb.Append(grantSB.ToString());                        var eventArgs = new ProjectItemGeneratedEventArgs("Views.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                      eventArgs.Properties.Add("BuildAction"' 3);                      OnProjectItemGenerated(this' eventArgs);                  }                  else                  {                      //Process all views                      foreach (var view in _model.Database.CustomViews.Where(x => x.Generated).OrderBy(x => x.Name))                      {                          var grantSB = new StringBuilder();                          var template = new SQLStoredProcedureViewAllTemplate(_model' view' false' grantSB);                          var fullFileName = template.FileName;                            //Add grants                          var sb = new StringBuilder();                          sb.Append(template.FileContent);                          sb.Append(grantSB.ToString());                            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                          eventArgs.Properties.Add("BuildAction"' 3);                          OnProjectItemGenerated(this' eventArgs);                      }                  }                    var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);                  OnGenerationComplete(this' gcEventArgs);              }              catch (Exception ex)              {                  throw;              }
Magic Number,nHydrate.Generator.SQLInstaller.ProjectItemGenerators.SQLStoredProcedureAll,SQLStoredProcedureAllViewGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.SQLInstaller\ProjectItemGenerators\SQLStoredProcedureAll\SQLStoredProcedureAllViewGenerator.cs,Generate,The following statement contains a magic number: try              {                  if (this.UseSingleFile)                  {                      //Process all views                      var sb = new StringBuilder();                      sb.AppendLine("--DO NOT MODIFY THIS FILE. IT IS ALWAYS OVERWRITTEN ON GENERATION.");                      sb.AppendLine();                        var grantSB = new StringBuilder();                      foreach (var view in _model.Database.CustomViews.Where(x => x.Generated).OrderBy(x => x.Name))                      {                          var template = new SQLStoredProcedureViewAllTemplate(_model' view' true' grantSB);                          sb.Append(template.FileContent);                      }                        //Tenant Views                      foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.IsTenant).OrderBy(x => x.Name))                      {                          var template = new SQLSelectTenantViewTemplate(_model' table' grantSB);                          sb.Append(template.FileContent);                      }                        //Add grants                      sb.Append(grantSB.ToString());                        var eventArgs = new ProjectItemGeneratedEventArgs("Views.sql"' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                      eventArgs.Properties.Add("BuildAction"' 3);                      OnProjectItemGenerated(this' eventArgs);                  }                  else                  {                      //Process all views                      foreach (var view in _model.Database.CustomViews.Where(x => x.Generated).OrderBy(x => x.Name))                      {                          var grantSB = new StringBuilder();                          var template = new SQLStoredProcedureViewAllTemplate(_model' view' false' grantSB);                          var fullFileName = template.FileName;                            //Add grants                          var sb = new StringBuilder();                          sb.Append(template.FileContent);                          sb.Append(grantSB.ToString());                            var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' sb.ToString()' ProjectName' this.ParentItemPath' ProjectItemType.Folder' this' true);                          eventArgs.Properties.Add("BuildAction"' 3);                          OnProjectItemGenerated(this' eventArgs);                      }                  }                    var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);                  OnGenerationComplete(this' gcEventArgs);              }              catch (Exception ex)              {                  throw;              }
