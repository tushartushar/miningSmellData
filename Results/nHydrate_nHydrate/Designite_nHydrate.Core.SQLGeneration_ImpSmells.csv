Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.Core.SQLGeneration,HtmlEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\HTMLEmit.cs,HTMLSQLKeywords,The method has 284 lines of code.
Long Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The method has 125 lines of code.
Long Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The method has 273 lines of code.
Long Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,The method has 100 lines of code.
Long Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,The method has 106 lines of code.
Complex Method,nHydrate.Core.SQLGeneration,HtmlEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\HTMLEmit.cs,FormatHTMLSQL,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameTable,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,Cyclomatic complexity of the method is 18
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,Cyclomatic complexity of the method is 31
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,Cyclomatic complexity of the method is 20
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlUpdateStaticData,Cyclomatic complexity of the method is 17
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateFunction,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateTableSecurityFunction,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefinition,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetDetailSQLValue,Cyclomatic complexity of the method is 19
Long Parameter List,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefinition,The method has 5 parameters. Parameters: column' allowDefault' allowIdentity' forceNull' allowFormula
Long Parameter List,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefinition,The method has 6 parameters. Parameters: column' allowDefault' allowIdentity' forceNull' allowFormula' allowComputed
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateTable,The length of the statement  "                sb.AppendLine($"if not exists(select * from sys.tables t inner join sys.schemas s on t.schema_id = s.schema_id where t.name = '{tableName}' and s.name = '{table.GetSQLSchema()}')"); " is 181.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateTable,The length of the statement  "                    sb.AppendLine("\t" + "CONSTRAINT [" + indexName + "] PRIMARY KEY " + (tableIndex.Clustered ? "CLUSTERED" : "NONCLUSTERED")); " is 124.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateAuditTable,The length of the statement  "            var dateTimeString = (model.SQLServerType == nHydrate.Generator.Common.GeneratorFramework.SQLServerTypeConstants.SQL2005) ? "[DateTime]" : "[DateTime2]"; " is 153.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateAuditTable,The length of the statement  "            sb.AppendLine("\t[__insertdate] " + dateTimeString + " CONSTRAINT [DF__" + table.DatabaseName + "__AUDIT] DEFAULT " + model.GetSQLDefaultDate() + " NOT NULL'"); " is 160.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateAuditTable,The length of the statement  "                if (!(column.DataType == System.Data.SqlDbType.Text || column.DataType == System.Data.SqlDbType.NText || column.DataType == System.Data.SqlDbType.Image)) " is 153.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateAuditTable,The length of the statement  "                    sb.Append("\t" + AppendColumnDefinition(column' allowDefault: false' allowIdentity: false' forceNull: true' allowFormula: false' allowComputed: false)); " is 152.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameTable,The length of the statement  "                sb.AppendLine("exec sp_rename @objname='" + newTable.GetSQLSchema() + "." + oldIndexName + "'' @newname='" + newIndexName + "'' @objtype='OBJECT';"); " is 149.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameTable,The length of the statement  "                    sb.AppendLine("exec sp_rename @objname='" + newTable.GetSQLSchema() + "." + newTable.DatabaseName + "." + oldIndexName + "'' @newname='" + newIndexName + "'' @objtype='INDEX';"); " is 178.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameTable,The length of the statement  "                    sb.AppendLine("exec sp_rename @objname='" + newTable.GetSQLSchema() + "." + newTable.DatabaseName + "." + oldIndexName + "'' @newname='" + newIndexName + "'' @objtype='INDEX';"); " is 178.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlAddColumn,The length of the statement  "            sb.AppendLine($"if exists(select * from sys.objects where name = '{tName}' and type = 'U') AND not exists (select * from sys.columns c inner join sys.objects o on c.object_id = o.object_id where c.name = '{column.DatabaseName}' and o.name = '{tName}')"); " is 254.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlAddColumn,The length of the statement  "            sb.AppendLine($"ALTER TABLE [{column.ParentTable.GetSQLSchema()}].[{tName}] ADD " + AppendColumnDefinition(column' allowDefault: true' allowIdentity: true)); " is 157.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlAddColumn,The length of the statement  "            //  sb.AppendLine("--THIS IS A NON-NULLABLE FIELD. AT THIS POINT IT IS NULLABLE. ADD DATA TO THIS FIELD BEFORE IT IS SET TO NON-NULLABLE."); " is 140.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlAddColumn,The length of the statement  "            //  sb.AppendLine("ALTER TABLE [" + column.ParentTable.GetSQLSchema() + "].[" + tName + "] ADD " + AppendColumnDefinition(column' allowDefault: true' allowIdentity: true)); " is 172.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,CreateFkName,The length of the statement  "            var indexName = "FK_" + relation.DatabaseRoleName + "_" + Globals.GetTableDatabaseName(model' childTable) + "_" + Globals.GetTableDatabaseName(model' parentTable); " is 163.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlCreateColumnDefault,The length of the statement  "                sb.AppendLine($"if exists (select * from sys.tables t inner join sys.schemas s on t.schema_id = s.schema_id where t.name = '{column.ParentTable.DatabaseName}' and s.name = '{column.ParentTable.GetSQLSchema()}') and not exists(select constid FROM sysconstraints where id=OBJECT_ID('{column.ParentTable.DatabaseName}') AND COL_NAME(id'colid)='{column.DatabaseName}' AND OBJECTPROPERTY(constid' 'IsDefaultCnst') = 1)"); " is 416.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlCreateColumnDefault,The length of the statement  "                sb.AppendLine($"ALTER TABLE [{column.ParentTable.GetSQLSchema()}].[{column.ParentTable.DatabaseName}] ADD CONSTRAINT [{defaultName}] DEFAULT {column.GetSQLDefault()} FOR [{column.DatabaseName}]"); " is 196.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumnDefault,The length of the statement  "            sb.AppendLine("SET @defaultName = (SELECT d.name FROM sys.columns c inner join sys.default_constraints d on c.column_id = d.parent_column_id and c.object_id = d.parent_object_id inner join sys.objects o on d.parent_object_id = o.object_id where o.name = '" + column.ParentTable.DatabaseName + "' and c.name = '" + column.DatabaseName + "')"); " is 342.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumnDefault,The length of the statement  "            sb.AppendLine($"exec('ALTER TABLE [{column.ParentTable.GetSQLSchema()}].[{column.ParentTable.DatabaseName}] DROP CONSTRAINT ' + @defaultName)"); " is 144.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The length of the statement  "                        sb.AppendLine("if exists(select * from sys.objects where name = '" + objectName + "' and type = 'F' and type_desc = 'FOREIGN_KEY_CONSTRAINT')"); " is 144.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + childT.GetSQLSchema() + "].[" + childT.DatabaseName + "] DROP CONSTRAINT [" + objectName + "]"); " is 128.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The length of the statement  "                            sb.AppendLine("if exists(select * from sys.objects where name = '" + objectName + "' and type = 'F' and type_desc = 'FOREIGN_KEY_CONSTRAINT')"); " is 144.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The length of the statement  "                            sb.AppendLine("ALTER TABLE [" + childT.GetSQLSchema() + "].[" + childT.DatabaseName + "] DROP CONSTRAINT [" + objectName + "]"); " is 128.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The length of the statement  "                sb.AppendLine($"if exists(select * from sys.objects where name = '{objectName}' and type = 'PK' and type_desc = 'PRIMARY_KEY_CONSTRAINT')"); " is 140.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropColumn,The length of the statement  "            sb.AppendLine("if exists (select * from sys.columns c inner join sys.objects o on c.object_id = o.object_id where c.name = '" + column.DatabaseName + "' and o.name = '" + t.DatabaseName + "')"); " is 194.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameColumn,The length of the statement  "            sb.AppendLine($"if exists (select * from sys.columns c inner join sys.tables t on c.object_id = t.object_id inner join sys.schemas s on t.schema_id = s.schema_id where c.name = '{oldColumn}' and t.name = '{table.DatabaseName}' and s.name = '{table.GetSQLSchema()}')"); " is 268.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameColumn,The length of the statement  "                sb.AppendLine($"\t\tAND not exists (select * from sys.columns c inner join sys.tables t on c.object_id = t.object_id inner join sys.schemas s on t.schema_id = s.schema_id where c.name = '{newColumn}' and t.name = '{table.DatabaseName}' and s.name = '{table.GetSQLSchema()}')"); " is 277.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRenameColumn,The length of the statement  "            sb.AppendLine($"EXEC sp_rename @objname = '[{table.GetSQLSchema()}].[{table.DatabaseName}].[{oldColumn}]'' @newname = '{newColumn}'' @objtype = 'COLUMN';"); " is 156.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                            sb.AppendLine("exec sp_rename @objname='" + newTable.GetSQLSchema() + "." + newTable.DatabaseName + "." + oldIndexName + "'' @newname='" + newIndexName + "'' @objtype='INDEX';"); " is 178.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                            sb.AppendLine($"if exists(select * from sys.objects where name = '{objectName}' and type = 'F' and type_desc = 'FOREIGN_KEY_CONSTRAINT')"); " is 139.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "            if (oldColumn.DataType != newColumn.DataType || oldColumn.Length != newColumn.Length || oldColumn.AllowNull != newColumn.AllowNull) " is 131.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                sb.AppendLine("if exists (select * from sys.columns c inner join sys.objects o on c.object_id = o.object_id where c.name = '" + newColumn.DatabaseName + "' and o.name = '" + newTable.DatabaseName + "')"); " is 204.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                    sb.AppendLine("if exists (select * from sys.columns c inner join sys.objects o on c.object_id = o.object_id where c.name = '" + newColumn.DatabaseName + "' and o.name = '" + newTable.DatabaseName + "')"); " is 204.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                    sb.AppendLine("ALTER TABLE [" + newTable.GetSQLSchema() + "].[" + newTable.DatabaseName + "] DROP COLUMN " + AppendColumnDefinition(newColumn' allowDefault: false' allowIdentity: false)); " is 187.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                            sb.AppendLine("--WARNING: IF YOU NEED TO SET NULL COLUMN VALUES TO A NON-NULL VALUE' DO SO HERE BEFORE MAKING THE COLUMN NON-NULLABLE"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                            sb.AppendLine("--WARNING: IF YOU NEED TO SET NULL COLUMN VALUES TO THE DEFAULT VALUE' UNCOMMENT THE FOLLOWING LINE TO DO SO HERE BEFORE MAKING THE COLUMN NON-NULLABLE"); " is 169.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                            sb.AppendLine("--UPDATE [" + newTable.GetSQLSchema() + "].[" + newTable.DatabaseName + "] SET [" + newColumn.DatabaseName + "] = " + dValue + " WHERE [" + newColumn.DatabaseName + "] IS NULL"); " is 193.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                    sb.AppendLine("ALTER TABLE [" + newTable.GetSQLSchema() + "].[" + newTable.DatabaseName + "] ALTER COLUMN " + AppendColumnDefinition(newColumn' allowDefault: false' allowIdentity: false)); " is 188.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                    sb.AppendLine("ALTER TABLE [" + newTable.DatabaseName + "] ALTER COLUMN [" + newColumn.DatabaseName + "] " + newColumn.DatabaseType + " NOT NULL"); " is 147.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                //sb.AppendLine("--ADD SCRIPT HERE TO CONVERT [" + newTable.DatabaseName + "].[" + newColumn.DatabaseName + "] TO IDENTITY COLUMN");                //Check PK " is 158.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlModifyColumn,The length of the statement  "                sb.AppendLine("FROM sys.objects AS c INNER JOIN sys.tables AS t ON c.parent_object_id = t.[object_id] INNER JOIN sys.schemas AS s "); " is 133.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,The length of the statement  "                        sb.AppendLine("if exists(select * from sys.objects where name = '" + objectNameFK + "' and type = 'F' and type_desc = 'FOREIGN_KEY_CONSTRAINT')"); " is 146.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + childT.GetSQLSchema() + "].[" + childT.DatabaseName + "] DROP CONSTRAINT [" + objectNameFK + "]"); " is 130.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,The length of the statement  "                        sb.AppendLine("if exists(select * from sys.objects where name = '" + objectNameFK + "' and type = 'F' and type_desc = 'FOREIGN_KEY_CONSTRAINT')"); " is 146.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,The length of the statement  "                        sb.AppendLine("ALTER TABLE [" + childT.GetSQLSchema() + "].[" + childT.DatabaseName + "] DROP CONSTRAINT [" + objectNameFK + "]"); " is 130.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropTable,The length of the statement  "            sb.AppendLine($"if exists(select * from sys.objects where name = '{objectNamePK}' and type = 'PK' and type_desc = 'PRIMARY_KEY_CONSTRAINT')"); " is 142.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,The length of the statement  "                        sb.AppendLine("SET identity_insert [" + table.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' table) + "] on"); " is 124.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,The length of the statement  "                        sb.Append("if not exists(select * from [" + table.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' table) + "] where "); " is 132.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,The length of the statement  "                        sb.AppendLine("INSERT INTO [" + table.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' table) + "] (" + fieldListString + ") values (" + valueListString + ");"); " is 173.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,The length of the statement  "                        //sb.AppendLine("UPDATE [" + table.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' table) + "] SET " + updateSetString + " WHERE " + pkWhereSb.ToString() + ";"); " is 174.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlInsertStaticData,The length of the statement  "                        sb.AppendLine("SET identity_insert [" + table.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' table) + "] off"); " is 125.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlUpdateStaticData,The length of the statement  "                        sb.AppendLine("--UPDATE [" + newT.GetSQLSchema() + "].[" + Globals.GetTableDatabaseName(model' newT) + "] SET " + updateSetString + " WHERE " + pkWhereSb.ToString() + ";"); " is 172.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefaultCreateSQL,The length of the statement  "                        sb.AppendLine($"if exists(select * from sys.objects where name = '{defaultName}' and type = 'D' and type_desc = 'DEFAULT_CONSTRAINT')"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefaultCreateSQL,The length of the statement  "                        sb.AppendLine($"ALTER TABLE [{table.GetSQLSchema()}].[{table.DatabaseName}] DROP CONSTRAINT [{GetDefaultValueConstraintName(column)}]"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefaultCreateSQL,The length of the statement  "                    sb.AppendLine($"if not exists(select * from sys.objects where name = '{defaultName}' and type = 'D' and type_desc = 'DEFAULT_CONSTRAINT')"); " is 140.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefaultCreateSQL,The length of the statement  "                    sb.AppendLine($"ALTER TABLE [{table.GetSQLSchema()}].[{table.DatabaseName}] ADD {defaultClause} FOR [{column.DatabaseName}]"); " is 126.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefaultRemoveSql,The length of the statement  "            sb.AppendLine($"--set {variableName} = (select top 1 c.name from sys.all_columns a inner join sys.tables b on a.object_id = b.object_id inner join sys.default_constraints c on a.default_object_id = c.object_id where b.name='{table.DatabaseName}' and a.name = '{column.DatabaseName}')"); " is 286.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefaultRemoveSql,The length of the statement  "            sb.AppendLine($"--if ({variableName} IS NOT NULL) exec ('ALTER TABLE [{table.GetSQLSchema()}].[{table.DatabaseName}] DROP CONSTRAINT [' + {variableName} + ']')"); " is 162.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlCreateView,The length of the statement  "            sb.AppendLine("if exists(select * from sys.objects where name = '" + dbObject.DatabaseName + "' and type = 'V' and type_desc = 'VIEW')"); " is 137.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateStoredProc,The length of the statement  "            sb.AppendLine("if exists(select * from sys.objects where name = '" + name + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateFunctionSPWrapper,The length of the statement  "            sb.AppendLine("if exists(select * from sys.objects where name = '" + name + "' and type = 'P' and type_desc = 'SQL_STORED_PROCEDURE')"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateFunction,The length of the statement  "            sb.AppendLine("if exists(select * from sys.objects where name = '" + dbObject.PascalName + "' and type in('FN'''IF'''TF'))"); " is 125.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetIndexName,The length of the statement  "            var indexName = prefix + "_" + table.Name.Replace("-"' "") + "_" + string.Join("_"' columnList.Select(x => x.Value.Name)); " is 122.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateIndex,The length of the statement  "                        checkSqlList.Add($"exists (select * from sys.columns c inner join sys.tables t on c.object_id = t.object_id inner join sys.schemas s on t.schema_id = s.schema_id where c.name = '{c.Value.DatabaseName}' and t.name = '{table.DatabaseName}' and s.name = '{table.GetSQLSchema()}')"); " is 279.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateIndex,The length of the statement  "                    sb.AppendLine($"--INDEX FOR TABLE [{table.DatabaseName}] COLUMNS:" + string.Join("' "' columnList.Select(x => "[" + x.Value.DatabaseName + "]"))); " is 146.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateIndex,The length of the statement  "                    sb.AppendLine($"if not exists(select * from sys.indexes where name = '{indexName}') and " + string.Join(" and "' checkSqlList)); " is 128.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateIndex,The length of the statement  "                    sb.Append($"CREATE " + (index.IsUnique ? "UNIQUE " : string.Empty) + (index.Clustered ? "CLUSTERED " : "NONCLUSTERED ") + "INDEX [" + indexName + "] ON [" + table.GetSQLSchema() + "].[" + tableName + "] ("); " is 207.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSQLCreateIndex,The length of the statement  "                    sb.Append(string.Join("'"' columnList.Select(x => "[" + x.Value.DatabaseName + "] " + (x.Key.Ascending ? "ASC" : "DESC")))); " is 124.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlCreateTenantColumn,The length of the statement  "            sb.AppendLine($"if exists(select * from sys.objects where name = '{table.DatabaseName}' and type = 'U') AND not exists (select * from sys.columns c inner join sys.objects o on c.object_id = o.object_id where c.name = '{model.TenantColumnName}' and o.name = '{table.DatabaseName}')"); " is 283.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlCreateTenantColumn,The length of the statement  "            sb.AppendLine($"ALTER TABLE [{table.GetSQLSchema()}].[{table.DatabaseName}] ADD [{model.TenantColumnName}] [nvarchar] (128) NOT NULL CONSTRAINT [DF__{table.DatabaseName.ToUpper()}_{model.TenantColumnName.ToUpper()}] DEFAULT (suser_sname())"); " is 242.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropPK,The length of the statement  "            sb.AppendLine($"if exists(select * from sys.objects where name = '{pkName}' and type = 'PK' and type_desc = 'PRIMARY_KEY_CONSTRAINT')"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlDropAuditPK,The length of the statement  "            sb.AppendLine($"if exists(select * from sys.objects where name = '{pkName}' and type = 'PK' and type_desc = 'PRIMARY_KEY_CONSTRAINT')"); " is 136.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlRemoveFK,The length of the statement  "            sb.AppendLine($"ALTER TABLE [{targetTable.GetSQLSchema()}].[{targetTable.DatabaseName}] DROP CONSTRAINT [{indexName}]"); " is 120.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlAddFK,The length of the statement  "                sb.AppendLine("--FOREIGN KEY RELATIONSHIP [" + parentTable.DatabaseName + "] -> [" + childTable.DatabaseName + "] (" + GetFieldNames(relation) + ")"); " is 150.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefinition,The length of the statement  "            return AppendColumnDefinition(column' allowDefault: allowDefault' allowIdentity: allowIdentity' forceNull: false' allowFormula: true' allowComputed: true); " is 155.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefinition,The length of the statement  "            return AppendColumnDefinition(column' allowDefault: allowDefault' allowIdentity: allowIdentity' forceNull: forceNull' allowFormula: true' allowComputed: true); " is 159.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendColumnDefinition,The length of the statement  "            return AppendColumnDefinition(column' allowDefault: allowDefault' allowIdentity: allowIdentity' forceNull: forceNull' allowFormula: true' allowComputed: true); " is 159.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendTenantField,The length of the statement  "                sb.Append("\t[" + model.TenantColumnName + "] [nvarchar] (128) NOT NULL CONSTRAINT [DF__" + table.DatabaseName.ToUpper() + "_" + model.TenantColumnName.ToUpper() + "] DEFAULT (suser_sname())"); " is 193.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendCreateAudit,The length of the statement  "                var dateTimeString = (model.SQLServerType == nHydrate.Generator.Common.GeneratorFramework.SQLServerTypeConstants.SQL2005) ? "[DateTime]" : "[DateTime2]"; " is 153.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendCreateAudit,The length of the statement  "                sb.Append("\t[" + model.Database.CreatedDateColumnName + "] " + dateTimeString + " CONSTRAINT [" + defaultName + "] DEFAULT " + model.GetSQLDefaultDate() + " NULL"); " is 165.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendModifiedAudit,The length of the statement  "                var dateTimeString = (model.SQLServerType == nHydrate.Generator.Common.GeneratorFramework.SQLServerTypeConstants.SQL2005) ? "[DateTime]" : "[DateTime2]"; " is 153.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,AppendModifiedAudit,The length of the statement  "                sb.Append("\t[" + model.Database.ModifiedDateColumnName + "] " + dateTimeString + " CONSTRAINT [" + defaultName + "] DEFAULT " + model.GetSQLDefaultDate() + " NULL"); " is 166.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,BuildStoredProcParameterList,The length of the statement  "            var parameterList = storedProcedure.GetParameters().Where(x => x.Generated && x.SortOrder > 0).OrderBy(x => x.SortOrder).ToList(); " is 130.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,BuildStoredProcParameterList,The length of the statement  "            parameterList.AddRange(storedProcedure.GetParameters().Where(x => x.Generated && x.SortOrder == 0).OrderBy(x => x.Name).ToList()); " is 130.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,BuildStoredProcParameterList,The length of the statement  "                    (parameter.GetPredefinedSize() == -1 ? "(" + parameter.GetLengthString() + ") " : string.Empty) + (parameter.IsOutputParameter ? " out " : " = " + defaultValue)); " is 162.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,BuildFunctionParameterList,The length of the statement  "                output.Append("\t@" + ValidationHelper.MakeDatabaseScriptIdentifier(parameter.DatabaseName) + " " + parameter.DatabaseType.ToLower()); " is 134.
Long Statement,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,BuildFunctionParameterList,The length of the statement  "                output.Append((parameter.GetPredefinedSize() == -1 ? "(" + parameter.GetLengthString() + ")" : string.Empty) + (parameter.IsOutputParameter ? " out " : " = " + defaultValue)); " is 175.
Complex Conditional,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetSqlAddFK,The conditional expression  "childTable.Generated && parentTable.Generated &&                  (parentTable.TypedTable != TypedTableConstants.EnumOnly) &&                  (childTable.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetDetailSQLValue,The conditional expression  "defaultValue.ToLower() == "getdate" || defaultValue.ToLower() == "getdate()" ||                      defaultValue.ToLower() == "sysdatetime" || defaultValue.ToLower() == "sysdatetime()""  is complex.
Complex Conditional,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetDetailSQLValue,The conditional expression  "defaultValue.ToLower() == "newid" ||                       defaultValue.ToLower() == "newid()" ||                      defaultValue.ToLower() == "newsequentialid" ||                      defaultValue.ToLower() == "newsequentialid()" ||                      column.Identity == IdentityTypeConstants.Database"  is complex.
Complex Conditional,nHydrate.Core.SQLGeneration,SQLEmit,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.Core.SQLGeneration\SQLEmit.cs,GetDefaultValue,The conditional expression  "StringHelper.Match(modelDefault' "getdate") || StringHelper.Match(modelDefault' "getdate()") ||                  StringHelper.Match(modelDefault' "sysdatetime") || StringHelper.Match(modelDefault' "sysdatetime()")"  is complex.
