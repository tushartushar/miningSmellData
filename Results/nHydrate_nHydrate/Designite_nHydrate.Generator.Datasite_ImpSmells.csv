Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The method has 172 lines of code.
Long Method,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The method has 238 lines of code.
Complex Method,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,Cyclomatic complexity of the method is 24
Long Statement,nHydrate.Generator.Datasite,DatasiteFunctionItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteFunctionItemTemplate.cs,GenerateContent,The length of the statement  "                var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-function-template.htm")); " is 122.
Long Statement,nHydrate.Generator.Datasite,DatasiteFunctionItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteFunctionItemTemplate.cs,GenerateContent,The length of the statement  "                    tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">"); " is 127.
Long Statement,nHydrate.Generator.Datasite,DatasiteFunctionListTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteFunctionListTemplate.cs,GenerateContent,The length of the statement  "				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-function-overview.htm")); " is 122.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "			//var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 155.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs("fk.gif"' string.Empty' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true) " is 140.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs("key.gif"' string.Empty' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true) " is 141.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs("yes.gif"' string.Empty' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true) " is 141.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs("no.gif"' string.Empty' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true) " is 140.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs("constraint.gif"' string.Empty' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true) " is 148.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs("index.gif"' string.Empty' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true) " is 143.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 158.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template1.FileName' template1.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 160.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				eventArgs = new ProjectItemGeneratedEventArgs(template2.FileName' template2.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 156.
Long Statement,nHydrate.Generator.Datasite,DatasiteGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteGenerator.cs,Generate,The length of the statement  "				eventArgs = new ProjectItemGeneratedEventArgs(template3.FileName' template3.FileContent' ProjectName' PARENT_ITEM_NAME' ProjectItemType.Folder' this' true); " is 156.
Long Statement,nHydrate.Generator.Datasite,DatasiteOverviewTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteOverviewTemplate.cs,GenerateContent,The length of the statement  "					schemas.AddRange(_model.Database.CustomStoredProcedures.Where(x => x.Generated).Select(x => x.GetSQLSchema()).ToList()); " is 120.
Long Statement,nHydrate.Generator.Datasite,DatasiteStoredProcItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteStoredProcItemTemplate.cs,GenerateContent,The length of the statement  "				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-storedproc-template.htm")); " is 124.
Long Statement,nHydrate.Generator.Datasite,DatasiteStoredProcItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteStoredProcItemTemplate.cs,GenerateContent,The length of the statement  "					tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">"); " is 127.
Long Statement,nHydrate.Generator.Datasite,DatasiteStoredProcListTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteStoredProcListTemplate.cs,GenerateContent,The length of the statement  "				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-storedproc-overview.htm")); " is 124.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The length of the statement  "				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList(); " is 195.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The length of the statement  "						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">"); " is 127.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The length of the statement  "						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>"); " is 139.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The length of the statement  "						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>"); " is 141.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GetCode,The length of the statement  "			sb.AppendLine("	var " + _item.CamelName + "Item = context." + _item.PascalName + ".FirstOrDefault(z => z." + pkName + " == key);"); " is 131.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GetCode,The length of the statement  "				sb.AppendLine("	var item = context." + _item.PascalName + ".Include(z => z." + relation.ChildTable.PascalName + "List).FirstOrDefault();"); " is 139.
Long Statement,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GetCode,The length of the statement  "				sb.AppendLine("	Console.WriteLine(this." + relation.ParentTable.PascalName + "." + relation.ParentTable.PrimaryKeyColumns.First().PascalName + ");"); " is 149.
Long Statement,nHydrate.Generator.Datasite,DatasiteViewItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteViewItemTemplate.cs,GenerateContent,The length of the statement  "					tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">"); " is 127.
Empty Catch Block,nHydrate.Generator.Datasite,Helpers,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Helpers.cs,GetFileContent,The method has an empty catch block.
Empty Catch Block,nHydrate.Generator.Datasite,Helpers,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Helpers.cs,GetFileBinContent,The method has an empty catch block.
Magic Number,nHydrate.Generator.Datasite,DatasiteFunctionItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteFunctionItemTemplate.cs,GenerateContent,The following statement contains a magic number: try              {                  var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-function-template.htm"));                    fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);                  fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);                    var description = _item.Description;                  if (string.IsNullOrEmpty(description))                      description = "The " + _item.Name + " item";                  fileContent = fileContent.Replace("$objectdescription$"' description);                    fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");                  fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);                    #region Parameter Table                  var tsb = new StringBuilder();                  tsb.AppendLine("<table class=\"subItem-item\">");                  tsb.AppendLine("<thead>");                  tsb.AppendLine("<tr>");                  tsb.AppendLine("<th>Name</th>");                  tsb.AppendLine("<th>Data type</th>");                  tsb.AppendLine("<th>Length</th>");                  tsb.AppendLine("<th>Allow Null</th>");                  tsb.AppendLine("<th>Comment</th>");                  tsb.AppendLine("</tr>");                  tsb.AppendLine("</thead>");                    tsb.AppendLine("<tbody>");                  foreach (var subItem in _item.GeneratedParameters)                  {                      tsb.AppendLine("<tr>");                      tsb.AppendLine("<td>" + subItem.Name + "</td>");                      tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");                      tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");                      tsb.AppendLine("<td>" + subItem.AllowNull.ToString() + "</td>");                      tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");                      tsb.AppendLine("</tr>");                  }                  tsb.AppendLine("</tbody>");                    tsb.AppendLine("</table>");                  fileContent = fileContent.Replace("$parametertable$"' tsb.ToString());                  #endregion                    #region Column Table                  tsb = new StringBuilder();                  tsb.AppendLine("<table class=\"subItem-item\">");                  tsb.AppendLine("<thead>");                  tsb.AppendLine("<tr>");                  tsb.AppendLine("<th>Name</th>");                  tsb.AppendLine("<th>Data type</th>");                  tsb.AppendLine("<th>Length</th>");                  tsb.AppendLine("<th>Allow Null</th>");                  tsb.AppendLine("<th>Comment</th>");                  tsb.AppendLine("</tr>");                  tsb.AppendLine("</thead>");                    tsb.AppendLine("<tbody>");                  foreach (var subItem in _item.GeneratedColumns)                  {                      tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");                        tsb.AppendLine("<td>" + subItem.Name + "</td>");                      tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");                      tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");                      tsb.AppendLine("<td>" + subItem.AllowNull.ToString() + "</td>");                      tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");                      tsb.AppendLine("</tr>");                  }                  tsb.AppendLine("</tbody>");                    tsb.AppendLine("</table>");                  fileContent = fileContent.Replace("$columntable$"' tsb.ToString());                  #endregion                    #region SQL                  var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateFunction(_item' true' _model.EFVersion);                  var lines = sql.Replace("\r"' string.Empty).Split('\n');                  var newCode = new StringBuilder();                  sql = string.Join("\r\n"' lines.Where(x => !x.StartsWith("--MODELID")).ToList());                  sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);                  fileContent = fileContent.Replace("$sql$"' sql);                  #endregion                      sb.Append(fileContent);              }              catch (Exception ex)              {                  throw;              }
Magic Number,nHydrate.Generator.Datasite,DatasiteStoredProcItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteStoredProcItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-storedproc-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				#region Parameter Table  				var tsb = new StringBuilder();  				tsb.AppendLine("<table class=\"subItem-item\">");  				tsb.AppendLine("<thead>");  				tsb.AppendLine("<tr>");  				tsb.AppendLine("<th>Name</th>");  				tsb.AppendLine("<th>Data type</th>");  				tsb.AppendLine("<th>Length</th>");  				tsb.AppendLine("<th>Allow Null</th>");  				tsb.AppendLine("<th>Comment</th>");  				tsb.AppendLine("</tr>");  				tsb.AppendLine("</thead>");    				foreach (var subItem in _item.GeneratedParameters)  				{  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<td>" + subItem.Name + "</td>");  					tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  					tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  					tsb.AppendLine("<td>" + subItem.AllowNull.ToString() + "</td>");  					tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  					tsb.AppendLine("</tr>");  				}    				tsb.AppendLine("</table>");  				fileContent = fileContent.Replace("$parametertable$"' tsb.ToString());  				#endregion    				#region Column Table  				tsb = new StringBuilder();  				tsb.AppendLine("<table class=\"subItem-item\">");  				tsb.AppendLine("<thead>");  				tsb.AppendLine("<tr>");  				tsb.AppendLine("<th>Name</th>");  				tsb.AppendLine("<th>Data type</th>");  				tsb.AppendLine("<th>Length</th>");  				tsb.AppendLine("<th>Allow Null</th>");  				tsb.AppendLine("<th>Comment</th>");  				tsb.AppendLine("</tr>");  				tsb.AppendLine("</thead>");    				tsb.AppendLine("<tbody>");  				foreach (var subItem in _item.GeneratedColumns)  				{  					tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    					tsb.AppendLine("<td>" + subItem.Name + "</td>");  					tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  					tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  					tsb.AppendLine("<td>" + subItem.AllowNull.ToString() + "</td>");  					tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  					tsb.AppendLine("</tr>");  				}  				tsb.AppendLine("</tbody>");    				tsb.AppendLine("</table>");  				fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateStoredProc(_item' true);  				var lines = sql.Replace("\r"' string.Empty).Split('\n');  				var newCode = new StringBuilder();  				sql = string.Join("\r\n"' lines.Where(x => !x.StartsWith("--MODELID")).ToList());  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);  			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-table-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				var parentTables = _item.GetParentTables().Where(x => x.Generated).ToList();  				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList();  				var indexedFields = _item.GeneratedColumns.Where(x => indexFieldIDs.Contains(new Guid(x.Key))).ToList();    				#region Column Table  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>"); //Icons  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Length</th>");  					tsb.AppendLine("<th>Default</th>");  					tsb.AppendLine("<th>Allow Null</th>");  					tsb.AppendLine("<th>PK</th>");  					tsb.AppendLine("<th>FK</th>");  					tsb.AppendLine("<th>UQ</th>");  					tsb.AppendLine("<th>Computed</th>");  					tsb.AppendLine("<th>Comment</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in _item.GeneratedColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						  						//Insert icons  						tsb.Append("<td>");  						if (subItem.PrimaryKey)  							tsb.Append("<img src=\"key.gif\" title=\"Primary Key\" class=\"icon-prefix\" />");  						if(parentTables.SelectMany(x=>x.GeneratedColumns).Count(x=>x.Key == subItem.Key) >0)  							tsb.Append("<img src=\"fk.gif\" title=\"Foreign Key\" class=\"icon-prefix\" />");  						if (!string.IsNullOrEmpty(subItem.GetSQLDefault()))  							tsb.Append("<img src=\"constraint.gif\" title=\"Constraint\" class=\"icon-prefix\" />");  						if (indexedFields.Contains(subItem))  							tsb.Append("<img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" />");  						tsb.AppendLine("</td>");    						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  						tsb.AppendLine("<td>" + subItem.GetSQLDefault() + "</td>");  						tsb.AppendLine("<td>" + (subItem.AllowNull ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td>" + (subItem.IsUnique ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td>" + (subItem.ComputedColumn ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				}  				#endregion    				#region Indexes Table  				var indexList = _item.TableIndexList.ToList();  				if (indexList.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Columns</th>");  					tsb.AppendLine("<th>Summary</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var index in indexList)  					{  						var summary = string.Empty;  						if (_item.PrimaryKeyColumns.Count == 0 && index.PrimaryKey) summary += "clustered' ";  						if (index.IsUnique) summary += "unique' ";  						if (index.PrimaryKey) summary += "primary key' ";  						if (index.Clustered) summary += "clustered' ";  						if (summary.EndsWith("' ")) summary = summary.Substring(0' summary.Length - 2);    						var indexName = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexName(_item' index);  						var columnList = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexColumns(_item' index);    						tsb.AppendLine("<tr class=\"" + (((indexList.IndexOf(index) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td><img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" /></td>");  						tsb.AppendLine("<td>" + indexName + "</td>");  						tsb.AppendLine("<td>" + string.Join("' "' columnList.Values.Select(x => x.DatabaseName)) + "</td>");  						tsb.AppendLine("<td>" + summary + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$indextable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$indextable$"' "N/A");  				}  				#endregion    				#region Defaults Table  				var defaultColumns = _item.GeneratedColumns.Where(x => !string.IsNullOrEmpty(x.Default)).ToList();  				if (defaultColumns.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Column</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Value</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in defaultColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((defaultColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td>" + "DF__" + _item.DatabaseName.ToUpper() + "_" + subItem.DatabaseName.ToUpper() + "</td>");  						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.Default + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$defaulttable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$defaulttable$"' "N/A");  				}  				#endregion    				#region References    				var referenceTables = _item.GetRelations().ToList();  				if (referenceTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referenceTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>");  						  						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$references$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$references$"' "N/A");  				}    				#endregion    				#region Referenced By    				var referencedByTables = _item.GetRelationsWhereChild().ToList();  				if (referencedByTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referencedByTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>");    						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$referencedby$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$referencedby$"' "N/A");  				}  				  				#endregion    				#region Code  				var code = GetCode();  				code = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLCode(code);  				fileContent = fileContent.Replace("$code$"' code);  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateTable(_model' _item);  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-table-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				var parentTables = _item.GetParentTables().Where(x => x.Generated).ToList();  				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList();  				var indexedFields = _item.GeneratedColumns.Where(x => indexFieldIDs.Contains(new Guid(x.Key))).ToList();    				#region Column Table  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>"); //Icons  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Length</th>");  					tsb.AppendLine("<th>Default</th>");  					tsb.AppendLine("<th>Allow Null</th>");  					tsb.AppendLine("<th>PK</th>");  					tsb.AppendLine("<th>FK</th>");  					tsb.AppendLine("<th>UQ</th>");  					tsb.AppendLine("<th>Computed</th>");  					tsb.AppendLine("<th>Comment</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in _item.GeneratedColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						  						//Insert icons  						tsb.Append("<td>");  						if (subItem.PrimaryKey)  							tsb.Append("<img src=\"key.gif\" title=\"Primary Key\" class=\"icon-prefix\" />");  						if(parentTables.SelectMany(x=>x.GeneratedColumns).Count(x=>x.Key == subItem.Key) >0)  							tsb.Append("<img src=\"fk.gif\" title=\"Foreign Key\" class=\"icon-prefix\" />");  						if (!string.IsNullOrEmpty(subItem.GetSQLDefault()))  							tsb.Append("<img src=\"constraint.gif\" title=\"Constraint\" class=\"icon-prefix\" />");  						if (indexedFields.Contains(subItem))  							tsb.Append("<img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" />");  						tsb.AppendLine("</td>");    						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  						tsb.AppendLine("<td>" + subItem.GetSQLDefault() + "</td>");  						tsb.AppendLine("<td>" + (subItem.AllowNull ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td>" + (subItem.IsUnique ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td>" + (subItem.ComputedColumn ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				}  				#endregion    				#region Indexes Table  				var indexList = _item.TableIndexList.ToList();  				if (indexList.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Columns</th>");  					tsb.AppendLine("<th>Summary</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var index in indexList)  					{  						var summary = string.Empty;  						if (_item.PrimaryKeyColumns.Count == 0 && index.PrimaryKey) summary += "clustered' ";  						if (index.IsUnique) summary += "unique' ";  						if (index.PrimaryKey) summary += "primary key' ";  						if (index.Clustered) summary += "clustered' ";  						if (summary.EndsWith("' ")) summary = summary.Substring(0' summary.Length - 2);    						var indexName = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexName(_item' index);  						var columnList = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexColumns(_item' index);    						tsb.AppendLine("<tr class=\"" + (((indexList.IndexOf(index) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td><img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" /></td>");  						tsb.AppendLine("<td>" + indexName + "</td>");  						tsb.AppendLine("<td>" + string.Join("' "' columnList.Values.Select(x => x.DatabaseName)) + "</td>");  						tsb.AppendLine("<td>" + summary + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$indextable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$indextable$"' "N/A");  				}  				#endregion    				#region Defaults Table  				var defaultColumns = _item.GeneratedColumns.Where(x => !string.IsNullOrEmpty(x.Default)).ToList();  				if (defaultColumns.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Column</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Value</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in defaultColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((defaultColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td>" + "DF__" + _item.DatabaseName.ToUpper() + "_" + subItem.DatabaseName.ToUpper() + "</td>");  						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.Default + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$defaulttable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$defaulttable$"' "N/A");  				}  				#endregion    				#region References    				var referenceTables = _item.GetRelations().ToList();  				if (referenceTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referenceTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>");  						  						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$references$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$references$"' "N/A");  				}    				#endregion    				#region Referenced By    				var referencedByTables = _item.GetRelationsWhereChild().ToList();  				if (referencedByTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referencedByTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>");    						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$referencedby$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$referencedby$"' "N/A");  				}  				  				#endregion    				#region Code  				var code = GetCode();  				code = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLCode(code);  				fileContent = fileContent.Replace("$code$"' code);  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateTable(_model' _item);  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-table-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				var parentTables = _item.GetParentTables().Where(x => x.Generated).ToList();  				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList();  				var indexedFields = _item.GeneratedColumns.Where(x => indexFieldIDs.Contains(new Guid(x.Key))).ToList();    				#region Column Table  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>"); //Icons  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Length</th>");  					tsb.AppendLine("<th>Default</th>");  					tsb.AppendLine("<th>Allow Null</th>");  					tsb.AppendLine("<th>PK</th>");  					tsb.AppendLine("<th>FK</th>");  					tsb.AppendLine("<th>UQ</th>");  					tsb.AppendLine("<th>Computed</th>");  					tsb.AppendLine("<th>Comment</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in _item.GeneratedColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						  						//Insert icons  						tsb.Append("<td>");  						if (subItem.PrimaryKey)  							tsb.Append("<img src=\"key.gif\" title=\"Primary Key\" class=\"icon-prefix\" />");  						if(parentTables.SelectMany(x=>x.GeneratedColumns).Count(x=>x.Key == subItem.Key) >0)  							tsb.Append("<img src=\"fk.gif\" title=\"Foreign Key\" class=\"icon-prefix\" />");  						if (!string.IsNullOrEmpty(subItem.GetSQLDefault()))  							tsb.Append("<img src=\"constraint.gif\" title=\"Constraint\" class=\"icon-prefix\" />");  						if (indexedFields.Contains(subItem))  							tsb.Append("<img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" />");  						tsb.AppendLine("</td>");    						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  						tsb.AppendLine("<td>" + subItem.GetSQLDefault() + "</td>");  						tsb.AppendLine("<td>" + (subItem.AllowNull ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td>" + (subItem.IsUnique ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td>" + (subItem.ComputedColumn ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				}  				#endregion    				#region Indexes Table  				var indexList = _item.TableIndexList.ToList();  				if (indexList.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Columns</th>");  					tsb.AppendLine("<th>Summary</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var index in indexList)  					{  						var summary = string.Empty;  						if (_item.PrimaryKeyColumns.Count == 0 && index.PrimaryKey) summary += "clustered' ";  						if (index.IsUnique) summary += "unique' ";  						if (index.PrimaryKey) summary += "primary key' ";  						if (index.Clustered) summary += "clustered' ";  						if (summary.EndsWith("' ")) summary = summary.Substring(0' summary.Length - 2);    						var indexName = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexName(_item' index);  						var columnList = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexColumns(_item' index);    						tsb.AppendLine("<tr class=\"" + (((indexList.IndexOf(index) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td><img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" /></td>");  						tsb.AppendLine("<td>" + indexName + "</td>");  						tsb.AppendLine("<td>" + string.Join("' "' columnList.Values.Select(x => x.DatabaseName)) + "</td>");  						tsb.AppendLine("<td>" + summary + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$indextable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$indextable$"' "N/A");  				}  				#endregion    				#region Defaults Table  				var defaultColumns = _item.GeneratedColumns.Where(x => !string.IsNullOrEmpty(x.Default)).ToList();  				if (defaultColumns.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Column</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Value</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in defaultColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((defaultColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td>" + "DF__" + _item.DatabaseName.ToUpper() + "_" + subItem.DatabaseName.ToUpper() + "</td>");  						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.Default + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$defaulttable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$defaulttable$"' "N/A");  				}  				#endregion    				#region References    				var referenceTables = _item.GetRelations().ToList();  				if (referenceTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referenceTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>");  						  						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$references$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$references$"' "N/A");  				}    				#endregion    				#region Referenced By    				var referencedByTables = _item.GetRelationsWhereChild().ToList();  				if (referencedByTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referencedByTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>");    						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$referencedby$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$referencedby$"' "N/A");  				}  				  				#endregion    				#region Code  				var code = GetCode();  				code = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLCode(code);  				fileContent = fileContent.Replace("$code$"' code);  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateTable(_model' _item);  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-table-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				var parentTables = _item.GetParentTables().Where(x => x.Generated).ToList();  				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList();  				var indexedFields = _item.GeneratedColumns.Where(x => indexFieldIDs.Contains(new Guid(x.Key))).ToList();    				#region Column Table  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>"); //Icons  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Length</th>");  					tsb.AppendLine("<th>Default</th>");  					tsb.AppendLine("<th>Allow Null</th>");  					tsb.AppendLine("<th>PK</th>");  					tsb.AppendLine("<th>FK</th>");  					tsb.AppendLine("<th>UQ</th>");  					tsb.AppendLine("<th>Computed</th>");  					tsb.AppendLine("<th>Comment</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in _item.GeneratedColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						  						//Insert icons  						tsb.Append("<td>");  						if (subItem.PrimaryKey)  							tsb.Append("<img src=\"key.gif\" title=\"Primary Key\" class=\"icon-prefix\" />");  						if(parentTables.SelectMany(x=>x.GeneratedColumns).Count(x=>x.Key == subItem.Key) >0)  							tsb.Append("<img src=\"fk.gif\" title=\"Foreign Key\" class=\"icon-prefix\" />");  						if (!string.IsNullOrEmpty(subItem.GetSQLDefault()))  							tsb.Append("<img src=\"constraint.gif\" title=\"Constraint\" class=\"icon-prefix\" />");  						if (indexedFields.Contains(subItem))  							tsb.Append("<img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" />");  						tsb.AppendLine("</td>");    						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  						tsb.AppendLine("<td>" + subItem.GetSQLDefault() + "</td>");  						tsb.AppendLine("<td>" + (subItem.AllowNull ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td>" + (subItem.IsUnique ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td>" + (subItem.ComputedColumn ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				}  				#endregion    				#region Indexes Table  				var indexList = _item.TableIndexList.ToList();  				if (indexList.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Columns</th>");  					tsb.AppendLine("<th>Summary</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var index in indexList)  					{  						var summary = string.Empty;  						if (_item.PrimaryKeyColumns.Count == 0 && index.PrimaryKey) summary += "clustered' ";  						if (index.IsUnique) summary += "unique' ";  						if (index.PrimaryKey) summary += "primary key' ";  						if (index.Clustered) summary += "clustered' ";  						if (summary.EndsWith("' ")) summary = summary.Substring(0' summary.Length - 2);    						var indexName = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexName(_item' index);  						var columnList = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexColumns(_item' index);    						tsb.AppendLine("<tr class=\"" + (((indexList.IndexOf(index) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td><img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" /></td>");  						tsb.AppendLine("<td>" + indexName + "</td>");  						tsb.AppendLine("<td>" + string.Join("' "' columnList.Values.Select(x => x.DatabaseName)) + "</td>");  						tsb.AppendLine("<td>" + summary + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$indextable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$indextable$"' "N/A");  				}  				#endregion    				#region Defaults Table  				var defaultColumns = _item.GeneratedColumns.Where(x => !string.IsNullOrEmpty(x.Default)).ToList();  				if (defaultColumns.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Column</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Value</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in defaultColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((defaultColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td>" + "DF__" + _item.DatabaseName.ToUpper() + "_" + subItem.DatabaseName.ToUpper() + "</td>");  						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.Default + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$defaulttable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$defaulttable$"' "N/A");  				}  				#endregion    				#region References    				var referenceTables = _item.GetRelations().ToList();  				if (referenceTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referenceTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>");  						  						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$references$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$references$"' "N/A");  				}    				#endregion    				#region Referenced By    				var referencedByTables = _item.GetRelationsWhereChild().ToList();  				if (referencedByTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referencedByTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>");    						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$referencedby$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$referencedby$"' "N/A");  				}  				  				#endregion    				#region Code  				var code = GetCode();  				code = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLCode(code);  				fileContent = fileContent.Replace("$code$"' code);  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateTable(_model' _item);  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-table-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				var parentTables = _item.GetParentTables().Where(x => x.Generated).ToList();  				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList();  				var indexedFields = _item.GeneratedColumns.Where(x => indexFieldIDs.Contains(new Guid(x.Key))).ToList();    				#region Column Table  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>"); //Icons  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Length</th>");  					tsb.AppendLine("<th>Default</th>");  					tsb.AppendLine("<th>Allow Null</th>");  					tsb.AppendLine("<th>PK</th>");  					tsb.AppendLine("<th>FK</th>");  					tsb.AppendLine("<th>UQ</th>");  					tsb.AppendLine("<th>Computed</th>");  					tsb.AppendLine("<th>Comment</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in _item.GeneratedColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						  						//Insert icons  						tsb.Append("<td>");  						if (subItem.PrimaryKey)  							tsb.Append("<img src=\"key.gif\" title=\"Primary Key\" class=\"icon-prefix\" />");  						if(parentTables.SelectMany(x=>x.GeneratedColumns).Count(x=>x.Key == subItem.Key) >0)  							tsb.Append("<img src=\"fk.gif\" title=\"Foreign Key\" class=\"icon-prefix\" />");  						if (!string.IsNullOrEmpty(subItem.GetSQLDefault()))  							tsb.Append("<img src=\"constraint.gif\" title=\"Constraint\" class=\"icon-prefix\" />");  						if (indexedFields.Contains(subItem))  							tsb.Append("<img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" />");  						tsb.AppendLine("</td>");    						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  						tsb.AppendLine("<td>" + subItem.GetSQLDefault() + "</td>");  						tsb.AppendLine("<td>" + (subItem.AllowNull ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td>" + (subItem.IsUnique ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td>" + (subItem.ComputedColumn ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				}  				#endregion    				#region Indexes Table  				var indexList = _item.TableIndexList.ToList();  				if (indexList.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Columns</th>");  					tsb.AppendLine("<th>Summary</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var index in indexList)  					{  						var summary = string.Empty;  						if (_item.PrimaryKeyColumns.Count == 0 && index.PrimaryKey) summary += "clustered' ";  						if (index.IsUnique) summary += "unique' ";  						if (index.PrimaryKey) summary += "primary key' ";  						if (index.Clustered) summary += "clustered' ";  						if (summary.EndsWith("' ")) summary = summary.Substring(0' summary.Length - 2);    						var indexName = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexName(_item' index);  						var columnList = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexColumns(_item' index);    						tsb.AppendLine("<tr class=\"" + (((indexList.IndexOf(index) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td><img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" /></td>");  						tsb.AppendLine("<td>" + indexName + "</td>");  						tsb.AppendLine("<td>" + string.Join("' "' columnList.Values.Select(x => x.DatabaseName)) + "</td>");  						tsb.AppendLine("<td>" + summary + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$indextable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$indextable$"' "N/A");  				}  				#endregion    				#region Defaults Table  				var defaultColumns = _item.GeneratedColumns.Where(x => !string.IsNullOrEmpty(x.Default)).ToList();  				if (defaultColumns.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Column</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Value</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in defaultColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((defaultColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td>" + "DF__" + _item.DatabaseName.ToUpper() + "_" + subItem.DatabaseName.ToUpper() + "</td>");  						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.Default + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$defaulttable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$defaulttable$"' "N/A");  				}  				#endregion    				#region References    				var referenceTables = _item.GetRelations().ToList();  				if (referenceTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referenceTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>");  						  						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$references$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$references$"' "N/A");  				}    				#endregion    				#region Referenced By    				var referencedByTables = _item.GetRelationsWhereChild().ToList();  				if (referencedByTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referencedByTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>");    						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$referencedby$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$referencedby$"' "N/A");  				}  				  				#endregion    				#region Code  				var code = GetCode();  				code = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLCode(code);  				fileContent = fileContent.Replace("$code$"' code);  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateTable(_model' _item);  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteTableItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteTableItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-table-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				var parentTables = _item.GetParentTables().Where(x => x.Generated).ToList();  				var indexFieldIDs = _item.TableIndexList.SelectMany(x => x.IndexColumnList).ToList().Where(x => _item.GeneratedColumns.Count(z => new Guid(z.Key) == x.FieldID) > 0).Select(x=>x.FieldID).ToList();  				var indexedFields = _item.GeneratedColumns.Where(x => indexFieldIDs.Contains(new Guid(x.Key))).ToList();    				#region Column Table  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>"); //Icons  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Length</th>");  					tsb.AppendLine("<th>Default</th>");  					tsb.AppendLine("<th>Allow Null</th>");  					tsb.AppendLine("<th>PK</th>");  					tsb.AppendLine("<th>FK</th>");  					tsb.AppendLine("<th>UQ</th>");  					tsb.AppendLine("<th>Computed</th>");  					tsb.AppendLine("<th>Comment</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in _item.GeneratedColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						  						//Insert icons  						tsb.Append("<td>");  						if (subItem.PrimaryKey)  							tsb.Append("<img src=\"key.gif\" title=\"Primary Key\" class=\"icon-prefix\" />");  						if(parentTables.SelectMany(x=>x.GeneratedColumns).Count(x=>x.Key == subItem.Key) >0)  							tsb.Append("<img src=\"fk.gif\" title=\"Foreign Key\" class=\"icon-prefix\" />");  						if (!string.IsNullOrEmpty(subItem.GetSQLDefault()))  							tsb.Append("<img src=\"constraint.gif\" title=\"Constraint\" class=\"icon-prefix\" />");  						if (indexedFields.Contains(subItem))  							tsb.Append("<img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" />");  						tsb.AppendLine("</td>");    						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  						tsb.AppendLine("<td>" + subItem.GetSQLDefault() + "</td>");  						tsb.AppendLine("<td>" + (subItem.AllowNull ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td></td>");  						tsb.AppendLine("<td>" + (subItem.IsUnique ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td>" + (subItem.ComputedColumn ? "<img src=\"yes.gif\" />" : "") + "</td>");  						tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				}  				#endregion    				#region Indexes Table  				var indexList = _item.TableIndexList.ToList();  				if (indexList.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th></th>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Columns</th>");  					tsb.AppendLine("<th>Summary</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var index in indexList)  					{  						var summary = string.Empty;  						if (_item.PrimaryKeyColumns.Count == 0 && index.PrimaryKey) summary += "clustered' ";  						if (index.IsUnique) summary += "unique' ";  						if (index.PrimaryKey) summary += "primary key' ";  						if (index.Clustered) summary += "clustered' ";  						if (summary.EndsWith("' ")) summary = summary.Substring(0' summary.Length - 2);    						var indexName = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexName(_item' index);  						var columnList = nHydrate.Core.SQLGeneration.SQLEmit.GetIndexColumns(_item' index);    						tsb.AppendLine("<tr class=\"" + (((indexList.IndexOf(index) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td><img src=\"index.gif\" title=\"Index\" class=\"icon-prefix\" /></td>");  						tsb.AppendLine("<td>" + indexName + "</td>");  						tsb.AppendLine("<td>" + string.Join("' "' columnList.Values.Select(x => x.DatabaseName)) + "</td>");  						tsb.AppendLine("<td>" + summary + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$indextable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$indextable$"' "N/A");  				}  				#endregion    				#region Defaults Table  				var defaultColumns = _item.GeneratedColumns.Where(x => !string.IsNullOrEmpty(x.Default)).ToList();  				if (defaultColumns.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th>Name</th>");  					tsb.AppendLine("<th>Column</th>");  					tsb.AppendLine("<th>Data type</th>");  					tsb.AppendLine("<th>Value</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					foreach (var subItem in defaultColumns)  					{  						tsb.AppendLine("<tr class=\"" + (((defaultColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    						tsb.AppendLine("<td>" + "DF__" + _item.DatabaseName.ToUpper() + "_" + subItem.DatabaseName.ToUpper() + "</td>");  						tsb.AppendLine("<td>" + subItem.Name + "</td>");  						tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  						tsb.AppendLine("<td>" + subItem.Default + "</td>");  						tsb.AppendLine("</tr>");  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$defaulttable$"' tsb.ToString());  				}  				else  				{  					fileContent = fileContent.Replace("$defaulttable$"' "N/A");  				}  				#endregion    				#region References    				var referenceTables = _item.GetRelations().ToList();  				if (referenceTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referenceTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ChildTable.PascalName + ".html" + "\">" + relation.ChildTable.DatabaseName + "</a></td>");  						  						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$references$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$references$"' "N/A");  				}    				#endregion    				#region Referenced By    				var referencedByTables = _item.GetRelationsWhereChild().ToList();  				if (referencedByTables.Count > 0)  				{  					var tsb = new StringBuilder();  					tsb.AppendLine("<table class=\"subItem-item\">");  					tsb.AppendLine("<thead>");  					tsb.AppendLine("<tr>");  					tsb.AppendLine("<th style=\"width:30%;\">Name</th>");  					tsb.AppendLine("<th>Column Links</th>");  					tsb.AppendLine("</tr>");  					tsb.AppendLine("</thead>");    					tsb.AppendLine("<tbody>");  					var index = 0;  					foreach (var relation in referencedByTables)  					{  						tsb.AppendLine("<tr class=\"" + (((index % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");  						tsb.AppendLine("<td><a href=\"table." + relation.ParentTable.PascalName + ".html" + "\">" + relation.ParentTable.DatabaseName + "</a></td>");    						tsb.Append("<td>");  						var index2 = 0;  						foreach (var cr in relation.ColumnRelationships.AsEnumerable())  						{  							if (index2 > 0) tsb.Append("'");  							tsb.Append(cr.ParentColumn.DatabaseName + "=" + cr.ChildColumn.DatabaseName);  							index2++;  						}  						tsb.AppendLine("</td>");    						tsb.AppendLine("</tr>");  						index++;  					}  					tsb.AppendLine("</tbody>");    					tsb.AppendLine("</table>");  					fileContent = fileContent.Replace("$referencedby$"' tsb.ToString());    				}  				else  				{  					fileContent = fileContent.Replace("$referencedby$"' "N/A");  				}  				  				#endregion    				#region Code  				var code = GetCode();  				code = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLCode(code);  				fileContent = fileContent.Replace("$code$"' code);  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSQLCreateTable(_model' _item);  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,nHydrate.Generator.Datasite,DatasiteViewItemTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.Datasite\Generators\DatasiteViewItemTemplate.cs,GenerateContent,The following statement contains a magic number: try  			{  				var fileContent = Helpers.GetFileContent(new EmbeddedResourceName(_templateLocation + ".datasite-view-template.htm"));    				fileContent = fileContent.Replace("$databasename$"' _model.ProjectName);  				fileContent = fileContent.Replace("$objectname$"' _item.GetSQLSchema() + "." + _item.Name);    				var description = _item.Description;  				if (string.IsNullOrEmpty(description))  					description = "The " + _item.Name + " item";  				fileContent = fileContent.Replace("$objectdescription$"' description);    				fileContent = fileContent.Replace("$pagetitle$"' "[" + _item.Name + "] Documentation");  				fileContent = fileContent.Replace("$footertext$"' "Powered by nHydrate &copy; " + DateTime.Now.Year);    				#region Column Table  				var tsb = new StringBuilder();  				tsb.AppendLine("<table class=\"subItem-item\">");  				tsb.AppendLine("<thead>");  				tsb.AppendLine("<tr>");  				tsb.AppendLine("<th>Name</th>");  				tsb.AppendLine("<th>Data type</th>");  				tsb.AppendLine("<th>Length</th>");  				tsb.AppendLine("<th>Allow Null</th>");  				tsb.AppendLine("<th>Comment</th>");  				tsb.AppendLine("</tr>");  				tsb.AppendLine("</thead>");    				tsb.AppendLine("<tbody>");  				foreach (var subItem in _item.GeneratedColumns)  				{  					tsb.AppendLine("<tr class=\"" + (((_item.GeneratedColumns.IndexOf(subItem) % 2) == 1) ? "t-odd-color" : string.Empty) + "\">");    					tsb.AppendLine("<td>" + subItem.Name + "</td>");  					tsb.AppendLine("<td>" + subItem.DatabaseType + "</td>");  					tsb.AppendLine("<td>" + subItem.GetLengthString() + "</td>");  					tsb.AppendLine("<td>" + subItem.AllowNull.ToString() + "</td>");  					tsb.AppendLine("<td class=\"description\">" + subItem.Description + "</td>");  					tsb.AppendLine("</tr>");  				}  				tsb.AppendLine("</tbody>");  				tsb.AppendLine("</table>");  				fileContent = fileContent.Replace("$columntable$"' tsb.ToString());  				#endregion    				#region SQL  				var sql = nHydrate.Core.SQLGeneration.SQLEmit.GetSqlCreateView(_item' true);  				var lines = sql.Replace("\r"' string.Empty).Split('\n');  				var newCode = new StringBuilder();  				sql = string.Join("\r\n"' lines.Where(x => !x.StartsWith("--MODELID")).ToList());  				sql = nHydrate.Core.SQLGeneration.HtmlEmit.FormatHTMLSQL(sql);  				fileContent = fileContent.Replace("$sql$"' sql);  				#endregion    				sb.Append(fileContent);  			}  			catch (Exception ex)  			{  				throw;  			}
