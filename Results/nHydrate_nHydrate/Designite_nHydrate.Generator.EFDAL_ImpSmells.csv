Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The method has 132 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The method has 132 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The method has 908 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The method has 605 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The method has 239 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The method has 132 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The method has 109 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The method has 145 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The method has 158 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The method has 126 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The method has 111 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The method has 142 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The method has 120 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The method has 176 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The method has 104 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The method has 170 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The method has 229 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The method has 163 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The method has 364 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The method has 134 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The method has 130 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The method has 177 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedTemplate.cs,GenerateContent,The method has 155 lines of code.
Long Method,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The method has 1376 lines of code.
Complex Method,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,Cyclomatic complexity of the method is 63
Complex Method,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,Cyclomatic complexity of the method is 17
Complex Method,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,Cyclomatic complexity of the method is 12
Complex Method,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,Cyclomatic complexity of the method is 12
Complex Method,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,Cyclomatic complexity of the method is 19
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,Cyclomatic complexity of the method is 19
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,Cyclomatic complexity of the method is 12
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityType,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,Cyclomatic complexity of the method is 19
Complex Method,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,Cyclomatic complexity of the method is 26
Complex Method,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,Cyclomatic complexity of the method is 16
Complex Method,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GetPropertyNode,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,Cyclomatic complexity of the method is 14
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditClass,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendGenerateEvents,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,Cyclomatic complexity of the method is 20
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,Cyclomatic complexity of the method is 11
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendIAuditable,Cyclomatic complexity of the method is 10
Complex Method,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,Cyclomatic complexity of the method is 33
Long Parameter List,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,GenerateAuditField,The method has 5 parameters. Parameters: columnName' codeType' description' propertyScope' isConcurrency
Long Statement,nHydrate.Generator.EFDAL,EFDALProjectGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\EFDALProjectGenerator.cs,OnAfterGenerate,The length of the statement  "                preBuildProperty.Value = "if not exist \"$(SolutionDir)bin\" mkdir \"$(SolutionDir)bin\"\r\nattrib -r \"$(SolutionDir)Bin\\*.*\""; " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesGeneratedGenerator.cs,Generate,The length of the statement  "                var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesGeneratedGenerator.cs,Generate,The length of the statement  "                var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	[EdmComplexTypeAttribute(NamespaceName = \"" + this.GetLocalNamespace() + ".Entity\"' Name = \"" + _item.PascalName + "\")]"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	public partial class " + doubleDerivedClassName + " : nHydrate.EFCore.DataAccess.NHComplexObject' nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject' " + GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.ICloneable' System.IEquatable<" + GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 351.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' object defaultValue)"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")"); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                    sb.AppendLine("				return ((this." + column.PascalName + " == null) ? defaultValue : this." + column.PascalName + ");"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static int GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ":"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                    sb.AppendLine("					return " + _item.PascalName + ".GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ");"); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetMaxLength((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants);"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static System.Type GetFieldType(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 159.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The '\" + field.GetType().ReflectedType.ToString() + \".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 276.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			switch ((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field)"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ": return typeof(" + column.GetCodeType() + ");"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The '\" + field.GetType().ReflectedType.ToString() + \".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 276.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetFieldType((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field' object defaultValue)"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The '\" + field.GetType().ReflectedType.ToString() + \".FieldNameConstants' value is not valid. The field parameter must be of type '\" + this.GetType().ToString() + \".FieldNameConstants'.\");"); " is 237.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return this.GetValue((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field' defaultValue);"); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendIsEquivalent,The length of the statement  "            sb.AppendLine("			return ((System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">)this).Equals(item as " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ");"); " is 225.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesSPGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesSPGeneratedTemplate.cs,AppendIEquatable,The length of the statement  "            sb.AppendLine("		bool System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">.Equals(" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + " other)"); " is 211.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	[EdmComplexTypeAttribute(NamespaceName = \"" + this.GetLocalNamespace() + ".Entity\"' Name = \"" + _item.PascalName + "\")]"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	public partial class " + doubleDerivedClassName + " : nHydrate.EFCore.DataAccess.NHComplexObject' nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject' " + GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.ICloneable' System.IEquatable<" + GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 351.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' object defaultValue)"); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                    sb.AppendLine("				return ((this." + column.PascalName + " == null) ? defaultValue : this." + column.PascalName + ");"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static int GetMaxLength(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ":"); " is 144.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                    sb.AppendLine("					return " + _item.PascalName + ".GetMaxLength(" + _item.PascalName + "." + _item.PascalName + "" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ");"); " is 235.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetMaxLength((" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return typeof(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants);"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static System.Type GetFieldType(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 156.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 177.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			switch ((" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field)"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ": return typeof(" + column.GetCodeType() + ");"); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 177.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetFieldType((" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field' object defaultValue)"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 177.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return this.GetValue((" + this.DefaultNamespace + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field' defaultValue);"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendIsEquivalent,The length of the statement  "            sb.AppendLine("			return ((System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">)this).Equals(item as " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ");"); " is 225.
Long Statement,nHydrate.Generator.EFDAL.Generators.ComplexTypes,ComplexTypesFuncGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ComplexTypes\ComplexTypesFuncGeneratedTemplate.cs,AppendIEquatable,The length of the statement  "            sb.AppendLine("		bool System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">.Equals(" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + " other)"); " is 211.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedGenerator.cs,Generate,The length of the statement  "			var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendTableMapping,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,The length of the statement  "                            sb.AppendLine("[assembly: EdmRelationshipAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\"' System.Data.Metadata.Edm.RelationshipMultiplicity." + (relation.IsRequired ? "One" : "ZeroOrOne") + "' typeof(" + this.GetLocalNamespace() + ".Entity." + parentTable.PascalName + ")' \"" + relation.PascalRoleName + childTable.PascalName + "\"' System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne' typeof(" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ")' true)]"); " is 657.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,The length of the statement  "                            sb.AppendLine("[assembly: EdmRelationshipAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\"' System.Data.Metadata.Edm.RelationshipMultiplicity." + (relation.IsRequired ? "One" : "ZeroOrOne") + "' typeof(" + this.GetLocalNamespace() + ".Entity." + parentTable.PascalName + ")' \"" + relation.PascalRoleName + childTable.PascalName + "List\"' System.Data.Metadata.Edm.RelationshipMultiplicity.Many' typeof(" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ")' true)]"); " is 656.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,The length of the statement  "                        sb.AppendLine("[assembly: EdmRelationshipAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\"' System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne' typeof(" + this.GetLocalNamespace() + ".Entity." + parentTable.PascalName + ")' \"" + relation.PascalRoleName + childTable.PascalName + "List\"' System.Data.Metadata.Edm.RelationshipMultiplicity.Many' typeof(" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ")' true)]"); " is 614.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,The length of the statement  "                            sb.AppendLine("[assembly: EdmRelationshipAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"" + table.PascalName + "\"' \"" + relation1.PascalRoleName + table1.PascalName + "List\"' System.Data.Metadata.Edm.RelationshipMultiplicity.Many' typeof(" + this.GetLocalNamespace() + ".Entity." + table1.PascalName + ")' \"" + relation2.PascalRoleName + table2.PascalName + "List\"' System.Data.Metadata.Edm.RelationshipMultiplicity.Many' typeof(" + this.GetLocalNamespace() + ".Entity." + table2.PascalName + "))]"); " is 520.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	public partial class " + _model.ProjectName + "Entities : System.Data.Objects.ObjectContext' " + this.GetLocalNamespace() + ".Interfaces.I" + _model.ProjectName + "Entities' nHydrate.EFCore.DataAccess.IContext"); " is 228.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		private static Dictionary<string' SequentialIdGenerator> _sequentialIdGeneratorCache = new Dictionary<string' SequentialIdGenerator>();"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		/// Initializes a new " + _model.ProjectName + "Entities object using the connection string found in the '" + _model.ProjectName + "Entities' section of the application configuration file."); " is 208.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			base(Util.ConvertNormalCS2EFFromConfig(\"name=" + _model.ProjectName + "Entities\")' \"" + _model.ProjectName + "Entities\")"); " is 145.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var builder = new System.Data.Odbc.OdbcConnectionStringBuilder(Util.StripEFCS2Normal(this.Connection.ConnectionString));"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			base(Util.ConvertNormalCS2EFFromConfig(\"name=" + _model.ProjectName + "Entities\"' contextStartup)' \"" + _model.ProjectName + "Entities\")"); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			base(Util.ConvertNormalCS2EF(connectionString' contextStartup)' \"" + _model.ProjectName + "Entities\")"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var builder = new System.Data.Odbc.OdbcConnectionStringBuilder(Util.StripEFCS2Normal(this.Connection.ConnectionString));"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("			get { return this." + table.GetAbsoluteBaseTable().PascalName + ".OfType<" + table.PascalName + ">(); }"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("		public virtual System.Data.Objects.ObjectSet<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> " + table.PascalName + ""); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("						this._" + table.CamelName + " = base.CreateObjectSet<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ">(\"" + table.PascalName + "\");"); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("		protected System.Data.Objects.ObjectSet<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> _" + table.CamelName + ";"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("		public virtual System.Data.Objects.ObjectSet<" + this.GetLocalNamespace() + ".Entity." + view.PascalName + "> " + view.PascalName + ""); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("						this._" + view.CamelName + " = base.CreateObjectSet<" + this.GetLocalNamespace() + ".Entity." + view.PascalName + ">(\"" + view.PascalName + "\");"); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("		protected System.Data.Objects.ObjectSet<" + this.GetLocalNamespace() + ".Entity." + view.PascalName + "> _" + view.CamelName + ";"); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			if (" + parameter.CamelName + " != null) { " + parameter.CamelName + "Parameter = new System.Data.Objects.ObjectParameter(\"" + parameter.DatabaseName + "\"' " + parameter.CamelName + "); }"); " is 210.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			else { " + parameter.CamelName + "Parameter = new System.Data.Objects.ObjectParameter(\"" + parameter.DatabaseName + "\"' typeof(" + parameter.GetCodeType() + ")); }"); " is 186.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			paramArray.Add(new System.Data.Objects.ObjectParameter(\"" + parameter.DatabaseName + "\"' " + parameter.CamelName + "));"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.Append("			return this.CreateQuery<" + returnColumn.GetCodeType() + ">(\"SELECT VALUE " + this.DefaultNamespace + ".EFDAL.Store." + function.DatabaseName + "("); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && !x.Immutable).OrderBy(x => x.PascalName)) " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("		public virtual void AddItem(" + this.DefaultNamespace + ".EFDAL.Interfaces.Entity.I" + table.PascalName + " entity)"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("				((" + GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.CreatedByPascalName + " = _contextStartup.Modifer;"); " is 162.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("				((" + GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.ModifiedByPascalName + " = _contextStartup.Modifer;"); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && !x.Immutable).OrderBy(x => x.PascalName)) " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("		public virtual void DeleteItem(" + this.GetLocalNamespace() + ".Entity." + table.PascalName + " entity)"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("		void " + this.DefaultNamespace + ".EFDAL.Interfaces.I" + _model.ProjectName + "Entities.DeleteItem(" + this.DefaultNamespace + ".EFDAL.Interfaces.Entity.I" + table.PascalName + " entity)"); " is 206.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("				((" + GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.CreatedByPascalName + " = _contextStartup.Modifer;"); " is 162.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("				((" + GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.ModifiedByPascalName + " = _contextStartup.Modifer;"); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && !x.Immutable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("			" + (index > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")"); " is 144.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var a = System.Configuration.ConfigurationManager.ConnectionStrings[\"" + _model.ProjectName + "Entities\"];"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					var regEx = new System.Text.RegularExpressions.Regex(\"provider connection string\\\\s*=\\\\s*\\\"([^\\\"]*)\");"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && !x.Security.IsValid() && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 194.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("		System.Linq.IQueryable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + table.PascalName + "> " + this.GetLocalNamespace() + ".Interfaces.I" + _model.ProjectName + "Entities." + table.PascalName); " is 220.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("			get { return (System.Linq.IQueryable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + table.PascalName + ">)this." + table.PascalName + "; }"); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var storedProcedure in _model.Database.CustomStoredProcedures.Where(x => x.Generated && x.GeneratedColumns.Count > 0).OrderBy(x => x.PascalName)) " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			var " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' typeof(" + parameter.GetCodeType() + "));"); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			if (" + parameter.CamelName + " != null) { " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' " + parameter.CamelName + "); }"); " is 190.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			else { " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' typeof(" + parameter.GetCodeType() + ")); }"); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			var " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' " + parameter.CamelName + ");"); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.Append("			var retval = base.ExecuteFunction<" + storedProcedure.PascalName + ">(\"" + storedProcedure.GetDatabaseObjectName() + "\""); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("			" + parameter.CamelName + " = (" + parameter.GetCodeType() + ")" + parameter.CamelName + "Parameter.Value;"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var storedProcedure in _model.Database.CustomStoredProcedures.Where(x => x.Generated && x.GeneratedColumns.Count == 0).OrderBy(x => x.PascalName)) " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			parameters.Add(new ObjectParameter(\"" + param.PascalName + "\"' typeof(" + param.GetCodeType() + ")));"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                            sb.AppendLine("			if (parameters[" + index + "].Value == System.DBNull.Value) " + param.CamelName + " = null; else " + param.CamelName + " = (" + param.GetCodeType() + ")parameters[" + index + "].Value;"); " is 205.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			var " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' typeof(" + parameter.GetCodeType() + "));"); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			if (" + parameter.CamelName + " != null) { " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' " + parameter.CamelName + "); }"); " is 190.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			else { " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' typeof(" + parameter.GetCodeType() + ")); }"); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.AppendLine("			var " + parameter.CamelName + "Parameter = new ObjectParameter(\"" + parameter.DatabaseName + "\"' " + parameter.CamelName + ");"); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.Append("			var retval = base.ExecuteFunction<" + function.PascalName + ">(\"" + function.PascalName + "_SPWrapper\""); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("			" + parameter.CamelName + " = (" + parameter.GetCodeType() + ")" + parameter.CamelName + "Parameter.Value;"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		/// <param name=\"checkVersion\">Determines if the check also includes the exact version of the model</param>"); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		/// <param name=\"connectionString\">Determines the connection string to use when connecting to the database</param>"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			//If there is any version then the ModelKey was found' if not found then the database does not contain this model"); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					da = new SqlDataAdapter(\"SELECT * FROM __nhydrateschema where [ModelKey] = '\" + this.ModelKey + \"'\"' conn);"); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		/// <returns>The number of objects in an System.Data.EntityState.Added' System.Data.EntityState.Modified' or System.Data.EntityState.Deleted state when System.Data.Objects.ObjectContext.SaveChanges() was called.</returns>"); " is 241.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable == TypedTableConstants.None) && !x.AssociativeTable && x.AllowModifiedAudit && x.AllowAuditTracking).OrderBy(x => x.PascalName)) " is 213.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("							" + (index2 > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")"); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.Append("								command = new System.Data.SqlClient.SqlCommand(\"UPDATE [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] SET [" + _model.Database.ModifiedByDatabaseName + "] = @mod WHERE "); " is 204.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.Append("(([" + _model.Database.ModifiedByDatabaseName + "] != @mod) OR ([" + _model.Database.ModifiedByDatabaseName + "] IS NULL AND @mod IS NOT NULL) OR ([" + _model.Database.ModifiedByDatabaseName + "] IS NOT NULL AND @mod IS NULL))"); " is 240.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("								command.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@pk" + ii + "\"' ((" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + column.PascalName + "));"); " is 210.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("									command.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@mod\"' System.DBNull.Value));"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("									command.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@mod\"' this.ContextStartup.Modifer));"); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable == TypedTableConstants.None) && !x.AssociativeTable && x.AllowCreateAudit).OrderBy(x => x.PascalName)) " is 187.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("						" + (index3 > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ") ((" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")entity).ResetCreatedBy(this.ContextStartup.Modifer);"); " is 268.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable == TypedTableConstants.None) && !x.AssociativeTable && x.AllowCreateAudit).OrderBy(x => x.PascalName)) " is 187.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("					" + (index3 > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ") ((" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.CreatedDatePascalName + " = markedTime;"); " is 282.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable == TypedTableConstants.None) && !x.AssociativeTable && x.AllowModifiedAudit).OrderBy(x => x.PascalName)) " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("					" + (index3 > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ") ((" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.ModifiedDatePascalName + " = markedTime;"); " is 283.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			var modifiedList = this.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState.Modified);"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable == TypedTableConstants.None) && !x.AssociativeTable && x.AllowModifiedAudit).OrderBy(x => x.PascalName)) " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("						" + (index3 > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ") ((" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.ModifiedByPascalName + " = this.ContextStartup.Modifer;"); " is 299.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable == TypedTableConstants.None) && !x.AssociativeTable && x.AllowModifiedAudit).OrderBy(x => x.PascalName)) " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("					" + (index3 > 0 ? "else " : string.Empty) + "if (entity is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ") ((" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")entity)." + _model.Database.ModifiedDatePascalName + " = markedTime;"); " is 283.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("			if (field is " + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants) return " + this.GetLocalNamespace() + ".EntityMappingConstants." + table.PascalName + ";"); " is 217.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		public static " + this.DefaultNamespace + ".EFDAL.Interfaces.IMetadata GetMetaData(" + this.GetLocalNamespace() + ".EntityMappingConstants table)"); " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The length of the statement  "                //sb.AppendLine("return Activator.CreateInstance(((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)typeof(" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ").GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute)' true).FirstOrDefault()).MetadataClassType) as " + this.GetLocalNamespace() + ".Interfaces.Entity.Metadata." + table.PascalName + "Metadata;"); " is 415.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable == TypedTableConstants.None)).OrderBy(x => x.PascalName)) " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                    sb.AppendLine("		public static ObjectQuery<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> Include(this ObjectQuery<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> item' Expression<Func<" + this.GetLocalNamespace() + "." + table.PascalName + "Include' nHydrate.EFCore.DataAccess.IContextInclude>> query)"); " is 342.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("		public static System.Type GetFieldType(this " + this.GetLocalNamespace() + "." + _model.ProjectName + "Entities context' Enum field)"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("			if (field is " + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("				return " + GetLocalNamespace() + ".Entity." + table.PascalName + ".GetFieldType((" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)field);"); " is 204.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("		public static " + this.DefaultNamespace + ".EFDAL.Interfaces.IMetadata GetMetaData(this nHydrate.EFCore.DataAccess.INHEntityObject entity)"); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("			var a = entity.GetType().GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute)' true).FirstOrDefault();"); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("				case EntityMappingConstants." + table.PascalName + ": return typeof(" + this.GetLocalNamespace() + ".Entity." + table.PascalName + ");"); " is 156.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.PascalName)) " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		public static T GetValue<T>(this " + this.GetLocalNamespace() + ".Entity." + table.PascalName + " item' System.Linq.Expressions.Expression<System.Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' T>> selector)"); " is 250.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("			var te = (" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)Enum.Parse(typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)' tn' true);"); " is 249.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		public static T GetValue<T>(this " + this.GetLocalNamespace() + ".Entity." + table.PascalName + " item' System.Linq.Expressions.Expression<System.Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' T>> selector' T defaultValue)"); " is 266.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("			var te = (" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)Enum.Parse(typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)' tn' true);"); " is 249.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		public static T GetValue<T>(this " + this.GetLocalNamespace() + ".Entity." + table.PascalName + " item' " + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants field)"); " is 224.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		public static T GetValue<T>(this " + this.GetLocalNamespace() + ".Entity." + table.PascalName + " item' " + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants field' T defaultValue)"); " is 240.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.Immutable && !x.AssociativeTable).OrderBy(x => x.Name)) " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		public static void SetValue<TResult>(this " + this.GetLocalNamespace() + ".Entity." + table.PascalName + " item' System.Linq.Expressions.Expression<System.Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' TResult>> selector' TResult newValue)"); " is 283.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		/// <param name=\"fixLength\">Determines if the length should be truncated if too long. When false' an error will be raised if data is too large to be assigned to the field.</param>"); " is 201.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("		public static void SetValue<TResult>(this " + this.GetLocalNamespace() + ".Entity." + table.PascalName + " item' System.Linq.Expressions.Expression<System.Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' TResult>> selector' TResult newValue' bool fixLength)"); " is 299.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                sb.AppendLine("			var te = (" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)Enum.Parse(typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants)' tn' true);"); " is 249.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		/// <param name=\"paging\">The paging object that controls how data is selected. It will contain additional paging information on output.</param>"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		public static IEnumerable<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> GetPagedResults<TKey>("); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			this System.Data.Objects." + listObjectType + "<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> item'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' TKey>> orderBy'"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		/// <param name=\"paging\">The paging object that controls how data is selected. It will contain additional paging information on output.</param>"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		public static IEnumerable<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> GetPagedResults<TKey>("); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			this System.Data.Objects." + listObjectType + "<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> item'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' bool>> where'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' TKey>> orderBy'"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		/// <param name=\"paging\">The paging object that controls how data is selected. It will contain additional paging information on output.</param>"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		public static IEnumerable<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> GetPagedResults<TKey>("); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			this System.Data.Objects." + listObjectType + "<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> item'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' TKey>> orderBy'"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		/// <param name=\"paging\">The paging object that controls how data is selected. It will contain additional paging information on output.</param>"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		public static IEnumerable<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> GetPagedResults<TKey>("); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			this System.Data.Objects." + listObjectType + "<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> item'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' bool>> where'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' TKey>> orderBy'"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		/// <param name=\"paging\">The paging object that controls how data is selected. It will contain additional paging information on output.</param>"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("		public static IEnumerable<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> GetPagedResults("); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			this System.Data.Objects." + listObjectType + "<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "> item'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "' bool>> where'"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //    sb.AppendLine("			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<" + this.GetLocalNamespace() + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants>> orderByList'"); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("					case " + this.DefaultNamespace + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants." + column.PascalName + ":"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("					case " + this.DefaultNamespace + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants." + _model.Database.CreatedDatePascalName + ":"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("						if (ob.Ascending) q = q.OrderBy(x => x." + _model.Database.CreatedDatePascalName + ");"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("					case " + this.DefaultNamespace + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants." + _model.Database.CreatedByPascalName + ":"); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("					case " + this.DefaultNamespace + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants." + _model.Database.ModifiedDatePascalName + ":"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("						if (ob.Ascending) q = q.OrderBy(x => x." + _model.Database.ModifiedDatePascalName + ");"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            //        sb.AppendLine("					case " + this.DefaultNamespace + ".Interfaces.Entity." + table.PascalName + "FieldNameConstants." + _model.Database.ModifiedByPascalName + ":"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("		public static System.Collections.ObjectModel.ObservableCollection<T> AsObservable<T>(this System.Collections.Generic.IEnumerable<T> list)"); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("		public static void Purge<T>(this System.Data.Objects.DataClasses.EntityCollection<T> list' " + GetLocalNamespace() + "." + _model.ProjectName + "Entities context)"); " is 182.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            var fieldList = _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && !x.Immutable && x.TypedTable != TypedTableConstants.EnumOnly).ToList(); " is 159.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "                    sb.AppendLine("				" + (index > 0 ? "else " : string.Empty) + "if (item is " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ")"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("	/// Generates Sequential Guid values that can be used for Sql Server UniqueIdentifiers to improve performance."); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextExtensions,ContextExtensionsGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextExtensions\ContextExtensionsGeneratedTemplate.cs,AppendExtensions,The length of the statement  "            sb.AppendLine("		private static readonly int[] SqlOrderMap = new int[] { 3' 2' 1' 0' 5' 4' 7' 6' 9' 8' 15' 14' 13' 12' 11' 10 };"); " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextStartup,ContextStartupGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextStartup\ContextStartupGeneratedGenerator.cs,Generate,The length of the statement  "			var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.ContextStartup,ContextStartupGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ContextStartup\ContextStartupGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("	public partial class " + _item.PascalName + "Audit : " + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit' nHydrate.EFCore.DataAccess.IAudit' System.IComparable' System.IComparable<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit>"); " is 309.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("	public interface I" + _item.PascalName + "AuditResultFieldCompare : nHydrate.EFCore.DataAccess.IAuditResultFieldCompare"); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("		new " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants Field { get; }"); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("	public class " + _item.PascalName + "AuditResultFieldCompare<T> : nHydrate.EFCore.DataAccess.AuditResultFieldCompare<T' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants>' I" + _item.PascalName + "AuditResultFieldCompare"); " is 283.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "			sb.AppendLine("		internal " + _item.PascalName + "AuditResultFieldCompare(T value1' T value2' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' System.Type dataType)"); " is 219.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "			//List<Table> tableList = new List<Table>(_currentTable.GetTableHierarchy().Where(x => x.AllowAuditTracking).Reverse()); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "					if (!(column.DataType == System.Data.SqlDbType.Text || column.DataType == System.Data.SqlDbType.NText || column.DataType == System.Data.SqlDbType.Image)) " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "					sb.AppendLine("		/// The property that maps back to the database '" + (column.ParentTableRef.Object as Table).DatabaseName + "." + column.DatabaseName + "' field"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.Append("		public static IEnumerable<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords("); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.Append("		public static IEnumerable<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords("); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "					sb.AppendLine("		/// <param name=\"" + column.CamelName + "\">A primary key field to use when searching for records.</param>"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.Append("		public static nHydrate.EFCore.DataAccess.AuditPaging<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords(int pageOffset' int recordsPerPage' DateTime? startDate' DateTime? endDate' "); " is 243.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "					sb.AppendLine("		/// <param name=\"" + column.CamelName + "\">A primary key field to use when searching for records.</param>"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.Append("		public static nHydrate.EFCore.DataAccess.AuditPaging<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords(int pageOffset' int recordsPerPage' DateTime? startDate' DateTime? endDate' "); " is 243.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.AppendLine("			var retval = new nHydrate.EFCore.DataAccess.AuditPaging<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit>();"); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.AppendLine("				dbCommand = " + this.GetLocalNamespace() + ".DBHelper.GetCommand(\"[" + _item.GetSQLSchema() + "].[" + _model.GetStoredProcedurePrefix() + "_" + _item.PascalName + "__AUDIT_SELECT]\"' CommandType.StoredProcedure' dbConnection);"); " is 249.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.AppendLine("					" + this.GetLocalNamespace() + ".DBHelper.AddParameter(dbCommand' \"@__recordsPerPage\"' recordsPerPage);"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "					sb.AppendLine("				" + this.GetLocalNamespace() + ".DBHelper.AddParameter(dbCommand' \"@" + column.DatabaseName + "\"' " + column.CamelName + ");"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "						sb.AppendLine("						si." + column.PascalName + " = dataReader.IsDBNull(ordinal) ? (DateTimeOffset?)null : ((System.Data.SqlClient.SqlDataReader)dataReader).GetDateTimeOffset(ordinal);"); " is 187.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "						//	sb.AppendLine("						si." + column.PascalName + " = ((System.Data.SqlClient.SqlDataReader)dataReader).GetDateTimeOffset(ordinal);"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "						sb.AppendLine("						si." + column.PascalName + " = dataReader.IsDBNull(ordinal) ? (TimeSpan?)null : ((System.Data.SqlClient.SqlDataReader)dataReader).GetTimeSpan(ordinal);"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "						//sb.AppendLine("						si." + column.PascalName + " = ((System.Data.SqlClient.SqlDataReader)dataReader).GetTimeSpan(ordinal);"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "						sb.AppendLine("					si." + column.PascalName + " = dataReader.IsDBNull(ordinal) ? (" + column.GetCodeType(true' true) + ")null : ReadFromByteArray(ordinal' dataReader);"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "						sb.AppendLine("					si." + column.PascalName + " = dataReader.IsDBNull(ordinal) ? (" + column.GetCodeType(true' true) + ")null : dataReader." + column.GetDataReaderMethodName() + "(ordinal);"); " is 193.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The length of the statement  "				sb.AppendLine("				retval.TotalRecordCount = (int)((System.Data.IDbDataParameter)(dbCommand.Parameters[\"@RETURN_VALUE\"])).Value;"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "			sb.AppendLine("		public static nHydrate.EFCore.DataAccess.AuditResult<" + _item.PascalName + "Audit> CompareAudits(" + _item.PascalName + "Audit item1' " + _item.PascalName + "Audit item2)"); " is 191.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "			sb.AppendLine("			var retval = new nHydrate.EFCore.DataAccess.AuditResult<" + _item.PascalName + "Audit>(item1' item2);"); " is 122.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "				if (!(column.DataType == System.Data.SqlDbType.Text || column.DataType == System.Data.SqlDbType.NText || column.DataType == System.Data.SqlDbType.Image)) " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "						sb.AppendLine("				differences.Add(new " + _item.PascalName + "AuditResultFieldCompare<" + column.GetCodeType(true) + ">(item1." + column.PascalName + "' item2." + column.PascalName + "' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + "' typeof(" + column.GetCodeType(false) + ")));"); " is 355.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "						sb.AppendLine("			if (item1." + column.PascalName + " != null && item2." + column.PascalName + " != null && !item1." + column.PascalName + ".SequenceEqual(item2." + column.PascalName + "))"); " is 191.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "						sb.AppendLine("				differences.Add(new " + _item.PascalName + "AuditResultFieldCompare<" + column.GetCodeType(true) + ">(item1." + column.PascalName + "' item2." + column.PascalName + "' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + "' typeof(" + column.GetCodeType(false) + ")));"); " is 355.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "							sb.AppendLine("				differences.Add(new " + _item.PascalName + "AuditResultFieldCompare<" + column.GetCodeType(true) + ">((" + column.GetCodeType(false) + ")item1." + column.PascalName + "' (" + column.GetCodeType(false) + ")item2." + column.PascalName + "' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + "' typeof(" + column.GetCodeType(false) + ")));"); " is 425.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "							sb.AppendLine("				differences.Add(new " + _item.PascalName + "AuditResultFieldCompare<" + column.GetCodeType(true) + ">(item1." + column.PascalName + "' item2." + column.PascalName + "' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + "' typeof(" + column.GetCodeType(false) + ")));"); " is 355.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "							sb.AppendLine("				differences.Add(new " + _item.PascalName + "AuditResultFieldCompare<" + column.GetCodeType(true) + ">(item1." + column.PascalName + ".GetValueOrDefault()' item2." + column.PascalName + ".GetValueOrDefault()' " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + "' typeof(" + column.GetCodeType(false) + ")));"); " is 395.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "			sb.AppendLine("		public virtual int CompareTo(" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit other)"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendCompare,The length of the statement  "			sb.AppendLine("			if (other is " + this.GetLocalNamespace() + ".Audit." + _item.PascalName + "Audit) return this.CompareTo(other as " + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit);"); " is 217.
Long Statement,nHydrate.Generator.EFDAL.Generators.ActionTypes,ActionTypesGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ActionTypes\ActionTypesGeneratedGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.ActionTypes,ActionTypesGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ActionTypes\ActionTypesGeneratedTemplate.cs,GenerateContent,The length of the statement  "				sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.ActionTypes,ActionTypesGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ActionTypes\ActionTypesGeneratedTemplate.cs,GenerateContent,The length of the statement  "				sb.AppendLine("	public partial class " + doubleDerivedClassName + " : " + this.DefaultNamespace + ".EFDAL.Interfaces.Action.I" + _storedProc.PascalName); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,GenerateContent,The length of the statement  "            //sb.AppendFormat("<Mapping Space=\"C-S\" xmlns=\"{0}\">"' nm.GetMSLNamespaceForVersion(EntityFrameworkVersions.Version2)).AppendLine(); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,GenerateContent,The length of the statement  "            sb.AppendFormat("	<EntityContainerMapping StorageEntityContainer=\"{0}ModelStoreContainer\" CdmEntityContainer=\"{0}Entities\">"' _model.ProjectName).AppendLine(); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendFunctionImportMapping,The length of the statement  "                sb.AppendLine("		<FunctionImportMapping FunctionImportName=\"" + storedProcedure.PascalName + "\" FunctionName=\"" + this.GetLocalNamespace() + ".Store." + storedProcedure.PascalName + "\">"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendFunctionImportMapping,The length of the statement  "                sb.AppendLine("				<ComplexTypeMapping TypeName=\"" + this.GetLocalNamespace() + ".Entity." + storedProcedure.PascalName + "\">"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendFunctionImportMapping,The length of the statement  "                sb.AppendLine("		<FunctionImportMapping FunctionImportName=\"" + function.PascalName + "_SPWrapper\" FunctionName=\"" + this.GetLocalNamespace() + ".Store." + function.PascalName + "_SPWrapper\">"); " is 198.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendFunctionImportMapping,The length of the statement  "                sb.AppendLine("				<ComplexTypeMapping TypeName=\"" + this.GetLocalNamespace() + ".Entity." + function.PascalName + "\">"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "                    sb.AppendLine("		<AssociationSetMapping Name=\"" + table.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "\" StoreEntitySet=\"" + table.DatabaseName + "\">"); " is 201.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "                        sb.AppendLine("				<DeleteFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Delete\">"); " is 188.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "                            sb.AppendLine("				<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation1.DatabaseRoleName + table1.DatabaseName + "_" + column.DatabaseName + "\" />"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "                            sb.AppendLine("						<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation2.DatabaseRoleName + table2.DatabaseName + "_" + column.DatabaseName + "\" />"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "                        sb.AppendLine("				<InsertFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Insert\">"); " is 188.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "            foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "                    sb.AppendFormat("			<EntityTypeMapping TypeName=\"{0}.{1}\">"' this.GetLocalNamespace() + ".Entity"' currentTable.PascalName); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "                        sb.AppendFormat("				<EntityTypeMapping TypeName=\"IsTypeOf({0}.{1})\">"' this.GetLocalNamespace() + ".Entity"' table.PascalName); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "                        sb.AppendFormat("				<EntityTypeMapping TypeName=\"{0}.{1}\">"' this.GetLocalNamespace() + ".Entity"' table.PascalName); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendViewEntityMappingSet,The length of the statement  "                sb.AppendFormat("			<EntityTypeMapping TypeName=\"{0}.{1}\">"' this.GetLocalNamespace() + ".Entity"' currentView.PascalName).AppendLine(); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                //  sb.AppendLine("					<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                    sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                    sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                    sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                    sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                    sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                //For Descendents with NO generated CRUD layer do NOT add timestamp column as concurrency is handled by the ancestor with EF " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendMappingFragment,The length of the statement  "                        sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMap,The length of the statement  "            sb.AppendFormat("					<InsertFunction FunctionName=\"{0}.Store." + _model.GetStoredProcedurePrefix() + "_{1}_{2}Insert\">"' this.GetLocalNamespace()' currentTable.PascalName' moduleSuffix).AppendLine(); " is 202.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertReturnProperties,The length of the statement  "                    sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMapScalar,The length of the statement  "                        //  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMapScalar,The length of the statement  "                            sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMapScalar,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMapScalar,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMapScalar,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMap,The length of the statement  "            var spName = string.Format("{0}.Store." + _model.GetStoredProcedurePrefix() + "_{1}_{2}Update"' this.GetLocalNamespace()' currentTable.PascalName' moduleSuffix); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMap,The length of the statement  "            if (currentTable.AssociativeTable) spName = string.Format("{0}.Store." + _model.GetStoredProcedurePrefix() + "_NOOP"' this.GetLocalNamespace()' currentTable.PascalName); " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "                    sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "                sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"Original_{1}\" Version=\"Original\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"Original_{1}\" Version=\"Original\" />"' currentColumn.PascalName' currentColumn.DatabaseName); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                            //sb.AppendFormat("						<AssociationEnd AssociationSet=\"{0}\" From=\"{3}{1}List\" To=\"{3}{2}\">"' currentRelation.GetCodeFkName()' childTable.PascalName' parentTable.PascalName' currentRelation.PascalRoleName).AppendLine(); " is 226.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                                //  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                                //  sb.AppendLine("							<ScalarProperty Name=\"Value\" ParameterName=\"" + childColumn.DatabaseName + "\" Version=\"Current\" />"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' childColumn.PascalName' childColumn.DatabaseName); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                        //  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                        //  sb.AppendLine("							<ScalarProperty Name=\"Value\" ParameterName=\"" + currentColumn.DatabaseName + "\" Version=\"Current\" />"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                            sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' currentColumn.PascalName' currentColumn.DatabaseName); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName); " is 177.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "                    sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName); " is 181.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendDeleteMap,The length of the statement  "            sb.AppendFormat("					<DeleteFunction FunctionName=\"{0}.Store." + _model.GetStoredProcedurePrefix() + "_{1}_{2}Delete\">"' this.GetLocalNamespace()' currentTable.PascalName' moduleSuffix).AppendLine(); " is 202.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendDeleteMap,The length of the statement  "                        //  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendDeleteMap,The length of the statement  "                        //  sb.AppendLine("							<ScalarProperty Name=\"Value\" ParameterName=\"" + parentTable.DatabaseName + "_" + parentColumn.DatabaseName + "\" />"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,GenerateContent,The length of the statement  "			//sb.AppendFormat("<Mapping Space=\"C-S\" xmlns=\"{0}\">"' nm.GetMSLNamespaceForVersion(EntityFrameworkVersions.Version2)).AppendLine(); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,GenerateContent,The length of the statement  "			sb.AppendFormat("	<EntityContainerMapping StorageEntityContainer=\"{0}ModelStoreContainer\" CdmEntityContainer=\"{0}Entities\">"' _model.ProjectName).AppendLine(); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendFunctionImportMapping,The length of the statement  "				sb.AppendLine("		<FunctionImportMapping FunctionImportName=\"" + storedProcedure.PascalName + "\" FunctionName=\"" + this.GetLocalNamespace() + ".Store." + storedProcedure.PascalName + "\">"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendFunctionImportMapping,The length of the statement  "				sb.AppendLine("				<ComplexTypeMapping TypeName=\"" + this.GetLocalNamespace() + ".Entity." + storedProcedure.PascalName + "\">"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendFunctionImportMapping,The length of the statement  "				sb.AppendLine("		<FunctionImportMapping FunctionImportName=\"" + function.PascalName  + "_SPWrapper\" FunctionName=\"" + this.GetLocalNamespace() + ".Store." + function.PascalName + "_SPWrapper\">"); " is 199.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendFunctionImportMapping,The length of the statement  "				sb.AppendLine("				<ComplexTypeMapping TypeName=\"" + this.GetLocalNamespace() + ".Entity." + function.PascalName + "\">"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "			foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "					sb.AppendLine("		<AssociationSetMapping Name=\"" + table.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "\" StoreEntitySet=\"" + table.DatabaseName + "\">"); " is 201.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "						sb.AppendLine("				<DeleteFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Delete\">"); " is 188.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "							sb.AppendLine("				<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation1.DatabaseRoleName + table1.DatabaseName + "_" + column.DatabaseName + "\" />"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "							sb.AppendLine("						<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation2.DatabaseRoleName + table2.DatabaseName + "_" + column.DatabaseName + "\" />"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The length of the statement  "						sb.AppendLine("				<InsertFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Insert\">"); " is 188.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "			foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "					sb.AppendFormat("			<EntityTypeMapping TypeName=\"{0}.{1}\">"' this.GetLocalNamespace() + ".Entity"' currentTable.PascalName); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "						sb.AppendFormat("				<EntityTypeMapping TypeName=\"IsTypeOf({0}.{1})\">"' this.GetLocalNamespace() + ".Entity"' table.PascalName); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendTableEntityMappingSet,The length of the statement  "						sb.AppendFormat("				<EntityTypeMapping TypeName=\"{0}.{1}\">"' this.GetLocalNamespace() + ".Entity"' table.PascalName); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendViewEntityMappingSet,The length of the statement  "				sb.AppendFormat("			<EntityTypeMapping TypeName=\"{0}.{1}\">"' this.GetLocalNamespace() + ".Entity"' currentView.PascalName).AppendLine(); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "				sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "				//  sb.AppendLine("					<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "					sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "					sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "					sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "					sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "					sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "				//For Descendents with NO generated CRUD layer do NOT add timestamp column as concurrency is handled by the ancestor with EF " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendMappingFragment,The length of the statement  "						sb.AppendFormat("					<ScalarProperty Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMap,The length of the statement  "			sb.AppendFormat("					<InsertFunction FunctionName=\"{0}.Store." + _model.GetStoredProcedurePrefix() + "_{1}_{2}Insert\">"' this.GetLocalNamespace()' currentTable.PascalName' moduleSuffix).AppendLine(); " is 202.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertReturnProperties,The length of the statement  "					sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName).AppendLine(); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMapScalar,The length of the statement  "						//  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMapScalar,The length of the statement  "							sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName).AppendLine(); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMapScalar,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName).AppendLine(); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMapScalar,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMapScalar,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMap,The length of the statement  "			var spName = string.Format("{0}.Store." + _model.GetStoredProcedurePrefix() + "_{1}_{2}Update"' this.GetLocalNamespace()' currentTable.PascalName' moduleSuffix); " is 161.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMap,The length of the statement  "			if (currentTable.AssociativeTable) spName = string.Format("{0}.Store." + _model.GetStoredProcedurePrefix() + "_NOOP"' this.GetLocalNamespace()' currentTable.PascalName); " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "					sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' currentColumn.PascalName' currentColumn.DatabaseName); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedByPascalName' _model.Database.CreatedByDatabaseName); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.CreatedDatePascalName' _model.Database.CreatedDateDatabaseName); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapReturnProperties,The length of the statement  "				sb.AppendFormat("						<ResultBinding Name=\"{0}\" ColumnName=\"{1}\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"Original_{1}\" Version=\"Original\" />"' _model.Database.TimestampPascalName' _model.Database.TimestampDatabaseName); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"Original_{1}\" Version=\"Original\" />"' currentColumn.PascalName' currentColumn.DatabaseName); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "							//sb.AppendFormat("						<AssociationEnd AssociationSet=\"{0}\" From=\"{3}{1}List\" To=\"{3}{2}\">"' currentRelation.GetCodeFkName()' childTable.PascalName' parentTable.PascalName' currentRelation.PascalRoleName).AppendLine(); " is 226.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "								//  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "								//  sb.AppendLine("							<ScalarProperty Name=\"Value\" ParameterName=\"" + childColumn.DatabaseName + "\" Version=\"Current\" />"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "									sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' childColumn.PascalName' childColumn.DatabaseName); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "						//  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "						//  sb.AppendLine("							<ScalarProperty Name=\"Value\" ParameterName=\"" + currentColumn.DatabaseName + "\" Version=\"Current\" />"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "							sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' currentColumn.PascalName' currentColumn.DatabaseName); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' _model.Database.ModifiedByPascalName' _model.Database.ModifiedByDatabaseName); " is 177.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The length of the statement  "					sb.AppendFormat("						<ScalarProperty Name=\"{0}\" ParameterName=\"{1}\" Version=\"Current\" />"' _model.Database.ModifiedDatePascalName' _model.Database.ModifiedDateDatabaseName); " is 181.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendDeleteMap,The length of the statement  "			sb.AppendFormat("					<DeleteFunction FunctionName=\"{0}.Store." + _model.GetStoredProcedurePrefix() + "_{1}_{2}Delete\">"' this.GetLocalNamespace()' currentTable.PascalName' moduleSuffix).AppendLine(); " is 202.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendDeleteMap,The length of the statement  "						//  sb.AppendLine("						<ComplexProperty Name=\"" + typeTable.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper\">"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendDeleteMap,The length of the statement  "						//  sb.AppendLine("							<ScalarProperty Name=\"Value\" ParameterName=\"" + parentTable.DatabaseName + "_" + parentColumn.DatabaseName + "\" />"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,GenerateContent,The length of the statement  "            sb.AppendFormat("<Schema Namespace=\"{0}.Store\" Alias=\"Self\" Provider=\"System.Data.SqlClient\" ProviderManifestToken=\"" + (_model.SQLServerType == SQLServerTypeConstants.SQL2005 ? "2005" : "2008") + "\" xmlns:store=\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\" xmlns=\"http://schemas.microsoft.com/ado/2009/02/edm/ssdl\">"' this.GetLocalNamespace()).AppendLine(); " is 398.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendFunctions,The length of the statement  "                if (_model.Database.Tables.Count(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)) > 0) " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendFunctions,The length of the statement  "                    sb.AppendLine("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_NOOP\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"dbo\">"); " is 238.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendScalerFunctions,The length of the statement  "                sb.AppendLine("	<Function Name=\"" + function.DatabaseName + "\" ReturnType=\"" + (function.Columns.First().Object as FunctionColumn).DataType.ToString().ToLower() + "\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"true\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + function.GetSQLSchema() + "\">"); " is 353.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendScalerFunctions,The length of the statement  "                    sb.AppendLine("		<Parameter Name=\"" + parameter.DatabaseName + "\" Type=\"" + parameter.DataType.ToString().ToLower() + "\" Mode=\"In\" />"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                sb.AppendLine("	<Function Name=\"" + storedProcedure.PascalName + "\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + storedProcedure.GetSQLSchema() + "\">"); " is 261.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                    sb.AppendLine("		<Parameter Name=\"" + param.PascalName + "\" Type=\"" + param.DataType.ToEFSqlDBType() + "\" Mode=\"" + (param.IsOutputParameter ? "InOut" : "In") + "\" />"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                sb.AppendLine("	<Function Name=\"" + function.PascalName + "_SPWrapper\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + function.GetSQLSchema() + "\">"); " is 257.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                    sb.AppendLine("		<Parameter Name=\"" + param.PascalName + "\" Type=\"" + param.DataType.ToEFSqlDBType() + "\" Mode=\"" + (param.IsOutputParameter ? "InOut" : "In") + "\" />"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "            foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                //  sb.AppendFormat("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_{0}__AUDIT\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"' currentTable.PascalName).AppendLine(); " is 320.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                //    sb.AppendLine("		<Parameter Name=\"" + primaryKeyColumn.DatabaseName + "\" Type=\"" + primaryKeyColumn.EFDatabaseType(false) + "\" Mode=\"In\" />"); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                sb.AppendFormat("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_{0}Delete\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"' currentTable.PascalName + "_" + moduleSuffix).AppendLine(); " is 336.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                sb.AppendFormat("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_{0}Insert\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"' currentTable.PascalName + "_" + moduleSuffix).AppendLine(); " is 336.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                foreach (var currentColumn in currentTable.GetColumnsFullHierarchy().Where(x => x.Generated && !x.ComputedColumn && !x.IsReadOnly)) " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                    if (!currentColumn.PrimaryKey || currentTable.GetBasePKColumn(currentColumn).Identity != IdentityTypeConstants.Database) " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"{1}\" Mode=\"In\" />"' currentColumn.DatabaseName' currentColumn.EFSqlDatabaseType(false)).AppendLine(); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"datetime\" Mode=\"In\" />"' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"varchar\" Mode=\"In\" />"' _model.Database.CreatedByDatabaseName).AppendLine(); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"varchar\" Mode=\"In\" />"' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                    sb.AppendLine("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_" + currentTable.PascalName + "_" + moduleSuffix + "Update" + "\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"); " is 329.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                    foreach (var currentColumn in currentTable.GetColumnsFullHierarchy().Where(x => x.Generated && !x.ComputedColumn && !x.IsReadOnly)) " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                            sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"{1}\" Mode=\"In\" />"' currentColumn.DatabaseName' currentColumn.EFSqlDatabaseType(false)).AppendLine(); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"datetime\" Mode=\"In\" />"' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"varchar\" Mode=\"In\" />"' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"Original_{0}\" Type=\"{1}\" Mode=\"In\" />"' primaryKeyColumn.DatabaseName' primaryKeyColumn.EFSqlDatabaseType(false)).AppendLine(); " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"Original_{0}\" Type=\"timestamp\" Mode=\"In\" />"' _model.Database.TimestampDatabaseName).AppendLine(); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The length of the statement  "                    sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"{2}\" />"' parentEntity.DatabaseName' this.GetLocalNamespace()' relation.ParentMultiplicity()); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"{2}\" />"' childEntity.DatabaseName' this.GetLocalNamespace()' relation.ChildMultiplicity()); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("			<Dependent Role=\"{0}\">"' childEntity.DatabaseName + "_" + relation.DatabaseRoleName).AppendLine(); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"0..1\" />"' parentEntity.DatabaseName' this.GetLocalNamespace()); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"*\" />"' childEntity.DatabaseName' this.GetLocalNamespace()).AppendLine(); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityType,The length of the statement  "            foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The length of the statement  "                sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.Store.{0}\" store:Type=\"Tables\" Schema=\"" + table.GetSQLSchema() + "\" />"' table.DatabaseName' this.GetLocalNamespace()); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The length of the statement  "                sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.Store.{0}\" store:Type=\"Views\" store:Schema=\"" + view.GetSQLSchema() + "\" store:Name=\"{0}\">"' view.PascalName' this.GetLocalNamespace()).AppendLine(); " is 216.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The length of the statement  "                    sb.AppendFormat("		<AssociationSet Name=\"{0}\" Association=\"{1}.Store.{0}\">"' relation.GetDatabaseFkName()' this.GetLocalNamespace()).AppendLine(); " is 150.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The length of the statement  "                        sb.AppendFormat("			<End Role=\"{0}\" EntitySet=\"{1}\" />"' childEntity.DatabaseName + "_" + relation.DatabaseRoleName' childEntity.DatabaseName); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The length of the statement  "                    sb.AppendFormat("		<AssociationSet Name=\"{0}\" Association=\"{1}.Store.{0}\">"' relation.GetDatabaseFkName()' this.GetLocalNamespace()).AppendLine(); " is 150.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"varchar\" MaxLength=\"50\" />"' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"datetime\" />"' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"varchar\" MaxLength=\"50\" />"' _model.Database.CreatedByDatabaseName).AppendLine(); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"timestamp\" Nullable=\"false\" StoreGeneratedPattern=\"Computed\" />"' _model.Database.TimestampDatabaseName).AppendLine(); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,GenerateContent,The length of the statement  "            sb.AppendFormat("<Schema Namespace=\"{0}.Store\" Alias=\"Self\" Provider=\"System.Data.SqlClient\" ProviderManifestToken=\"" + (_model.SQLServerType == SQLServerTypeConstants.SQL2005 ? "2005" : "2008") + "\" xmlns:store=\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\" xmlns=\"http://schemas.microsoft.com/ado/2009/02/edm/ssdl\">"' this.GetLocalNamespace()).AppendLine(); " is 398.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendFunctions,The length of the statement  "                if (_model.Database.Tables.Count(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)) > 0) " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendFunctions,The length of the statement  "                    sb.AppendLine("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_NOOP\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"dbo\">"); " is 238.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendScalerFunctions,The length of the statement  "                sb.AppendLine("	<Function Name=\"" + function.DatabaseName + "\" ReturnType=\"" + (function.Columns.First().Object as FunctionColumn).DataType.ToString().ToLower() + "\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"true\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + function.GetSQLSchema() + "\">"); " is 353.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendScalerFunctions,The length of the statement  "                    sb.AppendLine("		<Parameter Name=\"" + parameter.DatabaseName + "\" Type=\"" + parameter.DataType.ToString().ToLower() + "\" Mode=\"In\" />"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                sb.AppendLine("	<Function Name=\"" + storedProcedure.PascalName + "\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + storedProcedure.GetSQLSchema() + "\">"); " is 261.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                    sb.AppendLine("		<Parameter Name=\"" + param.PascalName + "\" Type=\"" + param.DataType.ToEFSqlDBType() + "\" Mode=\"" + (param.IsOutputParameter ? "InOut" : "In") + "\" />"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                sb.AppendLine("	<Function Name=\"" + function.PascalName + "_SPWrapper\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + function.GetSQLSchema() + "\">"); " is 257.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendCustomSpFunctions,The length of the statement  "                    sb.AppendLine("		<Parameter Name=\"" + param.PascalName + "\" Type=\"" + param.DataType.ToEFSqlDBType() + "\" Mode=\"" + (param.IsOutputParameter ? "InOut" : "In") + "\" />"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "            foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                //  sb.AppendFormat("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_{0}__AUDIT\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"' currentTable.PascalName).AppendLine(); " is 320.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                //    sb.AppendLine("		<Parameter Name=\"" + primaryKeyColumn.DatabaseName + "\" Type=\"" + primaryKeyColumn.EFDatabaseType(false) + "\" Mode=\"In\" />"); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                sb.AppendFormat("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_{0}Delete\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"' currentTable.PascalName + "_" + moduleSuffix).AppendLine(); " is 336.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                sb.AppendFormat("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_{0}Insert\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"' currentTable.PascalName + "_" + moduleSuffix).AppendLine(); " is 336.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                foreach (var currentColumn in currentTable.GetColumnsFullHierarchy().Where(x => x.Generated && !x.ComputedColumn && !x.IsReadOnly)) " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                    if (!currentColumn.PrimaryKey || currentTable.GetBasePKColumn(currentColumn).Identity != IdentityTypeConstants.Database) " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"{1}\" Mode=\"In\" />"' currentColumn.DatabaseName' currentColumn.EFSqlDatabaseType(false)).AppendLine(); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"datetime\" Mode=\"In\" />"' _model.Database.CreatedDateDatabaseName).AppendLine(); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"varchar\" Mode=\"In\" />"' _model.Database.CreatedByDatabaseName).AppendLine(); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"varchar\" Mode=\"In\" />"' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                    sb.AppendLine("	<Function Name=\"" + _model.GetStoredProcedurePrefix() + "_" + currentTable.PascalName + "_" + moduleSuffix + "Update" + "\" Aggregate=\"false\" BuiltIn=\"false\" NiladicFunction=\"false\" IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\" Schema=\"" + currentTable.GetSQLSchema() + "\">"); " is 329.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                    foreach (var currentColumn in currentTable.GetColumnsFullHierarchy().Where(x => x.Generated && !x.ComputedColumn && !x.IsReadOnly)) " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                            sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"{1}\" Mode=\"In\" />"' currentColumn.DatabaseName' currentColumn.EFSqlDatabaseType(false)).AppendLine(); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"datetime\" Mode=\"In\" />"' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"{0}\" Type=\"varchar\" Mode=\"In\" />"' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"Original_{0}\" Type=\"{1}\" Mode=\"In\" />"' primaryKeyColumn.DatabaseName' primaryKeyColumn.EFSqlDatabaseType(false)).AppendLine(); " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendTableStoreProcedureFunctions,The length of the statement  "                        sb.AppendFormat("		<Parameter Name=\"Original_{0}\" Type=\"timestamp\" Mode=\"In\" />"' _model.Database.TimestampDatabaseName).AppendLine(); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"{2}\" />"' parentEntity.DatabaseName' this.GetLocalNamespace()' relation.ParentMultiplicity()); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The length of the statement  "                            sb.AppendFormat("		<End Role=\"{3}\" Type=\"{1}.Store.{0}\" Multiplicity=\"{2}\" />"' childEntity.DatabaseName' this.GetLocalNamespace()' relation.ChildMultiplicity()' childEntity.DatabaseName + "_" + relation.DatabaseRoleName); " is 228.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The length of the statement  "                            sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"{2}\" />"' childEntity.DatabaseName' this.GetLocalNamespace()' relation.ChildMultiplicity()); " is 168.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("			<Dependent Role=\"{0}\">"' childEntity.DatabaseName + "_" + relation.DatabaseRoleName).AppendLine(); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The length of the statement  "                            sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"0..1\" />"' parentEntity.DatabaseName' this.GetLocalNamespace()); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The length of the statement  "                        sb.AppendFormat("		<End Role=\"{0}\" Type=\"{1}.Store.{0}\" Multiplicity=\"*\" />"' childEntity.DatabaseName' this.GetLocalNamespace()).AppendLine(); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityType,The length of the statement  "            foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                    sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.Store.{0}\" store:Type=\"Tables\" Schema=\"" + table.GetSQLSchema() + "\" />"' _model.TenantPrefix + "_" + table.DatabaseName' this.GetLocalNamespace()); " is 213.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                    sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.Store.{0}\" store:Type=\"Tables\" Schema=\"" + table.GetSQLSchema() + "\" />"' table.DatabaseName' this.GetLocalNamespace()); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.Store.{0}\" store:Type=\"Views\" store:Schema=\"" + view.GetSQLSchema() + "\" store:Name=\"{0}\">"' view.PascalName' this.GetLocalNamespace()).AppendLine(); " is 216.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                    sb.AppendFormat("		<AssociationSet Name=\"{0}\" Association=\"{1}.Store.{0}\">"' relation.GetDatabaseFkName()' this.GetLocalNamespace()).AppendLine(); " is 150.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                        sb.AppendFormat("			<End Role=\"{0}\" EntitySet=\"{1}\" />"' parentEntity.DatabaseName' _model.TenantPrefix + "_" + parentEntity.DatabaseName); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                            sb.AppendFormat("			<End Role=\"{0}\" EntitySet=\"{1}\" />"' childEntity.DatabaseName + "_" + relation.DatabaseRoleName' _model.TenantPrefix + "_" + childEntity.DatabaseName); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                            sb.AppendFormat("			<End Role=\"{0}\" EntitySet=\"{1}\" />"' childEntity.DatabaseName + "_" + relation.DatabaseRoleName' childEntity.DatabaseName); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                            sb.AppendFormat("			<End Role=\"{0}\" EntitySet=\"{1}\" />"' childEntity.DatabaseName' _model.TenantPrefix + "_" + childEntity.DatabaseName); " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                    sb.AppendFormat("		<AssociationSet Name=\"{0}\" Association=\"{1}.Store.{0}\">"' relation.GetDatabaseFkName()' this.GetLocalNamespace()).AppendLine(); " is 150.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The length of the statement  "                        sb.AppendFormat("			<End Role=\"{0}\" EntitySet=\"{1}\" />"' parentEntity.DatabaseName' _model.TenantPrefix + "_" + parentEntity.DatabaseName); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"varchar\" MaxLength=\"50\" />"' _model.Database.ModifiedByDatabaseName).AppendLine(); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"datetime\" />"' _model.Database.ModifiedDateDatabaseName).AppendLine(); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"varchar\" MaxLength=\"50\" />"' _model.Database.CreatedByDatabaseName).AppendLine(); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "                sb.AppendFormat("		<Property Name=\"{0}\" Type=\"timestamp\" Nullable=\"false\" StoreGeneratedPattern=\"Computed\" />"' _model.Database.TimestampDatabaseName).AppendLine(); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedGenerator.cs,Generate,The length of the statement  "				var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[EdmEntityTypeAttribute(NamespaceName = \"" + this.GetLocalNamespace() + ".Entity" + "\"' Name = \"" + _item.PascalName + "\")]"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[nHydrate.EFCore.Attributes.FieldNameConstantsAttribute(typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))]"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                sb.AppendLine("	[System.ComponentModel.Description(\"" + StringHelper.ConvertTextToSingleLineCodeString(_item.Description) + "\")]"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	public partial class " + doubleDerivedClassName + " : nHydrate.EFCore.DataAccess.NHEntityObject' nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject' " + GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.IEquatable<" + GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 331.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendConstructors,The length of the statement  "            sb.AppendLine("		/// Initializes a new instance of the " + this.GetLocalNamespace() + ".Entity." + _item.PascalName + " class"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendConstructors,The length of the statement  "            if (_item.PrimaryKeyColumns.Count == 1 && _item.PrimaryKeyColumns[0].DataType == System.Data.SqlDbType.UniqueIdentifier) " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendIsEquivalent,The length of the statement  "            sb.AppendLine("			return ((System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">)this).Equals(item as " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ");"); " is 225.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' object defaultValue)"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")"); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                    sb.AppendLine("				return ((this." + column.PascalName + " == null) ? defaultValue : this." + column.PascalName + ");"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public int GetInteger(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public int GetInteger(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' int defaultValue)"); " is 160.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public double GetDouble(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 144.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public double GetDouble(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' double defaultValue)"); " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public System.DateTime GetDateTime(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public System.DateTime GetDateTime(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' System.DateTime defaultValue)"); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public string GetString(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 144.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public string GetString(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' string defaultValue)"); " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		/// The property that maps back to the database '" + (column.ParentTableRef.Object as Table).DatabaseName + "." + column.DatabaseName + "' field"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		[System.ComponentModel.Description(\"" + StringHelper.ConvertTextToSingleLineCodeString(column.Description) + "\")]"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.AppendLine("		[nHydrate.EFCore.Attributes.EntityFieldMetadata(\"" + column.PascalName + "\"' " + column.SortOrder + "' " + column.UIVisible.ToString().ToLower() + "' " + column.Length + "' \"" + column.Mask + "\"' \"" + column.GetFriendlyName() + "\"' \"" + column.Default + "\"' " + column.AllowNull.ToString().ToLower() + "' \"" + column.Description + "\"' " + column.ComputedColumn.ToString().ToLower() + "' " + column.IsUnique.ToString().ToLower() + "' " + (double.IsNaN(column.Min) ? "double.NaN" : column.Min.ToString()) + "' " + (double.IsNaN(column.Max) ? "double.NaN" : column.Max.ToString()) + "' " + column.PrimaryKey.ToString().ToLower() + ")]"); " is 661.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<" + typeTable.PascalName + "Constants>(value' \"" + typeTable.PascalName + "\");"); " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                sb.AppendLine("		[EdmScalarPropertyAttribute(EntityKeyProperty = false' IsNullable = " + (column.AllowNull ? "true" : "false") + ")]"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.AppendLine("		[System.ComponentModel.Description(\"" + StringHelper.ConvertTextToSingleLineCodeString(column.Description) + "\")]"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.Append("				if ((value != null) && (value.Length > GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")))"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.AppendLine(" throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG' value' \"" + _item.PascalName + "." + column.PascalName + "\"' GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")));"); " is 285.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.AppendLine("				if (" + (column.AllowNull ? "(value != null) && " : "") + "(value < GlobalValues.MIN_DATETIME)) throw new Exception(\"The DateTime value '" + column.PascalName + "' (\" + value" + (column.AllowNull ? ".Value" : "") + ".ToString(\"yyyy-MM-dd HH:mm:ss\") + \") cannot be less than \" + GlobalValues.MIN_DATETIME.ToString());"); " is 344.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.AppendLine("				if (" + (column.AllowNull ? "(value != null) && " : "") + "(value > GlobalValues.MAX_DATETIME)) throw new Exception(\"The DateTime value '" + column.PascalName + "' (\" + value" + (column.AllowNull ? ".Value" : "") + ".ToString(\"yyyy-MM-dd HH:mm:ss\") + \") cannot be greater than \" + GlobalValues.MAX_DATETIME.ToString());"); " is 347.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                sb.AppendLine("				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<" + column.GetCodeType() + ">(value' \"" + column.PascalName + "\");"); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendPropertyEventDeclarations,The length of the statement  "            sb.AppendLine("		public event EventHandler<nHydrate.EFCore.EventArgs.ChangingEventArgs<" + codeType + ">> " + columnName + "Changing;"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendPropertyEventDeclarations,The length of the statement  "            sb.AppendLine("		protected virtual void On" + columnName + "Changing(nHydrate.EFCore.EventArgs.ChangingEventArgs<" + codeType + "> e)"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static int GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ":"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetMaxLength((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static System.Type GetFieldType(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 159.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The '\" + field.GetType().ReflectedType.ToString() + \".FieldNameConstants' value is not valid. The field parameter must be of type '\" + this.GetType().ToString() + \".FieldNameConstants'.\");"); " is 237.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			switch ((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field)"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ": return typeof(" + column.GetCodeType() + ");"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants);"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field' object defaultValue)"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The '\" + field.GetType().ReflectedType.ToString() + \".FieldNameConstants' value is not valid. The field parameter must be of type '\" + this.GetType().ToString() + \".FieldNameConstants'.\");"); " is 237.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return this.GetValue((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field' defaultValue);"); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,GenerateAuditField,The length of the statement  "            sb.AppendLine("				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<" + codeType + ">(value' \"" + columnName + "\");"); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,GenerateAuditField,The length of the statement  "            sb.AppendLine("		/// The internal reference variable for the '" + StringHelper.DatabaseNameToCamelCase(columnName) + "' property"); " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "            sb.AppendLine("		internal static string GetDatabaseFieldName(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.ViewEntity,ViewEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\ViewEntity\ViewEntityGeneratedTemplate.cs,AppendIEquatable,The length of the statement  "            sb.AppendLine("		bool System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">.Equals(" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + " other)"); " is 211.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,GenerateContent,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                sb.AppendLine("	/// This is a helper object for creating LINQ definitions for context includes on the " + table.PascalName + " collection."); " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                                sb.AppendLine("		/// This is a mapping of the relationship with the " + childTable.PascalName + " entity. This is a N:M relation with two relationships though an intermediary table. (" + parentTable.PascalName + " -> " + middleTable.PascalName + " -> " + childTable.PascalName + ")"); " is 284.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                                    sb.AppendLine("		public " + this.GetLocalNamespace() + "." + childTable.PascalName + "Include " + relation.PascalRoleName + childTable.PascalName + " { get; private set; }"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                                    sb.AppendLine("		public " + this.GetLocalNamespace() + "." + childTable.PascalName + "Include " + relation.PascalRoleName + childTable.PascalName + "List { get; private set; }"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                                sb.AppendLine("		/// This is a mapping of the relationship with the " + childTable.PascalName + " entity." + (relation.PascalRoleName == "" ? "" : " (Role: '" + relation.RoleName + "')")); " is 188.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                                    sb.AppendLine("		public " + this.GetLocalNamespace() + "." + childTable.PascalName + "Include " + relation.PascalRoleName + childTable.PascalName + " { get; private set; }"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                                    sb.AppendLine("		public " + this.GetLocalNamespace() + "." + childTable.PascalName + "Include " + relation.PascalRoleName + childTable.PascalName + "List { get; private set; }"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                        if (parentTable.Generated && (parentTable.TypedTable != TypedTableConstants.EnumOnly) && (!allTables.Contains(parentTable))) " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                            sb.AppendLine("		/// This is a mapping of the relationship with the " + parentTable.PascalName + " entity." + (relation.PascalRoleName == "" ? "" : " (Role: '" + relation.RoleName + "')")); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                            sb.AppendLine("		public " + this.GetLocalNamespace() + "." + parentTable.PascalName + "Include " + relation.PascalRoleName + parentTable.PascalName + " { get; private set; }"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,GenerateContent,The length of the statement  "                foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.TypedTable != TypedTableConstants.EnumOnly).OrderBy(x => x.Name)) " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                sb.AppendLine("	public partial class " + table.PascalName + "Query : nHydrate.EFCore.DataAccess.IBusinessObjectLINQQuery"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                    sb.AppendLine("		[Column(Name = \"" + _model.Database.CreatedDateColumnName + "\"' DbType = \"DateTime\"' CanBeNull = true)]"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                    sb.AppendLine("		[Column(Name = \"" + _model.Database.CreatedByColumnName + "\"' DbType = \"VarChar(100)\"' CanBeNull = true)]"); " is 129.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                    sb.AppendLine("		[Column(Name = \"" + _model.Database.ModifiedDateColumnName + "\"' DbType = \"DateTime\"' CanBeNull = true)]"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                    sb.AppendLine("		[Column(Name = \"" + _model.Database.ModifiedByColumnName + "\"' DbType = \"VarChar(100)\"' CanBeNull = true)]"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                    sb.AppendLine("		[Column(Name = \"" + _model.Database.TimestampColumnName + "\"' DbType = \"Binary\"' CanBeNull = false)]"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                    if (childTable.Generated & (childTable.TypedTable != TypedTableConstants.EnumOnly) && (!allTables.Contains(childTable))) " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                        sb.AppendLine("		/// This is a mapping of the relationship with the " + childTable.PascalName + " entity." + (relation.PascalRoleName == "" ? "" : " (Role: '" + relation.RoleName + "')")); " is 188.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                            sb.AppendLine("		public " + this.GetLocalNamespace() + "." + childTable.PascalName + "Query " + relation.PascalRoleName + childTable.PascalName + " { get; private set; }"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                            sb.AppendLine("		public " + this.GetLocalNamespace() + "." + childTable.PascalName + "Query " + relation.PascalRoleName + childTable.PascalName + "List { get; private set; }"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                        if (parentTable.Generated && (parentTable.TypedTable != TypedTableConstants.EnumOnly) && (!allTables.Contains(parentTable))) " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                            sb.AppendLine("		/// This is a mapping of the relationship with the " + parentTable.PascalName + " entity." + (relation.PascalRoleName == "" ? "" : " (Role: '" + relation.RoleName + "')")); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.LINQ,LINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\LINQ\BusinessObjectLINQGeneratedTemplate.cs,AppendTableClass,The length of the statement  "                            sb.AppendLine("		public " + this.GetLocalNamespace() + "." + parentTable.PascalName + "Query " + relation.PascalRoleName + parentTable.PascalName + " { get; private set; }"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEdmxFile,The length of the statement  "			sb.AppendFormat("<Schema Namespace=\"{0}\" Alias=\"Self\" xmlns:annotation=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">"' this.GetLocalNamespace() + ".Entity").AppendLine(); " is 244.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "						sb.AppendFormat("		<End Role=\"{2}{0}\" Type=\"{1}.{0}\" Multiplicity=\"1\" />"' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.PascalRoleName).AppendLine(); " is 182.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "						sb.AppendFormat("		<End Role=\"{2}{0}\" Type=\"{1}.{0}\" Multiplicity=\"" + childMultiplicity + "\" />"' childEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.PascalRoleName).AppendLine(); " is 205.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "					else if ((parentEntity.TypedTable != TypedTableConstants.EnumOnly) && (childEntity.TypedTable != TypedTableConstants.EnumOnly)) " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "							sb.AppendFormat("		<End Role=\"{3}{0}\" Type=\"{1}.{2}\" Multiplicity=\"1\" />"' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' parentEntity.PascalName' relation.PascalRoleName).AppendLine(); " is 207.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "							sb.AppendFormat("		<End Role=\"{3}{0}\" Type=\"{1}.{2}\" Multiplicity=\"0..1\" />"' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' parentEntity.PascalName' relation.PascalRoleName).AppendLine(); " is 210.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "						sb.AppendFormat("		<End Role=\"{3}{0}List\" Type=\"{1}.{2}\" Multiplicity=\"*\" />"' childEntity.PascalName' this.GetLocalNamespace() + ".Entity"' childEntity.PascalName' relation.PascalRoleName).AppendLine(); " is 209.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "			foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "						sb.AppendLine("		<End Role=\"" + relation1.PascalRoleName + table1.PascalName + "List\" Type=\"" + this.GetLocalNamespace() + ".Entity." + table1.PascalName + "\" Multiplicity=\"*\" />"); " is 187.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "						sb.AppendLine("		<End Role=\"" + relation2.PascalRoleName + table2.PascalName + "List\" Type=\"" + this.GetLocalNamespace() + ".Entity." + table2.PascalName + "\" Multiplicity=\"*\" />"); " is 187.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "				sb.AppendFormat("		<End Role=\"{3}{0}\" Type=\"{1}.{2}\" Multiplicity=\"0..1\" />"' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' parentEntity.PascalName' relation.PascalRoleName).AppendLine(); " is 210.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The length of the statement  "				sb.AppendFormat("		<End Role=\"{3}{0}List\" Type=\"{1}.{2}\" Multiplicity=\"*\" />"' childEntity.PascalName' this.GetLocalNamespace() + ".Entity"' childEntity.PascalName' relation.PascalRoleName).AppendLine(); " is 209.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "			foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "								sb.AppendFormat("		<NavigationProperty Name=\"{0}{4}\" Relationship=\"{2}.{3}\" FromRole=\"{0}{1}\" ToRole=\"{0}{4}\" />"' relation.PascalRoleName' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.GetCodeFkName()' childEntity.PascalName).AppendLine(); " is 274.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "								sb.AppendFormat("		<NavigationProperty Name=\"{0}{4}List\" Relationship=\"{2}.{3}\" FromRole=\"{0}{1}\" ToRole=\"{0}{4}List\" />"' relation.PascalRoleName' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.GetCodeFkName()' childEntity.PascalName).AppendLine(); " is 282.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "								sb.AppendFormat("		<NavigationProperty Name=\"{0}{1}\" Relationship=\"{2}.{3}\" FromRole=\"{0}{4}\" ToRole=\"{0}{1}\" />"' " is 122.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "								sb.AppendFormat("		<NavigationProperty Name=\"{0}{1}\" Relationship=\"{2}.{3}\" FromRole=\"{0}{4}List\" ToRole=\"{0}{1}\" />"' " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "				foreach (var associativeTable in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "							sb.AppendFormat("		<NavigationProperty Name=\"{0}{1}List\" Relationship=\"{2}.{3}\" FromRole=\"{5}{4}List\" ToRole=\"{0}{1}List\" />"' " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The length of the statement  "						sb.AppendFormat("		<NavigationProperty Name=\"{0}{4}List\" Relationship=\"{2}.{3}\" FromRole=\"{0}{1}\" ToRole=\"{0}{4}List\" />"' relation.PascalRoleName' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.GetCodeFkName()' childEntity.PascalName).AppendLine(); " is 282.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "				sb.AppendFormat("		<Property Name=\"{0}\" Type=\"String\" MaxLength=\"50\" Unicode=\"false\" FixedLength=\"false\" />"' _model.Database.ModifiedByPascalName).AppendLine(); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "				sb.AppendFormat("		<Property Name=\"{0}\" Type=\"String\" MaxLength=\"50\" Unicode=\"false\" FixedLength=\"false\" />"' _model.Database.CreatedByPascalName).AppendLine(); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateAuditColumns,The length of the statement  "				sb.AppendFormat("		<Property Name=\"{0}\" Type=\"Binary\" Nullable=\"false\" MaxLength=\"8\" FixedLength=\"true\" annotation:StoreGeneratedPattern=\"Computed\" ConcurrencyMode=\"Fixed\" />"' _model.Database.TimestampPascalName).AppendLine(); " is 241.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendLine("		<FunctionImport Name=\"" + storedProcedure.PascalName + "\" ReturnType=\"Collection(" + this.GetLocalNamespace() + ".Entity." + storedProcedure.PascalName + ")\" >"); " is 183.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendLine("			<Parameter Name=\"" + parameter.PascalName + "\" Mode=\"" + (parameter.IsOutputParameter ? "InOut" : "In") + "\" Type=\"" + parameter.EFCodeType() + "\" />"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "				sb.AppendLine("		<FunctionImport Name=\"" + function.PascalName + "_SPWrapper\" ReturnType=\"Collection(" + this.GetLocalNamespace() + ".Entity." + function.PascalName + ")\" >"); " is 179.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendLine("			<Parameter Name=\"" + parameter.PascalName + "\" Mode=\"" + (parameter.IsOutputParameter ? "InOut" : "In") + "\" Type=\"" + parameter.EFCodeType() + "\" />"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "			foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && x.ParentTable == null && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "				sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.{0}\" />"' currentTable.PascalName' this.GetLocalNamespace() + ".Entity").AppendLine(); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "				sb.AppendFormat("		<EntitySet Name=\"{0}\" EntityType=\"{1}.{0}\" />"' currentView.PascalName' this.GetLocalNamespace() + ".Entity").AppendLine(); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendFormat("		<AssociationSet Name=\"{0}\" Association=\"{1}.{0}\">"' relation.GetCodeFkName()' this.GetLocalNamespace() + ".Entity").AppendLine(); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendFormat("			<End Role=\"{0}{1}\" EntitySet=\"{2}\" />"' relation.PascalRoleName' parentEntity.PascalName' parentEntity.GetAbsoluteBaseTable().PascalName).AppendLine(); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "						sb.AppendFormat("			<End Role=\"{0}{1}\" EntitySet=\"{2}\" />"' relation.PascalRoleName' childEntity.PascalName' childEntity.GetAbsoluteBaseTable().PascalName).AppendLine(); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "						sb.AppendFormat("			<End Role=\"{0}{1}List\" EntitySet=\"{2}\" />"' relation.PascalRoleName' childEntity.PascalName' childEntity.GetAbsoluteBaseTable().PascalName).AppendLine(); " is 177.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendFormat("		<AssociationSet Name=\"{0}\" Association=\"{1}.{0}\">"' relation.GetCodeFkName()' this.GetLocalNamespace() + ".Entity").AppendLine(); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendFormat("			<End Role=\"{0}{1}\" EntitySet=\"{2}\" />"' relation.PascalRoleName' parentEntity.PascalName' parentEntity.GetAbsoluteBaseTable().PascalName).AppendLine(); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "					sb.AppendFormat("			<End Role=\"{0}{1}List\" EntitySet=\"{2}\" />"' relation.PascalRoleName' childEntity.PascalName' childEntity.PascalName).AppendLine(); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "			foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly))) " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "						sb.AppendLine("		<AssociationSet Name=\"" + table.PascalName + "\" Association=\"" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "\">"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "						sb.AppendLine("			<End Role=\"" + relation1.PascalRoleName + table1.PascalName + "List\" EntitySet=\"" + table1.GetAbsoluteBaseTable().PascalName + "\" />"); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The length of the statement  "						sb.AppendLine("			<End Role=\"" + relation2.PascalRoleName + table2.PascalName + "List\" EntitySet=\"" + table2.GetAbsoluteBaseTable().PascalName + "\" />"); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GetPropertyNode,The length of the statement  "			//  propertyString.AppendFormat("		<Property Name=\"{0}\" Type=\"{1}\" Nullable=\"false\" "' typeTable.PascalName' this.GetLocalNamespace() + ".Entity." + typeTable.PascalName + "Wrapper"); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GetPropertyNode,The length of the statement  "					//propertyString.Append("a:SetterAccess=\"Private\" DefaultValue=\"-1\" annotation:StoreGeneratedPattern=\"Identity\" "); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GetPropertyNode,The length of the statement  "					//propertyString.Append("a:SetterAccess=\"Private\" DefaultValue=\"-1\" annotation:StoreGeneratedPattern=\"Identity\" "); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedGenerator.cs,Generate,The length of the statement  "                var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[EdmEntityTypeAttribute(NamespaceName = \"" + this.GetLocalNamespace() + ".Entity" + "\"' Name = \"" + _item.PascalName + "\")]"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[nHydrate.EFCore.Attributes.FieldNameConstantsAttribute(typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))]"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[System.ComponentModel.DataAnnotations.MetadataType(typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity.Metadata." + _item.PascalName + "Metadata))]"); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                sb.AppendLine("	[System.ComponentModel.Description(\"" + StringHelper.ConvertTextToSingleLineCodeString(_item.Description) + "\")]"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "            sb.AppendLine("	[nHydrate.EFCore.Attributes.EntityMetadata(\"" + _item.PascalName + "\"' " + _item.AllowAuditTracking.ToString().ToLower() + "' " + _item.AllowCreateAudit.ToString().ToLower() + "' " + _item.AllowModifiedAudit.ToString().ToLower() + "' " + _item.AllowTimestamp.ToString().ToLower() + "' \"" + StringHelper.ConvertTextToSingleLineCodeString(_item.Description) + "\"' " + _item.EnforcePrimaryKey.ToString().ToLower() + "' " + _item.Immutable.ToString().ToLower() + "' " + (_item.TypedTable != TypedTableConstants.None).ToString().ToLower() + "' \"" + _item.GetSQLSchema() + "\")]"); " is 596.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                sb.AppendLine("	[nHydrate.EFCore.Attributes.EntityHistory(typeof(" + this.GetLocalNamespace() + ".Audit." + _item.PascalName + "Audit))]"); " is 139.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                sb.AppendLine("	[nHydrate.EFCore.Attributes.CustomMetadata(Key = \"" + StringHelper.ConvertTextToSingleLineCodeString(meta.Key) + "\"' Value = \"" + meta.Value.Replace("\""' "\\\"") + "\")]"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                    sb.Append("	public abstract partial class " + doubleDerivedClassName + " : nHydrate.EFCore.DataAccess.NHEntityObject' " + boInterface + "' " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 315.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                    sb.Append("	public abstract partial class " + doubleDerivedClassName + " : " + this.GetLocalNamespace() + ".Entity." + _item.ParentTable.PascalName + "' " + boInterface + "' " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 350.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                    sb.Append("	public " + (_item.GeneratesDoubleDerived ? "abstract " : "") + "partial class " + doubleDerivedClassName + " : nHydrate.EFCore.DataAccess.NHEntityObject' " + boInterface + "' " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.ICloneable' System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 382.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendEntityClass,The length of the statement  "                    sb.Append("	public " + (_item.GeneratesDoubleDerived ? "abstract " : "") + "partial class " + doubleDerivedClassName + " : " + this.GetLocalNamespace() + ".Entity." + _item.ParentTable.PascalName + "' " + boInterface + "' " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "' System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">"); " is 398.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendConstructors,The length of the statement  "            sb.AppendLine("		/// Initializes a new instance of the " + this.GetLocalNamespace() + ".Entity." + tableName + " class"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendConstructors,The length of the statement  "                sb.AppendLine("		/// Initializes a new instance of the " + this.GetLocalNamespace() + ".Entity." + tableName + " class with a defined primary key"); " is 148.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,SetInitialValues,The length of the statement  "            var setOriginalGuid = String.Format("\t\t\t" + propertyObjectPrefix + "._{0} = System.Guid.NewGuid();"' _item.PrimaryKeyColumns.First().CamelName); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,SetInitialValues,The length of the statement  "            if (_item.PrimaryKeyColumns.Count == 1 && ((Column)_item.PrimaryKeyColumns.First()).DataType == System.Data.SqlDbType.UniqueIdentifier) " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendClone,The length of the statement  "            sb.AppendLine("		public static " + _item.PascalName + " Clone(" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + " item)"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendClone,The length of the statement  "                sb.AppendLine("			newItem." + _model.Database.CreatedDatePascalName + " = item." + _model.Database.CreatedDatePascalName + ";"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendClone,The length of the statement  "                sb.AppendLine("			newItem." + _model.Database.CreatedByPascalName + " = item." + _model.Database.CreatedByPascalName + ";"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendClone,The length of the statement  "                sb.AppendLine("			newItem." + _model.Database.ModifiedDatePascalName + " = item." + _model.Database.ModifiedDatePascalName + ";"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendClone,The length of the statement  "                sb.AppendLine("			newItem." + _model.Database.ModifiedByPascalName + " = item." + _model.Database.ModifiedByPascalName + ";"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendIsEquivalent,The length of the statement  "            sb.AppendLine("			return ((System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">)this).Equals(item as " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ");"); " is 225.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "            sb.AppendLine("		public object GetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' object defaultValue)"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")"); " is 154.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                    sb.AppendLine("				return ((this." + column.PascalName + " == null) ? defaultValue : this." + column.PascalName + ");"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + _model.Database.CreatedByPascalName + ")"); " is 172.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("				return ((this." + _model.Database.CreatedByPascalName + " == null) ? defaultValue : this." + _model.Database.CreatedByPascalName + ");"); " is 156.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + _model.Database.CreatedDatePascalName + ")"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("				return ((this." + _model.Database.CreatedDatePascalName + " == null) ? defaultValue : this." + _model.Database.CreatedDatePascalName + ");"); " is 160.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + _model.Database.ModifiedByPascalName + ")"); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("				return ((this." + _model.Database.ModifiedByPascalName + " == null) ? defaultValue : this." + _model.Database.ModifiedByPascalName + ");"); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("			if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + _model.Database.ModifiedDatePascalName + ")"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetValue,The length of the statement  "                sb.AppendLine("				return ((this." + _model.Database.ModifiedDatePascalName + " == null) ? defaultValue : this." + _model.Database.ModifiedDatePascalName + ");"); " is 162.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "            sb.AppendLine("		public virtual void SetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' object newValue)"); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "            sb.AppendLine("		/// <param name=\"fixLength\">Determines if the length should be truncated if too long. When false' an error will be raised if data is too large to be assigned to the field.</param>"); " is 201.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "            sb.AppendLine("		public virtual void SetValue(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field' object newValue' bool fixLength)"); " is 182.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                    sb.AppendLine("if (field == " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                        sb.AppendLine("				throw new Exception(\"Field '\" + field.ToString() + \"' is a computed parameter and cannot be set!\");"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                        sb.AppendLine("				throw new Exception(\"Field '\" + field.ToString() + \"' is a read-only parameter and cannot be set!\");"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                            sb.AppendLine("				this." + column.PascalName + " = GlobalValues.SetValueHelperInternal((string)newValue' fixLength' GetMaxLength(field));"); " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                sb.AppendLine("				this." + column.PascalName + " = GlobalValues.SetValueHelperDoubleNotNullableInternal(newValue' \"Field '" + column.PascalName + "' does not allow null values!\");"); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                sb.AppendLine("				this." + column.PascalName + " = GlobalValues.SetValueHelperDateTimeNotNullableInternal(newValue' \"Field '" + column.PascalName + "' does not allow null values!\");"); " is 187.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                sb.AppendLine("				this." + column.PascalName + " = GlobalValues.SetValueHelperBoolNotNullableInternal(newValue' \"Field '" + column.PascalName + "' does not allow null values!\");"); " is 183.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                sb.AppendLine("				this." + column.PascalName + " = GlobalValues.SetValueHelperIntNotNullableInternal(newValue' \"Field '" + column.PascalName + "' does not allow null values!\");"); " is 182.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                sb.AppendLine("				this." + column.PascalName + " = GlobalValues.SetValueHelperLongNotNullableInternal(newValue' \"Field '" + column.PascalName + "' does not allow null values!\");"); " is 183.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                        sb.AppendLine("						this." + column.PascalName + " = ((" + this.GetLocalNamespace() + ".Entity." + pTable.PascalName + ")newValue)." + parentColumn.PascalName + ";"); " is 167.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                        //sb.AppendLine("						this." + column.PascalName + " = ((" + this.GetLocalNamespace() + ".Entity." + pTable.PascalName + "PrimaryKey)newValue)." + parentColumn.PascalName + ";"); " is 179.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                    sb.AppendLine("						this." + column.PascalName + " = (" + column.EnumType + ")Enum.Parse(typeof(" + column.EnumType + ")' newValue.ToString());"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionSetValue,The length of the statement  "                                sb.AppendLine("						throw new Exception(\"An invalid object of type 'IBusinessObject' was passed in. Perhaps a relationship was not enforced correctly.\");"); " is 159.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditClass,The length of the statement  "            sb.AppendLine("	partial class " + soubleDerivedClassName + (string.IsNullOrEmpty(interfaceSettings) ? "" : " : " + interfaceSettings)); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                if (_item.IsColumnRelatedToTypeTable(column' out pascalRoleName) || (column.PrimaryKey && _item.TypedTable != TypedTableConstants.None)) " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		public virtual " + GetLocalNamespace() + ".Interfaces." + typeTable.PascalName + "Constants" + nullSuffix + " " + pascalRoleName + typeTable.PascalName + "Value"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("			get { return (" + GetLocalNamespace() + ".Interfaces." + typeTable.PascalName + "Constants" + nullSuffix + ")this." + column.PascalName + "; }"); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                //    sb.AppendLine("		/// The property that maps back to the database '" + (column.ParentTableRef.Object as Table).DatabaseName + "." + column.DatabaseName + "' field"); " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                //    sb.AppendLine("		[System.ComponentModel.Description(\"" + StringHelper.ConvertTextToSingleLineCodeString(column.Description) + "\")]"); " is 141.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                //  sb.AppendLine("		[nHydrate.EFCore.Attributes.EntityFieldMetadata(\"" + column.PascalName + "\"' " + column.SortOrder + "' " + column.UIVisible.ToString().ToLower() + "' " + column.Length + "' \"" + column.Mask + "\"' \"" + column.GetFriendlyName() + "\"' \"" + column.Default + "\"' " + column.AllowNull.ToString().ToLower() + "' \"" + column.Description + "\"' " + column.ComputedColumn.ToString().ToLower() + "' " + column.IsUnique.ToString().ToLower() + "' " + (double.IsNaN(column.Min) ? "double.NaN" : column.Min.ToString()) + "' " + (double.IsNaN(column.Max) ? "double.NaN" : column.Max.ToString()) + "' " + column.PrimaryKey.ToString().ToLower() + ")]"); " is 665.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                //    sb.AppendLine("				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<" + typeTable.PascalName + "Constants>(value' \"" + typeTable.PascalName + "\");"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                //      sb.AppendLine("				_" + StringHelper.DatabaseNameToCamelCase(_model.Database.ModifiedDatePascalName) + " = " + this.GetDateTimeNowCode() + ";"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		/// The property that maps back to the database '" + (column.ParentTableRef.Object as Table).DatabaseName + "." + column.DatabaseName + "' field."); " is 165.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		/// This property has an additional enumeration wrapper property " + pascalRoleName + typeTable.PascalName + "Value. Use it as a strongly-typed property."); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		/// This property has an additional enumeration wrapper property " + pascalRoleName + typeTable.PascalName + "Value. Use it as a strongly-typed property."); " is 173.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                    sb.AppendLine("		[EdmScalarPropertyAttribute(EntityKeyProperty = " + (column.PrimaryKey ? "true" : "false") + "' IsNullable = " + (column.AllowNull ? "true" : "false") + ")]"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType." + column.UIDataType.ToString() + ")]"); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		[System.ComponentModel.DataAnnotations.DisplayFormat(DataFormatString = @\"" + column.Mask.Replace(@"\\"' @"\\\\") + "\")]"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("		[System.ComponentModel.Description(\"" + StringHelper.ConvertTextToSingleLineCodeString(column.Description) + "\")]"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("	[nHydrate.EFCore.Attributes.CustomMetadata(Key = \"" + StringHelper.ConvertTextToSingleLineCodeString(meta.Key) + "\"' Value = \"" + meta.Value.Replace("\""' "\\\"") + "\")]"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.Append("				if ((value != null) && (value.Length > GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")))"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine(" throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG' value' \"" + _item.PascalName + "." + column.PascalName + "\"' GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ")));"); " is 285.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("				if (" + (column.AllowNull ? "(value != null) && " : "") + "(value < GlobalValues.MIN_DATETIME)) throw new Exception(\"The DateTime value '" + column.PascalName + "' (\" + value" + (column.AllowNull ? ".Value" : "") + ".ToString(\"yyyy-MM-dd HH:mm:ss\") + \") cannot be less than \" + GlobalValues.MIN_DATETIME.ToString());"); " is 344.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("				if (" + (column.AllowNull ? "(value != null) && " : "") + "(value > GlobalValues.MAX_DATETIME)) throw new Exception(\"The DateTime value '" + column.PascalName + "' (\" + value" + (column.AllowNull ? ".Value" : "") + ".ToString(\"yyyy-MM-dd HH:mm:ss\") + \") cannot be greater than \" + GlobalValues.MAX_DATETIME.ToString());"); " is 347.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("					default: throw new Exception(string.Format(GlobalValues.ERROR_INVALID_ENUM' value.ToString()' \"" + _item.PascalName + "." + column.PascalName + "\"));"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                        sb.AppendLine("				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<" + column.GetCodeType() + ">(value' \"" + column.PascalName + "\");"); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                if (_item.AllowCreateAudit) GenerateAuditField(_model.Database.CreatedByPascalName' "string"' "The audit field for the 'Created By' parameter."' "public"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                if (_item.AllowCreateAudit) GenerateAuditField(_model.Database.CreatedDatePascalName' "DateTime?"' "The audit field for the 'Created Date' parameter."' "public"); " is 162.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                if (_item.AllowModifiedAudit) GenerateAuditField(_model.Database.ModifiedByPascalName' "string"' "The audit field for the 'Modified By' parameter."' "public"); " is 159.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                if (_item.AllowModifiedAudit) GenerateAuditField(_model.Database.ModifiedDatePascalName' "DateTime?"' "The audit field for the 'Modified Date' parameter."' "public"); " is 166.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The length of the statement  "                if (_item.AllowTimestamp) GenerateAuditField(_model.Database.TimestampPascalName' "byte[]"' "The audit field for the 'Timestamp' parameter."' "public"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendGenerateEvents,The length of the statement  "                if (_item.AllowModifiedAudit) this.AppendPropertyEventDeclarations(_model.Database.ModifiedDatePascalName' "DateTime?"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendPropertyEventDeclarations,The length of the statement  "            sb.AppendLine("		public event EventHandler<nHydrate.EFCore.EventArgs.ChangingEventArgs<" + codeType + ">> " + columnName + "Changing;"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendPropertyEventDeclarations,The length of the statement  "            sb.AppendLine("		protected virtual void On" + columnName + "Changing(nHydrate.EFCore.EventArgs.ChangingEventArgs<" + codeType + "> e)"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static int GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ":"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                    sb.AppendLine("					return " + _item.ParentTable.PascalName + ".GetMaxLength(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.ParentTable.PascalName + "FieldNameConstants." + column.PascalName + ");"); " is 213.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetMaxLength((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants);"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		public static System.Type GetFieldType(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 159.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			switch ((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field)"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				case " + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants." + column.PascalName + ": return typeof(" + column.GetCodeType() + ");"); " is 192.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return GetFieldType((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field);"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field' object defaultValue)"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "            sb.AppendLine("			return this.GetValue((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field' defaultValue);"); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("			if (field.GetType() != typeof(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants))"); " is 146.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("				throw new Exception(\"The field parameter must be of type '" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants'.\");"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("			this.SetValue((" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants)field' newValue);"); " is 147.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetMaxLength,The length of the statement  "                sb.AppendLine("		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey"); " is 120.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,GenerateAuditField,The length of the statement  "                sb.AppendLine("				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<" + codeType + ">(value' \"" + columnName + "\");"); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    sb.AppendLine("		System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + "> " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + relation.PascalRoleName + childTable.PascalName + "List"); " is 278.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    sb.AppendLine("			get { return (System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + ">)(System.Collections.Generic.ICollection<" + childTable.PascalName + ">)this." + relation.PascalRoleName + childTable.PascalName + "List; }"); " is 295.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + _item.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "List\")]"); " is 274.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    sb.AppendLine("		public virtual EntityCollection<" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + "> " + relation.PascalRoleName + childTable.PascalName + "List"); " is 182.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    sb.AppendLine("				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + _item.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "List\");"); " is 412.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    sb.AppendLine("				if (!retval.IsLoaded  && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)"); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    else if (parentTable.TypedTable == TypedTableConstants.EnumOnly || childTable.TypedTable == TypedTableConstants.EnumOnly) " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		/// The navigation definition for walking " + parentTable.PascalName + "->" + childTable.PascalName + (string.IsNullOrEmpty(relation.PascalRoleName) ? string.Empty : " (role: '" + relation.PascalRoleName + "')")); " is 230.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")"); " is 214.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\")]"); " is 276.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("				if (!retval.IsLoaded && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("			set { ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<" + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\").Value = value; }"); " is 381.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		/// The navigation definition for walking [" + childTable.PascalName + "]->[" + parentTable.PascalName + "]"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		protected virtual EntityReference<" + childTable.PascalName + "> " + relation.PascalRoleName + childTable.PascalName + "Reference"); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("			get { return ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<" + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\"); }"); " is 374.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("					((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<" + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\"' value);"); " is 375.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + " " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + parentTable.PascalName + "." + relation.PascalRoleName + childTable.PascalName); " is 235.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("			set { this." + relation.PascalRoleName + childTable.PascalName + " = (" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ")value; }"); " is 169.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("		/// The back navigation definition for walking [" + _item.PascalName + "]->[" + targetTable.PascalName + (string.IsNullOrEmpty(otherRelation.PascalRoleName) ? string.Empty : " (role: '" + otherRelation.PascalRoleName + "')") + "]"); " is 249.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                    sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")"); " is 214.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"" + childTable.PascalName + "\"' \"" + otherRelation.PascalRoleName + targetTable.PascalName + "List\")]"); " is 220.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("		public virtual EntityCollection<" + this.GetLocalNamespace() + ".Entity." + targetTable.PascalName + "> " + otherRelation.PascalRoleName + targetTable.PascalName + "List"); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<" + this.GetLocalNamespace() + ".Entity." + targetTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + "\"' \"" + targetRelation.PascalRoleName + targetTable.PascalName + "List\");"); " is 360.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("				if (!retval.IsLoaded && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("		System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + targetTable.PascalName + "> " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + otherRelation.PascalRoleName + targetTable.PascalName + "List"); " is 285.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("			get { return (System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + targetTable.PascalName + ">)(System.Collections.Generic.ICollection<" + targetTable.PascalName + ">)this." + otherRelation.PascalRoleName + targetTable.PascalName + "List; }"); " is 303.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    else if (parentTable == _item && parentTable.Generated && childTable.Generated && !childTable.AssociativeTable && (childTable.TypedTable != TypedTableConstants.EnumOnly)) " is 170.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        if (relation.IsOneToOne) listPropertyScope = "protected"; //1:1 relation on non-PK field so we will fake it and make a single property " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		/// The back navigation definition for walking [" + parentTable.PascalName + "]->[" + childTable.PascalName + "]"); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")"); " is 214.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + _item.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "List\")]"); " is 274.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		" + listPropertyScope + " virtual EntityCollection<" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + "> " + relation.PascalRoleName + childTable.PascalName + "List"); " is 201.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + _item.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "List\");"); " is 412.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("				if (!retval.IsLoaded  && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)"); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		/// The back navigation definition for walking [" + parentTable.PascalName + "]->[" + childTable.PascalName + "]"); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                                sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")"); " is 214.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		public virtual " + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + " " + relation.PascalRoleName + childTable.PascalName); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + " " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + relation.PascalRoleName + childTable.PascalName); " is 229.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + "> " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + relation.PascalRoleName + childTable.PascalName + "List"); " is 278.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("			get { return (System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + ">)(System.Collections.Generic.ICollection<" + childTable.PascalName + ">)this." + relation.PascalRoleName + childTable.PascalName + "List; }"); " is 295.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    //  sb.AppendLine("		" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + parentTable.PascalName + "Wrapper " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + "." + parentTable.PascalName); " is 221.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                    //  sb.AppendLine("			set { this." + parentTable.PascalName + " = (" + this.GetLocalNamespace() + ".Entity." + parentTable.PascalName + "Wrapper)value; }"); " is 156.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		/// The navigation definition for walking [" + childTable.PascalName + "]->[" + parentTable.PascalName + "]"); " is 127.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                            sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")"); " is 214.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\")]"); " is 277.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("				if (!retval.IsLoaded && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("			set { ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<" + parentTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\").Value = value; }"); " is 383.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		/// The navigation reference definition for walking " + parentTable.PascalName + "->" + childTable.PascalName); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		protected virtual EntityReference<" + parentTable.PascalName + "> " + relation.PascalRoleName + parentTable.PascalName + "Reference"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("			get { return ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<" + parentTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\"); }"); " is 376.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("					((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<" + parentTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + parentTable.PascalName + "\"' value);"); " is 377.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("		" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + parentTable.PascalName + " " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + "." + relation.PascalRoleName + parentTable.PascalName); " is 236.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The length of the statement  "                        sb.AppendLine("			set { this." + relation.PascalRoleName + parentTable.PascalName + " = (" + this.GetLocalNamespace() + ".Entity." + parentTable.PascalName + ")value; }"); " is 171.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditQuery,The length of the statement  "            sb.AppendLine("		public " + modifier + " IEnumerable<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords()"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditQuery,The length of the statement  "            sb.AppendLine("		public " + modifier + " IEnumerable<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords(string connectionString)"); " is 178.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditQuery,The length of the statement  "            sb.AppendLine("		public " + modifier + " nHydrate.EFCore.DataAccess.AuditPaging<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords(int pageOffset' int recordsPerPage)"); " is 216.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditQuery,The length of the statement  "            sb.Append("			return " + this.GetLocalNamespace() + ".Audit." + _item.PascalName + "Audit.GetAuditRecords(pageOffset' recordsPerPage' null' null' "); " is 149.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditQuery,The length of the statement  "            sb.AppendLine("		public " + modifier + " nHydrate.EFCore.DataAccess.AuditPaging<" + this.GetLocalNamespace() + ".Interfaces.Audit.I" + _item.PascalName + "Audit> GetAuditRecords(int pageOffset' int recordsPerPage' DateTime? startDate' DateTime? endDate)"); " is 256.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditQuery,The length of the statement  "            sb.Append("			return " + this.GetLocalNamespace() + ".Audit." + _item.PascalName + "Audit.GetAuditRecords(pageOffset' recordsPerPage' startDate' endDate' "); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "            sb.AppendLine("		internal " + (_item.ParentTable == null ? "" : "new ") + "static string GetFieldAliasFromFieldNameSqlMapping(string alias)"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.CreatedDateColumnName.ToLower() + "\": return \"" + _model.Database.CreatedDatePascalName.ToLower() + "\";"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.CreatedByColumnName.ToLower() + "\": return \"" + _model.Database.CreatedByPascalName.ToLower() + "\";"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.ModifiedDateColumnName.ToLower() + "\": return \"" + _model.Database.ModifiedDatePascalName.ToLower() + "\";"); " is 157.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.ModifiedByColumnName.ToLower() + "\": return \"" + _model.Database.ModifiedByPascalName.ToLower() + "\";"); " is 153.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.TimestampColumnName.ToLower() + "\": return \"" + _model.Database.TimestampPascalName.ToLower() + "\";"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "            sb.AppendLine("		internal " + (_item.ParentTable == null ? "" : "new ") + "static string GetTableFromFieldAliasSqlMapping(string alias)"); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                    sb.AppendLine("				case \"" + column.PascalName.ToLower() + "\": return \"" + _model.TenantPrefix + "_" + table.DatabaseName + "\";"); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "            sb.AppendLine("		internal " + (_item.ParentTable == null ? "" : "new ") + "static string GetTableFromFieldNameSqlMapping(string field)"); " is 137.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                    sb.AppendLine("				case \"" + column.DatabaseName.ToLower() + "\": return \"" + _model.TenantPrefix + "_" + table.DatabaseName + "\";"); " is 136.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "            sb.AppendLine("		internal " + (_item.ParentTable == null ? "" : "new ") + "static string GetRemappedLinqSql(string sql' string parentAlias' LinqSQLFromClauseCollection childTables)"); " is 183.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                //sb.AppendLine("			sql = sql.Replace(\"[\" + parentAlias + \"].[" + column.DatabaseName.ToLower() + "]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + ((Table)column.ParentTableRef.Object).DatabaseName + "\") + \"].[" + column.DatabaseName.ToLower() + "]\");"); " is 274.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("			sql = System.Text.RegularExpressions.Regex.Replace(sql' \"\\\\[\" + parentAlias + \"\\\\]\\\\.\\\\[" + column.DatabaseName.ToLower() + "\\\\]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + ((Table)column.ParentTableRef.Object).DatabaseName + "\") + \"].[" + column.DatabaseName.ToLower() + "]\"' RegexOptions.IgnoreCase);"); " is 355.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                //sb.AppendLine("			sql = sql.Replace(\"[\" + parentAlias + \"].[" + _model.Database.CreatedByPascalName.ToLower() + "]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _currentTable.DatabaseName + "\") + \"].[" + _model.Database.CreatedByPascalName.ToLower() + "]\");"); " is 282.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                //sb.AppendLine("			sql = sql.Replace(\"[\" + parentAlias + \"].[" + _model.Database.CreatedDatePascalName.ToLower() + "]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _currentTable.DatabaseName + "\") + \"].[" + _model.Database.CreatedDatePascalName.ToLower() + "]\");"); " is 286.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("			sql = System.Text.RegularExpressions.Regex.Replace(sql' \"\\\\[\" + parentAlias + \"\\\\]\\\\.\\\\[" + _model.Database.CreatedByPascalName.ToLower() + "\\\\]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _item.DatabaseName + "\") + \"].[" + _model.Database.CreatedByPascalName.ToLower() + "]\"' RegexOptions.IgnoreCase);"); " is 355.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("			sql = System.Text.RegularExpressions.Regex.Replace(sql' \"\\\\[\" + parentAlias + \"\\\\]\\\\.\\\\[" + _model.Database.CreatedDatePascalName.ToLower() + "\\\\]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _item.DatabaseName + "\") + \"].[" + _model.Database.CreatedDatePascalName.ToLower() + "]\"' RegexOptions.IgnoreCase);"); " is 359.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                //sb.AppendLine("			sql = sql.Replace(\"[\" + parentAlias + \"].[" + _model.Database.ModifiedByPascalName.ToLower() + "]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _currentTable.DatabaseName + "\") + \"].[" + _model.Database.ModifiedByPascalName.ToLower() + "]\");"); " is 284.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                //sb.AppendLine("			sql = sql.Replace(\"[\" + parentAlias + \"].[" + _model.Database.ModifiedDatePascalName.ToLower() + "]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _currentTable.DatabaseName + "\") + \"].[" + _model.Database.ModifiedDatePascalName.ToLower() + "]\");"); " is 288.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("			sql = System.Text.RegularExpressions.Regex.Replace(sql' \"\\\\[\" + parentAlias + \"\\\\]\\\\.\\\\[" + _model.Database.ModifiedByPascalName.ToLower() + "\\\\]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _item.DatabaseName + "\") + \"].[" + _model.Database.ModifiedByPascalName.ToLower() + "]\"' RegexOptions.IgnoreCase);"); " is 357.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("			sql = System.Text.RegularExpressions.Regex.Replace(sql' \"\\\\[\" + parentAlias + \"\\\\]\\\\.\\\\[" + _model.Database.ModifiedDatePascalName.ToLower() + "\\\\]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _item.DatabaseName + "\") + \"].[" + _model.Database.ModifiedDatePascalName.ToLower() + "]\"' RegexOptions.IgnoreCase);"); " is 361.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                //sb.AppendLine("			sql = sql.Replace(\"[\" + parentAlias + \"].[" + _model.Database.TimestampPascalName.ToLower() + "]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _currentTable.DatabaseName + "\") + \"].[" + _model.Database.TimestampPascalName.ToLower() + "]\");"); " is 282.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticSQLHelpers,The length of the statement  "                sb.AppendLine("			sql = System.Text.RegularExpressions.Regex.Replace(sql' \"\\\\[\" + parentAlias + \"\\\\]\\\\.\\\\[" + _model.Database.TimestampPascalName.ToLower() + "\\\\]\"' \"[\" + childTables.GetBaseAliasTable(parentAlias' \"" + _item.DatabaseName + "\") + \"].[" + _model.Database.TimestampPascalName.ToLower() + "]\"' RegexOptions.IgnoreCase);"); " is 355.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("		public static int DeleteData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where)"); " is 142.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("			return DeleteData(where' new nHydrate.EFCore.DataAccess.QueryOptimizer()' new ContextStartup(null)' " + this.GetLocalNamespace() + "." + _model.ProjectName + "Entities.GetConnectionString());"); " is 212.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("		public static int DeleteData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' nHydrate.EFCore.DataAccess.QueryOptimizer optimizer)"); " is 195.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("			return DeleteData(where' optimizer' new ContextStartup(null)' " + this.GetLocalNamespace() + "." + _model.ProjectName + "Entities.GetConnectionString());"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("		public static int DeleteData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' string connectionString)"); " is 167.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("			return DeleteData(where' new nHydrate.EFCore.DataAccess.QueryOptimizer()' new ContextStartup(null)' connectionString);"); " is 139.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("		public static int DeleteData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' nHydrate.EFCore.DataAccess.QueryOptimizer optimizer' ContextStartup startup' string connectionString)"); " is 244.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("			using (var connection = " + this.GetLocalNamespace() + ".DBHelper.GetConnection(" + this.GetLocalNamespace() + ".Util.StripEFCS2Normal(connectionString)))"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("					using (var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query>(dc' template' where))"); " is 183.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "            sb.AppendLine("						if (startup.CommandTimeout != null && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout.Value;"); " is 140.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "                sb.Append("						sql += \"DELETE [" + table.DatabaseName + "] FROM [" + table.GetSQLSchema() + "].[" + table.DatabaseName + "] \" + noLock + \"INNER JOIN #t ON "); " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendDeleteDataScaler,The length of the statement  "                    sb.Append("[" + table.GetSQLSchema() + "].[" + table.DatabaseName + "].[" + column.DatabaseName + "] = #t.[" + column.DatabaseName + "]"); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + typeName + " newValue)"); " is 276.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + ");"); " is 341.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + nullTypeName + " newValue)"); " is 284.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + ");"); " is 345.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + typeName + " newValue' string connectionString)"); " is 301.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + "' connectionString);"); " is 359.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + typeName + " newValue' ContextStartup startup' string connectionString)"); " is 325.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + "' startup' connectionString);"); " is 368.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + nullTypeName + " newValue' string connectionString)"); " is 309.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + "' connectionString);"); " is 363.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                        sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                        sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + nullTypeName + " newValue' ContextStartup startup' string connectionString)"); " is 333.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                        sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + "' startup' connectionString);"); " is 372.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + typeName + " newValue' System.Data.IDbConnection connection' System.Data.Common.DbTransaction transaction)"); " is 360.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + typeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + "' null' connection' transaction);"); " is 372.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		/// <param name=\"newValue\">The new value to set the specified field in all matching records</param>"); " is 121.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("		public static int UpdateData(Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">> select' Expression<Func<" + this.GetLocalNamespace() + "." + _item.PascalName + "Query' bool>> where' " + nullTypeName + " newValue' System.Data.IDbConnection connection' System.Data.Common.DbTransaction transaction)"); " is 368.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendUpdateDataScaler,The length of the statement  "                    sb.AppendLine("			return BusinessObjectQuery<" + this.GetLocalNamespace() + ".Entity." + _item.PascalName + "' " + this.GetLocalNamespace() + "." + _item.PascalName + "Query' " + nullTypeName + ">.UpdateData(select' where' newValue' \"" + _item.DatabaseName + "\"' GetDatabaseFieldName' " + _item.AllowModifiedAudit.ToString().ToLower() + "' null' connection' transaction);"); " is 376.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "            sb.AppendLine("		internal static string GetDatabaseFieldName(" + this.GetLocalNamespace() + ".Interfaces.Entity." + _item.PascalName + "FieldNameConstants field)"); " is 164.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "            sb.AppendLine("		internal " + (_item.ParentTable == null ? "" : "new ") + "static string GetDatabaseFieldName(string field)"); " is 126.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.CreatedByPascalName + "\": return \"" + _model.Database.CreatedByColumnName + "\";"); " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.CreatedDatePascalName + "\": return \"" + _model.Database.CreatedDateColumnName + "\";"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.ModifiedByPascalName + "\": return \"" + _model.Database.ModifiedByColumnName + "\";"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.ModifiedDatePascalName + "\": return \"" + _model.Database.ModifiedDateColumnName + "\";"); " is 137.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendRegionGetDatabaseFieldName,The length of the statement  "                sb.AppendLine("				case \"" + _model.Database.TimestampPascalName + "\": return \"" + _model.Database.TimestampColumnName + "\";"); " is 131.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            //sb.Append("		public " + (_currentTable.ParentTable == null ? string.Empty : "new ") + "static " + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + " SelectByPK("); " is 183.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            //sb.AppendLine("		public static IEnumerable<T> GetDistinct<T>(System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + "' T>> select' System.Linq.Expressions.Expression<Func<" + _currentTable.PascalName + "' bool>> predicate)"); " is 283.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            //sb.AppendLine("				return context." + _currentTable.PascalName + ".Where(predicate).Select(select).Distinct().ToList();"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            //sb.AppendLine("		public static int GetCount(System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + "' bool>> predicate)"); " is 180.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            //sb.AppendLine("		public static T GetMax<T>(System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + "' T>> select' System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + "' bool>> predicate)"); " is 305.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            //sb.AppendLine("		public static T GetMin<T>(System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + "' T>> select' System.Linq.Expressions.Expression<Func<" + this.GetLocalNamespace() + ".Entity." + _currentTable.PascalName + "' bool>> predicate)"); " is 305.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            sb.AppendLine("		public " + (_item.ParentTable == null ? string.Empty : "new ") + "static " + this.GetLocalNamespace() + ".Interfaces.Entity.Metadata." + _item.PascalName + "Metadata GetMetadata()"); " is 199.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            sb.AppendLine("			var a = typeof(" + _item.PascalName + ").GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute)' true).FirstOrDefault();"); " is 174.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendStaticMethods,The length of the statement  "            sb.AppendLine("			return Activator.CreateInstance(t) as " + this.DefaultNamespace + ".EFDAL.Interfaces.IMetadata as " + this.GetLocalNamespace() + ".Interfaces.Entity.Metadata." + _item.PascalName + "Metadata;"); " is 212.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendIEquatable,The length of the statement  "            sb.AppendLine("		bool System.IEquatable<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + ">.Equals(" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + " other)"); " is 211.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendIDataErrorInfo,The length of the statement  "                        sb.AppendLine("							if (string.IsNullOrEmpty(this." + column.PascalName + ") || string.IsNullOrEmpty(this." + column.PascalName + ".Trim()))"); " is 145.
Long Statement,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendIDataErrorInfo,The length of the statement  "                        sb.AppendLine("							if (!string.IsNullOrEmpty(this." + column.PascalName + ") && !System.Text.RegularExpressions.Regex.IsMatch(" + column.PascalName + "' @\"" + column.ValidationExpression.Replace("\""' @"""""") + "\"' System.Text.RegularExpressions.RegexOptions.None))"); " is 274.
Long Statement,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("			return GetConnection(" + this.GetLocalNamespace() + "." + _model.ProjectName + "Entities.GetConnectionString());"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("		internal static IDbCommand GetCommand(string commandText' CommandType commandType' IDbConnection connection)"); " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("		internal static string ConvertNormalCS2EFFromConfig(string configSettings' ContextStartup contextStartup)"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("				return @\"metadata=res://*/" + this.GetLocalNamespace() + "." + _model.ProjectName + ".csdl|res://*/" + this.GetLocalNamespace() + "." + _model.ProjectName + ".Admin.ssdl|res://*/" + this.GetLocalNamespace() + "." + _model.ProjectName + ".Admin.msl;provider=System.Data.SqlClient;provider connection string='\" + connectionString + \"'\";"); " is 360.
Long Statement,nHydrate.Generator.EFDAL.Generators.Helpers,HelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Helpers\HelperGeneratedTemplate.cs,GenerateContent,The length of the statement  "                sb.AppendLine("				return @\"metadata=res://*/" + this.GetLocalNamespace() + "." + _model.ProjectName + ".csdl|res://*/" + this.GetLocalNamespace() + "." + _model.ProjectName + ".ssdl|res://*/" + this.GetLocalNamespace() + "." + _model.ProjectName + ".msl;provider=System.Data.SqlClient;provider connection string='\" + connectionString + \"'\";"); " is 348.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedGenerator.cs,Generate,The length of the statement  "            var eventArgs = new ProjectItemGeneratedEventArgs(template.FileName' template.FileContent' ProjectName' fullParentName' this' true); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("						fromClause.LinkClause = fromClause.LinkClause.Replace(\"[\" + parentAlias + \"].\" + field2' \"[\" + chlidAlias + \"].\" + field2);"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("						fromClause.LinkClause = fromClause.LinkClause.Replace(\"[\" + parentAlias + \"].\" + field2' \"[\" + chlidAlias + \"].\" + field2);"); " is 155.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("if (parentTable == \"" + _model.TenantPrefix + "_" + table.DatabaseName + "\") realTable = " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ".GetTableFromFieldNameSqlMapping(field);"); " is 213.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("if (parentTable == \"" + table.DatabaseName + "\") realTable = " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ".GetTableFromFieldNameSqlMapping(field);"); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<K' P>(dc' template' select' where);"); " is 124.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			cmd.CommandText = \"SELECT SUM([\" + parser.GetTableAlias(fieldName' leafTable) + \"].\" + fieldName + \") \" +"); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			cmd.CommandText = \"SELECT COUNT(*) \" + parser.GetFromClause(optimizer) + \" \" + parser.GetWhereClause() + string.Empty;"); " is 143.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<K' P>(dc' template' select' where);"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				cmd.CommandText = \"SELECT DISTINCT([\" + parser.GetTableAlias(fieldName' leafTable) + \"].\" + fieldName + \") \" + parser.GetFromClause(optimizer) + \" \" + parser.GetWhereClause() + string.Empty;"); " is 220.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<K' P>(dc' template' select' where);"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				cmd.CommandText = \"SELECT MIN([\" + parser.GetTableAlias(fieldName' leafTable) + \"].\" + fieldName + \") \" +"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<K' P>(dc' template' select' where);"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				cmd.CommandText = \"SELECT MAX([\" + parser.GetTableAlias(fieldName' leafTable) + \"].\" + fieldName + \") \" +"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<K' P>(dc' template' select' where);"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				cmd.CommandText = \"SELECT AVG([\" + parser.GetTableAlias(fieldName' leafTable) + \"].\" + fieldName + \") \" +"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			using (var connection = " + this.GetLocalNamespace() + ".DBHelper.GetConnection(" + this.GetLocalNamespace() + ".Util.StripEFCS2Normal(connectionString)))"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			using (var connection = " + this.GetLocalNamespace() + ".DBHelper.GetConnection(" + this.GetLocalNamespace() + ".Util.StripEFCS2Normal(connectionString)))"); " is 175.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				using (var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<K' P>(dc' template' select' where))"); " is 132.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					if (startup.CommandTimeout != null && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout.Value;"); " is 139.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					sql += \"SET [\" + parser.GetTableAlias(fieldName' leafTable) + \"].[\" + fieldName + \"] = @newValue\\r\\n\";"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					if (hasModifyAudit && (fieldName != \"" + fieldName + "\")) sql += \"' [\" + parser.GetTableAlias(fieldName' leafTable) + \"].[" + fieldName + "] = NULL\\r\\n\";"); " is 184.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					if (hasModifyAudit && (fieldName != \"" + fieldName + "\")) sql += \"' [\" + parser.GetTableAlias(fieldName' leafTable) + \"].[" + fieldName + "] = getdate()\\r\\n\";"); " is 189.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					if (newValue == null) cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"newValue\"' System.DBNull.Value));"); " is 139.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			var fromClause = sql.Substring(selectClause.Length - 1' index - selectClause.Length + 1).Replace(\"\\r\\n\"' \" \").Trim();"); " is 144.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("			sql = sql.Replace(\"[" + _model.TenantPrefix + "_" + table.DatabaseName + "]\"' \"[" + table.DatabaseName + "]\");"); " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.Append("						childTables.Add(new LinqSQLFromClause(\"" + childTable.DatabaseName + "\"' GetSchema(\"" + childTable.DatabaseName + "\")' newAlias' \"ON "); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.Append("[\" + fromClause.Alias + \"].[" + column.DatabaseName + "] = [\" + newAlias + \"].[" + column.DatabaseName + "]"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                        sb.Append("						childTables.Add(new LinqSQLFromClause(\"" + childTable.DatabaseName + "\"' GetSchema(\"" + childTable.DatabaseName + "\")' newAlias' \"ON "); " is 158.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                            sb.Append("[\" + fromClause.Alias + \"].[" + column.DatabaseName + "] = [\" + newAlias + \"].[" + column.DatabaseName + "]\"));"); " is 130.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("if (clause.TableName == \"" + table.DatabaseName + "\") realTable = " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ".GetTableFromFieldAliasSqlMapping(field.Alias);"); " is 197.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine("					else if (clause.TableName == \"" + _model.TenantPrefix + "_" + table.DatabaseName + "\") realTable = " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ".GetTableFromFieldAliasSqlMapping(field.Alias);"); " is 235.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            //foreach (Table table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && !x.IsTypeTable).OrderBy(x => x.Name)) " is 135.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            //    sb.AppendLine("					else if (clause.TableName == \"" + component.DatabaseName + "\") realTable = " + this.GetLocalNamespace() + ".Entity." + component.Parent.PascalName + ".GetTableFromFieldAliasSqlMapping(field.Alias);"); " is 228.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            //  sb.AppendLine("if (clause.TableName == \"" + view.DatabaseName + "\") realTable = " + this.GetLocalNamespace() + ".Entity." + view.PascalName + ".GetTableFromFieldAliasSqlMapping(field.Alias);"); " is 199.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		public static string GetRemappedLinqSql(LinqSQLFromClause tableInfo' string whereClause' LinqSQLFromClauseCollection fromLinkList' ObjectTypeConstants type)"); " is 176.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var item in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 162.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("return " + this.GetLocalNamespace() + ".Entity." + item.PascalName + ".GetRemappedLinqSql(whereClause' tableInfo.Alias' fromLinkList);"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                    sb.AppendLine(" return " + component.Parent.PascalName + ".GetRemappedLinqSql(whereClause' tableInfo.Alias' fromLinkList);"); " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            //foreach (CustomStoredProcedure item in _model.Database.CustomStoredProcedures.Where(x => x.Generated).OrderBy(x => x.Name)) " is 125.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("					LinqSQLFromClause clause = _fromLinkList.FirstOrDefault(x => x.Alias == table.Replace(\"[\"' string.Empty).Replace(\"]\"' string.Empty));"); " is 160.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            foreach (var table in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)).OrderBy(x => x.Name)) " is 163.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                sb.AppendLine("						case \"" + table.DatabaseName + "\": alias = " + this.GetLocalNamespace() + ".Entity." + table.PascalName + ".GetFieldAliasFromFieldNameSqlMapping(field); break;"); " is 185.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            schemaList.AddRange(_model.Database.CustomViews.Where(x => x.Generated).Select(x => x.GetSQLSchema()).Distinct().ToList()); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            schemaList.AddRange(_model.Database.CustomStoredProcedures.Where(x => x.Generated).Select(x => x.GetSQLSchema()).Distinct().ToList()); " is 134.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "                foreach (var item in _model.Database.CustomStoredProcedures.Where(x => x.Generated && x.Columns.Count > 0).OrderBy(x => x.Name)) " is 128.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("				sb.Append(\"[\" + fromClause.Schema + \"].[\" + fromClause.TableName + \"] AS [\" + fromClause.Alias + \"] \");"); " is 133.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		public const string ERROR_DATA_TOO_BIG = \"The data '{0}' is too large for the {1} field which has a length of {2}.\";"); " is 138.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		public const string ERROR_INVALID_ENUM = \"The value '{0}' set to the '{1}' field is not valid based on the backing enumeration.\";"); " is 151.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		private const string INVALID_BUSINIESSOBJECT = \"An invalid object of type 'IBusinessObject' was passed in. Perhaps a relationship was not enforced correctly.\";"); " is 181.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("		internal static DateTime SetValueHelperDateTimeNotNullableInternal(object newValue' string nullMessage)"); " is 123.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			catch (System.Data.DBConcurrencyException dbcex) { throw new ConcurrencyException(GlobalValues.ERROR_CONCURRENCY_FAILURE' dbcex); }"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			catch (System.Data.SqlClient.SqlException sqlexp) { if (sqlexp.Number == 547 || sqlexp.Number == 2627) throw new UniqueConstraintViolatedException(GlobalValues.ERROR_CONSTRAINT_FAILURE' sqlexp); else throw; }"); " is 229.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			catch (System.Data.DBConcurrencyException dbcex) { throw new ConcurrencyException(GlobalValues.ERROR_CONCURRENCY_FAILURE' dbcex); }"); " is 152.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("			catch (System.Data.SqlClient.SqlException sqlexp) { if (sqlexp.Number == 547 || sqlexp.Number == 2627) throw new UniqueConstraintViolatedException(GlobalValues.ERROR_CONSTRAINT_FAILURE' sqlexp); else throw; }"); " is 229.
Long Statement,nHydrate.Generator.EFDAL.Generators.SQLHelper,SQLHelperGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\SQLHelper\SQLHelperGeneratedTemplate.cs,AppendClass,The length of the statement  "            sb.AppendLine("	[System.CodeDom.Compiler.GeneratedCode(\"nHydrateModelGenerator\"' \"" + _model.ModelToolVersion + "\")]"); " is 123.
Complex Conditional,nHydrate.Generator.EFDAL,ColumnExtension,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\HelperExtension.cs,EFGetDatabaseMaxLengthString,The conditional expression  "column.DataType == System.Data.SqlDbType.Binary ||                  column.DataType == System.Data.SqlDbType.Char ||                  column.DataType == System.Data.SqlDbType.NChar ||                  column.DataType == System.Data.SqlDbType.NVarChar ||                  column.DataType == System.Data.SqlDbType.VarBinary ||                  column.DataType == System.Data.SqlDbType.VarChar"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL,ColumnExtension,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\HelperExtension.cs,EFGetCodeMaxLengthString,The conditional expression  "column.DataType == System.Data.SqlDbType.Binary ||                  column.DataType == System.Data.SqlDbType.Char ||                  column.DataType == System.Data.SqlDbType.NChar ||                  column.DataType == System.Data.SqlDbType.NVarChar ||                  column.DataType == System.Data.SqlDbType.Timestamp ||                  column.DataType == System.Data.SqlDbType.VarBinary ||                  column.DataType == System.Data.SqlDbType.VarChar ||                  column.DataType == System.Data.SqlDbType.Xml"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL,ColumnExtension,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\HelperExtension.cs,EFUnicode,The conditional expression  "column.DataType == System.Data.SqlDbType.NChar ||                  column.DataType == System.Data.SqlDbType.NText ||                  column.DataType == System.Data.SqlDbType.NVarChar ||                  column.DataType == System.Data.SqlDbType.Xml"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL,ColumnExtension,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\HelperExtension.cs,EFIsFixedLength,The conditional expression  "column.DataType == System.Data.SqlDbType.Binary ||                  column.DataType == System.Data.SqlDbType.Char ||                  column.DataType == System.Data.SqlDbType.NChar ||                  column.DataType == System.Data.SqlDbType.Timestamp"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL,ColumnExtension,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\HelperExtension.cs,EFIsFixedLength,The conditional expression  "column.DataType == System.Data.SqlDbType.Image ||                  column.DataType == System.Data.SqlDbType.NText ||                  column.DataType == System.Data.SqlDbType.NVarChar ||                  column.DataType == System.Data.SqlDbType.Text ||                  column.DataType == System.Data.SqlDbType.VarBinary ||                  column.DataType == System.Data.SqlDbType.VarChar ||                  column.DataType == System.Data.SqlDbType.Xml"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendEDMMetaData,The conditional expression  "parentTable.Generated &&                          childTable.Generated &&                          !childTable.AssociativeTable &&                          (!childTable.IsInheritedFrom(parentTable)) &&                          (parentTable.TypedTable != TypedTableConstants.EnumOnly) &&                          (childTable.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendInsertMapScalar,The conditional expression  "currentColumn.RelationshipRef == null &&                          !currentColumn.ComputedColumn &&                          !currentColumn.IsReadOnly &&                          (!currentColumn.PrimaryKey || currentTable.GetBasePKColumn(currentColumn).Identity != IdentityTypeConstants.Database)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendUpdateMapScalarProperties,The conditional expression  "currentColumn.RelationshipRef == null &&                          !currentColumn.ComputedColumn &&                          !currentColumn.IsReadOnly &&                          !currentColumn.PrimaryKey &&                          !fkColumns.ContainsKey(currentColumn.Key)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendInsertMapScalar,The conditional expression  "currentColumn.RelationshipRef == null &&  						!currentColumn.ComputedColumn &&  						!currentColumn.IsReadOnly &&  						(!currentColumn.PrimaryKey || currentTable.GetBasePKColumn(currentColumn).Identity != IdentityTypeConstants.Database)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendUpdateMapScalarProperties,The conditional expression  "currentColumn.RelationshipRef == null &&  						!currentColumn.ComputedColumn &&  						!currentColumn.IsReadOnly &&  						!currentColumn.PrimaryKey &&  						!fkColumns.ContainsKey(currentColumn.Key)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The conditional expression  "parentEntity != null &&                      childEntity != null &&                      parentEntity.Generated &&                      childEntity.Generated &&                      (parentEntity.TypedTable != TypedTableConstants.EnumOnly) && (childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendAssociations,The conditional expression  "parentEntity != null &&                          childEntity != null &&                          parentEntity.Generated &&                          childEntity.Generated &&                          (parentEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The conditional expression  "parentEntity != null &&                      childEntity != null &&                      parentEntity.Generated &&                      childEntity.Generated &&                      //!parentEntity.IsTypeTable &&                      //!childEntity.IsTypeTable &&                      relation.IsGenerated &&                      (parentEntity.TypedTable != TypedTableConstants.EnumOnly) && (childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLAdminTemplate.cs,AppendEntityContainer,The conditional expression  "parentEntity != null &&                      childEntity != null &&                      parentEntity.Generated &&                      childEntity.Generated &&                      relation.IsGenerated &&                      (parentEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The conditional expression  "parentEntity != null &&                      childEntity != null &&                      parentEntity.Generated &&                      childEntity.Generated &&                      (parentEntity.TypedTable != TypedTableConstants.EnumOnly) && (childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendAssociations,The conditional expression  "parentEntity != null &&                          childEntity != null &&                          parentEntity.Generated &&                          childEntity.Generated &&                          (parentEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The conditional expression  "parentEntity != null &&                      childEntity != null &&                      parentEntity.Generated &&                      childEntity.Generated &&                      //!parentEntity.IsTypeTable &&                      //!childEntity.IsTypeTable &&                      relation.IsGenerated &&                      (parentEntity.TypedTable != TypedTableConstants.EnumOnly) && (childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLTemplate.cs,AppendEntityContainer,The conditional expression  "parentEntity != null &&                      childEntity != null &&                      parentEntity.Generated &&                      childEntity.Generated &&                      relation.IsGenerated &&                      (parentEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The conditional expression  "childTable.Generated &&                                  parentTable.Generated &&                                  !childTable.IsInheritedFrom(parentTable) &&                                  (!allTables.Contains(childTable))"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.IncludeTreeLINQ,IncludeTreeLINQGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\IncludeTreeLINQ\IncludeTreeLINQGeneratedTemplate.cs,AppendTableClass,The conditional expression  "childTable.Generated &&                                  parentTable.Generated &&                                  !childTable.IsInheritedFrom(parentTable) &&                                  (!allTables.Contains(childTable))"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The conditional expression  "parentEntity != null &&  					childEntity != null &&  					parentEntity.Generated && childEntity.Generated &&  					//!parentEntity.IsTypeTable && !childEntity.IsTypeTable &&  					!childEntity.IsInheritedFrom(parentEntity) &&  					!childEntity.AssociativeTable &&  					(parentEntity.TypedTable != TypedTableConstants.EnumOnly) &&  					(childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The conditional expression  "table1.Generated && table2.Generated &&  						(table1.TypedTable != TypedTableConstants.EnumOnly) && (table2.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The conditional expression  "parentEntity != null &&  						childEntity != null &&  						parentEntity.Generated &&  						childEntity.Generated &&  						//!parentEntity.IsTypeTable &&  						//!childEntity.IsTypeTable &&  						relation.IsGenerated &&  						!childEntity.AssociativeTable &&  						(parentEntity.TypedTable != TypedTableConstants.EnumOnly) &&  						(childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The conditional expression  "parentEntity != null &&  						childEntity != null &&  						parentEntity.Generated &&  						childEntity.Generated &&  						relation.IsGenerated &&  						//!parentEntity.IsTypeTable &&  						//!childEntity.IsTypeTable &&  						!childEntity.AssociativeTable &&  						(parentEntity.TypedTable != TypedTableConstants.EnumOnly) &&  						(childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The conditional expression  "(table1 == currentTable || table2 == currentTable) &&  							(table1.TypedTable != TypedTableConstants.EnumOnly) &&  						(table2.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The conditional expression  "parentEntity != null &&  						childEntity != null &&  						parentEntity.Generated &&  						childEntity.Generated &&  						relation.IsGenerated &&  						(parentEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The conditional expression  "parentEntity != null &&  					childEntity != null &&  					parentEntity.Generated &&  					childEntity.Generated &&  					//!parentEntity.IsTypeTable &&  					//!childEntity.IsTypeTable &&  					relation.IsGenerated &&  					!childEntity.AssociativeTable &&  					!childEntity.IsInheritedFrom(parentEntity) &&  					(parentEntity.TypedTable != TypedTableConstants.EnumOnly) && (childEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The conditional expression  "parentEntity != null &&  					childEntity != null &&  					parentEntity.Generated &&  					childEntity.Generated &&  					relation.IsGenerated &&  					(parentEntity.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendProperties,The conditional expression  "column.PrimaryKey || _item.Immutable || column.ComputedColumn || column.IsReadOnly"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The conditional expression  "parentTable == _item && parentTable.Generated && childTable.Generated && !childTable.AssociativeTable && (childTable.TypedTable != TypedTableConstants.EnumOnly)"  is complex.
Complex Conditional,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The conditional expression  "childTable == _item &&                          parentTable.Generated &&                          childTable.Generated &&                          (parentTable.TypedTable != TypedTableConstants.EnumOnly) &&                          !parentTable.IsInheritedFrom(childTable)"  is complex.
Magic Number,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLAdminTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLAdminTemplate.cs,AppendRelationAssociationSetMapping,The following statement contains a magic number: foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)))              {                  var associativeRelations = table.GetChildRoleRelationsFullHierarchy();                  if (associativeRelations.Count() == 2)                  {                      var relation1 = associativeRelations.FirstOrDefault();                      var relation2 = associativeRelations.LastOrDefault();                      var table1 = (Table) relation1.ParentTableRef.Object;                      var table2 = (Table) relation2.ParentTableRef.Object;                      sb.AppendLine("		<AssociationSetMapping Name=\"" + table.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "\" StoreEntitySet=\"" + table.DatabaseName + "\">");                      sb.AppendLine("			<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");                      foreach (ColumnRelationship columnRelationship in relation1.ColumnRelationships)                      {                          sb.AppendLine("				<ScalarProperty Name=\"" +                                        (columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ColumnName=\"" +                                        (columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");                      }                      sb.AppendLine("			</EndProperty>");                      sb.AppendLine("			<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");                      foreach (ColumnRelationship columnRelationship in relation2.ColumnRelationships)                      {                          sb.AppendLine("				<ScalarProperty Name=\"" +                                        (columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ColumnName=\"" +                                        (columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");                      }                      sb.AppendLine("			</EndProperty>");                        if (_model.Database.UseGeneratedCRUD)                      {                          sb.AppendLine("			<ModificationFunctionMapping>");                          sb.AppendLine("				<DeleteFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Delete\">");                          sb.AppendLine("					<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");                          //foreach (Column column in table1.PrimaryKeyColumns)                          foreach (ColumnRelationship columnRelationship in relation1.ColumnRelationships)                          {                              sb.AppendLine("				<ScalarProperty Name=\"" +                                            (columnRelationship.ParentColumnRef.Object as Column).PascalName +                                            "\" ParameterName=\"Original_" +                                            (columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");                          }                          sb.AppendLine("					</EndProperty>");                          sb.AppendLine("					<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");                          foreach (ColumnRelationship columnRelationship in relation2.ColumnRelationships)                          {                              sb.AppendLine("				<ScalarProperty Name=\"" +                                            (columnRelationship.ParentColumnRef.Object as Column).PascalName +                                            "\" ParameterName=\"Original_" +                                            (columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");                          }                          sb.AppendLine("					</EndProperty>");                          sb.AppendLine("					<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");                          foreach (var column in table1.PrimaryKeyColumns)                          {                              sb.AppendLine("				<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation1.DatabaseRoleName + table1.DatabaseName + "_" + column.DatabaseName + "\" />");                          }                          sb.AppendLine("					</EndProperty>");                          sb.AppendLine("					<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");                          foreach (var column in table2.PrimaryKeyColumns)                          {                              sb.AppendLine("						<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation2.DatabaseRoleName + table2.DatabaseName + "_" + column.DatabaseName + "\" />");                          }                          sb.AppendLine("					</EndProperty>");                          sb.AppendLine("				</DeleteFunction>");                            //INSERT                          sb.AppendLine("				<InsertFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Insert\">");                          sb.AppendLine("					<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");                          foreach (ColumnRelationship columnRelationship in relation1.ColumnRelationships)                          {                              sb.AppendLine("						<ScalarProperty Name=\"" +                                            (columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ParameterName=\"" +                                            (columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");                          }                          sb.AppendLine("					</EndProperty>");                          sb.AppendLine("					<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");                          foreach (ColumnRelationship columnRelationship in relation2.ColumnRelationships)                          {                              sb.AppendLine("						<ScalarProperty Name=\"" +                                            (columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ParameterName=\"" +                                            (columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");                          }                          sb.AppendLine("					</EndProperty>");                          sb.AppendLine("				</InsertFunction>");                          sb.AppendLine("			</ModificationFunctionMapping>");                      }                        sb.AppendLine("		</AssociationSetMapping>");                  }              }
Magic Number,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLGenerator.cs,Generate,The following statement contains a magic number: {                  var template = new MSLTemplate(_model);                  var fullFileName = RELATIVE_OUTPUT_LOCATION + template.FileName;                  var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this' true);                  eventArgs.Properties.Add("BuildAction"' 3);                  OnProjectItemGenerated(this' eventArgs);                  var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);                  OnGenerationComplete(this' gcEventArgs);              }
Magic Number,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLGenerator.cs,Generate,The following statement contains a magic number: if (_model.Database.Tables.Any(x => x.IsTenant && x.Generated))              {                  var template = new MSLAdminTemplate(_model);                  var fullFileName = RELATIVE_OUTPUT_LOCATION + template.FileName;                  var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this' true);                  eventArgs.Properties.Add("BuildAction"' 3);                  OnProjectItemGenerated(this' eventArgs);                  var gcEventArgs = new ProjectItemGenerationCompleteEventArgs(this);                  OnGenerationComplete(this' gcEventArgs);              }              else              {                  //If this is not a tenant model then remove the admin MSL file                  var template = new MSLAdminTemplate(_model);                  var fullFileName = RELATIVE_OUTPUT_LOCATION + template.FileName;                  var eventArgs = new ProjectItemDeletedEventArgs(fullFileName' ProjectName' this);                  OnProjectItemDeleted(this' eventArgs);              }
Magic Number,nHydrate.Generator.EFDAL.Generators.EFMSL,MSLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFMSL\MSLTemplate.cs,AppendRelationAssociationSetMapping,The following statement contains a magic number: foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)))  			{  				var associativeRelations = table.GetChildRoleRelationsFullHierarchy();  				if (associativeRelations.Count() == 2)  				{  					var relation1 = associativeRelations.FirstOrDefault();  					var relation2 = associativeRelations.LastOrDefault();  					var table1 = (Table)relation1.ParentTableRef.Object;  					var table2 = (Table)relation2.ParentTableRef.Object;  					sb.AppendLine("		<AssociationSetMapping Name=\"" + table.PascalName + "\" TypeName=\"" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "\" StoreEntitySet=\"" + table.DatabaseName + "\">");  					sb.AppendLine("			<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");  					foreach (ColumnRelationship columnRelationship in relation1.ColumnRelationships)  					{  						sb.AppendLine("				<ScalarProperty Name=\"" +  							(columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ColumnName=\"" +  							(columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");  					}  					sb.AppendLine("			</EndProperty>");  					sb.AppendLine("			<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");  					foreach (ColumnRelationship columnRelationship in relation2.ColumnRelationships)  					{  						sb.AppendLine("				<ScalarProperty Name=\"" +  							(columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ColumnName=\"" +  							(columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");  					}  					sb.AppendLine("			</EndProperty>");    					if (_model.Database.UseGeneratedCRUD)  					{  						sb.AppendLine("			<ModificationFunctionMapping>");  						sb.AppendLine("				<DeleteFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Delete\">");  						sb.AppendLine("					<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");  						//foreach (Column column in table1.PrimaryKeyColumns)  						foreach (ColumnRelationship columnRelationship in relation1.ColumnRelationships)  						{  							sb.AppendLine("				<ScalarProperty Name=\"" +  								(columnRelationship.ParentColumnRef.Object as Column).PascalName +  								"\" ParameterName=\"Original_" +  								(columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");  						}  						sb.AppendLine("					</EndProperty>");  						sb.AppendLine("					<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");  						foreach (ColumnRelationship columnRelationship in relation2.ColumnRelationships)  						{  							sb.AppendLine("				<ScalarProperty Name=\"" +  								(columnRelationship.ParentColumnRef.Object as Column).PascalName +  								"\" ParameterName=\"Original_" +  								(columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");  						}  						sb.AppendLine("					</EndProperty>");  						sb.AppendLine("					<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");  						foreach (var column in table1.PrimaryKeyColumns)  						{  							sb.AppendLine("				<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation1.DatabaseRoleName + table1.DatabaseName + "_" + column.DatabaseName + "\" />");  						}  						sb.AppendLine("					</EndProperty>");  						sb.AppendLine("					<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");  						foreach (var column in table2.PrimaryKeyColumns)  						{  							sb.AppendLine("						<ScalarProperty Name=\"" + column.PascalName + "\" ParameterName=\"" + relation2.DatabaseRoleName + table2.DatabaseName + "_" + column.DatabaseName + "\" />");  						}  						sb.AppendLine("					</EndProperty>");  						sb.AppendLine("				</DeleteFunction>");    						//INSERT  						sb.AppendLine("				<InsertFunction FunctionName=\"" + this.GetLocalNamespace() + ".Store." + _model.GetStoredProcedurePrefix() + "_" + table.PascalName + "_" + moduleSuffix + "Insert\">");  						sb.AppendLine("					<EndProperty Name=\"" + relation1.PascalRoleName + table1.PascalName + "List\">");  						foreach (ColumnRelationship columnRelationship in relation1.ColumnRelationships)  						{  							sb.AppendLine("						<ScalarProperty Name=\"" +  								(columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ParameterName=\"" +  								(columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");  						}  						sb.AppendLine("					</EndProperty>");  						sb.AppendLine("					<EndProperty Name=\"" + relation2.PascalRoleName + table2.PascalName + "List\">");  						foreach (ColumnRelationship columnRelationship in relation2.ColumnRelationships)  						{  							sb.AppendLine("						<ScalarProperty Name=\"" +  								(columnRelationship.ParentColumnRef.Object as Column).PascalName + "\" ParameterName=\"" +  								(columnRelationship.ChildColumnRef.Object as Column).DatabaseName + "\" />");  						}  						sb.AppendLine("					</EndProperty>");  						sb.AppendLine("				</InsertFunction>");  						sb.AppendLine("			</ModificationFunctionMapping>");  					}    					sb.AppendLine("		</AssociationSetMapping>");  				}  			}
Magic Number,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLGenerator.cs,Generate,The following statement contains a magic number: {                  var template = new SSDLTemplate(_model);                  var fullFileName = RELATIVE_OUTPUT_LOCATION + template.FileName;                  var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this' true);                  eventArgs.Properties.Add("BuildAction"' 3);                  OnProjectItemGenerated(this' eventArgs);              }
Magic Number,nHydrate.Generator.EFDAL.Generators.EFSSDL,SSDLGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFSSDL\SSDLGenerator.cs,Generate,The following statement contains a magic number: if (_model.Database.Tables.Any(x => x.IsTenant && x.Generated))              {                  var template = new SSDLAdminTemplate(_model);                  var fullFileName = RELATIVE_OUTPUT_LOCATION + template.FileName;                  var eventArgs = new ProjectItemGeneratedEventArgs(fullFileName' template.FileContent' ProjectName' this' true);                  eventArgs.Properties.Add("BuildAction"' 3);                  OnProjectItemGenerated(this' eventArgs);              }              else              {                  //If this is not a tenant model then remove the admin SSDL file                  var template = new SSDLAdminTemplate(_model);                  var fullFileName = RELATIVE_OUTPUT_LOCATION + template.FileName;                  var eventArgs = new ProjectItemDeletedEventArgs(fullFileName' ProjectName' this);                  OnProjectItemDeleted(this' eventArgs);              }
Magic Number,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateRelations,The following statement contains a magic number: foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)))  			{  				var associativeRelations = table.GetChildRoleRelationsFullHierarchy();  				if (associativeRelations.Count() == 2)  				{  					var relation1 = associativeRelations.FirstOrDefault();  					var relation2 = associativeRelations.LastOrDefault();  					var table1 = (Table)relation1.ParentTableRef.Object;  					var table2 = (Table)relation2.ParentTableRef.Object;  					if (  						//!table1.IsTypeTable && !table2.IsTypeTable &&  						table1.Generated && table2.Generated &&  						(table1.TypedTable != TypedTableConstants.EnumOnly) && (table2.TypedTable != TypedTableConstants.EnumOnly))  					{  						sb.AppendLine("	<Association Name=\"" + table.PascalName + "\">");  						sb.AppendLine("		<End Role=\"" + relation1.PascalRoleName + table1.PascalName + "List\" Type=\"" + this.GetLocalNamespace() + ".Entity." + table1.PascalName + "\" Multiplicity=\"*\" />");  						sb.AppendLine("		<End Role=\"" + relation2.PascalRoleName + table2.PascalName + "List\" Type=\"" + this.GetLocalNamespace() + ".Entity." + table2.PascalName + "\" Multiplicity=\"*\" />");  						sb.AppendLine("	</Association>");  					}  				}  			}
Magic Number,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityTypes,The following statement contains a magic number: foreach (var currentTable in _model.Database.Tables.Where(x => x.Generated && !x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)))  			{  				//If there is a parent table then add its base type  				var baseTable = string.Empty;  				if (currentTable.ParentTable != null)  					baseTable = " BaseType=\"" + this.GetLocalNamespace() + ".Entity." + currentTable.ParentTable.PascalName + "\" ";    				sb.AppendLine("	<EntityType Name=\"" + currentTable.PascalName + "\"" + baseTable + ">");    				//Keys can only be defined by base tables  				if (currentTable.ParentTable == null)  				{  					sb.AppendLine("		<Key>");  					foreach (var column in currentTable.PrimaryKeyColumns.Where(x => x.Generated).OrderBy(x => x.Name))  					{  						sb.AppendFormat("			<PropertyRef Name=\"{0}\" />"' column.PascalName).AppendLine();  					}  					sb.AppendLine("		</Key>");  				}    				foreach (var column in currentTable.GetColumns().Where(x => x.Generated).OrderBy(x => x.Name))  				{  					//If NOT a derived table then take normal path  					if (currentTable.ParentTable == null)  					{  						sb.Append(GetPropertyNode(column));  					}  					else //Derived table - do not include primary keys  					{  						if (!column.PrimaryKey)  						{  							sb.Append(GetPropertyNode(column));  						}  					}  				}    				this.GenerateAuditColumns(currentTable);  				foreach (var relation in currentTable.ParentRoleRelations)  				{  					var parentEntity = relation.ParentTable;  					var childEntity = relation.ChildTable;  					if (parentEntity != null &&  						childEntity != null &&  						parentEntity.Generated &&  						childEntity.Generated &&  						//!parentEntity.IsTypeTable &&  						//!childEntity.IsTypeTable &&  						relation.IsGenerated &&  						!childEntity.AssociativeTable &&  						(parentEntity.TypedTable != TypedTableConstants.EnumOnly) &&  						(childEntity.TypedTable != TypedTableConstants.EnumOnly))  					{  						if (!childEntity.IsInheritedFrom(parentEntity))  						{  							//Do not do this for inheritance  							if (relation.IsOneToOne && relation.AreAllFieldsPK)  								sb.AppendFormat("		<NavigationProperty Name=\"{0}{4}\" Relationship=\"{2}.{3}\" FromRole=\"{0}{1}\" ToRole=\"{0}{4}\" />"' relation.PascalRoleName' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.GetCodeFkName()' childEntity.PascalName).AppendLine();  							else  								sb.AppendFormat("		<NavigationProperty Name=\"{0}{4}List\" Relationship=\"{2}.{3}\" FromRole=\"{0}{1}\" ToRole=\"{0}{4}List\" />"' relation.PascalRoleName' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.GetCodeFkName()' childEntity.PascalName).AppendLine();  						}  					}  				}    				foreach (var relation in currentTable.ChildRoleRelations)  				{  					var parentEntity = relation.ParentTable;  					var childEntity = relation.ChildTable;  					if (parentEntity != null &&  						childEntity != null &&  						parentEntity.Generated &&  						childEntity.Generated &&  						relation.IsGenerated &&  						//!parentEntity.IsTypeTable &&  						//!childEntity.IsTypeTable &&  						!childEntity.AssociativeTable &&  						(parentEntity.TypedTable != TypedTableConstants.EnumOnly) &&  						(childEntity.TypedTable != TypedTableConstants.EnumOnly))  					{  						//Do not do this for inheritance  						if (!childEntity.IsInheritedFrom(parentEntity))  						{  							if (relation.IsOneToOne && relation.AreAllFieldsPK)  								sb.AppendFormat("		<NavigationProperty Name=\"{0}{1}\" Relationship=\"{2}.{3}\" FromRole=\"{0}{4}\" ToRole=\"{0}{1}\" />"'  									relation.PascalRoleName'  									parentEntity.PascalName'  									this.GetLocalNamespace() + ".Entity"'  									relation.GetCodeFkName()'  									childEntity.PascalName).AppendLine();  							else  								sb.AppendFormat("		<NavigationProperty Name=\"{0}{1}\" Relationship=\"{2}.{3}\" FromRole=\"{0}{4}List\" ToRole=\"{0}{1}\" />"'  									relation.PascalRoleName'  									parentEntity.PascalName'  									this.GetLocalNamespace() + ".Entity"'  									relation.GetCodeFkName()'  									childEntity.PascalName).AppendLine();  						}  					}  				}    				//Process associative tables  				foreach (var associativeTable in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)))  				{  					var associativeRelations = associativeTable.GetChildRoleRelationsFullHierarchy();  					if (associativeRelations.Count() == 2)  					{  						var relation1 = associativeRelations.FirstOrDefault();  						var relation2 = associativeRelations.LastOrDefault();  						var table1 = (Table)relation1.ParentTableRef.Object;  						var table2 = (Table)relation2.ParentTableRef.Object;  						//if ((!table1.IsTypeTable && !table2.IsTypeTable) && (table1 == currentTable || table2 == currentTable))  						if ((table1 == currentTable || table2 == currentTable) &&  							(table1.TypedTable != TypedTableConstants.EnumOnly) &&  						(table2.TypedTable != TypedTableConstants.EnumOnly))  						{  							var relatedTable = (table1 == currentTable ? table2 : table1);  							var currentRelation = (table1 == currentTable ? relation2 : relation1);  							var relatedRelation = (table1 == currentTable ? relation1 : relation2);  							sb.AppendFormat("		<NavigationProperty Name=\"{0}{1}List\" Relationship=\"{2}.{3}\" FromRole=\"{5}{4}List\" ToRole=\"{0}{1}List\" />"'  								currentRelation.PascalRoleName'  								relatedTable.PascalName'  								this.GetLocalNamespace() + ".Entity"'  								associativeTable.PascalName'  								currentTable.PascalName'  								relatedRelation.PascalRoleName).AppendLine();  						}  					}  				}    				foreach (var reference in currentTable.ViewRelationships.AsEnumerable())  				{  					var relation = reference.Object as ViewRelation;  					var parentEntity = relation.ParentTable;  					var childEntity = relation.ChildView;  					if (parentEntity != null &&  						childEntity != null &&  						parentEntity.Generated &&  						childEntity.Generated &&  						relation.IsGenerated &&  						(parentEntity.TypedTable != TypedTableConstants.EnumOnly))  					{  						sb.AppendFormat("		<NavigationProperty Name=\"{0}{4}List\" Relationship=\"{2}.{3}\" FromRole=\"{0}{1}\" ToRole=\"{0}{4}List\" />"' relation.PascalRoleName' parentEntity.PascalName' this.GetLocalNamespace() + ".Entity"' relation.GetCodeFkName()' childEntity.PascalName).AppendLine();  					}  				}    				sb.AppendLine("	</EntityType>");  			}
Magic Number,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLTemplate.cs,GenerateEntityContainer,The following statement contains a magic number: foreach (var table in _model.Database.Tables.Where(x => x.Generated && x.AssociativeTable && (x.TypedTable != TypedTableConstants.EnumOnly)))  			{  				var associativeRelations = table.GetChildRoleRelationsFullHierarchy();  				if (associativeRelations.Count() == 2)  				{  					var relation1 = associativeRelations.FirstOrDefault();  					var relation2 = associativeRelations.LastOrDefault();  					var table1 = (Table)relation1.ParentTableRef.Object;  					var table2 = (Table)relation2.ParentTableRef.Object;  					//if (!table1.IsTypeTable && !table2.IsTypeTable)  					if (table1.TypedTable != TypedTableConstants.EnumOnly && table2.TypedTable != TypedTableConstants.EnumOnly)  					{  						sb.AppendLine("		<AssociationSet Name=\"" + table.PascalName + "\" Association=\"" + this.GetLocalNamespace() + ".Entity." + table.PascalName + "\">");  						sb.AppendLine("			<End Role=\"" + relation1.PascalRoleName + table1.PascalName + "List\" EntitySet=\"" + table1.GetAbsoluteBaseTable().PascalName + "\" />");  						sb.AppendLine("			<End Role=\"" + relation2.PascalRoleName + table2.PascalName + "List\" EntitySet=\"" + table2.GetAbsoluteBaseTable().PascalName + "\" />");  						sb.AppendLine("		</AssociationSet>");  					}  				}  			}
Magic Number,nHydrate.Generator.EFDAL.Generators.EFCSDL,CSDLGenerator,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\EFCSDL\CSDLGenerator.cs,Generate,The following statement contains a magic number: eventArgs.Properties.Add("BuildAction"' 3);
Magic Number,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendAuditClass,The following statement contains a magic number: if (interfaceSettings.EndsWith("' ")) interfaceSettings = interfaceSettings.Substring(0' interfaceSettings.Length - 2);
Magic Number,nHydrate.Generator.EFDAL.Generators.Entity,EntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Entity\EntityGeneratedTemplate.cs,AppendNavigationProperties,The following statement contains a magic number: {                  var relationList = _item.GetRelations().Where(x => x.IsValidEFRelation);                  foreach (var relation in relationList)                  {                      var parentTable = relation.ParentTable;                      var childTable = relation.ChildTable;                        //If not both generated then do not process this code block                      if (!parentTable.Generated || !childTable.Generated)                      {                          //Do Nothing                      }                        //Inheritance relationship                      else if (parentTable == childTable.ParentTable && relation.IsOneToOne && relation.AreAllFieldsPK)                      {                          //Do Nothing                      }                        //Do not walk to type tables                      //else if (parentTable.IsTypeTable || childTable.IsTypeTable)                      //{                      //  //Do Nothing                      //}                        else if (parentTable.TypedTable == TypedTableConstants.EnumOnly || childTable.TypedTable == TypedTableConstants.EnumOnly)                      {                          //Do Nothing                      }                        //1-1 relations (PK)                      else if (relation.IsOneToOne && relation.AreAllFieldsPK && !childTable.IsInheritedFrom(parentTable))                      {                          sb.AppendLine("		/// <summary>");                          if (!string.IsNullOrEmpty(relation.Description))                          {                              StringHelper.LineBreakCode(sb' relation.Description' "	/// ");                          }                          sb.AppendLine("		/// The navigation definition for walking " + parentTable.PascalName + "->" + childTable.PascalName + (string.IsNullOrEmpty(relation.PascalRoleName) ? string.Empty : " (role: '" + relation.PascalRoleName + "')"));                          sb.AppendLine("		/// Relationship Links: ");                            #region Show all relation keys                          foreach (var rc in relation.ColumnRelationships.ToList())                          {                              sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")");                          }                          #endregion                            sb.AppendLine("		/// </summary>");                          sb.AppendLine("		[XmlIgnoreAttribute()]");                          sb.AppendLine("		[SoapIgnoreAttribute()]");                          //sb.AppendLine("		[DataMemberAttribute()]");                          sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\")]");                          sb.AppendLine("		public virtual " + childTable.PascalName + " " + relation.PascalRoleName + childTable.PascalName);                          sb.AppendLine("		{");                          sb.AppendLine("			get");                          sb.AppendLine("			{");                          sb.AppendLine("				var retval = " + relation.PascalRoleName + childTable.PascalName + "Reference;");                          sb.AppendLine("				if (!retval.IsLoaded && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)");                          sb.AppendLine("				{");                          sb.AppendLine("					retval.Load();");                          sb.AppendLine("				}");                          sb.AppendLine("				return retval.Value;");                          sb.AppendLine("			}");                          sb.AppendLine("			set { ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<" + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\").Value = value; }");                          sb.AppendLine("		}");                          sb.AppendLine();                          sb.AppendLine("		/// <summary>");                          sb.AppendLine("		/// The navigation definition for walking [" + childTable.PascalName + "]->[" + parentTable.PascalName + "]");                          sb.AppendLine("		/// </summary>");                          sb.AppendLine("		[BrowsableAttribute(false)]");                          //sb.AppendLine("		[DataMemberAttribute()]");                          sb.AppendLine("		protected virtual EntityReference<" + childTable.PascalName + "> " + relation.PascalRoleName + childTable.PascalName + "Reference");                          sb.AppendLine("		{");                          sb.AppendLine("			get { return ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<" + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\"); }");                          sb.AppendLine("			set");                          sb.AppendLine("			{");                          sb.AppendLine("				if ((value != null))");                          sb.AppendLine("					((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<" + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + parentTable.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "\"' value);");                          sb.AppendLine("			}");                          sb.AppendLine("		}");                          sb.AppendLine();                            //Implement the EF Interfaces                          sb.AppendLine("		#region I" + _item.PascalName + " Interface");                          sb.AppendLine();                          sb.AppendLine("		" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + " " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + parentTable.PascalName + "." + relation.PascalRoleName + childTable.PascalName);                          sb.AppendLine("		{");                          sb.AppendLine("			get { return this." + relation.PascalRoleName + childTable.PascalName + "; }");                          sb.AppendLine("			set { this." + relation.PascalRoleName + childTable.PascalName + " = (" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ")value; }");                          sb.AppendLine("		}");                          sb.AppendLine();                          sb.AppendLine("		#endregion");                          sb.AppendLine();                        }                        //Process the associative tables                      else if (childTable.AssociativeTable)                      {                          var associativeRelations = childTable.GetRelationsWhereChild().ToList();                          if (associativeRelations.Count == 2)                          {                              Relation targetRelation = null;                              Relation otherRelation = null;                              var relation1 = associativeRelations.First();                              var relation2 = associativeRelations.Last();                              if (_item == ((Table)relation1.ParentTableRef.Object)) targetRelation = relation2;                              else targetRelation = relation1;                              if (targetRelation == relation2) otherRelation = relation1;                              else otherRelation = relation2;                              var targetTable = (Table)targetRelation.ParentTableRef.Object;                                if (targetTable.Generated)                              {                                  sb.AppendLine("		/// <summary>");                                  sb.AppendLine("		/// The back navigation definition for walking [" + _item.PascalName + "]->[" + targetTable.PascalName + (string.IsNullOrEmpty(otherRelation.PascalRoleName) ? string.Empty : " (role: '" + otherRelation.PascalRoleName + "')") + "]");                                  sb.AppendLine("		/// Relationship Links: ");                                    #region Show all relation keys                                  foreach (var rc in relation.ColumnRelationships.ToList())                                  {                                      sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")");                                  }                                  #endregion                                    sb.AppendLine("		/// </summary>");                                  sb.AppendLine("		[XmlIgnoreAttribute()]");                                  sb.AppendLine("		[SoapIgnoreAttribute()]");                                  //sb.AppendLine("		[DataMemberAttribute()]");                                  sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"" + childTable.PascalName + "\"' \"" + otherRelation.PascalRoleName + targetTable.PascalName + "List\")]");                                  sb.AppendLine("		public virtual EntityCollection<" + this.GetLocalNamespace() + ".Entity." + targetTable.PascalName + "> " + otherRelation.PascalRoleName + targetTable.PascalName + "List");                                  sb.AppendLine("		{");                                  sb.AppendLine("			get");                                  sb.AppendLine("			{");                                  sb.AppendLine("				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<" + this.GetLocalNamespace() + ".Entity." + targetTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + "\"' \"" + targetRelation.PascalRoleName + targetTable.PascalName + "List\");");                                  sb.AppendLine("				if (!retval.IsLoaded && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)");                                  sb.AppendLine("				{");                                  sb.AppendLine("					retval.Load();");                                  sb.AppendLine("				}");                                  sb.AppendLine("				return retval;");                                  sb.AppendLine("			}");                                  sb.AppendLine("		}");                                  sb.AppendLine();                                    //Implement the EF Interfaces                                  sb.AppendLine("		#region I" + _item.PascalName + " Interface");                                  sb.AppendLine();                                  sb.AppendLine("		System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + targetTable.PascalName + "> " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + otherRelation.PascalRoleName + targetTable.PascalName + "List");                                  sb.AppendLine("		{");                                  sb.AppendLine("			get { return (System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + targetTable.PascalName + ">)(System.Collections.Generic.ICollection<" + targetTable.PascalName + ">)this." + otherRelation.PascalRoleName + targetTable.PascalName + "List; }");                                  sb.AppendLine("		}");                                  sb.AppendLine();                                  sb.AppendLine("		#endregion");                                  sb.AppendLine();                                }                          }                      }                        //Process relations where Current Table is the parent                      else if (parentTable == _item && parentTable.Generated && childTable.Generated && !childTable.AssociativeTable && (childTable.TypedTable != TypedTableConstants.EnumOnly))                      {                          var listPropertyScope = "public";                          if (relation.IsOneToOne) listPropertyScope = "protected"; //1:1 relation on non-PK field so we will fake it and make a single property                            sb.AppendLine("		/// <summary>");                          sb.AppendLine("		/// The back navigation definition for walking [" + parentTable.PascalName + "]->[" + childTable.PascalName + "]");                          sb.AppendLine("		/// Relationship Links: ");                            #region Show all relation keys                          foreach (var rc in relation.ColumnRelationships.ToList())                          {                              sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")");                          }                          #endregion                            sb.AppendLine("		/// </summary>");                          sb.AppendLine("		[XmlIgnoreAttribute()]");                          sb.AppendLine("		[SoapIgnoreAttribute()]");                          sb.AppendLine("		[EdmRelationshipNavigationPropertyAttribute(\"" + this.GetLocalNamespace() + ".Entity" + "\"' \"FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + _item.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "List\")]");                          sb.AppendLine("		" + listPropertyScope + " virtual EntityCollection<" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + "> " + relation.PascalRoleName + childTable.PascalName + "List");                          sb.AppendLine("		{");                          sb.AppendLine("			get");                          sb.AppendLine("			{");                          sb.AppendLine("				//Eager load");                          sb.AppendLine("				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<" + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + ">(\"" + this.GetLocalNamespace() + ".Entity.FK_" + relation.PascalRoleName + "_" + childTable.PascalName + "_" + _item.PascalName + "\"' \"" + relation.PascalRoleName + childTable.PascalName + "List\");");                          sb.AppendLine("				if (!retval.IsLoaded  && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)");                          sb.AppendLine("				{");                          sb.AppendLine("					retval.Load();");                          sb.AppendLine("				}");                          sb.AppendLine("				return retval;");                          sb.AppendLine("			}");                          sb.AppendLine("		}");                          sb.AppendLine();                            //This will fake a single property not a list for this 1:1 relation                          if (relation.IsOneToOne)                          {                              sb.AppendLine("		/// <summary>");                              sb.AppendLine("		/// The back navigation definition for walking [" + parentTable.PascalName + "]->[" + childTable.PascalName + "]");                              sb.AppendLine("		/// Relationship Links: ");                                #region Show all relation keys                              foreach (var rc in relation.ColumnRelationships.ToList())                              {                                  sb.AppendLine("		/// [" + relation.ParentTable.Name + "." + rc.ParentColumn.Name + " = " + relation.ChildTable.Name + "." + rc.ChildColumn.Name + "] (" + (rc.ChildColumn.AllowNull ? "Optional" : "Required") + ")");                              }                              #endregion                                sb.AppendLine("		/// </summary>");                              sb.AppendLine("		public virtual " + this.GetLocalNamespace() + ".Entity." + childTable.PascalName + " " + relation.PascalRoleName + childTable.PascalName);                              sb.AppendLine("		{");                              sb.AppendLine("			get { return this." + relation.PascalRoleName + childTable.PascalName + "List.FirstOrDefault(); }");                              sb.AppendLine("		}");                              sb.AppendLine();                                //Implement the EF Interfaces                              sb.AppendLine("		#region I" + _item.PascalName + " Interface");                              sb.AppendLine();                              sb.AppendLine("		" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + " " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + relation.PascalRoleName + childTable.PascalName);                              sb.AppendLine("		{");                              sb.AppendLine("			get { return this." + relation.PascalRoleName + childTable.PascalName + "; }");                              sb.AppendLine("			set { ; }");                              sb.AppendLine("		}");                              sb.AppendLine();                              sb.AppendLine("		#endregion");                              sb.AppendLine();                            }                          else if (childTable.TypedTable != TypedTableConstants.EnumOnly)                          {                              //Implement the EF Interfaces                              sb.AppendLine("		#region I" + _item.PascalName + " Interface");                              sb.AppendLine();                              sb.AppendLine("		System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + "> " + this.GetLocalNamespace() + ".Interfaces.Entity.I" + _item.PascalName + "." + relation.PascalRoleName + childTable.PascalName + "List");                              sb.AppendLine("		{");                              sb.AppendLine("			get { return (System.Collections.Generic.ICollection<" + this.GetLocalNamespace() + ".Interfaces.Entity.I" + childTable.PascalName + ">)(System.Collections.Generic.ICollection<" + childTable.PascalName + ">)this." + relation.PascalRoleName + childTable.PascalName + "List; }");                              sb.AppendLine("		}");                              sb.AppendLine();                              sb.AppendLine("		#endregion");                              sb.AppendLine();                          }                        }                    }              }
Duplicate Code,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The method contains a code clone-set at the following line numbers (starting from the method definition): ((517' 544)' (633' 660))
Duplicate Code,nHydrate.Generator.EFDAL.Generators.Contexts,ContextGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\Contexts\ContextGeneratedTemplate.cs,AppendClass,The method contains a code clone-set at the following line numbers (starting from the method definition): ((546' 571)' (662' 687))
Duplicate Code,nHydrate.Generator.EFDAL.Generators.AuditEntity,AuditEntityGeneratedTemplate,C:\repos\nHydrate_nHydrate\Source\nHydrate.Generator.EFDAL\Generators\AuditEntity\AuditEntityGeneratedTemplate.cs,AppendRecordLoader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((66' 85)' (108' 127))
