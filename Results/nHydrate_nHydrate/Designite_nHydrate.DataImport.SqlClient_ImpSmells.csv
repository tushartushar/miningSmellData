Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The method has 207 lines of code.
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The method has 121 lines of code.
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The method has 117 lines of code.
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The method has 107 lines of code.
Complex Method,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,GetSqlDbType,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,GetSQLDataType,Cyclomatic complexity of the method is 31
Complex Method,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,GetSQLDataType,Cyclomatic complexity of the method is 34
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,Cyclomatic complexity of the method is 29
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadViews,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,Cyclomatic complexity of the method is 19
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,Cyclomatic complexity of the method is 19
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForStoredProceduresColumns,Cyclomatic complexity of the method is 9
Long Statement,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,GetStaticData,The length of the statement  "            var dbEntity = importDomain.Import(connectionString' auditFields).EntityList.FirstOrDefault(x => x.Name == entity.Name); " is 120.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables())) " is 132.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForTable())) " is 134.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                                newColumn.DataType = DatabaseHelper.GetSQLDataType(columnReader["system_type_id"].ToString()' database.UserDefinedTypes); " is 121.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForComputed())) " is 137.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var indexReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlIndexesForTable())) " is 133.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                        if (parentTable.FieldList.Count(x => x.Name == parentColumnName) == 1 && (childTable.FieldList.Count(x => x.Name == childColumnName) == 1)) " is 139.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The length of the statement  "                var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters()); " is 125.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The length of the statement  "                        if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do " is 121.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The length of the statement  "                    var dsFunctionAux = DatabaseHelper.ExecuteDataset(connectionString' "sp_help '[" + function.Schema + "].[" + function.Name + "]'"); " is 131.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The length of the statement  "                            if (row["scale"] != System.DBNull.Value && !string.IsNullOrEmpty((string)row["scale"]) && ((string)row["scale"]).Trim() != string.Empty) " is 136.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntityList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables())) " is 132.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetViewList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlForViews())) " is 126.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetStoredProcedureList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlForStoredProcedures())) " is 137.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetFunctionList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlForFunctions())) " is 130.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables())) " is 132.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "            using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForTable(name))) " is 138.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "                            newColumn.DataType = DatabaseHelper.GetSQLDataType(columnReader["system_type_id"].ToString()' database.UserDefinedTypes); " is 121.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "            using (var indexReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlIndexesForTable())) " is 133.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The length of the statement  "                    field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000') " is 140.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlDatabaseTables,The length of the statement  "            sb.AppendLine("INSERT INTO @tab SELECT so.name' null' sc.name [schema] FROM sys.tables so INNER JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name <> 'dtproperties' AND (so.name <> 'sysdiagrams') AND (so.name <> '__nhydrateschema')AND (so.name <> '__nhydrateobjects') AND NOT (so.name like '__AUDIT__%')"); " is 320.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlDatabaseTables,The length of the statement  "            sb.AppendLine("select xName as name' xSchema as [schema]' xValue selectionCriteria from @tab WHERE xName <> 'dtproperties' ORDER BY xName"); " is 140.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlColumnsForTable,The length of the statement  "            sb.AppendLine(" 				INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS foreignkeytc on foreignkeyccu.CONSTRAINT_NAME = foreignkeytc.CONSTRAINT_NAME AND"); " is 151.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlColumnsForTable,The length of the statement  "            sb.AppendLine(" 		case when	c.CHARACTER_MAXIMUM_LENGTH is null or c.CHARACTER_MAXIMUM_LENGTH > 8000 then s.max_length else c.CHARACTER_MAXIMUM_LENGTH end as max_length'"); " is 171.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlColumnsForTable,The length of the statement  "            sb.AppendLine(" 	case when COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME)' COLUMN_NAME' 'IsIdentity') = 1 then 1 else 0 end as is_identity'"); " is 153.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlIndexesForTable,The length of the statement  "            //sb.AppendLine("select o.name as tablename' i.name as indexname' i.is_primary_key from sys.objects o inner join sys.indexes i on o.object_id = i.object_id where o.[type] = 'U'"); " is 179.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForViews,The length of the statement  "            sb.AppendLine("select s.name as schemaname' v.name' m.definition from sys.views v inner join sys.sql_modules m on v.object_id = m.object_id inner join sys.schemas s on s.schema_id= v.schema_id"); " is 195.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetViewBody,The length of the statement  "            var regEx = new Regex(@"CREATE VIEW[\r\n\s]*[a-zA-Z0-9\[\]_\.]*[\r\n\s]*AS[\r\n\s]*([\s\S\r\n]*)"' RegexOptions.IgnoreCase); " is 124.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForViewsColumns,The length of the statement  "            sb.AppendLine("select v.name as viewname' c.name as columnname' c.system_type_id' c.max_length' c.precision' c.scale' c.is_nullable from sys.views v inner join sys.columns c on v.object_id = c.object_id order by v.name' c.name"); " is 229.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForFunctions,The length of the statement  "            sb.AppendLine("select o.*' s.name as schemaname from sys.objects o inner join sys.schemas s on o.schema_id = s.schema_id WHERE [type] IN ('FN'' 'IF'' 'TF') and o.name <> 'fn_diagramobjects'"); " is 192.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The length of the statement  "            var regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+(RETURN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 164.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The length of the statement  "                regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*(BEGIN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 148.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The length of the statement  "                    regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+([\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 154.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForStoredProcedures,The length of the statement  "            sb.AppendLine("SELECT OBJECT_SCHEMA_NAME(object_id) as schemaname' sys.objects.object_id' sys.objects.type' sys.objects.name as object_name"); " is 142.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForStoredProceduresParameters,The length of the statement  "            //sb.AppendLine("		AND (sys.objects.principal_id IS NULL OR (sys.objects.principal_id in (select principal_id from sys.database_principals)))"); " is 144.
Complex Conditional,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The conditional expression  "field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType()"  is complex.
Empty Catch Block,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The method has an empty catch block.
Empty Catch Block,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The method has an empty catch block.
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,ExecuteDataset,The following statement contains a magic number: command.CommandTimeout = 300;
Magic Number,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,ExecuteReader,The following statement contains a magic number: cmd.CommandTimeout = 300;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The following statement contains a magic number: roleName = roleName.Remove(0' 3);
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The following statement contains a magic number: roleName.Length >= 3
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadViews,The following statement contains a magic number: length = length / 2;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: length = length / 2;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: var length = newColumn.DataType.ValidateDataTypeMax(1000000);
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: newColumn.Length = 18;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: newColumn.Scale = 4;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: newColumn.Length = 7;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: newColumn.Length = 50;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The following statement contains a magic number: length = length / 2;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The following statement contains a magic number: length = length / 2;
Magic Number,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetViewBody,The following statement contains a magic number: match != null && match.Groups != null && match.Groups.Count == 2
Magic Number,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The following statement contains a magic number: match != null && match.Groups != null && match.Groups.Count == 2
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDateType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.DateTime:  				case SqlDbType.DateTime2:  				case SqlDbType.DateTimeOffset:  				case SqlDbType.SmallDateTime:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsMoneyType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Money:  				case SqlDbType.SmallMoney:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDecimalType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Decimal:  				case SqlDbType.Float:  				case SqlDbType.Real:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsIntegerType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.BigInt:  				case SqlDbType.Int:  				case SqlDbType.TinyInt:  				case SqlDbType.SmallInt:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDateType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.DateTime:  				case SqlDbType.DateTime2:  				case SqlDbType.DateTimeOffset:  				case SqlDbType.SmallDateTime:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsMoneyType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Money:  				case SqlDbType.SmallMoney:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDecimalType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Decimal:  				case SqlDbType.Float:  				case SqlDbType.Real:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsIntegerType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.BigInt:  				case SqlDbType.Int:  				case SqlDbType.TinyInt:  				case SqlDbType.SmallInt:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following switch statement is missing a default case: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
