Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The method has 207 lines of code.
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The method has 122 lines of code.
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The method has 117 lines of code.
Long Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The method has 107 lines of code.
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,Cyclomatic complexity of the method is 9
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadViews,Cyclomatic complexity of the method is 8
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,Cyclomatic complexity of the method is 13
Complex Method,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,Cyclomatic complexity of the method is 16
Long Statement,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,GetStaticData,The length of the statement  "            var dbEntity = importDomain.Import(connectionString' auditFields).EntityList.FirstOrDefault(x => x.Name == entity.Name); " is 120.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables())) " is 132.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForTable())) " is 134.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForComputed())) " is 137.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                using (var indexReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlIndexesForTable())) " is 133.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The length of the statement  "                        if (parentTable.FieldList.Count(x => x.Name == parentColumnName) == 1 && (childTable.FieldList.Count(x => x.Name == childColumnName) == 1)) " is 139.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The length of the statement  "                var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters()); " is 125.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The length of the statement  "                        if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do " is 121.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The length of the statement  "                    var dsFunctionAux = DatabaseHelper.ExecuteDataset(connectionString' "sp_help '[" + function.Schema + "].[" + function.Name + "]'"); " is 131.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The length of the statement  "                            if (row["scale"] != System.DBNull.Value && !string.IsNullOrEmpty((string)row["scale"]) && ((string)row["scale"]).Trim() != string.Empty) " is 136.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntityList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables())) " is 132.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetViewList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlForViews())) " is 126.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetStoredProcedureList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlForStoredProcedures())) " is 137.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetFunctionList,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlForFunctions())) " is 130.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "            using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables())) " is 132.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "            using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForTable(name))) " is 138.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The length of the statement  "            using (var indexReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlIndexesForTable())) " is 133.
Long Statement,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The length of the statement  "                    field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000') " is 140.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlDatabaseTables,The length of the statement  "			sb.AppendLine("INSERT INTO @tab SELECT so.name' null' sc.name [schema] FROM sys.tables so INNER JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name <> 'dtproperties' AND (so.name <> 'sysdiagrams') AND (so.name <> '__nhydrateschema')AND (so.name <> '__nhydrateobjects') AND NOT (so.name like '__AUDIT__%')"); " is 320.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlDatabaseTables,The length of the statement  "			sb.AppendLine("select xName as name' xSchema as [schema]' xValue selectionCriteria from @tab WHERE xName <> 'dtproperties' ORDER BY xName"); " is 140.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlColumnsForTable,The length of the statement  "			sb.AppendLine(" 				INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS foreignkeytc on foreignkeyccu.CONSTRAINT_NAME = foreignkeytc.CONSTRAINT_NAME AND"); " is 151.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlColumnsForTable,The length of the statement  "			sb.AppendLine(" 		case when	c.CHARACTER_MAXIMUM_LENGTH is null or c.CHARACTER_MAXIMUM_LENGTH > 8000 then s.length else c.CHARACTER_MAXIMUM_LENGTH end as length'"); " is 163.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlColumnsForTable,The length of the statement  "			sb.AppendLine(" 	case when COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME)' COLUMN_NAME' 'IsIdentity') = 1 then 'true' else 'false' end as isIdentity'"); " is 163.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlIndexesForTable,The length of the statement  "			//sb.AppendLine("select o.name as tablename' i.name as indexname' i.is_primary_key from sys.objects o inner join sys.indexes i on o.object_id = i.object_id where o.[type] = 'U'"); " is 179.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForViews,The length of the statement  "			sb.AppendLine("select s.name as schemaname' v.name' m.definition from sys.views v inner join sys.sql_modules m on v.object_id = m.object_id inner join sys.schemas s on s.schema_id= v.schema_id"); " is 195.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetViewBody,The length of the statement  "			var regEx = new Regex(@"CREATE VIEW[\r\n\s]*[a-zA-Z0-9\[\]_\.]*[\r\n\s]*AS[\r\n\s]*([\s\S\r\n]*)"' RegexOptions.IgnoreCase); " is 124.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForViewsColumns,The length of the statement  "			sb.AppendLine("select v.name as viewname' c.name as columnname' c.system_type_id' c.max_length' c.precision' c.scale' c.is_nullable from sys.views v inner join sys.columns c on v.object_id = c.object_id order by v.name' c.name"); " is 229.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForFunctions,The length of the statement  "			sb.AppendLine("select o.*' s.name as schemaname from sys.objects o inner join sys.schemas s on o.schema_id = s.schema_id WHERE [type] IN ('FN'' 'IF'' 'TF') and o.name <> 'fn_diagramobjects'"); " is 192.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The length of the statement  "			var regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+(RETURN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 164.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The length of the statement  "				regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*(BEGIN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 148.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The length of the statement  "					regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+([\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 154.
Long Statement,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetSqlForStoredProcedures,The length of the statement  "			sb.AppendLine("SELECT	OBJECT_SCHEMA_NAME(id) as schemaname' dbo.sysobjects.id' dbo.sysobjects.xtype' dbo.sysobjects.name"); " is 123.
Complex Conditional,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The conditional expression  "field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType()"  is complex.
Empty Catch Block,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The method has an empty catch block.
Empty Catch Block,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,GetEntity,The method has an empty catch block.
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following statement contains a magic number: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
Magic Number,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,ExecuteDataset,The following statement contains a magic number: using (var connection = new SqlConnection(connectionString))              {                  var command = new SqlCommand();                  command.CommandType = CommandType.Text;                  command.CommandText = sql;                  command.Connection = connection;                  command.CommandTimeout = 300;                  var da = new SqlDataAdapter();                  da.SelectCommand = (SqlCommand)command;                    try                  {                      da.Fill(retVal);                      connection.Open();                  }                  catch (Exception /*ignored*/)                  {                      throw;                  }                  finally                  {                      if (connection.State != ConnectionState.Closed)                      {                          connection.Close();                      }                  }              }
Magic Number,nHydrate.DataImport.SqlClient,DatabaseHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\DatabaseHelper.cs,ExecuteReader,The following statement contains a magic number: cmd.CommandTimeout = 300;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The following statement contains a magic number: try              {                  var database = new Database();                  database.Collate = DatabaseHelper.GetDatabaseCollation(connectionString);                    #region Load user defined types                  LoadUdts(database' connectionString);                  #endregion                    #region Load Entities                  this.ProgressText = "Loading Entities...";                  using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables()))                  {                      while (tableReader.Read())                      {                          var newEntity = new Entity();                          newEntity.Name = tableReader["name"].ToString();                          database.EntityList.Add(newEntity);                          newEntity.Schema = tableReader["schema"].ToString();                      }                  }                  #endregion                    #region Load Entity Fields                  using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForTable()))                  {                      while (columnReader.Read())                      {                          var columnName = columnReader["columnName"].ToString();                          var tableName = columnReader["tableName"].ToString();                            var entity = database.EntityList.FirstOrDefault(x => x.Name == tableName);                          //Ensure the field name is not an Audit field                          if (entity != null && !auditFields.Any(x => x.Name.ToLower() == columnName.ToLower()))                          {                              var maxSortOrder = 0;                              if (entity.FieldList.Count > 0) maxSortOrder = entity.FieldList.Max(x => x.SortOrder);                              var newColumn = new Field() { Name = columnName' SortOrder = ++maxSortOrder };                              entity.FieldList.Add(newColumn);                                newColumn.Nullable = bool.Parse(columnReader["allowNull"].ToString());                              if (bool.Parse(columnReader["isIdentity"].ToString()))                                  newColumn.Identity = true;                                if (columnReader["isPrimaryKey"] != System.DBNull.Value)                                  newColumn.PrimaryKey = true;                                try                              {                                  newColumn.DataType = DatabaseHelper.GetSQLDataType(columnReader["xtype"].ToString()' database.UserDefinedTypes);                              }                              catch { }                                var defaultvalue = columnReader["defaultValue"].ToString();                              SetupDefault(newColumn' defaultvalue);                              //newColumn.ImportedDefaultName = "";                                newColumn.Length = (int)columnReader["length"];                                //Decimals are a little different                              if (newColumn.DataType == SqlDbType.Decimal)                              {                                  newColumn.Length = (byte)columnReader["precision"];                                  newColumn.Scale = (int)columnReader["scale"];                              }                                if (columnReader["collation"] != System.DBNull.Value)                              {                                  if (database.Collate != (string)columnReader["collation"])                                      newColumn.Collate = (string)columnReader["collation"];                              }                            }                          else if (entity != null)                          {                              if (auditFields.Any(x => (x.Type == SpecialFieldTypeConstants.CreatedDate ||                                  x.Type == SpecialFieldTypeConstants.CreatedBy) &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.AllowCreateAudit = true;                              }                                if (auditFields.Any(x => (x.Type == SpecialFieldTypeConstants.ModifedDate ||                                  x.Type == SpecialFieldTypeConstants.ModifiedBy) &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.AllowModifyAudit = true;                              }                                if (auditFields.Any(x => x.Type == SpecialFieldTypeConstants.Timestamp &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.AllowTimestamp = true;                              }                                if (auditFields.Any(x => x.Type == SpecialFieldTypeConstants.Tenant &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.IsTenant = true;                              }                          }                      }                  }                    using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForComputed()))                  {                      while (columnReader.Read())                      {                          var tableName = columnReader["tableName"].ToString();                          var columnName = columnReader["columnName"].ToString();                          var entity = database.EntityList.FirstOrDefault(x => x.Name == tableName);                          if (entity != null)                          {                              var column = entity.FieldList.FirstOrDefault(x => x.Name.ToLower() == columnName.ToLower());                              if (column != null)                              {                                  column.IsComputed = true;                                  column.Formula = columnReader["definition"].ToString();                              }                          }                      }                  }                    #endregion                    #region Load Entity Indexes                  using (var indexReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlIndexesForTable()))                  {                      while (indexReader.Read())                      {                          var indexName = indexReader["indexname"].ToString();                          var columnName = indexReader["columnname"].ToString();                          var tableName = indexReader["tableName"].ToString();                          var entity = database.EntityList.FirstOrDefault(x => x.Name == tableName);                          if (entity != null)                          {                              var pk = bool.Parse(indexReader["is_primary_key"].ToString());                              var column = entity.FieldList.FirstOrDefault(x => x.Name == columnName);                              if (column != null && !pk)                                  column.IsIndexed = true;                          }                      }                  }                  #endregion                    #region Load Relations                    var dsRelationship = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForRelationships());                  foreach (DataRow rowRelationship in dsRelationship.Tables[0].Rows)                  {                      var constraintName = rowRelationship["FK_CONSTRAINT_NAME"].ToString();                      var parentTableName = (string)rowRelationship["UQ_TABLE_NAME"];                      var childTableName = (string)rowRelationship["FK_TABLE_NAME"];                      var parentTable = database.EntityList.FirstOrDefault(x => x.Name == parentTableName);                      var childTable = database.EntityList.FirstOrDefault(x => x.Name == childTableName);                      if (parentTable != null && childTable != null)                      {                          Relationship newRelation = null;                          var isAdd = false;                          if (database.RelationshipList.Count(x => x.ConstraintName == constraintName) == 0)                          {                              newRelation = new Relationship();                              if (rowRelationship["id"] != System.DBNull.Value)                                  newRelation.ImportData = rowRelationship["id"].ToString();                              newRelation.SourceEntity = parentTable;                              newRelation.TargetEntity = childTable;                              newRelation.ConstraintName = constraintName;                              var search = ("_" + childTable.Name + "_" + parentTable.Name).ToLower();                              var roleName = constraintName.ToLower().Replace(search' string.Empty);                              if (roleName.Length >= 3) roleName = roleName.Remove(0' 3);                              var v = roleName.ToLower();                              if (v != "fk") newRelation.RoleName = v;                              isAdd = true;                          }                          else                          {                              newRelation = database.RelationshipList.First(x => x.ConstraintName == constraintName);                          }                            //add the column relationship to the relation                          var columnRelationship = new RelationshipDetail();                          var parentColumnName = (string)rowRelationship["UQ_COLUMN_NAME"];                          var childColumnName = (string)rowRelationship["FK_COLUMN_NAME"];                          if (parentTable.FieldList.Count(x => x.Name == parentColumnName) == 1 && (childTable.FieldList.Count(x => x.Name == childColumnName) == 1))                          {                              columnRelationship.ParentField = parentTable.FieldList.First(x => x.Name == parentColumnName);                              columnRelationship.ChildField = childTable.FieldList.First(x => x.Name == childColumnName);                              newRelation.RelationshipColumnList.Add(columnRelationship);                                //ONLY ADD THIS RELATION IF ALL WENT WELL                              if (isAdd)                                  parentTable.RelationshipList.Add(newRelation);                          }                          else                          {                              System.Diagnostics.Debug.Write(string.Empty);                          }                        }                    }                  #endregion                    #region Load StoredProcs                    LoadStoredProcedures(database' connectionString);                    #endregion                    #region Load Views                  this.ProgressText = "Loading Views...";                  LoadViews(database' connectionString);                    #endregion                    #region Load Functions                    this.ProgressText = "Loading Functions...";                  LoadFunctions(database' connectionString);                    #endregion                    #region Load Indexes                    this.ProgressText = "Loading Indexes...";                  LoadIndexes(database' connectionString);                    #endregion                    LoadUniqueFields(database' connectionString);                    return database;                }              catch (Exception /*ignored*/)              {                  throw;              }              finally              {                  this.ProgressText = string.Empty;                  this.ProgressValue = 0;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,Import,The following statement contains a magic number: try              {                  var database = new Database();                  database.Collate = DatabaseHelper.GetDatabaseCollation(connectionString);                    #region Load user defined types                  LoadUdts(database' connectionString);                  #endregion                    #region Load Entities                  this.ProgressText = "Loading Entities...";                  using (var tableReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlDatabaseTables()))                  {                      while (tableReader.Read())                      {                          var newEntity = new Entity();                          newEntity.Name = tableReader["name"].ToString();                          database.EntityList.Add(newEntity);                          newEntity.Schema = tableReader["schema"].ToString();                      }                  }                  #endregion                    #region Load Entity Fields                  using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForTable()))                  {                      while (columnReader.Read())                      {                          var columnName = columnReader["columnName"].ToString();                          var tableName = columnReader["tableName"].ToString();                            var entity = database.EntityList.FirstOrDefault(x => x.Name == tableName);                          //Ensure the field name is not an Audit field                          if (entity != null && !auditFields.Any(x => x.Name.ToLower() == columnName.ToLower()))                          {                              var maxSortOrder = 0;                              if (entity.FieldList.Count > 0) maxSortOrder = entity.FieldList.Max(x => x.SortOrder);                              var newColumn = new Field() { Name = columnName' SortOrder = ++maxSortOrder };                              entity.FieldList.Add(newColumn);                                newColumn.Nullable = bool.Parse(columnReader["allowNull"].ToString());                              if (bool.Parse(columnReader["isIdentity"].ToString()))                                  newColumn.Identity = true;                                if (columnReader["isPrimaryKey"] != System.DBNull.Value)                                  newColumn.PrimaryKey = true;                                try                              {                                  newColumn.DataType = DatabaseHelper.GetSQLDataType(columnReader["xtype"].ToString()' database.UserDefinedTypes);                              }                              catch { }                                var defaultvalue = columnReader["defaultValue"].ToString();                              SetupDefault(newColumn' defaultvalue);                              //newColumn.ImportedDefaultName = "";                                newColumn.Length = (int)columnReader["length"];                                //Decimals are a little different                              if (newColumn.DataType == SqlDbType.Decimal)                              {                                  newColumn.Length = (byte)columnReader["precision"];                                  newColumn.Scale = (int)columnReader["scale"];                              }                                if (columnReader["collation"] != System.DBNull.Value)                              {                                  if (database.Collate != (string)columnReader["collation"])                                      newColumn.Collate = (string)columnReader["collation"];                              }                            }                          else if (entity != null)                          {                              if (auditFields.Any(x => (x.Type == SpecialFieldTypeConstants.CreatedDate ||                                  x.Type == SpecialFieldTypeConstants.CreatedBy) &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.AllowCreateAudit = true;                              }                                if (auditFields.Any(x => (x.Type == SpecialFieldTypeConstants.ModifedDate ||                                  x.Type == SpecialFieldTypeConstants.ModifiedBy) &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.AllowModifyAudit = true;                              }                                if (auditFields.Any(x => x.Type == SpecialFieldTypeConstants.Timestamp &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.AllowTimestamp = true;                              }                                if (auditFields.Any(x => x.Type == SpecialFieldTypeConstants.Tenant &&                                  x.Name.ToLower() == columnName.ToLower()))                              {                                  entity.IsTenant = true;                              }                          }                      }                  }                    using (var columnReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlColumnsForComputed()))                  {                      while (columnReader.Read())                      {                          var tableName = columnReader["tableName"].ToString();                          var columnName = columnReader["columnName"].ToString();                          var entity = database.EntityList.FirstOrDefault(x => x.Name == tableName);                          if (entity != null)                          {                              var column = entity.FieldList.FirstOrDefault(x => x.Name.ToLower() == columnName.ToLower());                              if (column != null)                              {                                  column.IsComputed = true;                                  column.Formula = columnReader["definition"].ToString();                              }                          }                      }                  }                    #endregion                    #region Load Entity Indexes                  using (var indexReader = DatabaseHelper.ExecuteReader(connectionString' CommandType.Text' SchemaModelHelper.GetSqlIndexesForTable()))                  {                      while (indexReader.Read())                      {                          var indexName = indexReader["indexname"].ToString();                          var columnName = indexReader["columnname"].ToString();                          var tableName = indexReader["tableName"].ToString();                          var entity = database.EntityList.FirstOrDefault(x => x.Name == tableName);                          if (entity != null)                          {                              var pk = bool.Parse(indexReader["is_primary_key"].ToString());                              var column = entity.FieldList.FirstOrDefault(x => x.Name == columnName);                              if (column != null && !pk)                                  column.IsIndexed = true;                          }                      }                  }                  #endregion                    #region Load Relations                    var dsRelationship = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForRelationships());                  foreach (DataRow rowRelationship in dsRelationship.Tables[0].Rows)                  {                      var constraintName = rowRelationship["FK_CONSTRAINT_NAME"].ToString();                      var parentTableName = (string)rowRelationship["UQ_TABLE_NAME"];                      var childTableName = (string)rowRelationship["FK_TABLE_NAME"];                      var parentTable = database.EntityList.FirstOrDefault(x => x.Name == parentTableName);                      var childTable = database.EntityList.FirstOrDefault(x => x.Name == childTableName);                      if (parentTable != null && childTable != null)                      {                          Relationship newRelation = null;                          var isAdd = false;                          if (database.RelationshipList.Count(x => x.ConstraintName == constraintName) == 0)                          {                              newRelation = new Relationship();                              if (rowRelationship["id"] != System.DBNull.Value)                                  newRelation.ImportData = rowRelationship["id"].ToString();                              newRelation.SourceEntity = parentTable;                              newRelation.TargetEntity = childTable;                              newRelation.ConstraintName = constraintName;                              var search = ("_" + childTable.Name + "_" + parentTable.Name).ToLower();                              var roleName = constraintName.ToLower().Replace(search' string.Empty);                              if (roleName.Length >= 3) roleName = roleName.Remove(0' 3);                              var v = roleName.ToLower();                              if (v != "fk") newRelation.RoleName = v;                              isAdd = true;                          }                          else                          {                              newRelation = database.RelationshipList.First(x => x.ConstraintName == constraintName);                          }                            //add the column relationship to the relation                          var columnRelationship = new RelationshipDetail();                          var parentColumnName = (string)rowRelationship["UQ_COLUMN_NAME"];                          var childColumnName = (string)rowRelationship["FK_COLUMN_NAME"];                          if (parentTable.FieldList.Count(x => x.Name == parentColumnName) == 1 && (childTable.FieldList.Count(x => x.Name == childColumnName) == 1))                          {                              columnRelationship.ParentField = parentTable.FieldList.First(x => x.Name == parentColumnName);                              columnRelationship.ChildField = childTable.FieldList.First(x => x.Name == childColumnName);                              newRelation.RelationshipColumnList.Add(columnRelationship);                                //ONLY ADD THIS RELATION IF ALL WENT WELL                              if (isAdd)                                  parentTable.RelationshipList.Add(newRelation);                          }                          else                          {                              System.Diagnostics.Debug.Write(string.Empty);                          }                        }                    }                  #endregion                    #region Load StoredProcs                    LoadStoredProcedures(database' connectionString);                    #endregion                    #region Load Views                  this.ProgressText = "Loading Views...";                  LoadViews(database' connectionString);                    #endregion                    #region Load Functions                    this.ProgressText = "Loading Functions...";                  LoadFunctions(database' connectionString);                    #endregion                    #region Load Indexes                    this.ProgressText = "Loading Indexes...";                  LoadIndexes(database' connectionString);                    #endregion                    LoadUniqueFields(database' connectionString);                    return database;                }              catch (Exception /*ignored*/)              {                  throw;              }              finally              {                  this.ProgressText = string.Empty;                  this.ProgressValue = 0;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadViews,The following statement contains a magic number: if (dsViewColumn.Tables.Count > 0)              {                  foreach (DataRow rowView in dsViewColumn.Tables[0].Rows)                  {                      var viewName = (string)rowView["viewname"];                      var columnName = (string)rowView["columnname"];                      var dataType = DatabaseHelper.GetSQLDataType(rowView["system_type_id"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowView["max_length"].ToString());                      var view = database.ViewList.FirstOrDefault(x => x.Name.ToLower() == viewName.ToLower());                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) || (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                      else if (dataType == SqlDbType.DateTime2)                      {                          length = int.Parse(rowView["scale"].ToString());                      }                        if (view != null)                      {                          var field = new Field();                          field.Name = columnName;                          field.DataType = dataType;                          field.Length = length;                          field.Scale = int.Parse(rowView["scale"].ToString());                          field.Nullable = (bool)rowView["is_nullable"];                          view.FieldList.Add(field);                      }                  }              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: try              {                  var dsSP = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProcedures(procName));                  var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters());                    //Add the Stored Procedures                  StoredProc customStoredProcedure = null;                  foreach (DataRow rowSP in dsSP.Tables[0].Rows)                  {                      var id = (int)rowSP["id"];                      var name = (string)rowSP["name"];                      var schema = (string)rowSP["schemaname"];                      customStoredProcedure = database.StoredProcList.FirstOrDefault(x => x.Name == name);                      if (customStoredProcedure == null)                      {                          customStoredProcedure = new StoredProc();                          customStoredProcedure.Name = name;                          customStoredProcedure.SQL = SchemaModelHelper.GetSqlForStoredProceduresBody(schema' name' connectionString);                          customStoredProcedure.Schema = schema;                          database.StoredProcList.Add(customStoredProcedure);                      }                    }                    //Add the parameters                  var sortOrder = 1;                  foreach (DataRow rowSP in dsSPParameter.Tables[0].Rows)                  {                      if (!DatabaseHelper.IsValidSQLDataType((SqlNativeTypes)int.Parse(rowSP["xtype"].ToString())))                      {                          customStoredProcedure.InError = true;                          customStoredProcedure.ParameterList.Clear();                          customStoredProcedure.FieldList.Clear();                          return false;                      }                        var id = (int)rowSP["id"];                      var spName = (string)rowSP["name"];                      var name = (string)rowSP["ColName"];                      var typeName = (string)rowSP["ColType"];                      var dataType = DatabaseHelper.GetSQLDataType(rowSP["xtype"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowSP["length"].ToString());                      var isOutput = ((int)rowSP["isoutparam"] != 0);                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) ||                          (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                        if (customStoredProcedure != null)                      {                          var parameter = new Parameter();                          parameter.Name = name.Replace("@"' string.Empty);                          parameter.SortOrder = sortOrder;                          sortOrder++;                          parameter.DataType = dataType;                          parameter.Length = length;                          parameter.Nullable = (int)rowSP["isnullable"] == 1 ? true : false;                          parameter.IsOutputParameter = isOutput;                          customStoredProcedure.ParameterList.Add(parameter);                      }                  }                    //Try to get the columns                  var errorItems = new List<string>();                  foreach (var sp in database.StoredProcList)                  {                      try                      {                          DataSet dsSPColumn = null;                          try                          {                              dsSPColumn = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresColumns(sp));                          }                          catch (Exception)                          {                              sp.ColumnFailure = true;                          }                            if ((dsSPColumn != null) && dsSPColumn.Tables.Count > 0)                          {                              var dt = dsSPColumn.Tables[0];                              foreach (DataColumn column in dt.Columns)                              {                                  var newColumn = new Field();                                    var dataType = Extensions.GetSqlDbType(column.DataType);                                  var length = newColumn.DataType.ValidateDataTypeMax(1000000);                                    newColumn.Name = column.ColumnName;                                  newColumn.DataType = dataType;                                  newColumn.Nullable = true;                                  newColumn.Length = length;                                  if (newColumn.DataType == SqlDbType.Decimal)                                  {                                      newColumn.Length = 18;                                      newColumn.Scale = 4;                                  }                                  if (newColumn.DataType == SqlDbType.DateTime2)                                  {                                      newColumn.Length = 7;                                      newColumn.Scale = 0;                                  }                                  if (newColumn.DataType == SqlDbType.VarChar)                                      newColumn.Length = 50;                                  sp.FieldList.Add(newColumn);                              }                          }                      }                      catch (Exception ex)                      {                          //Do Nothing - Skip to next                          if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do                          {                              //Do Nothing                          }                          else                          {                              errorItems.Add(sp.Name);                          }                        }                  }                  return true;                }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: try              {                  var dsSP = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProcedures(procName));                  var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters());                    //Add the Stored Procedures                  StoredProc customStoredProcedure = null;                  foreach (DataRow rowSP in dsSP.Tables[0].Rows)                  {                      var id = (int)rowSP["id"];                      var name = (string)rowSP["name"];                      var schema = (string)rowSP["schemaname"];                      customStoredProcedure = database.StoredProcList.FirstOrDefault(x => x.Name == name);                      if (customStoredProcedure == null)                      {                          customStoredProcedure = new StoredProc();                          customStoredProcedure.Name = name;                          customStoredProcedure.SQL = SchemaModelHelper.GetSqlForStoredProceduresBody(schema' name' connectionString);                          customStoredProcedure.Schema = schema;                          database.StoredProcList.Add(customStoredProcedure);                      }                    }                    //Add the parameters                  var sortOrder = 1;                  foreach (DataRow rowSP in dsSPParameter.Tables[0].Rows)                  {                      if (!DatabaseHelper.IsValidSQLDataType((SqlNativeTypes)int.Parse(rowSP["xtype"].ToString())))                      {                          customStoredProcedure.InError = true;                          customStoredProcedure.ParameterList.Clear();                          customStoredProcedure.FieldList.Clear();                          return false;                      }                        var id = (int)rowSP["id"];                      var spName = (string)rowSP["name"];                      var name = (string)rowSP["ColName"];                      var typeName = (string)rowSP["ColType"];                      var dataType = DatabaseHelper.GetSQLDataType(rowSP["xtype"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowSP["length"].ToString());                      var isOutput = ((int)rowSP["isoutparam"] != 0);                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) ||                          (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                        if (customStoredProcedure != null)                      {                          var parameter = new Parameter();                          parameter.Name = name.Replace("@"' string.Empty);                          parameter.SortOrder = sortOrder;                          sortOrder++;                          parameter.DataType = dataType;                          parameter.Length = length;                          parameter.Nullable = (int)rowSP["isnullable"] == 1 ? true : false;                          parameter.IsOutputParameter = isOutput;                          customStoredProcedure.ParameterList.Add(parameter);                      }                  }                    //Try to get the columns                  var errorItems = new List<string>();                  foreach (var sp in database.StoredProcList)                  {                      try                      {                          DataSet dsSPColumn = null;                          try                          {                              dsSPColumn = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresColumns(sp));                          }                          catch (Exception)                          {                              sp.ColumnFailure = true;                          }                            if ((dsSPColumn != null) && dsSPColumn.Tables.Count > 0)                          {                              var dt = dsSPColumn.Tables[0];                              foreach (DataColumn column in dt.Columns)                              {                                  var newColumn = new Field();                                    var dataType = Extensions.GetSqlDbType(column.DataType);                                  var length = newColumn.DataType.ValidateDataTypeMax(1000000);                                    newColumn.Name = column.ColumnName;                                  newColumn.DataType = dataType;                                  newColumn.Nullable = true;                                  newColumn.Length = length;                                  if (newColumn.DataType == SqlDbType.Decimal)                                  {                                      newColumn.Length = 18;                                      newColumn.Scale = 4;                                  }                                  if (newColumn.DataType == SqlDbType.DateTime2)                                  {                                      newColumn.Length = 7;                                      newColumn.Scale = 0;                                  }                                  if (newColumn.DataType == SqlDbType.VarChar)                                      newColumn.Length = 50;                                  sp.FieldList.Add(newColumn);                              }                          }                      }                      catch (Exception ex)                      {                          //Do Nothing - Skip to next                          if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do                          {                              //Do Nothing                          }                          else                          {                              errorItems.Add(sp.Name);                          }                        }                  }                  return true;                }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: try              {                  var dsSP = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProcedures(procName));                  var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters());                    //Add the Stored Procedures                  StoredProc customStoredProcedure = null;                  foreach (DataRow rowSP in dsSP.Tables[0].Rows)                  {                      var id = (int)rowSP["id"];                      var name = (string)rowSP["name"];                      var schema = (string)rowSP["schemaname"];                      customStoredProcedure = database.StoredProcList.FirstOrDefault(x => x.Name == name);                      if (customStoredProcedure == null)                      {                          customStoredProcedure = new StoredProc();                          customStoredProcedure.Name = name;                          customStoredProcedure.SQL = SchemaModelHelper.GetSqlForStoredProceduresBody(schema' name' connectionString);                          customStoredProcedure.Schema = schema;                          database.StoredProcList.Add(customStoredProcedure);                      }                    }                    //Add the parameters                  var sortOrder = 1;                  foreach (DataRow rowSP in dsSPParameter.Tables[0].Rows)                  {                      if (!DatabaseHelper.IsValidSQLDataType((SqlNativeTypes)int.Parse(rowSP["xtype"].ToString())))                      {                          customStoredProcedure.InError = true;                          customStoredProcedure.ParameterList.Clear();                          customStoredProcedure.FieldList.Clear();                          return false;                      }                        var id = (int)rowSP["id"];                      var spName = (string)rowSP["name"];                      var name = (string)rowSP["ColName"];                      var typeName = (string)rowSP["ColType"];                      var dataType = DatabaseHelper.GetSQLDataType(rowSP["xtype"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowSP["length"].ToString());                      var isOutput = ((int)rowSP["isoutparam"] != 0);                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) ||                          (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                        if (customStoredProcedure != null)                      {                          var parameter = new Parameter();                          parameter.Name = name.Replace("@"' string.Empty);                          parameter.SortOrder = sortOrder;                          sortOrder++;                          parameter.DataType = dataType;                          parameter.Length = length;                          parameter.Nullable = (int)rowSP["isnullable"] == 1 ? true : false;                          parameter.IsOutputParameter = isOutput;                          customStoredProcedure.ParameterList.Add(parameter);                      }                  }                    //Try to get the columns                  var errorItems = new List<string>();                  foreach (var sp in database.StoredProcList)                  {                      try                      {                          DataSet dsSPColumn = null;                          try                          {                              dsSPColumn = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresColumns(sp));                          }                          catch (Exception)                          {                              sp.ColumnFailure = true;                          }                            if ((dsSPColumn != null) && dsSPColumn.Tables.Count > 0)                          {                              var dt = dsSPColumn.Tables[0];                              foreach (DataColumn column in dt.Columns)                              {                                  var newColumn = new Field();                                    var dataType = Extensions.GetSqlDbType(column.DataType);                                  var length = newColumn.DataType.ValidateDataTypeMax(1000000);                                    newColumn.Name = column.ColumnName;                                  newColumn.DataType = dataType;                                  newColumn.Nullable = true;                                  newColumn.Length = length;                                  if (newColumn.DataType == SqlDbType.Decimal)                                  {                                      newColumn.Length = 18;                                      newColumn.Scale = 4;                                  }                                  if (newColumn.DataType == SqlDbType.DateTime2)                                  {                                      newColumn.Length = 7;                                      newColumn.Scale = 0;                                  }                                  if (newColumn.DataType == SqlDbType.VarChar)                                      newColumn.Length = 50;                                  sp.FieldList.Add(newColumn);                              }                          }                      }                      catch (Exception ex)                      {                          //Do Nothing - Skip to next                          if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do                          {                              //Do Nothing                          }                          else                          {                              errorItems.Add(sp.Name);                          }                        }                  }                  return true;                }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: try              {                  var dsSP = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProcedures(procName));                  var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters());                    //Add the Stored Procedures                  StoredProc customStoredProcedure = null;                  foreach (DataRow rowSP in dsSP.Tables[0].Rows)                  {                      var id = (int)rowSP["id"];                      var name = (string)rowSP["name"];                      var schema = (string)rowSP["schemaname"];                      customStoredProcedure = database.StoredProcList.FirstOrDefault(x => x.Name == name);                      if (customStoredProcedure == null)                      {                          customStoredProcedure = new StoredProc();                          customStoredProcedure.Name = name;                          customStoredProcedure.SQL = SchemaModelHelper.GetSqlForStoredProceduresBody(schema' name' connectionString);                          customStoredProcedure.Schema = schema;                          database.StoredProcList.Add(customStoredProcedure);                      }                    }                    //Add the parameters                  var sortOrder = 1;                  foreach (DataRow rowSP in dsSPParameter.Tables[0].Rows)                  {                      if (!DatabaseHelper.IsValidSQLDataType((SqlNativeTypes)int.Parse(rowSP["xtype"].ToString())))                      {                          customStoredProcedure.InError = true;                          customStoredProcedure.ParameterList.Clear();                          customStoredProcedure.FieldList.Clear();                          return false;                      }                        var id = (int)rowSP["id"];                      var spName = (string)rowSP["name"];                      var name = (string)rowSP["ColName"];                      var typeName = (string)rowSP["ColType"];                      var dataType = DatabaseHelper.GetSQLDataType(rowSP["xtype"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowSP["length"].ToString());                      var isOutput = ((int)rowSP["isoutparam"] != 0);                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) ||                          (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                        if (customStoredProcedure != null)                      {                          var parameter = new Parameter();                          parameter.Name = name.Replace("@"' string.Empty);                          parameter.SortOrder = sortOrder;                          sortOrder++;                          parameter.DataType = dataType;                          parameter.Length = length;                          parameter.Nullable = (int)rowSP["isnullable"] == 1 ? true : false;                          parameter.IsOutputParameter = isOutput;                          customStoredProcedure.ParameterList.Add(parameter);                      }                  }                    //Try to get the columns                  var errorItems = new List<string>();                  foreach (var sp in database.StoredProcList)                  {                      try                      {                          DataSet dsSPColumn = null;                          try                          {                              dsSPColumn = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresColumns(sp));                          }                          catch (Exception)                          {                              sp.ColumnFailure = true;                          }                            if ((dsSPColumn != null) && dsSPColumn.Tables.Count > 0)                          {                              var dt = dsSPColumn.Tables[0];                              foreach (DataColumn column in dt.Columns)                              {                                  var newColumn = new Field();                                    var dataType = Extensions.GetSqlDbType(column.DataType);                                  var length = newColumn.DataType.ValidateDataTypeMax(1000000);                                    newColumn.Name = column.ColumnName;                                  newColumn.DataType = dataType;                                  newColumn.Nullable = true;                                  newColumn.Length = length;                                  if (newColumn.DataType == SqlDbType.Decimal)                                  {                                      newColumn.Length = 18;                                      newColumn.Scale = 4;                                  }                                  if (newColumn.DataType == SqlDbType.DateTime2)                                  {                                      newColumn.Length = 7;                                      newColumn.Scale = 0;                                  }                                  if (newColumn.DataType == SqlDbType.VarChar)                                      newColumn.Length = 50;                                  sp.FieldList.Add(newColumn);                              }                          }                      }                      catch (Exception ex)                      {                          //Do Nothing - Skip to next                          if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do                          {                              //Do Nothing                          }                          else                          {                              errorItems.Add(sp.Name);                          }                        }                  }                  return true;                }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: try              {                  var dsSP = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProcedures(procName));                  var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters());                    //Add the Stored Procedures                  StoredProc customStoredProcedure = null;                  foreach (DataRow rowSP in dsSP.Tables[0].Rows)                  {                      var id = (int)rowSP["id"];                      var name = (string)rowSP["name"];                      var schema = (string)rowSP["schemaname"];                      customStoredProcedure = database.StoredProcList.FirstOrDefault(x => x.Name == name);                      if (customStoredProcedure == null)                      {                          customStoredProcedure = new StoredProc();                          customStoredProcedure.Name = name;                          customStoredProcedure.SQL = SchemaModelHelper.GetSqlForStoredProceduresBody(schema' name' connectionString);                          customStoredProcedure.Schema = schema;                          database.StoredProcList.Add(customStoredProcedure);                      }                    }                    //Add the parameters                  var sortOrder = 1;                  foreach (DataRow rowSP in dsSPParameter.Tables[0].Rows)                  {                      if (!DatabaseHelper.IsValidSQLDataType((SqlNativeTypes)int.Parse(rowSP["xtype"].ToString())))                      {                          customStoredProcedure.InError = true;                          customStoredProcedure.ParameterList.Clear();                          customStoredProcedure.FieldList.Clear();                          return false;                      }                        var id = (int)rowSP["id"];                      var spName = (string)rowSP["name"];                      var name = (string)rowSP["ColName"];                      var typeName = (string)rowSP["ColType"];                      var dataType = DatabaseHelper.GetSQLDataType(rowSP["xtype"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowSP["length"].ToString());                      var isOutput = ((int)rowSP["isoutparam"] != 0);                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) ||                          (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                        if (customStoredProcedure != null)                      {                          var parameter = new Parameter();                          parameter.Name = name.Replace("@"' string.Empty);                          parameter.SortOrder = sortOrder;                          sortOrder++;                          parameter.DataType = dataType;                          parameter.Length = length;                          parameter.Nullable = (int)rowSP["isnullable"] == 1 ? true : false;                          parameter.IsOutputParameter = isOutput;                          customStoredProcedure.ParameterList.Add(parameter);                      }                  }                    //Try to get the columns                  var errorItems = new List<string>();                  foreach (var sp in database.StoredProcList)                  {                      try                      {                          DataSet dsSPColumn = null;                          try                          {                              dsSPColumn = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresColumns(sp));                          }                          catch (Exception)                          {                              sp.ColumnFailure = true;                          }                            if ((dsSPColumn != null) && dsSPColumn.Tables.Count > 0)                          {                              var dt = dsSPColumn.Tables[0];                              foreach (DataColumn column in dt.Columns)                              {                                  var newColumn = new Field();                                    var dataType = Extensions.GetSqlDbType(column.DataType);                                  var length = newColumn.DataType.ValidateDataTypeMax(1000000);                                    newColumn.Name = column.ColumnName;                                  newColumn.DataType = dataType;                                  newColumn.Nullable = true;                                  newColumn.Length = length;                                  if (newColumn.DataType == SqlDbType.Decimal)                                  {                                      newColumn.Length = 18;                                      newColumn.Scale = 4;                                  }                                  if (newColumn.DataType == SqlDbType.DateTime2)                                  {                                      newColumn.Length = 7;                                      newColumn.Scale = 0;                                  }                                  if (newColumn.DataType == SqlDbType.VarChar)                                      newColumn.Length = 50;                                  sp.FieldList.Add(newColumn);                              }                          }                      }                      catch (Exception ex)                      {                          //Do Nothing - Skip to next                          if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do                          {                              //Do Nothing                          }                          else                          {                              errorItems.Add(sp.Name);                          }                        }                  }                  return true;                }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadStoredProcedures,The following statement contains a magic number: try              {                  var dsSP = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProcedures(procName));                  var dsSPParameter = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresParameters());                    //Add the Stored Procedures                  StoredProc customStoredProcedure = null;                  foreach (DataRow rowSP in dsSP.Tables[0].Rows)                  {                      var id = (int)rowSP["id"];                      var name = (string)rowSP["name"];                      var schema = (string)rowSP["schemaname"];                      customStoredProcedure = database.StoredProcList.FirstOrDefault(x => x.Name == name);                      if (customStoredProcedure == null)                      {                          customStoredProcedure = new StoredProc();                          customStoredProcedure.Name = name;                          customStoredProcedure.SQL = SchemaModelHelper.GetSqlForStoredProceduresBody(schema' name' connectionString);                          customStoredProcedure.Schema = schema;                          database.StoredProcList.Add(customStoredProcedure);                      }                    }                    //Add the parameters                  var sortOrder = 1;                  foreach (DataRow rowSP in dsSPParameter.Tables[0].Rows)                  {                      if (!DatabaseHelper.IsValidSQLDataType((SqlNativeTypes)int.Parse(rowSP["xtype"].ToString())))                      {                          customStoredProcedure.InError = true;                          customStoredProcedure.ParameterList.Clear();                          customStoredProcedure.FieldList.Clear();                          return false;                      }                        var id = (int)rowSP["id"];                      var spName = (string)rowSP["name"];                      var name = (string)rowSP["ColName"];                      var typeName = (string)rowSP["ColType"];                      var dataType = DatabaseHelper.GetSQLDataType(rowSP["xtype"].ToString()' database.UserDefinedTypes);                      var length = int.Parse(rowSP["length"].ToString());                      var isOutput = ((int)rowSP["isoutparam"] != 0);                        //The length is half the bytes for these types                      if ((dataType == SqlDbType.NChar) ||                          (dataType == SqlDbType.NVarChar))                      {                          length = length / 2;                      }                        if (customStoredProcedure != null)                      {                          var parameter = new Parameter();                          parameter.Name = name.Replace("@"' string.Empty);                          parameter.SortOrder = sortOrder;                          sortOrder++;                          parameter.DataType = dataType;                          parameter.Length = length;                          parameter.Nullable = (int)rowSP["isnullable"] == 1 ? true : false;                          parameter.IsOutputParameter = isOutput;                          customStoredProcedure.ParameterList.Add(parameter);                      }                  }                    //Try to get the columns                  var errorItems = new List<string>();                  foreach (var sp in database.StoredProcList)                  {                      try                      {                          DataSet dsSPColumn = null;                          try                          {                              dsSPColumn = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForStoredProceduresColumns(sp));                          }                          catch (Exception)                          {                              sp.ColumnFailure = true;                          }                            if ((dsSPColumn != null) && dsSPColumn.Tables.Count > 0)                          {                              var dt = dsSPColumn.Tables[0];                              foreach (DataColumn column in dt.Columns)                              {                                  var newColumn = new Field();                                    var dataType = Extensions.GetSqlDbType(column.DataType);                                  var length = newColumn.DataType.ValidateDataTypeMax(1000000);                                    newColumn.Name = column.ColumnName;                                  newColumn.DataType = dataType;                                  newColumn.Nullable = true;                                  newColumn.Length = length;                                  if (newColumn.DataType == SqlDbType.Decimal)                                  {                                      newColumn.Length = 18;                                      newColumn.Scale = 4;                                  }                                  if (newColumn.DataType == SqlDbType.DateTime2)                                  {                                      newColumn.Length = 7;                                      newColumn.Scale = 0;                                  }                                  if (newColumn.DataType == SqlDbType.VarChar)                                      newColumn.Length = 50;                                  sp.FieldList.Add(newColumn);                              }                          }                      }                      catch (Exception ex)                      {                          //Do Nothing - Skip to next                          if (ex.Message.Contains("Invalid object name '#")) //this is a temp table. it cannot be run so there is nothing we can do                          {                              //Do Nothing                          }                          else                          {                              errorItems.Add(sp.Name);                          }                        }                  }                  return true;                }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The following statement contains a magic number: try              {                  //Add the Functions                  var dsFunction = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForFunctions());                  if (dsFunction.Tables.Count > 0)                  {                      foreach (DataRow rowFunction in dsFunction.Tables[0].Rows)                      {                          var name = (string)rowFunction["name"];                          var schema = (string)rowFunction["schemaname"];                          var sql = SchemaModelHelper.GetFunctionBody(schema' name' connectionString);                          var function = database.FunctionList.FirstOrDefault(x => x.Name == name);                          if (function == null)                          {                              function = new Function();                              function.Name = name;                              function.Schema = schema;                                function.SQL = sql;                              database.FunctionList.Add(function);                          }                      }                  }                    foreach (var function in database.FunctionList)                  {                      var dsFunctionAux = DatabaseHelper.ExecuteDataset(connectionString' "sp_help '[" + function.Schema + "].[" + function.Name + "]'");                      DataTable dtColumn = null;                      DataTable dtParameter = null;                        foreach (DataTable dt in dsFunctionAux.Tables)                      {                          if (dt.Columns.Contains("column_name"))                              dtColumn = dt;                          else if (dt.Columns.Contains("parameter_name"))                              dtParameter = dt;                      }                        //Add the columns                      if (dtColumn != null)                      {                          foreach (DataRow row in dtColumn.Rows)                          {                              var field = new Field();                              field.Name = (string)row["column_name"];                                var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                              var length = int.Parse(row["length"].ToString());                                //The length is half the bytes for these types                              if ((dataType == SqlDbType.NChar) ||                                  (dataType == SqlDbType.NVarChar))                              {                                  length = length / 2;                              }                                field.DataType = dataType;                              field.Nullable = row["column_name"].ToString() == "yes" ? true : false;                                field.Length = length;                              if (row["scale"] != System.DBNull.Value && !string.IsNullOrEmpty((string)row["scale"]) && ((string)row["scale"]).Trim() != string.Empty)                                  field.Scale = int.Parse(row["scale"].ToString());                              function.FieldList.Add(field);                          }                      }                        function.IsTable = (dtColumn != null);                        //Add the parameters                      if (dtParameter != null)                      {                          var sortOrder = 1;                          foreach (DataRow row in dtParameter.Rows)                          {                              var name = ((string)row["parameter_name"]).Replace("@"' string.Empty);                              if (string.IsNullOrEmpty(name))                              {                                  //This is a return value for a scalar function                                  //If there is no name then this is the return                                  var field = new Field();                                  field.Name = "Value";                                  field.Nullable = true;                                    var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                                  var length = int.Parse(row["length"].ToString());                                    //The length is half the bytes for these types                                  if ((dataType == SqlDbType.NChar) ||                                      (dataType == SqlDbType.NVarChar))                                  {                                      length = length / 2;                                  }                                    field.DataType = dataType;                                  field.Length = length;                                  if (row["scale"] != System.DBNull.Value)                                      field.Scale = int.Parse(row["scale"].ToString());                                  function.FieldList.Add(field);                              }                              else                              {                                  //This is a parameter                                  var parameter = new Parameter();                                  parameter.Name = name;                                  parameter.SortOrder = sortOrder;                                  sortOrder++;                                    var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                                  parameter.DataType = dataType;                                  var length = int.Parse(row["length"].ToString());                                    //The length is half the bytes for these types                                  if ((dataType == SqlDbType.NChar) ||                                      (dataType == SqlDbType.NVarChar))                                  {                                      length = length / 2;                                  }                                    parameter.Length = length;                                  if (row["scale"] != System.DBNull.Value)                                      parameter.Scale = int.Parse(row["scale"].ToString());                                  function.ParameterList.Add(parameter);                              }                          }                      }                    }              }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The following statement contains a magic number: try              {                  //Add the Functions                  var dsFunction = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForFunctions());                  if (dsFunction.Tables.Count > 0)                  {                      foreach (DataRow rowFunction in dsFunction.Tables[0].Rows)                      {                          var name = (string)rowFunction["name"];                          var schema = (string)rowFunction["schemaname"];                          var sql = SchemaModelHelper.GetFunctionBody(schema' name' connectionString);                          var function = database.FunctionList.FirstOrDefault(x => x.Name == name);                          if (function == null)                          {                              function = new Function();                              function.Name = name;                              function.Schema = schema;                                function.SQL = sql;                              database.FunctionList.Add(function);                          }                      }                  }                    foreach (var function in database.FunctionList)                  {                      var dsFunctionAux = DatabaseHelper.ExecuteDataset(connectionString' "sp_help '[" + function.Schema + "].[" + function.Name + "]'");                      DataTable dtColumn = null;                      DataTable dtParameter = null;                        foreach (DataTable dt in dsFunctionAux.Tables)                      {                          if (dt.Columns.Contains("column_name"))                              dtColumn = dt;                          else if (dt.Columns.Contains("parameter_name"))                              dtParameter = dt;                      }                        //Add the columns                      if (dtColumn != null)                      {                          foreach (DataRow row in dtColumn.Rows)                          {                              var field = new Field();                              field.Name = (string)row["column_name"];                                var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                              var length = int.Parse(row["length"].ToString());                                //The length is half the bytes for these types                              if ((dataType == SqlDbType.NChar) ||                                  (dataType == SqlDbType.NVarChar))                              {                                  length = length / 2;                              }                                field.DataType = dataType;                              field.Nullable = row["column_name"].ToString() == "yes" ? true : false;                                field.Length = length;                              if (row["scale"] != System.DBNull.Value && !string.IsNullOrEmpty((string)row["scale"]) && ((string)row["scale"]).Trim() != string.Empty)                                  field.Scale = int.Parse(row["scale"].ToString());                              function.FieldList.Add(field);                          }                      }                        function.IsTable = (dtColumn != null);                        //Add the parameters                      if (dtParameter != null)                      {                          var sortOrder = 1;                          foreach (DataRow row in dtParameter.Rows)                          {                              var name = ((string)row["parameter_name"]).Replace("@"' string.Empty);                              if (string.IsNullOrEmpty(name))                              {                                  //This is a return value for a scalar function                                  //If there is no name then this is the return                                  var field = new Field();                                  field.Name = "Value";                                  field.Nullable = true;                                    var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                                  var length = int.Parse(row["length"].ToString());                                    //The length is half the bytes for these types                                  if ((dataType == SqlDbType.NChar) ||                                      (dataType == SqlDbType.NVarChar))                                  {                                      length = length / 2;                                  }                                    field.DataType = dataType;                                  field.Length = length;                                  if (row["scale"] != System.DBNull.Value)                                      field.Scale = int.Parse(row["scale"].ToString());                                  function.FieldList.Add(field);                              }                              else                              {                                  //This is a parameter                                  var parameter = new Parameter();                                  parameter.Name = name;                                  parameter.SortOrder = sortOrder;                                  sortOrder++;                                    var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                                  parameter.DataType = dataType;                                  var length = int.Parse(row["length"].ToString());                                    //The length is half the bytes for these types                                  if ((dataType == SqlDbType.NChar) ||                                      (dataType == SqlDbType.NVarChar))                                  {                                      length = length / 2;                                  }                                    parameter.Length = length;                                  if (row["scale"] != System.DBNull.Value)                                      parameter.Scale = int.Parse(row["scale"].ToString());                                  function.ParameterList.Add(parameter);                              }                          }                      }                    }              }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,LoadFunctions,The following statement contains a magic number: try              {                  //Add the Functions                  var dsFunction = DatabaseHelper.ExecuteDataset(connectionString' SchemaModelHelper.GetSqlForFunctions());                  if (dsFunction.Tables.Count > 0)                  {                      foreach (DataRow rowFunction in dsFunction.Tables[0].Rows)                      {                          var name = (string)rowFunction["name"];                          var schema = (string)rowFunction["schemaname"];                          var sql = SchemaModelHelper.GetFunctionBody(schema' name' connectionString);                          var function = database.FunctionList.FirstOrDefault(x => x.Name == name);                          if (function == null)                          {                              function = new Function();                              function.Name = name;                              function.Schema = schema;                                function.SQL = sql;                              database.FunctionList.Add(function);                          }                      }                  }                    foreach (var function in database.FunctionList)                  {                      var dsFunctionAux = DatabaseHelper.ExecuteDataset(connectionString' "sp_help '[" + function.Schema + "].[" + function.Name + "]'");                      DataTable dtColumn = null;                      DataTable dtParameter = null;                        foreach (DataTable dt in dsFunctionAux.Tables)                      {                          if (dt.Columns.Contains("column_name"))                              dtColumn = dt;                          else if (dt.Columns.Contains("parameter_name"))                              dtParameter = dt;                      }                        //Add the columns                      if (dtColumn != null)                      {                          foreach (DataRow row in dtColumn.Rows)                          {                              var field = new Field();                              field.Name = (string)row["column_name"];                                var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                              var length = int.Parse(row["length"].ToString());                                //The length is half the bytes for these types                              if ((dataType == SqlDbType.NChar) ||                                  (dataType == SqlDbType.NVarChar))                              {                                  length = length / 2;                              }                                field.DataType = dataType;                              field.Nullable = row["column_name"].ToString() == "yes" ? true : false;                                field.Length = length;                              if (row["scale"] != System.DBNull.Value && !string.IsNullOrEmpty((string)row["scale"]) && ((string)row["scale"]).Trim() != string.Empty)                                  field.Scale = int.Parse(row["scale"].ToString());                              function.FieldList.Add(field);                          }                      }                        function.IsTable = (dtColumn != null);                        //Add the parameters                      if (dtParameter != null)                      {                          var sortOrder = 1;                          foreach (DataRow row in dtParameter.Rows)                          {                              var name = ((string)row["parameter_name"]).Replace("@"' string.Empty);                              if (string.IsNullOrEmpty(name))                              {                                  //This is a return value for a scalar function                                  //If there is no name then this is the return                                  var field = new Field();                                  field.Name = "Value";                                  field.Nullable = true;                                    var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                                  var length = int.Parse(row["length"].ToString());                                    //The length is half the bytes for these types                                  if ((dataType == SqlDbType.NChar) ||                                      (dataType == SqlDbType.NVarChar))                                  {                                      length = length / 2;                                  }                                    field.DataType = dataType;                                  field.Length = length;                                  if (row["scale"] != System.DBNull.Value)                                      field.Scale = int.Parse(row["scale"].ToString());                                  function.FieldList.Add(field);                              }                              else                              {                                  //This is a parameter                                  var parameter = new Parameter();                                  parameter.Name = name;                                  parameter.SortOrder = sortOrder;                                  sortOrder++;                                    var dataType = DatabaseHelper.GetSQLDataType((string)row["type"]' database.UserDefinedTypes);                                  parameter.DataType = dataType;                                  var length = int.Parse(row["length"].ToString());                                    //The length is half the bytes for these types                                  if ((dataType == SqlDbType.NChar) ||                                      (dataType == SqlDbType.NVarChar))                                  {                                      length = length / 2;                                  }                                    parameter.Length = length;                                  if (row["scale"] != System.DBNull.Value)                                      parameter.Scale = int.Parse(row["scale"].ToString());                                  function.ParameterList.Add(parameter);                              }                          }                      }                    }              }              catch (Exception /*ignored*/)              {                  throw;              }
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The following statement contains a magic number: if (field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType())              {                  field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty); //remove any parens              }              else if (field.DataType == SqlDbType.UniqueIdentifier)              {                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newid"))                      field.DefaultValue = "newid";                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newsequentialid"))                      field.DefaultValue = "newsequentialid";                  else                      field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000')              }              else if (field.IsTextType())              {                  if (defaultvalue.StartsWith("(N'")) defaultvalue = defaultvalue.Substring(3' defaultvalue.Length - 3);                  while (defaultvalue.StartsWith("('")) defaultvalue = defaultvalue.Substring(2' defaultvalue.Length - 2);                  while (defaultvalue.EndsWith("')")) defaultvalue = defaultvalue.Substring(0' defaultvalue.Length - 2);                  field.DefaultValue = defaultvalue;              }              else                  field.DefaultValue = defaultvalue;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The following statement contains a magic number: if (field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType())              {                  field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty); //remove any parens              }              else if (field.DataType == SqlDbType.UniqueIdentifier)              {                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newid"))                      field.DefaultValue = "newid";                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newsequentialid"))                      field.DefaultValue = "newsequentialid";                  else                      field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000')              }              else if (field.IsTextType())              {                  if (defaultvalue.StartsWith("(N'")) defaultvalue = defaultvalue.Substring(3' defaultvalue.Length - 3);                  while (defaultvalue.StartsWith("('")) defaultvalue = defaultvalue.Substring(2' defaultvalue.Length - 2);                  while (defaultvalue.EndsWith("')")) defaultvalue = defaultvalue.Substring(0' defaultvalue.Length - 2);                  field.DefaultValue = defaultvalue;              }              else                  field.DefaultValue = defaultvalue;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The following statement contains a magic number: if (field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType())              {                  field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty); //remove any parens              }              else if (field.DataType == SqlDbType.UniqueIdentifier)              {                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newid"))                      field.DefaultValue = "newid";                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newsequentialid"))                      field.DefaultValue = "newsequentialid";                  else                      field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000')              }              else if (field.IsTextType())              {                  if (defaultvalue.StartsWith("(N'")) defaultvalue = defaultvalue.Substring(3' defaultvalue.Length - 3);                  while (defaultvalue.StartsWith("('")) defaultvalue = defaultvalue.Substring(2' defaultvalue.Length - 2);                  while (defaultvalue.EndsWith("')")) defaultvalue = defaultvalue.Substring(0' defaultvalue.Length - 2);                  field.DefaultValue = defaultvalue;              }              else                  field.DefaultValue = defaultvalue;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The following statement contains a magic number: if (field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType())              {                  field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty); //remove any parens              }              else if (field.DataType == SqlDbType.UniqueIdentifier)              {                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newid"))                      field.DefaultValue = "newid";                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newsequentialid"))                      field.DefaultValue = "newsequentialid";                  else                      field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000')              }              else if (field.IsTextType())              {                  if (defaultvalue.StartsWith("(N'")) defaultvalue = defaultvalue.Substring(3' defaultvalue.Length - 3);                  while (defaultvalue.StartsWith("('")) defaultvalue = defaultvalue.Substring(2' defaultvalue.Length - 2);                  while (defaultvalue.EndsWith("')")) defaultvalue = defaultvalue.Substring(0' defaultvalue.Length - 2);                  field.DefaultValue = defaultvalue;              }              else                  field.DefaultValue = defaultvalue;
Magic Number,nHydrate.DataImport.SqlClient,ImportDomain,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\ImportDomain.cs,SetupDefault,The following statement contains a magic number: if (field.IsNumericType() || field.DataType == SqlDbType.Bit || field.IsDateType() || field.IsBinaryType())              {                  field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty); //remove any parens              }              else if (field.DataType == SqlDbType.UniqueIdentifier)              {                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newid"))                      field.DefaultValue = "newid";                  if (!string.IsNullOrEmpty(defaultvalue) && defaultvalue.Contains("newsequentialid"))                      field.DefaultValue = "newsequentialid";                  else                      field.DefaultValue = defaultvalue.Replace("("' string.Empty).Replace(")"' string.Empty).Replace("'"' string.Empty); //Format: ('000...0000')              }              else if (field.IsTextType())              {                  if (defaultvalue.StartsWith("(N'")) defaultvalue = defaultvalue.Substring(3' defaultvalue.Length - 3);                  while (defaultvalue.StartsWith("('")) defaultvalue = defaultvalue.Substring(2' defaultvalue.Length - 2);                  while (defaultvalue.EndsWith("')")) defaultvalue = defaultvalue.Substring(0' defaultvalue.Length - 2);                  field.DefaultValue = defaultvalue;              }              else                  field.DefaultValue = defaultvalue;
Magic Number,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetViewBody,The following statement contains a magic number: if (match != null && match.Groups != null && match.Groups.Count == 2)  				sql = match.Groups[1].Value;  			else  			{  				sql = sql.Replace("\r"' string.Empty);  				var arr = sql.Split('\n').ToList();  				var sb = new StringBuilder();    				var inBody = false;  				foreach (var lineText in arr)  				{  					//This is FAR from perfect. It assumes the creation line ends with the "AS" keyword for a stored proc  					if (inBody)  					{  						sb.AppendLine(lineText);  					}  					else if (!inBody && (lineText.ToLower().Trim().EndsWith(" as") || lineText.ToLower().Trim() == "as"))  					{  						inBody = true;  					}  				}  				sql = sb.ToString();    			}
Magic Number,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The following statement contains a magic number: if (match != null && match.Groups != null && match.Groups.Count == 2)  			{  				sql = match.Groups[1].Value;  			}  			else  			{  				regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*(BEGIN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline);  				match = regEx.Match(sql);  				if (match != null && match.Groups != null && match.Groups.Count == 2)  				{  					sql = match.Groups[1].Value;  				}  				else  				{  					regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+([\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline);  					match = regEx.Match(sql);  					if (match != null && match.Groups != null && match.Groups.Count == 2)  						sql = match.Groups[1].Value;  					else  						System.Diagnostics.Debug.Write(string.Empty);  				}  			}
Magic Number,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The following statement contains a magic number: if (match != null && match.Groups != null && match.Groups.Count == 2)  			{  				sql = match.Groups[1].Value;  			}  			else  			{  				regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*(BEGIN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline);  				match = regEx.Match(sql);  				if (match != null && match.Groups != null && match.Groups.Count == 2)  				{  					sql = match.Groups[1].Value;  				}  				else  				{  					regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+([\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline);  					match = regEx.Match(sql);  					if (match != null && match.Groups != null && match.Groups.Count == 2)  						sql = match.Groups[1].Value;  					else  						System.Diagnostics.Debug.Write(string.Empty);  				}  			}
Magic Number,nHydrate.DataImport.SqlClient,SchemaModelHelper,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\SchemaModelHelper.cs,GetFunctionBody,The following statement contains a magic number: if (match != null && match.Groups != null && match.Groups.Count == 2)  			{  				sql = match.Groups[1].Value;  			}  			else  			{  				regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*(BEGIN[\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline);  				match = regEx.Match(sql);  				if (match != null && match.Groups != null && match.Groups.Count == 2)  				{  					sql = match.Groups[1].Value;  				}  				else  				{  					regEx = new Regex(@"CREATE\s*FUNCTION[\r\n\s]*[a-zA-Z0-9\[\]_\.]*.*RETURNS.*AS[\r\n\s]+([\s\S\r\n]*)"' RegexOptions.IgnoreCase | RegexOptions.Singleline);  					match = regEx.Match(sql);  					if (match != null && match.Groups != null && match.Groups.Count == 2)  						sql = match.Groups[1].Value;  					else  						System.Diagnostics.Debug.Write(string.Empty);  				}  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDateType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.DateTime:  				case SqlDbType.DateTime2:  				case SqlDbType.DateTimeOffset:  				case SqlDbType.SmallDateTime:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsMoneyType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Money:  				case SqlDbType.SmallMoney:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDecimalType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Decimal:  				case SqlDbType.Float:  				case SqlDbType.Real:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsIntegerType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.BigInt:  				case SqlDbType.Int:  				case SqlDbType.TinyInt:  				case SqlDbType.SmallInt:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDateType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.DateTime:  				case SqlDbType.DateTime2:  				case SqlDbType.DateTimeOffset:  				case SqlDbType.SmallDateTime:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsMoneyType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Money:  				case SqlDbType.SmallMoney:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsDecimalType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.Decimal:  				case SqlDbType.Float:  				case SqlDbType.Real:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,IsIntegerType,The following switch statement is missing a default case: switch (item.DataType)  			{  				case SqlDbType.BigInt:  				case SqlDbType.Int:  				case SqlDbType.TinyInt:  				case SqlDbType.SmallInt:  					return true;  			}
Missing Default,nHydrate.DataImport.SqlClient,Extensions,C:\repos\nHydrate_nHydrate\Source\nHydrate.DataImport.SqlClient\Extensions.cs,ValidateDataTypeMax,The following switch statement is missing a default case: switch (type)  			{  				case System.Data.SqlDbType.Char:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.VarChar:  					return (length > 8000) ? 8000 : length;  				case System.Data.SqlDbType.NChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.NVarChar:  					return (length > 4000) ? 4000 : length;  				case System.Data.SqlDbType.Decimal:  					return (length > 38) ? 38 : length;  				case System.Data.SqlDbType.Binary:  				case System.Data.SqlDbType.VarBinary:  					return (length > 8000) ? 8000 : length;  			}
