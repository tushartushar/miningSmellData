Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,Cyclomatic complexity of the method is 11
Long Statement,Northwind.TestSite,TerritoryList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\TerritoryList.aspx.cs,Populate,The length of the statement  "					lblHeader.Text = "This is a list of all territories for the <a href='/RegionItem.aspx?id=" + region.RegionID + "'>" + region.RegionDescription + "</a> region."; " is 160.
Long Statement,Northwind.TestSite,OrderDetailList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\OrderDetailList.aspx.cs,Populate,The length of the statement  "			OrderDetailPaging paging = new OrderDetailPaging(this.PagingControl1.PageIndex' this.PagingControl1.RecordsPerPage' OrderDetail.FieldNameConstants.OrderId' true); " is 162.
Long Statement,Northwind.TestSite,OrderDetailList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\OrderDetailList.aspx.cs,Populate,The length of the statement  "				lblHeader.Text = "This is a list of all orders details for order <a href='/OrderItem.aspx?id=" + orderId + "'>" + orderId + "</a>."; " is 132.
Long Statement,Northwind.TestSite,OrderDetailList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\OrderDetailList.aspx.cs,Populate,The length of the statement  "				lblHeader.Text = "This is a list of all orders details for product <a href='/ProductItem.aspx?id=" + product.ProductId + "'>" + product.ProductName + "</a>."; " is 158.
Long Statement,Northwind.TestSite,ProductList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\ProductList.aspx.cs,Populate,The length of the statement  "			ProductPaging paging = new ProductPaging(this.PagingControl1.PageIndex' this.PagingControl1.RecordsPerPage' Product.FieldNameConstants.ProductId' true); " is 152.
Long Statement,Northwind.TestSite,ProductList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\ProductList.aspx.cs,Populate,The length of the statement  "				lblHeader.Text = "This is a list of all products for category <a href='/CategoryItem.aspx?id=" + category.CategoryId + "'>" + category.CategoryName + "</a>."; " is 158.
Long Statement,Northwind.TestSite,ProductList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\ProductList.aspx.cs,Populate,The length of the statement  "				lblHeader.Text = "This is a list of all products for supplier <a href='/SupplierItem.aspx?id=" + supplier.SupplierId + "'>" + supplier.CompanyName + "</a>."; " is 157.
Long Statement,Northwind.TestSite,CustomerList,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\CustomerList.aspx.cs,Populate,The length of the statement  "			CustomerPaging paging = new CustomerPaging(this.PagingControl1.PageIndex' this.PagingControl1.RecordsPerPage' Customer.FieldNameConstants.CustomerId' true); " is 156.
Long Statement,Northwind.TestSite,Global,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\Global.asax.cs,Application_Start,The length of the statement  "			ACME.Northwind.Business.ConfigurationValues.GetInstance().ConnectionString = ConfigurationManager.AppSettings["ConnectionString"]; " is 130.
Long Statement,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,OnLoad,The length of the statement  "			cboPagePer.Attributes.Add("onclick"' "javascript:if (document.getElementById('" + this.rpp.ClientID + "').value!=document.getElementById('" + this.cboPagePer.ClientID + "').value) document.getElementById('" + this.rpp.ClientID + "').value=document.getElementById('" + this.cboPagePer.ClientID + "').value;"); " is 308.
Magic Number,Northwind.TestSite.Objects,URL,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\Objects\URL.cs,URL,The following statement contains a magic number: if (arr.Length == 2)  			{  				string[] arr2 = arr[1].Split('&');  				foreach (string raw in arr2)  				{  					string[] arr3 = raw.Split('=');  					if (arr3.Length == 2)  					{  						this.Parameters.Add(new URLParameter(arr3[0]' arr3[1]));  					}  				}  			}
Magic Number,Northwind.TestSite.Objects,URL,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\Objects\URL.cs,URL,The following statement contains a magic number: if (arr.Length == 2)  			{  				string[] arr2 = arr[1].Split('&');  				foreach (string raw in arr2)  				{  					string[] arr3 = raw.Split('=');  					if (arr3.Length == 2)  					{  						this.Parameters.Add(new URLParameter(arr3[0]' arr3[1]));  					}  				}  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
Magic Number,Northwind.TestSite.UserControls,PagingControl,C:\repos\nHydrate_nHydrate\Samples\Northwind\Acme.Testsite\UserControls\PagingControl.ascx.cs,PopulateClickBar,The following statement contains a magic number: try  			{  				var query = new URL(this.Request.Url.AbsoluteUri);    				pnlGotoPage.Controls.Clear();  				HtmlAnchor link = null;    				if (this.PageIndex > 1)  				{  					//Add the 'Previous' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPrevious";  					link.InnerText = "<";  					pnlGotoPage.Controls.Add(link);  					query.PageOffset = this.PageIndex - 1;  					link.HRef = query.ToString();  				}    				Literal literal = new Literal();  				literal.Text = "&nbsp;&nbsp;";  				pnlGotoPage.Controls.Add(literal);    				//Try to position the current PageIndex in the middle of the selection			  				int startIndex = this.PageIndex - 5;  				if (startIndex < 1)  					startIndex = 1;  				int endIndex = startIndex + 9;  				if (endIndex > this.PageCount)  					endIndex = this.PageCount;    				if (startIndex == 1 && endIndex <= 1)  				{  					pnlGotoContainer.Visible = false;  					return;  				}  				pnlGotoContainer.Visible = true;    				for (int ii = startIndex; ii <= endIndex; ii++)  				{  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPage" + ii.ToString();  					link.InnerText = ii.ToString();  					if (ii == this.PageIndex)  						link.Attributes.Add("class"' "paginggotopageselected");  					query.PageOffset = ii;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);    					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);  				}    				if (this.PageIndex < this.PageCount)  				{  					//Add the 'Next' page link  					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.InnerText = ">";  					link.ID = "linkNext";  					query.PageOffset = this.PageIndex + 1;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				int nextIndex = endIndex + 9;  				nextIndex = nextIndex - (nextIndex % 10);  				if (nextIndex + 9 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN1";  					//link.Text = nextIndex.ToString() + "-" + (nextIndex + 9).ToString();  					link.InnerText = nextIndex.ToString() + "+";  					query.PageOffset = nextIndex;  					link.HRef = query.ToString();  					pnlGotoPage.Controls.Add(link);  				}    				//If there are many more records then   				//add a paging mechanism to this paging control  				if (nextIndex + 19 <= this.PageCount)  				{  					literal = new Literal();  					literal.Text = "&nbsp;&nbsp;";  					pnlGotoPage.Controls.Add(literal);    					link = new HtmlAnchor();  					link.Attributes.Add("rel"' "nofollow");  					link.ID = "linkPageN2";  					link.InnerText = (nextIndex + 10).ToString() + "+";  					query.PageOffset = (nextIndex + 10);  					if (this.PageIndex == this.PageCount)  						pnlGotoPage.Controls.Add(link);  				}    			}  			catch (Exception ex)  			{  				throw;  			}
