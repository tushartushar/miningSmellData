Implementation smell,Namespace,Class,File,Method,Description
Long Method,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The method has 106 lines of code.
Long Method,nHydrate.Wizard,WizardPage,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\WizardPage.cs,OnPaint,The method has 136 lines of code.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.cmdFinish.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.cmdHelp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.cmdCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.cmdNext.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.cmdBack.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.linkDesignNext.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkDesignNext_LinkClicked); " is 126.
Long Statement,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The length of the statement  "      this.linkDesignBack.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkDesignBack_LinkClicked); " is 126.
Long Statement,nHydrate.Wizard,WizardPage,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\WizardPage.cs,OnPaint,The length of the statement  "					var welcomeTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' welcomeTitleFont' titleRect.Width' textFormat).Height); " is 135.
Complex Conditional,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,OnControlAdded,The conditional expression  "e.Control is WizardPage == false &&  				e.Control != this.cmdCancel &&  				e.Control != this.cmdNext &&  				e.Control != this.cmdBack"  is complex.
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdFinish.Location = new System.Drawing.Point(441' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdFinish.Location = new System.Drawing.Point(441' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdFinish.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdFinish.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdHelp.Location = new System.Drawing.Point(8' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdHelp.Location = new System.Drawing.Point(8' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdHelp.TabIndex = 3;
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdCancel.Location = new System.Drawing.Point(517' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdCancel.Location = new System.Drawing.Point(517' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdCancel.TabIndex = 2;
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdNext.Location = new System.Drawing.Point(353' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdNext.Location = new System.Drawing.Point(353' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdNext.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdNext.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdBack.Location = new System.Drawing.Point(277' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdBack.Location = new System.Drawing.Point(277' 3);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdBack.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdBack.Size = new System.Drawing.Size(75' 23);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.cmdBack.TabIndex = 4;
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignNext.Location = new System.Drawing.Point(112' 8);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignNext.Location = new System.Drawing.Point(112' 8);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignNext.Size = new System.Drawing.Size(19' 13);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignNext.Size = new System.Drawing.Size(19' 13);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignNext.TabIndex = 5;
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignBack.Location = new System.Drawing.Point(88' 8);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignBack.Location = new System.Drawing.Point(88' 8);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignBack.Size = new System.Drawing.Size(19' 13);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignBack.Size = new System.Drawing.Size(19' 13);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.linkDesignBack.TabIndex = 6;
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(599' 30);
Magic Number,nHydrate.Wizard,Wizard,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(599' 30);
Magic Number,nHydrate.Wizard,WizardDesigner,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\Wizard.cs,WndProc,The following statement contains a magic number: int yPos = (short)(((uint)msg.LParam & 0xFFFF0000) >> 16);
Magic Number,nHydrate.Wizard,WizardPage,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\WizardPage.cs,OnPaint,The following statement contains a magic number: switch (this.style)  			{  				case WizardPageStyle.Standard:  					// adjust height for header  					headerRect.Height = this.HeaderHeight;  					// draw header border  					ControlPaint.DrawBorder3D(e.Graphics' headerRect' Border3DStyle.Etched' Border3DSide.Bottom);  					// adjust header rect not to overwrite the border  					headerRect.Height -= SystemInformation.Border3DSize.Height;  					// fill header with window color  					e.Graphics.FillRectangle(SystemBrushes.Window' headerRect);    					// determine header image regtangle  					var headerPadding = (int)Math.Floor((double)(this.HeaderHeight - this.HeaderGlyphSize) / 2);  					glyphRect.Location = new Point(this.Width - this.HeaderGlyphSize - headerPadding' headerPadding);  					glyphRect.Size = new Size(this.HeaderGlyphSize' this.HeaderGlyphSize);    					// determine the header content  					Image headerImage = null;  					var headerFont = this.Font;  					var headerTitleFont = this.Font;  					if (this.Parent != null && this.Parent is Wizard)  					{  						// get content from parent wizard' if exists  						var parentWizard = (Wizard)this.Parent;  						headerImage = parentWizard.HeaderImage;  						headerFont = parentWizard.HeaderFont;  						headerTitleFont = parentWizard.HeaderTitleFont;  					}    					// check if we have an image  					if (headerImage == null)  					{  						// display a focus rect as a place holder  						ControlPaint.DrawFocusRectangle(e.Graphics' glyphRect);  					}  					else  					{  						// draw header image  						e.Graphics.DrawImage(headerImage' glyphRect);  					}    					// determine title height  					var headerTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' headerTitleFont' 0' textFormat).Height);    					// calculate text sizes  					titleRect.Location = new Point(HEADER_TEXT_PADDING'  													HEADER_TEXT_PADDING);  					titleRect.Size = new Size(glyphRect.Left - HEADER_TEXT_PADDING'  												headerTitleHeight);  					descriptionRect.Location = titleRect.Location;  					descriptionRect.Y += headerTitleHeight + HEADER_TEXT_PADDING / 2;  					descriptionRect.Size = new Size(titleRect.Width'  													this.HeaderHeight - descriptionRect.Y);    					// draw tilte text (single line' truncated with ellipsis)  					e.Graphics.DrawString(this.title'  											headerTitleFont'  											SystemBrushes.WindowText'  											titleRect'  											textFormat);  					// draw description text (multiple lines if needed)  					e.Graphics.DrawString(this.description'  											headerFont'  											SystemBrushes.WindowText'  											descriptionRect'  											textFormat);  					break;  				case WizardPageStyle.Welcome:  				case WizardPageStyle.Finish:  					// fill whole page with window color  					e.Graphics.FillRectangle(SystemBrushes.Window' headerRect);    					// determine welcome image regtangle  					glyphRect.Location = Point.Empty;  					glyphRect.Size = new Size(WELCOME_GLYPH_WIDTH' this.Height);    					// determine the icon that should appear on the welcome page  					Image welcomeImage = null;  					var welcomeFont = this.Font;  					var welcomeTitleFont = this.Font;  					if (this.Parent != null && this.Parent is Wizard)  					{  						// get content from parent wizard' if exists  						var parentWizard = (Wizard)this.Parent;  						welcomeImage = parentWizard.WelcomeImage;  						welcomeFont = parentWizard.WelcomeFont;  						welcomeTitleFont = parentWizard.WelcomeTitleFont;  					}    					// check if we have an image  					if (welcomeImage == null)  					{  						// display a focus rect as a place holder  						ControlPaint.DrawFocusRectangle(e.Graphics' glyphRect);  					}  					else  					{  						// draw welcome page image  						e.Graphics.DrawImage(welcomeImage' glyphRect);  					}    					// calculate text sizes  					titleRect.Location = new Point(WELCOME_GLYPH_WIDTH + HEADER_TEXT_PADDING'  													HEADER_TEXT_PADDING);  					titleRect.Width = this.Width - titleRect.Left - HEADER_TEXT_PADDING;  					// determine title height  					var welcomeTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' welcomeTitleFont' titleRect.Width' textFormat).Height);  					descriptionRect.Location = titleRect.Location;  					descriptionRect.Y += welcomeTitleHeight + HEADER_TEXT_PADDING;  					descriptionRect.Size = new Size(this.Width - descriptionRect.Left - HEADER_TEXT_PADDING'  													this.Height - descriptionRect.Y);    					// draw tilte text (multiple lines if needed)  					e.Graphics.DrawString(this.title'  											welcomeTitleFont'  											SystemBrushes.WindowText'  											titleRect'  											textFormat);  					// draw description text (multiple lines if needed)  					e.Graphics.DrawString(this.description'  											welcomeFont'  											SystemBrushes.WindowText'  											descriptionRect'  											textFormat);  					break;  			}
Magic Number,nHydrate.Wizard,WizardPage,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\WizardPage.cs,OnPaint,The following statement contains a magic number: switch (this.style)  			{  				case WizardPageStyle.Standard:  					// adjust height for header  					headerRect.Height = this.HeaderHeight;  					// draw header border  					ControlPaint.DrawBorder3D(e.Graphics' headerRect' Border3DStyle.Etched' Border3DSide.Bottom);  					// adjust header rect not to overwrite the border  					headerRect.Height -= SystemInformation.Border3DSize.Height;  					// fill header with window color  					e.Graphics.FillRectangle(SystemBrushes.Window' headerRect);    					// determine header image regtangle  					var headerPadding = (int)Math.Floor((double)(this.HeaderHeight - this.HeaderGlyphSize) / 2);  					glyphRect.Location = new Point(this.Width - this.HeaderGlyphSize - headerPadding' headerPadding);  					glyphRect.Size = new Size(this.HeaderGlyphSize' this.HeaderGlyphSize);    					// determine the header content  					Image headerImage = null;  					var headerFont = this.Font;  					var headerTitleFont = this.Font;  					if (this.Parent != null && this.Parent is Wizard)  					{  						// get content from parent wizard' if exists  						var parentWizard = (Wizard)this.Parent;  						headerImage = parentWizard.HeaderImage;  						headerFont = parentWizard.HeaderFont;  						headerTitleFont = parentWizard.HeaderTitleFont;  					}    					// check if we have an image  					if (headerImage == null)  					{  						// display a focus rect as a place holder  						ControlPaint.DrawFocusRectangle(e.Graphics' glyphRect);  					}  					else  					{  						// draw header image  						e.Graphics.DrawImage(headerImage' glyphRect);  					}    					// determine title height  					var headerTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' headerTitleFont' 0' textFormat).Height);    					// calculate text sizes  					titleRect.Location = new Point(HEADER_TEXT_PADDING'  													HEADER_TEXT_PADDING);  					titleRect.Size = new Size(glyphRect.Left - HEADER_TEXT_PADDING'  												headerTitleHeight);  					descriptionRect.Location = titleRect.Location;  					descriptionRect.Y += headerTitleHeight + HEADER_TEXT_PADDING / 2;  					descriptionRect.Size = new Size(titleRect.Width'  													this.HeaderHeight - descriptionRect.Y);    					// draw tilte text (single line' truncated with ellipsis)  					e.Graphics.DrawString(this.title'  											headerTitleFont'  											SystemBrushes.WindowText'  											titleRect'  											textFormat);  					// draw description text (multiple lines if needed)  					e.Graphics.DrawString(this.description'  											headerFont'  											SystemBrushes.WindowText'  											descriptionRect'  											textFormat);  					break;  				case WizardPageStyle.Welcome:  				case WizardPageStyle.Finish:  					// fill whole page with window color  					e.Graphics.FillRectangle(SystemBrushes.Window' headerRect);    					// determine welcome image regtangle  					glyphRect.Location = Point.Empty;  					glyphRect.Size = new Size(WELCOME_GLYPH_WIDTH' this.Height);    					// determine the icon that should appear on the welcome page  					Image welcomeImage = null;  					var welcomeFont = this.Font;  					var welcomeTitleFont = this.Font;  					if (this.Parent != null && this.Parent is Wizard)  					{  						// get content from parent wizard' if exists  						var parentWizard = (Wizard)this.Parent;  						welcomeImage = parentWizard.WelcomeImage;  						welcomeFont = parentWizard.WelcomeFont;  						welcomeTitleFont = parentWizard.WelcomeTitleFont;  					}    					// check if we have an image  					if (welcomeImage == null)  					{  						// display a focus rect as a place holder  						ControlPaint.DrawFocusRectangle(e.Graphics' glyphRect);  					}  					else  					{  						// draw welcome page image  						e.Graphics.DrawImage(welcomeImage' glyphRect);  					}    					// calculate text sizes  					titleRect.Location = new Point(WELCOME_GLYPH_WIDTH + HEADER_TEXT_PADDING'  													HEADER_TEXT_PADDING);  					titleRect.Width = this.Width - titleRect.Left - HEADER_TEXT_PADDING;  					// determine title height  					var welcomeTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' welcomeTitleFont' titleRect.Width' textFormat).Height);  					descriptionRect.Location = titleRect.Location;  					descriptionRect.Y += welcomeTitleHeight + HEADER_TEXT_PADDING;  					descriptionRect.Size = new Size(this.Width - descriptionRect.Left - HEADER_TEXT_PADDING'  													this.Height - descriptionRect.Y);    					// draw tilte text (multiple lines if needed)  					e.Graphics.DrawString(this.title'  											welcomeTitleFont'  											SystemBrushes.WindowText'  											titleRect'  											textFormat);  					// draw description text (multiple lines if needed)  					e.Graphics.DrawString(this.description'  											welcomeFont'  											SystemBrushes.WindowText'  											descriptionRect'  											textFormat);  					break;  			}
Missing Default,nHydrate.Wizard,WizardPage,C:\research\architectureSmells\repos\nHydrate_nHydrate\Source\WizardControl\WizardPage.cs,OnPaint,The following switch statement is missing a default case: switch (this.style)  			{  				case WizardPageStyle.Standard:  					// adjust height for header  					headerRect.Height = this.HeaderHeight;  					// draw header border  					ControlPaint.DrawBorder3D(e.Graphics' headerRect' Border3DStyle.Etched' Border3DSide.Bottom);  					// adjust header rect not to overwrite the border  					headerRect.Height -= SystemInformation.Border3DSize.Height;  					// fill header with window color  					e.Graphics.FillRectangle(SystemBrushes.Window' headerRect);    					// determine header image regtangle  					var headerPadding = (int)Math.Floor((double)(this.HeaderHeight - this.HeaderGlyphSize) / 2);  					glyphRect.Location = new Point(this.Width - this.HeaderGlyphSize - headerPadding' headerPadding);  					glyphRect.Size = new Size(this.HeaderGlyphSize' this.HeaderGlyphSize);    					// determine the header content  					Image headerImage = null;  					var headerFont = this.Font;  					var headerTitleFont = this.Font;  					if (this.Parent != null && this.Parent is Wizard)  					{  						// get content from parent wizard' if exists  						var parentWizard = (Wizard)this.Parent;  						headerImage = parentWizard.HeaderImage;  						headerFont = parentWizard.HeaderFont;  						headerTitleFont = parentWizard.HeaderTitleFont;  					}    					// check if we have an image  					if (headerImage == null)  					{  						// display a focus rect as a place holder  						ControlPaint.DrawFocusRectangle(e.Graphics' glyphRect);  					}  					else  					{  						// draw header image  						e.Graphics.DrawImage(headerImage' glyphRect);  					}    					// determine title height  					var headerTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' headerTitleFont' 0' textFormat).Height);    					// calculate text sizes  					titleRect.Location = new Point(HEADER_TEXT_PADDING'  													HEADER_TEXT_PADDING);  					titleRect.Size = new Size(glyphRect.Left - HEADER_TEXT_PADDING'  												headerTitleHeight);  					descriptionRect.Location = titleRect.Location;  					descriptionRect.Y += headerTitleHeight + HEADER_TEXT_PADDING / 2;  					descriptionRect.Size = new Size(titleRect.Width'  													this.HeaderHeight - descriptionRect.Y);    					// draw tilte text (single line' truncated with ellipsis)  					e.Graphics.DrawString(this.title'  											headerTitleFont'  											SystemBrushes.WindowText'  											titleRect'  											textFormat);  					// draw description text (multiple lines if needed)  					e.Graphics.DrawString(this.description'  											headerFont'  											SystemBrushes.WindowText'  											descriptionRect'  											textFormat);  					break;  				case WizardPageStyle.Welcome:  				case WizardPageStyle.Finish:  					// fill whole page with window color  					e.Graphics.FillRectangle(SystemBrushes.Window' headerRect);    					// determine welcome image regtangle  					glyphRect.Location = Point.Empty;  					glyphRect.Size = new Size(WELCOME_GLYPH_WIDTH' this.Height);    					// determine the icon that should appear on the welcome page  					Image welcomeImage = null;  					var welcomeFont = this.Font;  					var welcomeTitleFont = this.Font;  					if (this.Parent != null && this.Parent is Wizard)  					{  						// get content from parent wizard' if exists  						var parentWizard = (Wizard)this.Parent;  						welcomeImage = parentWizard.WelcomeImage;  						welcomeFont = parentWizard.WelcomeFont;  						welcomeTitleFont = parentWizard.WelcomeTitleFont;  					}    					// check if we have an image  					if (welcomeImage == null)  					{  						// display a focus rect as a place holder  						ControlPaint.DrawFocusRectangle(e.Graphics' glyphRect);  					}  					else  					{  						// draw welcome page image  						e.Graphics.DrawImage(welcomeImage' glyphRect);  					}    					// calculate text sizes  					titleRect.Location = new Point(WELCOME_GLYPH_WIDTH + HEADER_TEXT_PADDING'  													HEADER_TEXT_PADDING);  					titleRect.Width = this.Width - titleRect.Left - HEADER_TEXT_PADDING;  					// determine title height  					var welcomeTitleHeight = (int)Math.Ceiling(e.Graphics.MeasureString(this.title' welcomeTitleFont' titleRect.Width' textFormat).Height);  					descriptionRect.Location = titleRect.Location;  					descriptionRect.Y += welcomeTitleHeight + HEADER_TEXT_PADDING;  					descriptionRect.Size = new Size(this.Width - descriptionRect.Left - HEADER_TEXT_PADDING'  													this.Height - descriptionRect.Y);    					// draw tilte text (multiple lines if needed)  					e.Graphics.DrawString(this.title'  											welcomeTitleFont'  											SystemBrushes.WindowText'  											titleRect'  											textFormat);  					// draw description text (multiple lines if needed)  					e.Graphics.DrawString(this.description'  											welcomeFont'  											SystemBrushes.WindowText'  											descriptionRect'  											textFormat);  					break;  			}
