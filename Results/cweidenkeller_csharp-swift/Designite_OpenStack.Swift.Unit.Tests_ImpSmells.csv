Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The method has 221 lines of code.
Complex Method,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,Cyclomatic complexity of the method is 32
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_default_http_request_timeout_is_one_hour,The following statement contains a magic number: Assert.That(httpRequest.Timeout' Is.EqualTo(3600000));
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_get_auth,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_get_auth,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_get_account,The following statement contains a magic number: Assert.True(res.Status == 200);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_head_account,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_post_account,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_get_container,The following statement contains a magic number: Assert.True(res.Status == 200);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_head_container,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_post_container,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_put_container,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_delete_container,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_get_object,The following statement contains a magic number: Assert.True(res.Status == 200);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_head_object,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_post_object,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_put_object,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,TestClient,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,test_delete_object,The following statement contains a magic number: Assert.True(res.Status == 201);
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Magic Number,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following statement contains a magic number: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Duplicate Code,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((74' 106)' (153' 185)' (187' 219))
Missing Default,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following switch statement is missing a default case: switch(method) 		    { 				case "GET": 				{ 				    switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "POST": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 				    break; 			    } 			    case "HEAD": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "DELETE": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			    case "PUT": 			    { 				    switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    } 			        break; 			    } 			}
Missing Default,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following switch statement is missing a default case: switch(headers["request-type"]) 				    { 				        case "auth": 				        { 					        _status = 201; 					        _headers.Add("x-auth-token"' "foo"); 					        _headers.Add("x-storage-url"' "https://foo.com"); 					        break; 				        } 				        case "auth-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "account": 				        { 					        _status = 200; 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +  						                                   "<account name=\"foo\">\n" +  						                                   "<container><name>foo</name><count>1</count><bytes>1</bytes></container>\n</account>"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 200; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 					        _stream = _to_stream("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +                                                            "<container name=\"foo\">\n" +  						                                   "<object><name>foo</name>" + 						                                   "<hash>foo</hash>" + 						                                   "<bytes>1</bytes>" + 						                                   "<content_type>foo/foo</content_type>" + 						                                   "<last_modified>foo</last_modified>" + 						                                   "</object>" + 						                                   "</container>\n"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 200; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 					        _headers.Add("etag"' "foo"); 					        _stream = _to_stream("foo"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    }
Missing Default,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following switch statement is missing a default case: switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        break; 					    } 					    case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    }
Missing Default,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following switch statement is missing a default case: switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 					        _headers.Add("x-account-object-count"' "1"); 					        _headers.Add("x-account-meta-foo"' "foo"); 					        _headers.Add("x-account-container-count"' "1"); 					        _headers.Add("x-account-bytes-used"' "1"); 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 					        _headers.Add("x-container-meta-foo"' "foo"); 					        _headers.Add("x-container-object-count"' "1"); 					        _headers.Add("x-container-bytes-used"' "1"); 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 					        _headers.Add("x-object-meta-foo"' "foo"); 					        _headers.Add("etag"' "foo"); 					        _headers.Add("content-length"' "1"); 					        _headers.Add("content-type"' "foo/foobar"); 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    }
Missing Default,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following switch statement is missing a default case: switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    }
Missing Default,OpenStack.Swift.Unit.Tests,FakeHttpResponse,D:\research\architectureSmells\repos\cweidenkeller_csharp-swift\tests\OpenStack.Swift.Unit.Tests\UnitTests.cs,FakeHttpResponse,The following switch statement is missing a default case: switch(headers["request-type"]) 				    { 				        case "account": 				        { 					        _status = 201; 				            break; 				        } 				        case "account-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "container": 				        { 					        _status = 201; 				            break; 				        } 				        case "container-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				        case "object": 				        { 					        _status = 201; 				            break; 				        } 				        case "object-fail": 				        { 					        throw new ClientException("I am a teapot"' 418); 				        } 				    }
