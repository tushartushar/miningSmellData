Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FirstFloor.ModernUI.Windows.Controls,RelativeAnimatingContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,UpdateAnyAnimationValues,Cyclomatic complexity of the method is 15
Complex Method,FirstFloor.ModernUI.Windows.Navigation,NavigationHelper,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\NavigationHelper.cs,FindFrame,Cyclomatic complexity of the method is 9
Long Identifier,FirstFloor.ModernUI.Windows.Controls,ModernButton,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernButton.cs,,The length of the parameter EllipseStrokeThicknessProperty is 30.
Long Identifier,FirstFloor.ModernUI.Windows.Controls,ModernWindow,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernWindow.cs,,The length of the parameter IsNavigationControlVisibleProperty is 34.
Long Identifier,FirstFloor.ModernUI.Windows.Controls,TransitioningContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\TransitioningContentControl.cs,,The length of the parameter PreviousContentPresentationSitePartName is 39.
Long Identifier,FirstFloor.ModernUI.Windows.Controls,TransitioningContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\TransitioningContentControl.cs,,The length of the parameter CurrentContentPresentationSitePartName is 38.
Long Identifier,FirstFloor.ModernUI.Windows.Controls,TransitioningContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\TransitioningContentControl.cs,,The length of the parameter RestartTransitionOnContentChangeProperty is 40.
Long Statement,FirstFloor.ModernUI.Presentation,AppearanceManager,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Presentation\AppearanceManager.cs,GetThemeDictionary,The length of the statement  "            // determine the current theme by looking at the app resources and return the first dictionary having the resource key 'WindowBackground' defined. " is 146.
Long Statement,FirstFloor.ModernUI.Windows.Navigation,DefaultLinkNavigator,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\DefaultLinkNavigator.cs,Navigate,The length of the statement  "            else if (uri.IsAbsoluteUri && this.externalSchemes != null && this.externalSchemes.Any(s => uri.Scheme.Equals(s' StringComparison.OrdinalIgnoreCase))) { " is 152.
Long Statement,FirstFloor.ModernUI.Windows.Navigation,DefaultLinkNavigator,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\DefaultLinkNavigator.cs,Navigate,The length of the statement  "                    throw new ArgumentException(string.Format(CultureInfo.CurrentUICulture' ModernUI.Resources.NavigationFailedSourceNotSpecified' uri)); " is 133.
Long Statement,FirstFloor.ModernUI.Windows.Navigation,DefaultLinkNavigator,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\DefaultLinkNavigator.cs,Navigate,The length of the statement  "                    throw new ArgumentException(string.Format(CultureInfo.CurrentUICulture' ModernUI.Resources.NavigationFailedFrameNotFound' uri' parameter)); " is 139.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Virtual Method Call from Constructor,FirstFloor.ModernUI.Windows.Controls.BBCode,TokenBuffer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\TokenBuffer.cs,TokenBuffer,The constructor "TokenBuffer" calls a virtual method "NextToken".
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,CreateCloseDialogButton,The following statement contains a magic number: return new Button {                  Content = content'                  Command = this.CloseCommand'                  CommandParameter = result'                  IsDefault = isDefault'                  IsCancel = isCancel'                  MinHeight = 21'                  MinWidth = 65'                  Margin = new Thickness(4' 0' 0' 0)              };
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,CreateCloseDialogButton,The following statement contains a magic number: return new Button {                  Content = content'                  Command = this.CloseCommand'                  CommandParameter = result'                  IsDefault = isDefault'                  IsCancel = isCancel'                  MinHeight = 21'                  MinWidth = 65'                  Margin = new Thickness(4' 0' 0' 0)              };
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,CreateCloseDialogButton,The following statement contains a magic number: return new Button {                  Content = content'                  Command = this.CloseCommand'                  CommandParameter = result'                  IsDefault = isDefault'                  IsCancel = isCancel'                  MinHeight = 21'                  MinWidth = 65'                  Margin = new Thickness(4' 0' 0' 0)              };
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,ShowMessage,The following statement contains a magic number: var dlg = new ModernDialog {                  Title = title'                  Content = new BBCodeBlock { BBCode = text' Margin = new Thickness(0' 0' 0' 8) }'                  MinHeight = 0'                  MinWidth = 0'                  MaxHeight = 480'                  MaxWidth = 640'              };
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,ShowMessage,The following statement contains a magic number: var dlg = new ModernDialog {                  Title = title'                  Content = new BBCodeBlock { BBCode = text' Margin = new Thickness(0' 0' 0' 8) }'                  MinHeight = 0'                  MinWidth = 0'                  MaxHeight = 480'                  MaxWidth = 640'              };
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,ShowMessage,The following statement contains a magic number: var dlg = new ModernDialog {                  Title = title'                  Content = new BBCodeBlock { BBCode = text' Margin = new Thickness(0' 0' 0' 8) }'                  MinHeight = 0'                  MinWidth = 0'                  MaxHeight = 480'                  MaxWidth = 640'              };
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,GeneralAnimationValueAdapter,The following statement contains a magic number: _ratio = InitialValue / 100;
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,StripIdentifyingValueOff,The following statement contains a magic number: return Dimension == DoubleAnimationDimension.Width ? number - .1 : number - .2;
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,StripIdentifyingValueOff,The following statement contains a magic number: return Dimension == DoubleAnimationDimension.Width ? number - .1 : number - .2;
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,GetDimensionFromIdentifyingValue,The following statement contains a magic number: if (remainder >= .1 - SimpleDoubleComparisonEpsilon && remainder <= .1 + SimpleDoubleComparisonEpsilon) {                      return DoubleAnimationDimension.Width;                  }
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,GetDimensionFromIdentifyingValue,The following statement contains a magic number: if (remainder >= .1 - SimpleDoubleComparisonEpsilon && remainder <= .1 + SimpleDoubleComparisonEpsilon) {                      return DoubleAnimationDimension.Width;                  }
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,GetDimensionFromIdentifyingValue,The following statement contains a magic number: if (remainder >= .2 - SimpleDoubleComparisonEpsilon && remainder <= .2 + SimpleDoubleComparisonEpsilon) {                      return DoubleAnimationDimension.Height;                  }
Magic Number,FirstFloor.ModernUI.Windows.Controls,GeneralAnimationValueAdapter<T>,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,GetDimensionFromIdentifyingValue,The following statement contains a magic number: if (remainder >= .2 - SimpleDoubleComparisonEpsilon && remainder <= .2 + SimpleDoubleComparisonEpsilon) {                      return DoubleAnimationDimension.Height;                  }
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeLexer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeLexer.cs,NextToken,The following statement contains a magic number: if (State == StateNormal) {                  if (LA(1) == '[') {                      if (LA(2) == '/') {                          return CloseTag();                      }                      else {                          Token token = OpenTag();                          PushState(StateTag);                          return token;                      }                  }                  else if (IsInRange(NewlineChars)) {                      return Newline();                  }                  else {                      return Text();                  }              }              else if (State == StateTag) {                  if (LA(1) == ']') {                      Consume();                      PopState();                      return NextToken();                  }                    return Attribute();              }              else {                  throw new ParseException("Invalid state");              }
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {                  Token token = LA(1);                  Consume();                    if (token.TokenType == BBCodeLexer.TokenStartTag) {                      ParseTag(token.Value' true' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenEndTag) {                      ParseTag(token.Value' false' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenText) {                      var parent = span;                      if (context.NavigateUri != null) {                          // parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]                          string uriStr = context.NavigateUri;                          string parameter = null;                          string targetName = null;                            var parts = uriStr.Split(new char[] { '|' }' 3);                          if (parts.Length == 3) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                              targetName = Uri.UnescapeDataString(parts[2]);                          }                          else if (parts.Length == 2) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                          }                            var uri = new Uri(uriStr' UriKind.RelativeOrAbsolute);                          var link = new Hyperlink();                            // assign ICommand instance if available' otherwise set NavigateUri                          ICommand command;                          if (this.Commands != null && this.Commands.TryGetValue(uri' out command)) {                              link.Command = command;                              link.CommandParameter = parameter;                              if (targetName != null) {                                  link.CommandTarget = this.source.FindName(targetName) as IInputElement;                              }                          }                          else {                              link.NavigateUri = uri;                              link.TargetName = parameter;                          }                          parent = link;                          span.Inlines.Add(parent);                      }                      var run = context.CreateRun(token.Value);                      parent.Inlines.Add(run);                  }                  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {                      span.Inlines.Add(new LineBreak());                  }                  else if (token.TokenType == BBCodeLexer.TokenAttribute) {                      throw new ParseException(Resources.UnexpectedToken);                  }                  else if (token.TokenType == BBCodeLexer.TokenEnd) {                      break;                  }                  else {                      throw new ParseException(Resources.UnknownTokenType);                  }              }
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {                  Token token = LA(1);                  Consume();                    if (token.TokenType == BBCodeLexer.TokenStartTag) {                      ParseTag(token.Value' true' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenEndTag) {                      ParseTag(token.Value' false' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenText) {                      var parent = span;                      if (context.NavigateUri != null) {                          // parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]                          string uriStr = context.NavigateUri;                          string parameter = null;                          string targetName = null;                            var parts = uriStr.Split(new char[] { '|' }' 3);                          if (parts.Length == 3) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                              targetName = Uri.UnescapeDataString(parts[2]);                          }                          else if (parts.Length == 2) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                          }                            var uri = new Uri(uriStr' UriKind.RelativeOrAbsolute);                          var link = new Hyperlink();                            // assign ICommand instance if available' otherwise set NavigateUri                          ICommand command;                          if (this.Commands != null && this.Commands.TryGetValue(uri' out command)) {                              link.Command = command;                              link.CommandParameter = parameter;                              if (targetName != null) {                                  link.CommandTarget = this.source.FindName(targetName) as IInputElement;                              }                          }                          else {                              link.NavigateUri = uri;                              link.TargetName = parameter;                          }                          parent = link;                          span.Inlines.Add(parent);                      }                      var run = context.CreateRun(token.Value);                      parent.Inlines.Add(run);                  }                  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {                      span.Inlines.Add(new LineBreak());                  }                  else if (token.TokenType == BBCodeLexer.TokenAttribute) {                      throw new ParseException(Resources.UnexpectedToken);                  }                  else if (token.TokenType == BBCodeLexer.TokenEnd) {                      break;                  }                  else {                      throw new ParseException(Resources.UnknownTokenType);                  }              }
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {                  Token token = LA(1);                  Consume();                    if (token.TokenType == BBCodeLexer.TokenStartTag) {                      ParseTag(token.Value' true' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenEndTag) {                      ParseTag(token.Value' false' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenText) {                      var parent = span;                      if (context.NavigateUri != null) {                          // parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]                          string uriStr = context.NavigateUri;                          string parameter = null;                          string targetName = null;                            var parts = uriStr.Split(new char[] { '|' }' 3);                          if (parts.Length == 3) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                              targetName = Uri.UnescapeDataString(parts[2]);                          }                          else if (parts.Length == 2) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                          }                            var uri = new Uri(uriStr' UriKind.RelativeOrAbsolute);                          var link = new Hyperlink();                            // assign ICommand instance if available' otherwise set NavigateUri                          ICommand command;                          if (this.Commands != null && this.Commands.TryGetValue(uri' out command)) {                              link.Command = command;                              link.CommandParameter = parameter;                              if (targetName != null) {                                  link.CommandTarget = this.source.FindName(targetName) as IInputElement;                              }                          }                          else {                              link.NavigateUri = uri;                              link.TargetName = parameter;                          }                          parent = link;                          span.Inlines.Add(parent);                      }                      var run = context.CreateRun(token.Value);                      parent.Inlines.Add(run);                  }                  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {                      span.Inlines.Add(new LineBreak());                  }                  else if (token.TokenType == BBCodeLexer.TokenAttribute) {                      throw new ParseException(Resources.UnexpectedToken);                  }                  else if (token.TokenType == BBCodeLexer.TokenEnd) {                      break;                  }                  else {                      throw new ParseException(Resources.UnknownTokenType);                  }              }
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {                  Token token = LA(1);                  Consume();                    if (token.TokenType == BBCodeLexer.TokenStartTag) {                      ParseTag(token.Value' true' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenEndTag) {                      ParseTag(token.Value' false' context);                  }                  else if (token.TokenType == BBCodeLexer.TokenText) {                      var parent = span;                      if (context.NavigateUri != null) {                          // parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]                          string uriStr = context.NavigateUri;                          string parameter = null;                          string targetName = null;                            var parts = uriStr.Split(new char[] { '|' }' 3);                          if (parts.Length == 3) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                              targetName = Uri.UnescapeDataString(parts[2]);                          }                          else if (parts.Length == 2) {                              uriStr = parts[0];                              parameter = Uri.UnescapeDataString(parts[1]);                          }                            var uri = new Uri(uriStr' UriKind.RelativeOrAbsolute);                          var link = new Hyperlink();                            // assign ICommand instance if available' otherwise set NavigateUri                          ICommand command;                          if (this.Commands != null && this.Commands.TryGetValue(uri' out command)) {                              link.Command = command;                              link.CommandParameter = parameter;                              if (targetName != null) {                                  link.CommandTarget = this.source.FindName(targetName) as IInputElement;                              }                          }                          else {                              link.NavigateUri = uri;                              link.TargetName = parameter;                          }                          parent = link;                          span.Inlines.Add(parent);                      }                      var run = context.CreateRun(token.Value);                      parent.Inlines.Add(run);                  }                  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {                      span.Inlines.Add(new LineBreak());                  }                  else if (token.TokenType == BBCodeLexer.TokenAttribute) {                      throw new ParseException(Resources.UnexpectedToken);                  }                  else if (token.TokenType == BBCodeLexer.TokenEnd) {                      break;                  }                  else {                      throw new ParseException(Resources.UnknownTokenType);                  }              }
