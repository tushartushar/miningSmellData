Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FirstFloor.ModernUI.Windows.Controls,RelativeAnimatingContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\RelativeAnimatingContentControl.cs,UpdateAnyAnimationValues,Cyclomatic complexity of the method is 16
Complex Method,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeLexer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeLexer.cs,NextToken,Cyclomatic complexity of the method is 8
Complex Method,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,ParseTag,Cyclomatic complexity of the method is 15
Complex Method,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,FirstFloor.ModernUI.Windows.Navigation,NavigationHelper,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\NavigationHelper.cs,FindFrame,Cyclomatic complexity of the method is 9
Long Parameter List,FirstFloor.ModernUI.Presentation,AppearanceManager,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Presentation\AppearanceManager.cs,AppearanceManager,The method has 10 parameters.
Long Statement,FirstFloor.ModernUI.Presentation,AppearanceManager,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Presentation\AppearanceManager.cs,GetThemeDictionary,The length of the statement  "	// determine the current theme by looking at the app resources and return the first dictionary having the resource key 'WindowBackground' defined. " is 146.
Long Statement,FirstFloor.ModernUI.Windows.Controls,TransitioningContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\TransitioningContentControl.cs,OnTransitionPropertyChanged,The length of the statement  "			throw new ArgumentException (string.Format (CultureInfo.CurrentCulture' "Transition '{0}' was not defined."' newTransition)); " is 125.
Long Statement,FirstFloor.ModernUI.Windows.Controls,TransitioningContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\TransitioningContentControl.cs,OnApplyTemplate,The length of the statement  "		throw new ArgumentException (string.Format (CultureInfo.CurrentCulture' "Transition '{0}' was not defined."' invalidTransition)); " is 129.
Long Statement,FirstFloor.ModernUI.Windows.Controls,TransitioningContentControl,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\TransitioningContentControl.cs,GetStoryboard,The length of the statement  "		newStoryboard = presentationGroup.States.OfType<VisualState> ().Where (state => state.Name == newTransition).Select (state => state.Storyboard).FirstOrDefault (); " is 162.
Long Statement,FirstFloor.ModernUI.Windows.Navigation,DefaultLinkNavigator,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\DefaultLinkNavigator.cs,Navigate,The length of the statement  "	else if (uri.IsAbsoluteUri && this.externalSchemes != null && this.externalSchemes.Any (s => uri.Scheme.Equals (s' StringComparison.OrdinalIgnoreCase))) { " is 154.
Long Statement,FirstFloor.ModernUI.Windows.Navigation,DefaultLinkNavigator,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\DefaultLinkNavigator.cs,Navigate,The length of the statement  "			throw new ArgumentException (string.Format (CultureInfo.CurrentUICulture' ModernUI.Resources.NavigationFailedSourceNotSpecified' uri)); " is 135.
Long Statement,FirstFloor.ModernUI.Windows.Navigation,DefaultLinkNavigator,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Navigation\DefaultLinkNavigator.cs,Navigate,The length of the statement  "			throw new ArgumentException (string.Format (CultureInfo.CurrentUICulture' ModernUI.Resources.NavigationFailedFrameNotFound' uri' parameter)); " is 141.
Virtual Method Call from Constructor,FirstFloor.ModernUI.Windows.Controls.BBCode,TokenBuffer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\TokenBuffer.cs,TokenBuffer,The constructor "TokenBuffer" calls a virtual method "NextToken".
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,CreateCloseDialogButton,The following statement contains a magic number: return new Button {  	Content = content'  	Command = this.CloseCommand'  	CommandParameter = result'  	IsDefault = isDefault'  	IsCancel = isCancel'  	MinHeight = 21'  	MinWidth = 65'  	Margin = new Thickness (4' 0' 0' 0)  };  
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,CreateCloseDialogButton,The following statement contains a magic number: return new Button {  	Content = content'  	Command = this.CloseCommand'  	CommandParameter = result'  	IsDefault = isDefault'  	IsCancel = isCancel'  	MinHeight = 21'  	MinWidth = 65'  	Margin = new Thickness (4' 0' 0' 0)  };  
Magic Number,FirstFloor.ModernUI.Windows.Controls,ModernDialog,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\ModernDialog.cs,CreateCloseDialogButton,The following statement contains a magic number: return new Button {  	Content = content'  	Command = this.CloseCommand'  	CommandParameter = result'  	IsDefault = isDefault'  	IsCancel = isCancel'  	MinHeight = 21'  	MinWidth = 65'  	Margin = new Thickness (4' 0' 0' 0)  };  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeLexer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeLexer.cs,NextToken,The following statement contains a magic number: if (State == StateNormal) {  	if (LA (1) == '[') {  		if (LA (2) == '/') {  			return CloseTag ();  		}  		else {  			Token token = OpenTag ();  			PushState (StateTag);  			return token;  		}  	}  	else if (IsInRange (NewlineChars)) {  		return Newline ();  	}  	else {  		return Text ();  	}  }  else if (State == StateTag) {  	if (LA (1) == ']') {  		Consume ();  		PopState ();  		return NextToken ();  	}  	return Attribute ();  }  else {  	throw new ParseException ("Invalid state");  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeLexer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeLexer.cs,NextToken,The following statement contains a magic number: if (LA (1) == '[') {  	if (LA (2) == '/') {  		return CloseTag ();  	}  	else {  		Token token = OpenTag ();  		PushState (StateTag);  		return token;  	}  }  else if (IsInRange (NewlineChars)) {  	return Newline ();  }  else {  	return Text ();  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeLexer,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeLexer.cs,NextToken,The following statement contains a magic number: if (LA (2) == '/') {  	return CloseTag ();  }  else {  	Token token = OpenTag ();  	PushState (StateTag);  	return token;  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {  	Token token = LA (1);  	Consume ();  	if (token.TokenType == BBCodeLexer.TokenStartTag) {  		ParseTag (token.Value' true' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenEndTag) {  		ParseTag (token.Value' false' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenText) {  		var parent = span;  		if (context.NavigateUri != null) {  			// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  			string uriStr = context.NavigateUri;  			string parameter = null;  			string targetName = null;  			var parts = uriStr.Split (new char[] {  				'|'  			}' 3);  			if (parts.Length == 3) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  				targetName = Uri.UnescapeDataString (parts [2]);  			}  			else if (parts.Length == 2) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  			}  			var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  			var link = new Hyperlink ();  			// assign ICommand instance if available' otherwise set NavigateUri  			ICommand command;  			if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  				link.Command = command;  				link.CommandParameter = parameter;  				if (targetName != null) {  					link.CommandTarget = this.source.FindName (targetName) as IInputElement;  				}  			}  			else {  				link.NavigateUri = uri;  				link.TargetName = parameter;  			}  			parent = link;  			span.Inlines.Add (parent);  		}  		var run = context.CreateRun (token.Value);  		parent.Inlines.Add (run);  	}  	else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  		span.Inlines.Add (new LineBreak ());  	}  	else if (token.TokenType == BBCodeLexer.TokenAttribute) {  		throw new ParseException (Resources.UnexpectedToken);  	}  	else if (token.TokenType == BBCodeLexer.TokenEnd) {  		break;  	}  	else {  		throw new ParseException (Resources.UnknownTokenType);  	}  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {  	Token token = LA (1);  	Consume ();  	if (token.TokenType == BBCodeLexer.TokenStartTag) {  		ParseTag (token.Value' true' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenEndTag) {  		ParseTag (token.Value' false' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenText) {  		var parent = span;  		if (context.NavigateUri != null) {  			// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  			string uriStr = context.NavigateUri;  			string parameter = null;  			string targetName = null;  			var parts = uriStr.Split (new char[] {  				'|'  			}' 3);  			if (parts.Length == 3) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  				targetName = Uri.UnescapeDataString (parts [2]);  			}  			else if (parts.Length == 2) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  			}  			var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  			var link = new Hyperlink ();  			// assign ICommand instance if available' otherwise set NavigateUri  			ICommand command;  			if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  				link.Command = command;  				link.CommandParameter = parameter;  				if (targetName != null) {  					link.CommandTarget = this.source.FindName (targetName) as IInputElement;  				}  			}  			else {  				link.NavigateUri = uri;  				link.TargetName = parameter;  			}  			parent = link;  			span.Inlines.Add (parent);  		}  		var run = context.CreateRun (token.Value);  		parent.Inlines.Add (run);  	}  	else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  		span.Inlines.Add (new LineBreak ());  	}  	else if (token.TokenType == BBCodeLexer.TokenAttribute) {  		throw new ParseException (Resources.UnexpectedToken);  	}  	else if (token.TokenType == BBCodeLexer.TokenEnd) {  		break;  	}  	else {  		throw new ParseException (Resources.UnknownTokenType);  	}  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {  	Token token = LA (1);  	Consume ();  	if (token.TokenType == BBCodeLexer.TokenStartTag) {  		ParseTag (token.Value' true' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenEndTag) {  		ParseTag (token.Value' false' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenText) {  		var parent = span;  		if (context.NavigateUri != null) {  			// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  			string uriStr = context.NavigateUri;  			string parameter = null;  			string targetName = null;  			var parts = uriStr.Split (new char[] {  				'|'  			}' 3);  			if (parts.Length == 3) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  				targetName = Uri.UnescapeDataString (parts [2]);  			}  			else if (parts.Length == 2) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  			}  			var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  			var link = new Hyperlink ();  			// assign ICommand instance if available' otherwise set NavigateUri  			ICommand command;  			if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  				link.Command = command;  				link.CommandParameter = parameter;  				if (targetName != null) {  					link.CommandTarget = this.source.FindName (targetName) as IInputElement;  				}  			}  			else {  				link.NavigateUri = uri;  				link.TargetName = parameter;  			}  			parent = link;  			span.Inlines.Add (parent);  		}  		var run = context.CreateRun (token.Value);  		parent.Inlines.Add (run);  	}  	else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  		span.Inlines.Add (new LineBreak ());  	}  	else if (token.TokenType == BBCodeLexer.TokenAttribute) {  		throw new ParseException (Resources.UnexpectedToken);  	}  	else if (token.TokenType == BBCodeLexer.TokenEnd) {  		break;  	}  	else {  		throw new ParseException (Resources.UnknownTokenType);  	}  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: while (true) {  	Token token = LA (1);  	Consume ();  	if (token.TokenType == BBCodeLexer.TokenStartTag) {  		ParseTag (token.Value' true' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenEndTag) {  		ParseTag (token.Value' false' context);  	}  	else if (token.TokenType == BBCodeLexer.TokenText) {  		var parent = span;  		if (context.NavigateUri != null) {  			// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  			string uriStr = context.NavigateUri;  			string parameter = null;  			string targetName = null;  			var parts = uriStr.Split (new char[] {  				'|'  			}' 3);  			if (parts.Length == 3) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  				targetName = Uri.UnescapeDataString (parts [2]);  			}  			else if (parts.Length == 2) {  				uriStr = parts [0];  				parameter = Uri.UnescapeDataString (parts [1]);  			}  			var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  			var link = new Hyperlink ();  			// assign ICommand instance if available' otherwise set NavigateUri  			ICommand command;  			if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  				link.Command = command;  				link.CommandParameter = parameter;  				if (targetName != null) {  					link.CommandTarget = this.source.FindName (targetName) as IInputElement;  				}  			}  			else {  				link.NavigateUri = uri;  				link.TargetName = parameter;  			}  			parent = link;  			span.Inlines.Add (parent);  		}  		var run = context.CreateRun (token.Value);  		parent.Inlines.Add (run);  	}  	else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  		span.Inlines.Add (new LineBreak ());  	}  	else if (token.TokenType == BBCodeLexer.TokenAttribute) {  		throw new ParseException (Resources.UnexpectedToken);  	}  	else if (token.TokenType == BBCodeLexer.TokenEnd) {  		break;  	}  	else {  		throw new ParseException (Resources.UnknownTokenType);  	}  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenStartTag) {  	ParseTag (token.Value' true' context);  }  else if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenStartTag) {  	ParseTag (token.Value' true' context);  }  else if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenStartTag) {  	ParseTag (token.Value' true' context);  }  else if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenStartTag) {  	ParseTag (token.Value' true' context);  }  else if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenEndTag) {  	ParseTag (token.Value' false' context);  }  else if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (token.TokenType == BBCodeLexer.TokenText) {  	var parent = span;  	if (context.NavigateUri != null) {  		// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  		string uriStr = context.NavigateUri;  		string parameter = null;  		string targetName = null;  		var parts = uriStr.Split (new char[] {  			'|'  		}' 3);  		if (parts.Length == 3) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  			targetName = Uri.UnescapeDataString (parts [2]);  		}  		else if (parts.Length == 2) {  			uriStr = parts [0];  			parameter = Uri.UnescapeDataString (parts [1]);  		}  		var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  		var link = new Hyperlink ();  		// assign ICommand instance if available' otherwise set NavigateUri  		ICommand command;  		if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  			link.Command = command;  			link.CommandParameter = parameter;  			if (targetName != null) {  				link.CommandTarget = this.source.FindName (targetName) as IInputElement;  			}  		}  		else {  			link.NavigateUri = uri;  			link.TargetName = parameter;  		}  		parent = link;  		span.Inlines.Add (parent);  	}  	var run = context.CreateRun (token.Value);  	parent.Inlines.Add (run);  }  else if (token.TokenType == BBCodeLexer.TokenLineBreak) {  	span.Inlines.Add (new LineBreak ());  }  else if (token.TokenType == BBCodeLexer.TokenAttribute) {  	throw new ParseException (Resources.UnexpectedToken);  }  else if (token.TokenType == BBCodeLexer.TokenEnd) {  	break;  }  else {  	throw new ParseException (Resources.UnknownTokenType);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (context.NavigateUri != null) {  	// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  	string uriStr = context.NavigateUri;  	string parameter = null;  	string targetName = null;  	var parts = uriStr.Split (new char[] {  		'|'  	}' 3);  	if (parts.Length == 3) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  		targetName = Uri.UnescapeDataString (parts [2]);  	}  	else if (parts.Length == 2) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  	}  	var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  	var link = new Hyperlink ();  	// assign ICommand instance if available' otherwise set NavigateUri  	ICommand command;  	if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  		link.Command = command;  		link.CommandParameter = parameter;  		if (targetName != null) {  			link.CommandTarget = this.source.FindName (targetName) as IInputElement;  		}  	}  	else {  		link.NavigateUri = uri;  		link.TargetName = parameter;  	}  	parent = link;  	span.Inlines.Add (parent);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (context.NavigateUri != null) {  	// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  	string uriStr = context.NavigateUri;  	string parameter = null;  	string targetName = null;  	var parts = uriStr.Split (new char[] {  		'|'  	}' 3);  	if (parts.Length == 3) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  		targetName = Uri.UnescapeDataString (parts [2]);  	}  	else if (parts.Length == 2) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  	}  	var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  	var link = new Hyperlink ();  	// assign ICommand instance if available' otherwise set NavigateUri  	ICommand command;  	if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  		link.Command = command;  		link.CommandParameter = parameter;  		if (targetName != null) {  			link.CommandTarget = this.source.FindName (targetName) as IInputElement;  		}  	}  	else {  		link.NavigateUri = uri;  		link.TargetName = parameter;  	}  	parent = link;  	span.Inlines.Add (parent);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (context.NavigateUri != null) {  	// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  	string uriStr = context.NavigateUri;  	string parameter = null;  	string targetName = null;  	var parts = uriStr.Split (new char[] {  		'|'  	}' 3);  	if (parts.Length == 3) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  		targetName = Uri.UnescapeDataString (parts [2]);  	}  	else if (parts.Length == 2) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  	}  	var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  	var link = new Hyperlink ();  	// assign ICommand instance if available' otherwise set NavigateUri  	ICommand command;  	if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  		link.Command = command;  		link.CommandParameter = parameter;  		if (targetName != null) {  			link.CommandTarget = this.source.FindName (targetName) as IInputElement;  		}  	}  	else {  		link.NavigateUri = uri;  		link.TargetName = parameter;  	}  	parent = link;  	span.Inlines.Add (parent);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (context.NavigateUri != null) {  	// parse uri value for optional parameter and/or target' eg [url=cmd://foo|parameter|target]  	string uriStr = context.NavigateUri;  	string parameter = null;  	string targetName = null;  	var parts = uriStr.Split (new char[] {  		'|'  	}' 3);  	if (parts.Length == 3) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  		targetName = Uri.UnescapeDataString (parts [2]);  	}  	else if (parts.Length == 2) {  		uriStr = parts [0];  		parameter = Uri.UnescapeDataString (parts [1]);  	}  	var uri = new Uri (uriStr' UriKind.RelativeOrAbsolute);  	var link = new Hyperlink ();  	// assign ICommand instance if available' otherwise set NavigateUri  	ICommand command;  	if (this.Commands != null && this.Commands.TryGetValue (uri' out command)) {  		link.Command = command;  		link.CommandParameter = parameter;  		if (targetName != null) {  			link.CommandTarget = this.source.FindName (targetName) as IInputElement;  		}  	}  	else {  		link.NavigateUri = uri;  		link.TargetName = parameter;  	}  	parent = link;  	span.Inlines.Add (parent);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (parts.Length == 3) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  	targetName = Uri.UnescapeDataString (parts [2]);  }  else if (parts.Length == 2) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (parts.Length == 3) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  	targetName = Uri.UnescapeDataString (parts [2]);  }  else if (parts.Length == 2) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (parts.Length == 3) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  	targetName = Uri.UnescapeDataString (parts [2]);  }  else if (parts.Length == 2) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  }  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: targetName = Uri.UnescapeDataString (parts [2]);  
Magic Number,FirstFloor.ModernUI.Windows.Controls.BBCode,BBCodeParser,C:\repos\DavidRogers_kato\src\FirstFloor.ModernUI\Windows\Controls\BBCode\BBCodeParser.cs,Parse,The following statement contains a magic number: if (parts.Length == 2) {  	uriStr = parts [0];  	parameter = Uri.UnescapeDataString (parts [1]);  }  
