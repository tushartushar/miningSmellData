Implementation smell,Namespace,Class,File,Method,Description
Long Method,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The method has 100 lines of code.
Complex Method,SCANsat.Unity,SCAN_ColorPicker,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\SCAN_ColorPicker.cs,Setup,Cyclomatic complexity of the method is 10
Complex Method,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetUI,Cyclomatic complexity of the method is 11
Complex Method,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnPointerDown,Cyclomatic complexity of the method is 9
Complex Method,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,setMap,Cyclomatic complexity of the method is 15
Complex Method,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetLegend,Cyclomatic complexity of the method is 9
Complex Method,SCANsat.Unity.Unity,SCAN_ColorBiome,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorBiome.cs,SetBiome,Cyclomatic complexity of the method is 9
Complex Method,SCANsat.Unity.Unity,SCAN_ColorBiome,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorBiome.cs,Default,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ColorControl,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorControl.cs,AltimetrySettings,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ColorControl,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorControl.cs,SlopeSettings,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ColorControl,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorControl.cs,BiomeSettings,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ColorControl,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorControl.cs,ResourceSettings,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,SetUI,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,OnPointerDown,Cyclomatic complexity of the method is 9
Complex Method,SCANsat.Unity.Unity,SCAN_MainMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_MainMap.cs,setMap,Cyclomatic complexity of the method is 11
Complex Method,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,setup,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,OnPointerDown,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_SettingsGeneral,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsGeneral.cs,setup,Cyclomatic complexity of the method is 15
Complex Method,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,setup,Cyclomatic complexity of the method is 16
Complex Method,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,DisableStock,Cyclomatic complexity of the method is 9
Complex Method,SCANsat.Unity.Unity,SCAN_Toolbar,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Toolbar.cs,Setup,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,Update,Cyclomatic complexity of the method is 14
Complex Method,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,setMap,Cyclomatic complexity of the method is 16
Complex Method,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,Cyclomatic complexity of the method is 8
Complex Method,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetLegend,Cyclomatic complexity of the method is 9
Complex Method,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,Cyclomatic complexity of the method is 9
Long Parameter List,SCANsat.Unity,CanvasFader,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\CanvasFader.cs,Fade,The method has 5 parameters. Parameters: to' fast' call' interrupt' overrule
Long Parameter List,SCANsat.Unity,CanvasFader,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\CanvasFader.cs,Fade,The method has 6 parameters. Parameters: from' to' duration' call' interrupt' overrule
Long Parameter List,SCANsat.Unity,CanvasFader,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\CanvasFader.cs,FadeRoutine,The method has 5 parameters. Parameters: from' to' duration' call' interrupt
Long Parameter List,SCANsat.Unity.Unity,SCAN_ColorControl,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorControl.cs,ParseInput,The method has 5 parameters. Parameters: input' original' min' max' digits
Long Parameter List,SCANsat.Unity.Unity,SCAN_DropDownElement,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_DropDownElement.cs,Setup,The method has 5 parameters. Parameters: element' current' parent' scroll' size
Long Parameter List,SCANsat.Unity.Unity,SCAN_Style,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Style.cs,setToggle,The method has 6 parameters. Parameters: normal' highlight' active' inactive' checkmark' checkmarkHover
Long Parameter List,SCANsat.Unity.Unity,SCAN_Style,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Style.cs,setToggleButton,The method has 5 parameters. Parameters: normal' highlight' active' inactive' checkmark
Long Parameter List,SCANsat.Unity.Unity,SCAN_Style,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Style.cs,setSlider,The method has 5 parameters. Parameters: background' thumb' thumbHighlight' thumbActive' thumbInactive
Long Statement,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The length of the statement  "					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree))); " is 151.
Long Statement,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The length of the statement  "					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree))); " is 151.
Long Statement,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The length of the statement  "					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree))); " is 150.
Long Statement,SCANsat.Unity.HSVPicker.Utility,BoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\BoxSlider.cs,OnPointerDown,The length of the statement  "			if (m_HandleContainerRect != null && RectTransformUtility.RectangleContainsScreenPoint(m_HandleRect' eventData.position' eventData.enterEventCamera)) " is 149.
Long Statement,SCANsat.Unity.HSVPicker.Utility,BoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\BoxSlider.cs,OnPointerDown,The length of the statement  "				if (RectTransformUtility.ScreenPointToLocalPointInRectangle(m_HandleRect' eventData.position' eventData.pressEventCamera' out localMousePos)) " is 141.
Long Statement,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnClampInputChange,The length of the statement  "			float clamp = SCAN_ColorControl.ParseInput(input' m_ClampSlider.value' m_ClampSlider.minValue' m_ClampSlider.maxValue' 0); " is 122.
Long Statement,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,Update,The length of the statement  "				RectTransformUtility.ScreenPointToLocalPointInRectangle(m_MapImage.rectTransform' Input.mousePosition' bigInterface.MainCanvas.worldCamera' out rectPos); " is 153.
Long Statement,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,Update,The length of the statement  "				RectTransformUtility.ScreenPointToLocalPointInRectangle(m_LegendImage.rectTransform' Input.mousePosition' bigInterface.MainCanvas.worldCamera' out rectPos); " is 156.
Long Statement,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnClickMap,The length of the statement  "			RectTransformUtility.ScreenPointToLocalPointInRectangle(m_MapImage.rectTransform' Input.mousePosition' bigInterface.MainCanvas.worldCamera' out pos); " is 149.
Long Statement,SCANsat.Unity.Unity,SCAN_ColorBiome,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorBiome.cs,OnTransparencyInputChange,The length of the statement  "			float tran = SCAN_ColorControl.ParseInput(input' m_TransparencySlider.value' m_TransparencySlider.minValue' m_TransparencySlider.maxValue' 0); " is 142.
Long Statement,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,OnTransparencyInputChange,The length of the statement  "			float tran = SCAN_ColorControl.ParseInput(input' m_TransSlider.value' m_TransSlider.minValue' m_TransSlider.maxValue' 0); " is 121.
Long Statement,SCANsat.Unity.Unity,SCAN_ColorSlope,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorSlope.cs,OnCutoffInputChange,The length of the statement  "			float cutoff = SCAN_ColorControl.ParseInput(input' m_CutoffSlider.value' m_CutoffSlider.minValue' m_CutoffSlider.maxValue' 1); " is 126.
Long Statement,SCANsat.Unity.Unity,SCAN_ColorSlope,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorSlope.cs,Apply,The length of the statement  "			colorInterface.SlopeApply(m_ColorPickerOne.GetColorOne' m_ColorPickerOne.GetColorTwo' m_ColorPickerTwo.GetColorOne' m_ColorPickerTwo.GetColorTwo); " is 146.
Long Statement,SCANsat.Unity.Unity,SCAN_MainMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_MainMap.cs,CreateVessels,The length of the statement  "			if (mapInterface == null || m_VesselPrefab == null || m_MapPrefab == null || m_VesselTransform == null || m_MainMap == null) " is 124.
Long Statement,SCANsat.Unity.Unity,SCAN_MapLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_MapLabel.cs,Setup,The length of the statement  "				rect.anchoredPosition = new Vector2(rect.anchoredPosition.x - (info.width / 2)' rect.anchoredPosition.y + info.alignBottom); " is 124.
Long Statement,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,ProcessTooltips,The length of the statement  "                ProcessTooltip(handlers[j]' settingsInterface.WindowTooltips' settingsInterface.TooltipCanvas' settingsInterface.UIScale); " is 122.
Long Statement,SCANsat.Unity.Unity,SCAN_Tooltip,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Tooltip.cs,OnScreenSpaceCamera,The length of the statement  "			//check for lower edge of the screen (if the shifts of the tooltip are kept as in this code' no need for this as the tooltip always appears above the mouse bu default) " is 167.
Long Statement,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,Update,The length of the statement  "				RectTransformUtility.ScreenPointToLocalPointInRectangle(m_ZoomImage.rectTransform' Input.mousePosition' zoomInterface.MainCanvas.worldCamera' out rectPos); " is 155.
Long Statement,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,Update,The length of the statement  "				RectTransformUtility.ScreenPointToLocalPointInRectangle(m_LegendImage.rectTransform' Input.mousePosition' zoomInterface.MainCanvas.worldCamera' out rectPos); " is 157.
Long Statement,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnClickMap,The length of the statement  "			RectTransformUtility.ScreenPointToLocalPointInRectangle(m_ZoomImage.rectTransform' Input.mousePosition' zoomInterface.MainCanvas.worldCamera' out pos); " is 151.
Complex Conditional,SCANsat.Unity.HSVPicker.Utility,BoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\BoxSlider.cs,SetClass,The conditional expression  "(currentValue == null && newValue == null) || (currentValue != null && currentValue.Equals(newValue))"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,Update,The conditional expression  "m_MinInputField != null && !m_MinInputField.IsFocused  					&& m_MaxInputField != null && !m_MaxInputField.IsFocused  					&& m_ClampInputField != null && !m_ClampInputField.IsFocused"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,CreatePalettes,The conditional expression  "colorInterface == null || m_PaletteGrid == null || m_PalettePrefab == null || palettes == null"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnClickMap,The conditional expression  "!inMap || bigInterface == null || m_MapImage == null || !(eventData is PointerEventData)"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_ColorBiome,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorBiome.cs,Update,The conditional expression  "m_TransInputField != null && !m_TransInputField.IsFocused  					&& m_ColorPicker != null && !m_ColorPicker.AnyInputActive"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,Update,The conditional expression  "m_MinInputField != null && !m_MinInputField.IsFocused  					&& m_MaxInputField != null && !m_MaxInputField.IsFocused  					&& m_TransInputField != null && !m_TransInputField.IsFocused  					&& m_ColorPicker != null && !m_ColorPicker.AnyInputActive"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_ColorSlope,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorSlope.cs,Update,The conditional expression  "m_CutoffInputField != null && !m_CutoffInputField.IsFocused  					&& m_ColorPickerOne != null && !m_ColorPickerOne.AnyInputActive  					&& m_ColorPickerTwo != null && !m_ColorPickerTwo.AnyInputActive"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_MainMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_MainMap.cs,CreateVessels,The conditional expression  "mapInterface == null || m_VesselPrefab == null || m_MapPrefab == null || m_VesselTransform == null || m_MainMap == null"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_SettingsBackground,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsBackground.cs,CreateBodySections,The conditional expression  "bodies == null || settings == null || m_BodyInfoPrefab == null || m_BodyInfoTransform == null"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_Tooltip,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Tooltip.cs,Setup,The conditional expression  "c == null || string.IsNullOrEmpty(t) || _rectTransform == null || _handler == null"  is complex.
Complex Conditional,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnClickMap,The conditional expression  "!inMap || zoomInterface == null || m_ZoomImage == null || !(eventData is PointerEventData)"  is complex.
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorLabel.cs,UpdateValue,The following statement contains a magic number: if (picker == null)  			{  				label.OnTextUpdate.Invoke("-");  			}  			else  			{  				float valueOne = 0;  				float valueTwo = 0;  				float valueThree = 0;      				if (type == ColorValues.R)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hue)  				{  					valueOne = picker.GetValue(ColorValues.Hue) * 360;  					valueTwo = picker.GetValue(ColorValues.Saturation) * 255;  					valueThree = picker.GetValue(ColorValues.Value) * 255;    					label.OnTextUpdate.Invoke(string.Format("{0:N0}'{1:N0}'{2:N0}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  				else if (type == ColorValues.Hex)  				{  					valueOne = picker.GetValue(ColorValues.R) * 255;  					valueTwo = picker.GetValue(ColorValues.G) * 255;  					valueThree = picker.GetValue(ColorValues.B) * 255;    					label.OnTextUpdate.Invoke(string.Format("#{0:X2}{1:X2}{2:X2}"' Mathf.FloorToInt(valueOne)' Mathf.FloorToInt(valueTwo)' Mathf.FloorToInt(valueThree)));  				}  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorPicker,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorPicker.cs,HSVChanged,The following statement contains a magic number: Color color = HSVUtil.ConvertHsvToRgb(_hue * 360' _saturation' _brightness' _alpha);
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorInput,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorInput.cs,InputChanged,The following statement contains a magic number: if (f < 0)  				return;  			else if (input.StartsWith("1."))  				f = 1;  			else if (f >= 1 && f <= 255)  			{  				f = Mathf.RoundToInt(f);    				f /= 255;  			}  			else if (f > 255)  				return;
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorInput,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorInput.cs,InputChanged,The following statement contains a magic number: if (f < 0)  				return;  			else if (input.StartsWith("1."))  				f = 1;  			else if (f >= 1 && f <= 255)  			{  				f = Mathf.RoundToInt(f);    				f /= 255;  			}  			else if (f > 255)  				return;
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorInput,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorInput.cs,InputChanged,The following statement contains a magic number: if (f < 0)  				return;  			else if (input.StartsWith("1."))  				f = 1;  			else if (f >= 1 && f <= 255)  			{  				f = Mathf.RoundToInt(f);    				f /= 255;  			}  			else if (f > 255)  				return;
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  				case ColorValues.G:  				case ColorValues.B:  				case ColorValues.A:  					size = 255;  					break;  				case ColorValues.Hue:  					size = 360;  					break;  				case ColorValues.Saturation:  				case ColorValues.Value:  					size = 100;  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  				case ColorValues.G:  				case ColorValues.B:  				case ColorValues.A:  					size = 255;  					break;  				case ColorValues.Hue:  					size = 360;  					break;  				case ColorValues.Saturation:  				case ColorValues.Value:  					size = 100;  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  				case ColorValues.G:  				case ColorValues.B:  				case ColorValues.A:  					size = 255;  					break;  				case ColorValues.Hue:  					size = 360;  					break;  				case ColorValues.Saturation:  				case ColorValues.Value:  					size = 100;  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' baseColor.g' baseColor.b' 255);  					}  					break;  				case ColorValues.G:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' i' baseColor.b' 255);  					}  					break;  				case ColorValues.B:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' baseColor.g' i' 255);  					}  					break;  				case ColorValues.A:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' i' i' 255);  					}  					break;  				case ColorValues.Hue:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(i' 1' 1' 1);  					}  					break;  				case ColorValues.Saturation:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' (float)i / size' v' 1);  					}  					break;  				case ColorValues.Value:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' s' (float)i / size' 1);  					}  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' baseColor.g' baseColor.b' 255);  					}  					break;  				case ColorValues.G:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' i' baseColor.b' 255);  					}  					break;  				case ColorValues.B:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' baseColor.g' i' 255);  					}  					break;  				case ColorValues.A:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' i' i' 255);  					}  					break;  				case ColorValues.Hue:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(i' 1' 1' 1);  					}  					break;  				case ColorValues.Saturation:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' (float)i / size' v' 1);  					}  					break;  				case ColorValues.Value:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' s' (float)i / size' 1);  					}  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' baseColor.g' baseColor.b' 255);  					}  					break;  				case ColorValues.G:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' i' baseColor.b' 255);  					}  					break;  				case ColorValues.B:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' baseColor.g' i' 255);  					}  					break;  				case ColorValues.A:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' i' i' 255);  					}  					break;  				case ColorValues.Hue:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(i' 1' 1' 1);  					}  					break;  				case ColorValues.Saturation:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' (float)i / size' v' 1);  					}  					break;  				case ColorValues.Value:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' s' (float)i / size' 1);  					}  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' baseColor.g' baseColor.b' 255);  					}  					break;  				case ColorValues.G:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' i' baseColor.b' 255);  					}  					break;  				case ColorValues.B:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' baseColor.g' i' 255);  					}  					break;  				case ColorValues.A:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' i' i' 255);  					}  					break;  				case ColorValues.Hue:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(i' 1' 1' 1);  					}  					break;  				case ColorValues.Saturation:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' (float)i / size' v' 1);  					}  					break;  				case ColorValues.Value:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' s' (float)i / size' 1);  					}  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' baseColor.g' baseColor.b' 255);  					}  					break;  				case ColorValues.G:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' i' baseColor.b' 255);  					}  					break;  				case ColorValues.B:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' baseColor.g' i' 255);  					}  					break;  				case ColorValues.A:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' i' i' 255);  					}  					break;  				case ColorValues.Hue:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(i' 1' 1' 1);  					}  					break;  				case ColorValues.Saturation:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' (float)i / size' v' 1);  					}  					break;  				case ColorValues.Value:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' s' (float)i / size' 1);  					}  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (type)  			{  				case ColorValues.R:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' baseColor.g' baseColor.b' 255);  					}  					break;  				case ColorValues.G:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' i' baseColor.b' 255);  					}  					break;  				case ColorValues.B:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r' baseColor.g' i' 255);  					}  					break;  				case ColorValues.A:  					for (byte i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = new Color32(i' i' i' 255);  					}  					break;  				case ColorValues.Hue:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(i' 1' 1' 1);  					}  					break;  				case ColorValues.Saturation:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' (float)i / size' v' 1);  					}  					break;  				case ColorValues.Value:  					for (int i = 0; i < size; i++)  					{  						colors[inverted ? size - 1 - i : i] = HSVUtil.ConvertHsvToRgb(h * 360' s' (float)i / size' 1);  					}  					break;  				default:  					throw new System.NotImplementedException("");  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (direction)  			{  				case Slider.Direction.BottomToTop:  				case Slider.Direction.TopToBottom:  					image.uvRect = new Rect(0' 0' 2' 1);  					break;  				case Slider.Direction.LeftToRight:  				case Slider.Direction.RightToLeft:  					image.uvRect = new Rect(0' 0' 1' 2);  					break;  				default:  					break;  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,ColorSliderImage,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorSliderImage.cs,RegenerateTexture,The following statement contains a magic number: switch (direction)  			{  				case Slider.Direction.BottomToTop:  				case Slider.Direction.TopToBottom:  					image.uvRect = new Rect(0' 0' 2' 1);  					break;  				case Slider.Direction.LeftToRight:  				case Slider.Direction.RightToLeft:  					image.uvRect = new Rect(0' 0' 1' 2);  					break;  				default:  					break;  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: double h = picker != null ? picker.H * 360 : 0;
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: Texture2D texture = new Texture2D(100' 100);
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: Texture2D texture = new Texture2D(100' 100);
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: for (int s = 0; s < 100; s++)  			{  				Color32[] colors = new Color32[100];  				for (int v = 0; v < 100; v++)  				{  					colors[v] = HSVUtil.ConvertHsvToRgb(h' (float)s / 100' (float)v / 100' 1);  				}  				texture.SetPixels32(s' 0' 1' 100' colors);  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: for (int s = 0; s < 100; s++)  			{  				Color32[] colors = new Color32[100];  				for (int v = 0; v < 100; v++)  				{  					colors[v] = HSVUtil.ConvertHsvToRgb(h' (float)s / 100' (float)v / 100' 1);  				}  				texture.SetPixels32(s' 0' 1' 100' colors);  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: for (int s = 0; s < 100; s++)  			{  				Color32[] colors = new Color32[100];  				for (int v = 0; v < 100; v++)  				{  					colors[v] = HSVUtil.ConvertHsvToRgb(h' (float)s / 100' (float)v / 100' 1);  				}  				texture.SetPixels32(s' 0' 1' 100' colors);  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: for (int s = 0; s < 100; s++)  			{  				Color32[] colors = new Color32[100];  				for (int v = 0; v < 100; v++)  				{  					colors[v] = HSVUtil.ConvertHsvToRgb(h' (float)s / 100' (float)v / 100' 1);  				}  				texture.SetPixels32(s' 0' 1' 100' colors);  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: for (int s = 0; s < 100; s++)  			{  				Color32[] colors = new Color32[100];  				for (int v = 0; v < 100; v++)  				{  					colors[v] = HSVUtil.ConvertHsvToRgb(h' (float)s / 100' (float)v / 100' 1);  				}  				texture.SetPixels32(s' 0' 1' 100' colors);  			}
Magic Number,SCANsat.Unity.HSVPicker.UI,SVBoxSlider,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\SVBoxSlider.cs,RegenerateSVTexture,The following statement contains a magic number: for (int s = 0; s < 100; s++)  			{  				Color32[] colors = new Color32[100];  				for (int v = 0; v < 100; v++)  				{  					colors[v] = HSVUtil.ConvertHsvToRgb(h' (float)s / 100' (float)v / 100' 1);  				}  				texture.SetPixels32(s' 0' 1' 100' colors);  			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: return ConvertRgbToHsv((int)(color.r * 255)' (int)(color.g * 255)' (int)(color.b * 255));
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: return ConvertRgbToHsv((int)(color.r * 255)' (int)(color.g * 255)' (int)(color.b * 255));
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: return ConvertRgbToHsv((int)(color.r * 255)' (int)(color.g * 255)' (int)(color.b * 255));
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: if (s == 0)  				h = 360;  			else  			{  				if (r == v)  					h = (g - b) / delta;  				else if (g == v)  					h = 2 + (b - r) / delta;  				else if (b == v)  					h = 4 + (r - g) / delta;    				h *= 60;  				if (h <= 0.0)  					h += 360;  			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: if (s == 0)  				h = 360;  			else  			{  				if (r == v)  					h = (g - b) / delta;  				else if (g == v)  					h = 2 + (b - r) / delta;  				else if (b == v)  					h = 4 + (r - g) / delta;    				h *= 60;  				if (h <= 0.0)  					h += 360;  			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: if (s == 0)  				h = 360;  			else  			{  				if (r == v)  					h = (g - b) / delta;  				else if (g == v)  					h = 2 + (b - r) / delta;  				else if (b == v)  					h = 4 + (r - g) / delta;    				h *= 60;  				if (h <= 0.0)  					h += 360;  			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: if (s == 0)  				h = 360;  			else  			{  				if (r == v)  					h = (g - b) / delta;  				else if (g == v)  					h = 2 + (b - r) / delta;  				else if (b == v)  					h = 4 + (r - g) / delta;    				h *= 60;  				if (h <= 0.0)  					h += 360;  			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: if (s == 0)  				h = 360;  			else  			{  				if (r == v)  					h = (g - b) / delta;  				else if (g == v)  					h = 2 + (b - r) / delta;  				else if (b == v)  					h = 4 + (r - g) / delta;    				h *= 60;  				if (h <= 0.0)  					h += 360;  			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: hsvColor.H = 360 - h;
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertRgbToHsv,The following statement contains a magic number: hsvColor.V = v / 255;
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertHsvToRgb,The following statement contains a magic number: if (s == 0)  			{  				r = v;  				g = v;  				b = v;  			}    			else  			{  				int i;  				double f' p' q' t;      				if (h == 360)  					h = 0;  				else  					h = h / 60;    				i = (int)(h);  				f = h - i;    				p = v * (1.0 - s);  				q = v * (1.0 - (s * f));  				t = v * (1.0 - (s * (1.0f - f)));      				switch (i)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;    					case 1:  						r = q;  						g = v;  						b = p;  						break;    					case 2:  						r = p;  						g = v;  						b = t;  						break;    					case 3:  						r = p;  						g = q;  						b = v;  						break;    					case 4:  						r = t;  						g = p;  						b = v;  						break;    					default:  						r = v;  						g = p;  						b = q;  						break;  				}    			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertHsvToRgb,The following statement contains a magic number: if (s == 0)  			{  				r = v;  				g = v;  				b = v;  			}    			else  			{  				int i;  				double f' p' q' t;      				if (h == 360)  					h = 0;  				else  					h = h / 60;    				i = (int)(h);  				f = h - i;    				p = v * (1.0 - s);  				q = v * (1.0 - (s * f));  				t = v * (1.0 - (s * (1.0f - f)));      				switch (i)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;    					case 1:  						r = q;  						g = v;  						b = p;  						break;    					case 2:  						r = p;  						g = v;  						b = t;  						break;    					case 3:  						r = p;  						g = q;  						b = v;  						break;    					case 4:  						r = t;  						g = p;  						b = v;  						break;    					default:  						r = v;  						g = p;  						b = q;  						break;  				}    			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertHsvToRgb,The following statement contains a magic number: if (s == 0)  			{  				r = v;  				g = v;  				b = v;  			}    			else  			{  				int i;  				double f' p' q' t;      				if (h == 360)  					h = 0;  				else  					h = h / 60;    				i = (int)(h);  				f = h - i;    				p = v * (1.0 - s);  				q = v * (1.0 - (s * f));  				t = v * (1.0 - (s * (1.0f - f)));      				switch (i)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;    					case 1:  						r = q;  						g = v;  						b = p;  						break;    					case 2:  						r = p;  						g = v;  						b = t;  						break;    					case 3:  						r = p;  						g = q;  						b = v;  						break;    					case 4:  						r = t;  						g = p;  						b = v;  						break;    					default:  						r = v;  						g = p;  						b = q;  						break;  				}    			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertHsvToRgb,The following statement contains a magic number: if (s == 0)  			{  				r = v;  				g = v;  				b = v;  			}    			else  			{  				int i;  				double f' p' q' t;      				if (h == 360)  					h = 0;  				else  					h = h / 60;    				i = (int)(h);  				f = h - i;    				p = v * (1.0 - s);  				q = v * (1.0 - (s * f));  				t = v * (1.0 - (s * (1.0f - f)));      				switch (i)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;    					case 1:  						r = q;  						g = v;  						b = p;  						break;    					case 2:  						r = p;  						g = v;  						b = t;  						break;    					case 3:  						r = p;  						g = q;  						b = v;  						break;    					case 4:  						r = t;  						g = p;  						b = v;  						break;    					default:  						r = v;  						g = p;  						b = q;  						break;  				}    			}
Magic Number,SCANsat.Unity.HSVPicker.Utility,HSVUtil,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UtilityScripts\HSVUtil.cs,ConvertHsvToRgb,The following statement contains a magic number: if (s == 0)  			{  				r = v;  				g = v;  				b = v;  			}    			else  			{  				int i;  				double f' p' q' t;      				if (h == 360)  					h = 0;  				else  					h = h / 60;    				i = (int)(h);  				f = h - i;    				p = v * (1.0 - s);  				q = v * (1.0 - (s * f));  				t = v * (1.0 - (s * (1.0f - f)));      				switch (i)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;    					case 1:  						r = q;  						g = v;  						b = p;  						break;    					case 2:  						r = p;  						g = v;  						b = t;  						break;    					case 3:  						r = p;  						g = q;  						b = v;  						break;    					case 4:  						r = t;  						g = p;  						b = v;  						break;    					default:  						r = v;  						g = p;  						b = q;  						break;  				}    			}
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnMinChange,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnMinChange,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnMinChange,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnMaxChange,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnMaxChange,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,OnMaxChange,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMinSlider,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainGlobalMin * 100)) / 100);
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMinSlider,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainGlobalMin * 100)) / 100);
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMinSlider,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMinSlider,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMinSlider,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMaxSlider,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMaxSlider,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMaxSlider,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 200;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMaxSlider,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainGlobalMax * 100)) / 100);
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetMaxSlider,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainGlobalMax * 100)) / 100);
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetClamp,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetClamp,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetClamp,The following statement contains a magic number: float min = (((int)(colorInterface.TerrainCurrentMin * 100)) / 100) + 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetClamp,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetClamp,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorAltimetry,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorAltimetry.cs,SetClamp,The following statement contains a magic number: float max = (((int)(colorInterface.TerrainCurrentMax * 100)) / 100) - 100;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,Update,The following statement contains a magic number: if (tooltipOn)  			{  				RectTransformUtility.ScreenPointToLocalPointInRectangle(m_LegendImage.rectTransform' Input.mousePosition' bigInterface.MainCanvas.worldCamera' out rectPos);    				float halfWidth = m_LegendImage.rectTransform.rect.width / 2;    				float legendXPos = (rectPos.x + halfWidth) / m_LegendImage.rectTransform.rect.width;    				if (_tooltip != null)  					_tooltip.UpdateText(bigInterface.TooltipText(legendXPos));  			}
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,ScreenPosition,The following statement contains a magic number: Vector3[] corners = new Vector3[4];
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetButtons,The following statement contains a magic number: switch(i)  			{  				case -1:  					if (m_SmallMapButton != null)  						m_SmallMapButton.SetActive(false);  					if (m_ZoomMapButton != null)  						m_ZoomMapButton.SetActive(false);  					if (m_OverlayButton != null)  						m_OverlayButton.SetActive(false);  					if (m_InstrumentsButton != null)  						m_InstrumentsButton.SetActive(false);  					if (m_SettingsButton != null)  						m_SettingsButton.SetActive(false);  					break;  				case 1:  					if (m_SmallMapButton != null)  						m_SmallMapButton.SetActive(false);  					if (m_InstrumentsButton != null)  						m_InstrumentsButton.SetActive(false);  					if (m_ZoomMapButton != null)  						m_ZoomMapButton.SetActive(false);  					break;  				case 2:  					if (m_SmallMapButton != null)  						m_SmallMapButton.SetActive(false);  					if (m_OverlayButton != null)  						m_OverlayButton.SetActive(false);  					if (m_InstrumentsButton != null)  						m_InstrumentsButton.SetActive(false);  					if (m_ZoomMapButton != null)  						m_ZoomMapButton.SetActive(false);  					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x > 8192)  				size.x = 8192;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x > 8192)  				size.x = 8192;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x > 8192)  				size.x = 8192;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x > 8192)  				size.x = 8192;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: if (size.x % 2 != 0)  				size.x += 1;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: m_MapLayout.preferredWidth = size.x + 8;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: m_MapLayout.preferredHeight = m_MapLayout.preferredWidth / 2 + 8;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetSize,The following statement contains a magic number: m_MapLayout.preferredHeight = m_MapLayout.preferredWidth / 2 + 8;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetLegend,The following statement contains a magic number: if (bigInterface.CurrentMapType == "Biome")  			{  				if (m_LegendLabelOne != null)  					m_LegendLabelOne.gameObject.SetActive(false);    				if (m_LegendLabelTwo != null)  					m_LegendLabelTwo.gameObject.SetActive(false);    				if (m_LegendLabelThree != null)  					m_LegendLabelThree.gameObject.SetActive(false);  			}  			else  			{  				IList<string> labels = bigInterface.LegendLabels;    				if (labels == null || labels.Count != 3)  					return;    				if (m_LegendLabelOne != null)  				{  					m_LegendLabelOne.gameObject.SetActive(true);  					m_LegendLabelOne.OnTextUpdate.Invoke(labels[0]);  				}    				if (m_LegendLabelTwo != null)  				{  					m_LegendLabelTwo.gameObject.SetActive(true);  					m_LegendLabelTwo.OnTextUpdate.Invoke(labels[1]);  				}    				if (m_LegendLabelThree != null)  				{  					m_LegendLabelThree.gameObject.SetActive(true);  					m_LegendLabelThree.OnTextUpdate.Invoke(labels[2]);  				}  			}
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetLegend,The following statement contains a magic number: if (bigInterface.CurrentMapType == "Biome")  			{  				if (m_LegendLabelOne != null)  					m_LegendLabelOne.gameObject.SetActive(false);    				if (m_LegendLabelTwo != null)  					m_LegendLabelTwo.gameObject.SetActive(false);    				if (m_LegendLabelThree != null)  					m_LegendLabelThree.gameObject.SetActive(false);  			}  			else  			{  				IList<string> labels = bigInterface.LegendLabels;    				if (labels == null || labels.Count != 3)  					return;    				if (m_LegendLabelOne != null)  				{  					m_LegendLabelOne.gameObject.SetActive(true);  					m_LegendLabelOne.OnTextUpdate.Invoke(labels[0]);  				}    				if (m_LegendLabelTwo != null)  				{  					m_LegendLabelTwo.gameObject.SetActive(true);  					m_LegendLabelTwo.OnTextUpdate.Invoke(labels[1]);  				}    				if (m_LegendLabelThree != null)  				{  					m_LegendLabelThree.gameObject.SetActive(true);  					m_LegendLabelThree.OnTextUpdate.Invoke(labels[2]);  				}  			}
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnResize,The following statement contains a magic number: if (m_MapLayout.preferredWidth < m_MapLayout.minWidth)  				m_MapLayout.preferredWidth = m_MapLayout.minWidth;  			else if (m_MapLayout.preferredWidth > 8200)  				m_MapLayout.preferredWidth = 8200;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnResize,The following statement contains a magic number: if (m_MapLayout.preferredWidth < m_MapLayout.minWidth)  				m_MapLayout.preferredWidth = m_MapLayout.minWidth;  			else if (m_MapLayout.preferredWidth > 8200)  				m_MapLayout.preferredWidth = 8200;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnResize,The following statement contains a magic number: if (m_MapLayout.preferredWidth % 2 != 0)  				m_MapLayout.preferredWidth += 1;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnResize,The following statement contains a magic number: m_MapLayout.preferredHeight = m_MapLayout.preferredWidth / 2;
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnEndResize,The following statement contains a magic number: bigInterface.Size = new Vector2(m_MapLayout.preferredWidth - 8' m_MapLayout.preferredHeight - 8);
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,OnEndResize,The following statement contains a magic number: bigInterface.Size = new Vector2(m_MapLayout.preferredWidth - 8' m_MapLayout.preferredHeight - 8);
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = bigInterface.WaypointSprite'  				pos = mapPos'  				baseColor = Color.white'  				flash = false'  				width = 20'  				alignBottom = 10'  				show = true  			};
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = bigInterface.WaypointSprite'  				pos = mapPos'  				baseColor = Color.white'  				flash = false'  				width = 20'  				alignBottom = 10'  				show = true  			};
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,HoverWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = bigInterface.WaypointSprite'  				pos = new Vector2()'  				baseColor = Color.white'  				flashColor = Color.red'  				flash = true'  				width = 20'  				alignBottom = 10'  				show = false  			};
Magic Number,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,HoverWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = bigInterface.WaypointSprite'  				pos = new Vector2()'  				baseColor = Color.white'  				flashColor = Color.red'  				flash = true'  				width = 20'  				alignBottom = 10'  				show = false  			};
Magic Number,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,OnMinInputChange,The following statement contains a magic number: float min = SCAN_ColorControl.ParseInput(input' m_MinSlider.value' m_MinSlider.minValue' m_MinSlider.maxValue' 2);
Magic Number,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,OnMaxChange,The following statement contains a magic number: if (value < min)  				value = min;  			else if (value > 100)  				value = 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,OnMaxChange,The following statement contains a magic number: if (value < min)  				value = min;  			else if (value > 100)  				value = 100;
Magic Number,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,OnMaxInputChange,The following statement contains a magic number: float max = SCAN_ColorControl.ParseInput(input' m_MaxSlider.value' m_MaxSlider.minValue' m_MaxSlider.maxValue' 2);
Magic Number,SCANsat.Unity.Unity,SCAN_ColorResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ColorResource.cs,SetMaxSlider,The following statement contains a magic number: m_MaxSlider.maxValue = 100;
Magic Number,SCANsat.Unity.Unity,SCAN_DropDown,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_DropDown.cs,Setup,The following statement contains a magic number: if (m_Layout != null)  			{  				float height = elements.Count * 25;    				height += 5;    				if (height > 155)  					height = 155;    				m_Layout.preferredHeight = height;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_DropDown,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_DropDown.cs,Setup,The following statement contains a magic number: if (m_Layout != null)  			{  				float height = elements.Count * 25;    				height += 5;    				if (height > 155)  					height = 155;    				m_Layout.preferredHeight = height;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_DropDown,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_DropDown.cs,Setup,The following statement contains a magic number: if (m_Layout != null)  			{  				float height = elements.Count * 25;    				height += 5;    				if (height > 155)  					height = 155;    				m_Layout.preferredHeight = height;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_DropDown,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_DropDown.cs,Setup,The following statement contains a magic number: if (m_Layout != null)  			{  				float height = elements.Count * 25;    				height += 5;    				if (height > 155)  					height = 155;    				m_Layout.preferredHeight = height;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_Instruments,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Instruments.cs,SetResourceButtons,The following statement contains a magic number: float y = -1 * lines * 24;
Magic Number,SCANsat.Unity.Unity,SCAN_MapLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_MapLabel.cs,Setup,The following statement contains a magic number: if (rect != null)  				rect.anchoredPosition = new Vector2(rect.anchoredPosition.x - (info.width / 2)' rect.anchoredPosition.y + info.alignBottom);
Magic Number,SCANsat.Unity.Unity,SCAN_MapLabel,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_MapLabel.cs,UpdatePosition,The following statement contains a magic number: if (rect != null)  				rect.anchoredPosition = new Vector2(p.x - (label.width / 2)' p.y + label.alignBottom);
Magic Number,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,setSettings,The following statement contains a magic number: switch (page)              {                  case 0:                      if (m_GeneralToggle != null)                          m_GeneralToggle.isOn = true;                      break;                  case 1:                      if (m_BackgroundToggle != null)                          m_BackgroundToggle.isOn = true;                      break;                  case 2:                      if (m_ResourceToggle != null)                          m_ResourceToggle.isOn = true;                      break;                  case 3:                      if (m_DataToggle != null)                          m_DataToggle.isOn = true;                      break;                  case 4:                      if (m_ColorToggle != null)                          m_ColorToggle.isOn = true;                      break;                  default:                      if (m_GeneralToggle != null)                          m_GeneralToggle.isOn = true;                      break;              }
Magic Number,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,setSettings,The following statement contains a magic number: switch (page)              {                  case 0:                      if (m_GeneralToggle != null)                          m_GeneralToggle.isOn = true;                      break;                  case 1:                      if (m_BackgroundToggle != null)                          m_BackgroundToggle.isOn = true;                      break;                  case 2:                      if (m_ResourceToggle != null)                          m_ResourceToggle.isOn = true;                      break;                  case 3:                      if (m_DataToggle != null)                          m_DataToggle.isOn = true;                      break;                  case 4:                      if (m_ColorToggle != null)                          m_ColorToggle.isOn = true;                      break;                  default:                      if (m_GeneralToggle != null)                          m_GeneralToggle.isOn = true;                      break;              }
Magic Number,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,setSettings,The following statement contains a magic number: switch (page)              {                  case 0:                      if (m_GeneralToggle != null)                          m_GeneralToggle.isOn = true;                      break;                  case 1:                      if (m_BackgroundToggle != null)                          m_BackgroundToggle.isOn = true;                      break;                  case 2:                      if (m_ResourceToggle != null)                          m_ResourceToggle.isOn = true;                      break;                  case 3:                      if (m_DataToggle != null)                          m_DataToggle.isOn = true;                      break;                  case 4:                      if (m_ColorToggle != null)                          m_ColorToggle.isOn = true;                      break;                  default:                      if (m_GeneralToggle != null)                          m_GeneralToggle.isOn = true;                      break;              }
Magic Number,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,ResourceSettings,The following statement contains a magic number: _page = 2;
Magic Number,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,DataSettings,The following statement contains a magic number: _page = 3;
Magic Number,SCANsat.Unity.Unity,SCAN_Settings,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Settings.cs,ColorSettings,The following statement contains a magic number: _page = 4;
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,SetMapWidth,The following statement contains a magic number: if (int.TryParse(m_MapWidthInputHandler.Text' out width))  			{  				if (width % 2 != 0)  					width += 1;    				if (width > 8192)  					width = 8192;  				else if (width < 560)  					width = 560;    				m_MapWidthInputHandler.OnTextUpdate.Invoke(width.ToString());    				settings.MapWidth = width;    				if (m_MapWidth != null)  					m_MapWidth.OnTextUpdate.Invoke("Map Width: " + width.ToString());  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,SetMapWidth,The following statement contains a magic number: if (int.TryParse(m_MapWidthInputHandler.Text' out width))  			{  				if (width % 2 != 0)  					width += 1;    				if (width > 8192)  					width = 8192;  				else if (width < 560)  					width = 560;    				m_MapWidthInputHandler.OnTextUpdate.Invoke(width.ToString());    				settings.MapWidth = width;    				if (m_MapWidth != null)  					m_MapWidth.OnTextUpdate.Invoke("Map Width: " + width.ToString());  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,SetMapWidth,The following statement contains a magic number: if (int.TryParse(m_MapWidthInputHandler.Text' out width))  			{  				if (width % 2 != 0)  					width += 1;    				if (width > 8192)  					width = 8192;  				else if (width < 560)  					width = 560;    				m_MapWidthInputHandler.OnTextUpdate.Invoke(width.ToString());    				settings.MapWidth = width;    				if (m_MapWidth != null)  					m_MapWidth.OnTextUpdate.Invoke("Map Width: " + width.ToString());  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,SetMapWidth,The following statement contains a magic number: if (int.TryParse(m_MapWidthInputHandler.Text' out width))  			{  				if (width % 2 != 0)  					width += 1;    				if (width > 8192)  					width = 8192;  				else if (width < 560)  					width = 560;    				m_MapWidthInputHandler.OnTextUpdate.Invoke(width.ToString());    				settings.MapWidth = width;    				if (m_MapWidth != null)  					m_MapWidth.OnTextUpdate.Invoke("Map Width: " + width.ToString());  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,SetMapWidth,The following statement contains a magic number: if (int.TryParse(m_MapWidthInputHandler.Text' out width))  			{  				if (width % 2 != 0)  					width += 1;    				if (width > 8192)  					width = 8192;  				else if (width < 560)  					width = 560;    				m_MapWidthInputHandler.OnTextUpdate.Invoke(width.ToString());    				settings.MapWidth = width;    				if (m_MapWidth != null)  					m_MapWidth.OnTextUpdate.Invoke("Map Width: " + width.ToString());  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsData,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsData.cs,MapTypeDropDown,The following statement contains a magic number: SCAN_Settings.Instance.DropDown.Setup(settings.MapDataTypes' settings.CurrentMapData' 12);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsGeneral,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsGeneral.cs,setup,The following statement contains a magic number: if (m_UIScaleSlider != null)  				m_UIScaleSlider.value = set.UIScale * 100;
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsGeneral,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsGeneral.cs,UISlider,The following statement contains a magic number: m_UIScale.OnTextUpdate.Invoke("UI Scale: " + (scale / 100).ToString("P0"));
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsGeneral,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsGeneral.cs,SetUIScale,The following statement contains a magic number: settings.UIScale = m_UIScaleSlider.value / 100;
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,SetThreshold,The following statement contains a magic number: if (float.TryParse(m_ThresholdInput.Text' out value))  			{  				value /= 100;    				if (value < 0)  					value = 0;  				else if (value > 1)  					value = 1;    				m_ThresholdInput.OnTextUpdate.Invoke((value * 100).ToString("N0"));    				settings.StockThresholdValue = value;    				if (m_StockThresholdValue != null)  					m_StockThresholdValue.OnTextUpdate.Invoke("Stock Scan Threshold: " + value.ToString("P0"));  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,SetThreshold,The following statement contains a magic number: if (float.TryParse(m_ThresholdInput.Text' out value))  			{  				value /= 100;    				if (value < 0)  					value = 0;  				else if (value > 1)  					value = 1;    				m_ThresholdInput.OnTextUpdate.Invoke((value * 100).ToString("N0"));    				settings.StockThresholdValue = value;    				if (m_StockThresholdValue != null)  					m_StockThresholdValue.OnTextUpdate.Invoke("Stock Scan Threshold: " + value.ToString("P0"));  			}
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,InterpolationDown,The following statement contains a magic number: settings.Interpolation = Math.Max(2' settings.Interpolation / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,InterpolationDown,The following statement contains a magic number: settings.Interpolation = Math.Max(2' settings.Interpolation / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,InterpolationUp,The following statement contains a magic number: settings.Interpolation = Math.Min(32' settings.Interpolation * 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,InterpolationUp,The following statement contains a magic number: settings.Interpolation = Math.Min(32' settings.Interpolation * 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,MapHeightDown,The following statement contains a magic number: settings.MapHeight = Math.Max(64' settings.MapHeight / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,MapHeightDown,The following statement contains a magic number: settings.MapHeight = Math.Max(64' settings.MapHeight / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,MapHeightUp,The following statement contains a magic number: settings.MapHeight = Math.Min(1024' settings.MapHeight * 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,MapHeightUp,The following statement contains a magic number: settings.MapHeight = Math.Min(1024' settings.MapHeight * 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,BiomeMapHeightDown,The following statement contains a magic number: settings.BiomeMapHeight = Math.Max(256' settings.BiomeMapHeight / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,BiomeMapHeightDown,The following statement contains a magic number: settings.BiomeMapHeight = Math.Max(256' settings.BiomeMapHeight / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,BiomeMapHeightUp,The following statement contains a magic number: settings.BiomeMapHeight = Math.Min(1024' settings.BiomeMapHeight * 2);
Magic Number,SCANsat.Unity.Unity,SCAN_SettingsResource,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_SettingsResource.cs,BiomeMapHeightUp,The following statement contains a magic number: settings.BiomeMapHeight = Math.Min(1024' settings.BiomeMapHeight * 2);
Magic Number,SCANsat.Unity.Unity,SCAN_Tooltip,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Tooltip.cs,OnScreenSpaceCamera,The following statement contains a magic number: val = (newPosWVP.x + width / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_Tooltip,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_Tooltip.cs,OnScreenSpaceCamera,The following statement contains a magic number: val = (newPosWVP.x - width / 2);
Magic Number,SCANsat.Unity.Unity,SCAN_VesselInfo,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_VesselInfo.cs,SetVessel,The following statement contains a magic number: label.name = !string.IsNullOrEmpty(label.name) && label.name.Length > 26 ? label.name.Substring(0' 26) : label.name;
Magic Number,SCANsat.Unity.Unity,SCAN_VesselInfo,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_VesselInfo.cs,SetVessel,The following statement contains a magic number: label.name = !string.IsNullOrEmpty(label.name) && label.name.Length > 26 ? label.name.Substring(0' 26) : label.name;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,Update,The following statement contains a magic number: if (tooltipOn)  			{  				RectTransformUtility.ScreenPointToLocalPointInRectangle(m_LegendImage.rectTransform' Input.mousePosition' zoomInterface.MainCanvas.worldCamera' out rectPos);    				float halfWidth = m_LegendImage.rectTransform.rect.width / 2;    				float legendXPos = (rectPos.x + halfWidth) / m_LegendImage.rectTransform.rect.width;    				if (_tooltip != null)  					_tooltip.UpdateText(zoomInterface.TooltipText(legendXPos));  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x + 8 > m_MaxWidth)  				size.x = m_MaxWidth - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x + 8 > m_MaxWidth)  				size.x = m_MaxWidth - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x + 8 > m_MaxWidth)  				size.x = m_MaxWidth - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x + 8 < m_MapLayout.minWidth)  				size.x = m_MapLayout.minWidth - 8;  			else if (size.x + 8 > m_MaxWidth)  				size.x = m_MaxWidth - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y + 8 < m_MapLayout.minHeight)  				size.y = m_MapLayout.minHeight - 8;  			else if (size.y + 8 > m_MaxHeight)  				size.y = m_MaxHeight - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y + 8 < m_MapLayout.minHeight)  				size.y = m_MapLayout.minHeight - 8;  			else if (size.y + 8 > m_MaxHeight)  				size.y = m_MaxHeight - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y + 8 < m_MapLayout.minHeight)  				size.y = m_MapLayout.minHeight - 8;  			else if (size.y + 8 > m_MaxHeight)  				size.y = m_MaxHeight - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y + 8 < m_MapLayout.minHeight)  				size.y = m_MapLayout.minHeight - 8;  			else if (size.y + 8 > m_MaxHeight)  				size.y = m_MaxHeight - 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x % 2 != 0)  				size.x += 1;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y % 2 != 0)  				size.y += 1;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x % 4 != 0)  				size.x += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.x % 4 != 0)  				size.x += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y % 4 != 0)  				size.y += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: if (size.y % 4 != 0)  				size.y += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: m_MapLayout.preferredWidth = size.x + 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetSize,The following statement contains a magic number: m_MapLayout.preferredHeight = size.y + 8;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following statement contains a magic number: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetLegend,The following statement contains a magic number: if (zoomInterface.CurrentMapType == "Biome")  			{  				if (m_LegendLabelOne != null)  					m_LegendLabelOne.gameObject.SetActive(false);    				if (m_LegendLabelTwo != null)  					m_LegendLabelTwo.gameObject.SetActive(false);    				if (m_LegendLabelThree != null)  					m_LegendLabelThree.gameObject.SetActive(false);  			}  			else  			{  				IList<string> labels = zoomInterface.LegendLabels;    				if (labels == null || labels.Count != 3)  					return;    				if (m_LegendLabelOne != null)  				{  					m_LegendLabelOne.gameObject.SetActive(true);  					m_LegendLabelOne.OnTextUpdate.Invoke(labels[0]);  				}    				if (m_LegendLabelTwo != null)  				{  					m_LegendLabelTwo.gameObject.SetActive(true);  					m_LegendLabelTwo.OnTextUpdate.Invoke(labels[1]);  				}    				if (m_LegendLabelThree != null)  				{  					m_LegendLabelThree.gameObject.SetActive(true);  					m_LegendLabelThree.OnTextUpdate.Invoke(labels[2]);  				}  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetLegend,The following statement contains a magic number: if (zoomInterface.CurrentMapType == "Biome")  			{  				if (m_LegendLabelOne != null)  					m_LegendLabelOne.gameObject.SetActive(false);    				if (m_LegendLabelTwo != null)  					m_LegendLabelTwo.gameObject.SetActive(false);    				if (m_LegendLabelThree != null)  					m_LegendLabelThree.gameObject.SetActive(false);  			}  			else  			{  				IList<string> labels = zoomInterface.LegendLabels;    				if (labels == null || labels.Count != 3)  					return;    				if (m_LegendLabelOne != null)  				{  					m_LegendLabelOne.gameObject.SetActive(true);  					m_LegendLabelOne.OnTextUpdate.Invoke(labels[0]);  				}    				if (m_LegendLabelTwo != null)  				{  					m_LegendLabelTwo.gameObject.SetActive(true);  					m_LegendLabelTwo.OnTextUpdate.Invoke(labels[1]);  				}    				if (m_LegendLabelThree != null)  				{  					m_LegendLabelThree.gameObject.SetActive(true);  					m_LegendLabelThree.OnTextUpdate.Invoke(labels[2]);  				}  			}
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = zoomInterface.WaypointSprite'  				pos = mapPos'  				baseColor = Color.white'  				flash = false'  				width = 20'  				alignBottom = 10'  				show = true  			};
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = zoomInterface.WaypointSprite'  				pos = mapPos'  				baseColor = Color.white'  				flash = false'  				width = 20'  				alignBottom = 10'  				show = true  			};
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,The following statement contains a magic number: if (width % 2 != 0)  				width += 1;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,The following statement contains a magic number: if (width % 4 != 0)  				width += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,The following statement contains a magic number: if (width % 4 != 0)  				width += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,The following statement contains a magic number: if (height % 2 != 0)  				height += 1;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,The following statement contains a magic number: if (height % 4 != 0)  				height += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnResize,The following statement contains a magic number: if (height % 4 != 0)  				height += 2;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnEndResize,The following statement contains a magic number: zoomInterface.Size = new Vector2(m_MapLayout.preferredWidth - 8' m_MapLayout.preferredHeight - 8);
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,OnEndResize,The following statement contains a magic number: zoomInterface.Size = new Vector2(m_MapLayout.preferredWidth - 8' m_MapLayout.preferredHeight - 8);
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,ToggleWindowState,The following statement contains a magic number: if (i > 2)  				i = 0;
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,MoveUp,The following statement contains a magic number: zoomInterface.MoveMap(2);
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,MoveDown,The following statement contains a magic number: zoomInterface.MoveMap(3);
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,HoverWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = zoomInterface.WaypointSprite'  				pos = new Vector2()'  				baseColor = Color.white'  				flashColor = Color.red'  				flash = true'  				width = 20'  				alignBottom = 10'  				show = false  			};
Magic Number,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,HoverWaypoint,The following statement contains a magic number: MapLabelInfo info = new MapLabelInfo()  			{  				label = ""'  				image = zoomInterface.WaypointSprite'  				pos = new Vector2()'  				baseColor = Color.white'  				flashColor = Color.red'  				flash = true'  				width = 20'  				alignBottom = 10'  				show = false  			};
Missing Default,SCANsat.Unity.HSVPicker.UI,ColorInput,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\HSVPicker\UI\ColorInput.cs,InputChanged,The following switch statement is missing a default case: switch(type)  			{  				case ColorValues.R:  					original = hsvpicker.R;  					break;  				case ColorValues.G:  					original = hsvpicker.G;  					break;  				case ColorValues.B:  					original = hsvpicker.B;  					break;  			}
Missing Default,SCANsat.Unity.Unity,SCAN_BigMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_BigMap.cs,SetButtons,The following switch statement is missing a default case: switch(i)  			{  				case -1:  					if (m_SmallMapButton != null)  						m_SmallMapButton.SetActive(false);  					if (m_ZoomMapButton != null)  						m_ZoomMapButton.SetActive(false);  					if (m_OverlayButton != null)  						m_OverlayButton.SetActive(false);  					if (m_InstrumentsButton != null)  						m_InstrumentsButton.SetActive(false);  					if (m_SettingsButton != null)  						m_SettingsButton.SetActive(false);  					break;  				case 1:  					if (m_SmallMapButton != null)  						m_SmallMapButton.SetActive(false);  					if (m_InstrumentsButton != null)  						m_InstrumentsButton.SetActive(false);  					if (m_ZoomMapButton != null)  						m_ZoomMapButton.SetActive(false);  					break;  				case 2:  					if (m_SmallMapButton != null)  						m_SmallMapButton.SetActive(false);  					if (m_OverlayButton != null)  						m_OverlayButton.SetActive(false);  					if (m_InstrumentsButton != null)  						m_InstrumentsButton.SetActive(false);  					if (m_ZoomMapButton != null)  						m_ZoomMapButton.SetActive(false);  					break;  			}
Missing Default,SCANsat.Unity.Unity,SCAN_ZoomMap,C:\repos\S-C-A-N_SCANsat\SCANsat.Unity\Unity\SCAN_ZoomMap.cs,SetWindowState,The following switch statement is missing a default case: switch (i)  			{  				case 0:  					if (m_WindowState != null && m_WindowMax != null)  						m_WindowState.sprite = m_WindowMax;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(true);    					SetLegend(zoomInterface.LegendToggle);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 14' padding.top' 6);  					}    					break;  				case 1:  					if (m_WindowState != null && m_WindowMed != null)  						m_WindowState.sprite = m_WindowMed;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(true);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(true);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  				case 2:  					if (m_WindowState != null && m_WindowMin != null)  						m_WindowState.sprite = m_WindowMin;    					if (m_TobBarObject != null)  						m_TobBarObject.SetActive(false);    					if (m_TobBarSecondObject != null)  						m_TobBarSecondObject.SetActive(false);    					if (m_ToggleBarObject != null)  						m_ToggleBarObject.SetActive(false);    					if (m_LegendBar != null)  						m_LegendBar.SetActive(false);    					if (windowLayout != null)  					{  						RectOffset padding = windowLayout.padding;    						windowLayout.padding = new RectOffset(padding.left' 18' padding.top' 18);  					}    					break;  			}
