Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Office365StarterProject.Helpers,ContactsOperations,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\ContactsOperations.cs,AddContactItemAsync,The method has 7 parameters. Parameters: fileAs' givenName' surname' jobTitle' email' workPhone' mobilePhone
Long Parameter List,Office365StarterProject.Helpers,ContactsOperations,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\ContactsOperations.cs,UpdateContactItemAsync,The method has 8 parameters. Parameters: selectedContactId' fileAs' givenName' surname' jobTitle' email' workPhone' mobilePhone
Long Parameter List,Office365StarterProject.Helpers,CalendarOperations,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\CalendarOperations.cs,AddCalendarEventAsync,The method has 8 parameters. Parameters: LocationName' BodyContent' Attendees' EventName' start' end' startTime' endTime
Long Parameter List,Office365StarterProject.Helpers,CalendarOperations,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\CalendarOperations.cs,UpdateCalendarEventAsync,The method has 9 parameters. Parameters: selectedEventId' LocationName' BodyContent' Attendees' EventName' start' end' startTime' endTime
Long Statement,Office365StarterProject,MainPage,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\MainPage.xaml.cs,OnNavigatedTo,The length of the statement  "                MessageDialogHelper.ShowDialogAsync("To run this sample' you must register it with Office 365. You can do that through the 'Add | Connected services' dialog in Visual Studio. See Readme for more info"' "Oops - App not registered with Office 365"); " is 247.
Long Statement,Office365StarterProject.Common,SuspensionManager,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,Office365StarterProject.Common,SuspensionManager,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\SuspensionManager.cs,RestoreAsync,The length of the statement  "                    if (weakFrameReference.TryGetTarget(out frame) && (string)frame.GetValue(FrameSessionBaseKeyProperty) == sessionBaseKey) " is 120.
Long Statement,Office365StarterProject.Common,SuspensionManager,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,Office365StarterProject.Helpers,DiscoveryServiceCache,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\DiscoveryServiceCache.cs,Load,The length of the statement  "                cache.DiscoveryInfoForServices.Add(key' new CapabilityDiscoveryResult(serviceEndpointUri' serviceResourceId' serviceApiVersion)); " is 129.
Long Statement,Office365StarterProject.Helpers,MessageDialogHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\MessageDialogHelper.cs,DisplayException,The length of the statement  "            content.AppendLine("Suggestion: Make sure you have added the Connected Services to this project as outlined in the Readme file"); " is 129.
Long Statement,Office365StarterProject.Helpers,MessageDialogHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\MessageDialogHelper.cs,DisplayException,The length of the statement  "            content.AppendLine("Suggestion: Make sure you have added the Connected Services to this project as outlined in the Readme file."); " is 130.
Long Statement,Office365StarterProject.Helpers,MessageDialogHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\MessageDialogHelper.cs,DisplayException,The length of the statement  "            content.AppendLine("Suggestion: Make sure you have added the Connected Services to this project as outlined in the Readme file."); " is 130.
Long Statement,Office365StarterProject.ViewModels,ContactItemViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\ContactItemViewModel.cs,ExecuteSaveChangesCommandAsync,The length of the statement  "                LoggingViewModel.Instance.Information = string.Format("We could not {0} your contact. Error: {1}"' operationType' ex.Message); " is 126.
Long Statement,Office365StarterProject.ViewModels,ContactsViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\ContactsViewModel.cs,ExecuteDeleteCommandAsync,The length of the statement  "                if (await MessageDialogHelper.ShowYesNoDialogAsync(String.Format("Are you sure you want to delete the contact '{0}'?"' this._selectedContact.DisplayString)' "Confirm Deletion")) " is 177.
Long Statement,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,CanReadTextFile,The length of the statement  "              && (_selectedFileObject.FileSystemItem.Name.EndsWith(".txt") || _selectedFileObject.FileSystemItem.Name.EndsWith(".xml"))); " is 123.
Long Statement,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,CanUpdateFile,The length of the statement  "                && (_selectedFileObject.FileSystemItem.Name.EndsWith(".txt") || _selectedFileObject.FileSystemItem.Name.EndsWith(".xml"))); " is 123.
Long Statement,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,ExecuteUpdateCommandAsync,The length of the statement  "                LoggingViewModel.Instance.Information = "You need to choose a text file' add some text in the text box' and then click Update."; " is 128.
Long Statement,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,ExecuteDownloadFileCommandAsync,The length of the statement  "                LoggingViewModel.Instance.Information = String.Format("The item '{0}' is a folder and therefore can't be downloaded."' _selectedFileObject.Name); " is 145.
Long Statement,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,ExecuteDownloadFileCommandAsync,The length of the statement  "                               String.Format("Your file was downloaded to {0}\nWould you like to open the file?"'destinationFile.Path)' "Download Succeeded"); " is 127.
Long Statement,Office365StarterProject.ViewModels,MailViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\MailViewModel.cs,LoadMailAsync,The length of the statement  "                    LoggingViewModel.Instance.Information = "You have no more mail. Click the \"Get Items\" button to reload the first page."; " is 122.
Long Statement,Office365StarterProject.ViewModels,MailViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\MailViewModel.cs,LoadMailAsync,The length of the statement  "                        LoggingViewModel.Instance.Information = String.Format("{0} mail items loaded. Click the \"Get Items\" button to reload the first page."' MailItems.Count); " is 154.
Long Statement,Office365StarterProject.ViewModels,MailViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\MailViewModel.cs,LoadMailAsync,The length of the statement  "                        LoggingViewModel.Instance.Information = String.Format("{0} mail items loaded. Click the \"Get Items\" button for more."' MailItems.Count); " is 138.
Long Statement,Office365StarterProject.ViewModels,MailViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\MailViewModel.cs,ExecuteDeleteMailCommandAsync,The length of the statement  "                if (await MessageDialogHelper.ShowYesNoDialogAsync(String.Format("Are you sure you want to delete the mail item '{0}'?"' this._selectedMail.Subject)' "Confirm Deletion")) " is 170.
Long Statement,Office365StarterProject.ViewModels,CalendarViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\CalendarViewModel.cs,ExecuteDeleteCommandAsync,The length of the statement  "            if (await MessageDialogHelper.ShowYesNoDialogAsync(String.Format("Are you sure you want to delete the event '{0}'?"' this._selectedEvent.DisplayString)' "Confirm Deletion")) " is 173.
Long Statement,Office365StarterProject.ViewModels,EventViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\EventViewModel.cs,ExecuteSaveChangesCommandAsync,The length of the statement  "                LoggingViewModel.Instance.Information = string.Format("We could not {0} your calendar event in your calendar"' operationType); " is 126.
Complex Conditional,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,Office365StarterProject.Helpers,DiscoveryServiceCache,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\DiscoveryServiceCache.cs,LoadAsync,The method has an empty catch block.
Empty Catch Block,Office365StarterProject.Helpers,FileOperations,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Helpers\FileOperations.cs,DownloadFileAsync,The method has an empty catch block.
Magic Number,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365StarterProject.Common,NavigationHelper,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,ExecuteDownloadFileCommandAsync,The following statement contains a magic number: using (var downloadStream = await _fileOperations.DownloadFileAsync(_selectedFileObject))              {                    // Create the picker object and set options                  FileSavePicker picker = new FileSavePicker();                  picker.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary;                    // Dropdown of file types the user can save the file as                  picker.FileTypeChoices.Add("Text"' new List<string>() { ".txt" });                  picker.FileTypeChoices.Add("Word document"' new List<string>() { ".docx" });                  picker.FileTypeChoices.Add("Excel workbook"' new List<string>() { ".xlsx" });                  picker.FileTypeChoices.Add("Powerpoint"' new List<string>() { ".pptx" });                  picker.FileTypeChoices.Add("XML"' new List<string>() { ".xml" });                  picker.FileTypeChoices.Add("JPEG"' new List<string>() { ".jpg" });                  picker.FileTypeChoices.Add("PNG"' new List<string>() { ".png" });                  picker.FileTypeChoices.Add("PDF"' new List<string>() { ".pdf" });                    // Default file name if the user does not type one in or select a file to replace                  picker.SuggestedFileName = _selectedFileObject.Name;                    destinationFile = await picker.PickSaveFileAsync();                    if (destinationFile != null && downloadStream != null)                  {                        CachedFileManager.DeferUpdates(destinationFile);                        using (Stream destinationStream = await destinationFile.OpenStreamForWriteAsync())                      {                          int count = 0;                          do                          {                              var buffer = new byte[2048];                              count = downloadStream.Read(buffer' 0' 2048);                              await destinationStream.WriteAsync(buffer' 0' count);                          }                          while (downloadStream.CanRead && count > 0);                            await destinationStream.FlushAsync();                      }                    }              }
Magic Number,Office365StarterProject.ViewModels,FilesViewModel,C:\repos\OfficeDev_O365-Windows-Start\Office365StarterProject\ViewModels\FilesViewModel.cs,ExecuteDownloadFileCommandAsync,The following statement contains a magic number: using (var downloadStream = await _fileOperations.DownloadFileAsync(_selectedFileObject))              {                    // Create the picker object and set options                  FileSavePicker picker = new FileSavePicker();                  picker.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary;                    // Dropdown of file types the user can save the file as                  picker.FileTypeChoices.Add("Text"' new List<string>() { ".txt" });                  picker.FileTypeChoices.Add("Word document"' new List<string>() { ".docx" });                  picker.FileTypeChoices.Add("Excel workbook"' new List<string>() { ".xlsx" });                  picker.FileTypeChoices.Add("Powerpoint"' new List<string>() { ".pptx" });                  picker.FileTypeChoices.Add("XML"' new List<string>() { ".xml" });                  picker.FileTypeChoices.Add("JPEG"' new List<string>() { ".jpg" });                  picker.FileTypeChoices.Add("PNG"' new List<string>() { ".png" });                  picker.FileTypeChoices.Add("PDF"' new List<string>() { ".pdf" });                    // Default file name if the user does not type one in or select a file to replace                  picker.SuggestedFileName = _selectedFileObject.Name;                    destinationFile = await picker.PickSaveFileAsync();                    if (destinationFile != null && downloadStream != null)                  {                        CachedFileManager.DeferUpdates(destinationFile);                        using (Stream destinationStream = await destinationFile.OpenStreamForWriteAsync())                      {                          int count = 0;                          do                          {                              var buffer = new byte[2048];                              count = downloadStream.Read(buffer' 0' 2048);                              await destinationStream.WriteAsync(buffer' 0' count);                          }                          while (downloadStream.CanRead && count > 0);                            await destinationStream.FlushAsync();                      }                    }              }
