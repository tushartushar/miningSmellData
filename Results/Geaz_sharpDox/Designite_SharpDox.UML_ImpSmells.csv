Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpDox.UML.Sequence,SequenceDiagramParser,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\SequenceDiagramParser.cs,NodeNotEmpty,Cyclomatic complexity of the method is 9
Long Parameter List,SharpDox.UML.Sequence.Elements,SequenceDiagramComposite,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Model\Elements\SequenceDiagramComposite.cs,AddConnection,The method has 5 parameters. Parameters: callerId' calledId' text' calledMethodIdentifier' isReturnConnection
Long Parameter List,SharpDox.UML.SVG,SvgImage,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\SVG\SvgImage.cs,SvgImage,The method has 6 parameters. Parameters: rootSvg' x' y' width' height' href
Long Parameter List,SharpDox.UML.SVG,SvgLink,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\SVG\SvgLink.cs,SvgLink,The method has 5 parameters. Parameters: rootSvg' text' href' x' y
Long Parameter List,SharpDox.UML.SVG,SvgRectangle,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\SVG\SvgRectangle.cs,SvgRectangle,The method has 5 parameters. Parameters: rootSvg' x' y' width' height
Long Statement,SharpDox.UML.Class,ClassDiagramParser,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\ClassDiagramParser.cs,ParseProperties,The length of the statement  "                classDiagram.PropertyRows.Add(new ClassDiagramRow(property.Identifier' "Properties"' property.Accessibility' property.Name + getSet)); " is 134.
Long Statement,SharpDox.UML.Class,ClassDiagramParser,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\ClassDiagramParser.cs,ParseConstructors,The length of the statement  "                classDiagram.ConstructorRows.Add(new ClassDiagramRow(constructor.Identifier' "Method"' constructor.Accessibility' constructor.Name)); " is 133.
Long Statement,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramWidth,The length of the statement  "            var headerWidth = (int)Math.Max(classDiagram.Name.GetWidth(14' Fonts.FontLight)' classDiagram.Accessibility.GetWidth(11' Fonts.FontItalic)); " is 140.
Long Statement,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The length of the statement  "                    string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility))); " is 126.
Long Statement,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,FollowingSectionsNotEmpty,The length of the statement  "                    notEmpty = (_classDiagram.PropertyRows.Count + _classDiagram.ConstructorRows.Count + _classDiagram.MethodRows.Count + _classDiagram.EventRows.Count) > 0; " is 153.
Long Statement,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,FollowingSectionsNotEmpty,The length of the statement  "                    notEmpty = (_classDiagram.PropertyRows.Count + _classDiagram.ConstructorRows.Count + _classDiagram.MethodRows.Count) > 0; " is 121.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The length of the statement  "            var headerWidth = (int)Math.Max(classDiagram.Name.GetWidth(12' Fonts.FontLight)' classDiagram.Accessibility.GetWidth(10' Fonts.FontItalic)); " is 140.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The length of the statement  "            var formattedAccessibility = new FormattedText(classDiagram.Accessibility' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontItalic' 10' Brushes.Black); " is 167.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The length of the statement  "            _context.DrawText(formattedAccessibility' new Point((_diagramSize.Width - classDiagram.Accessibility.GetWidth(10' Fonts.FontItalic)) / 2' position)); " is 149.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The length of the statement  "            var formattedName = new FormattedText(classDiagram.Name' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black); " is 148.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The length of the statement  "            _context.DrawText(formattedName' new Point((_diagramSize.Width - classDiagram.Name.GetWidth(12' Fonts.FontLight)) / 2' position += 15)); " is 136.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The length of the statement  "                var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black); " is 139.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The length of the statement  "                _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16))); " is 122.
Long Statement,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderDiagramFrame,The length of the statement  "            _context.DrawRectangle(Brushes.Transparent' new Pen(Brushes.Black' 1)' new Rect(1' 1' _diagramSize.Width - 2' _diagramSize.Height - 2)); " is 136.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The length of the statement  "            _leftMargin = _classDiagram.UsedBy.Sum(u => _classDiagramSvgRenderer.CalculateDiagramWidth(u)) + _classDiagram.UsedBy.Count * 50; " is 129.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The length of the statement  "                _classDiagram.BaseTypes.Count > 0 ? _classDiagram.BaseTypes.Max(o => _classDiagramSvgRenderer.CalculateDiagramHeight(o)) : 0' " is 125.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The length of the statement  "                _classDiagram.ImplementedInterfaces.Count > 0 ? _classDiagram.ImplementedInterfaces.Max(o => _classDiagramSvgRenderer.CalculateDiagramHeight(o)) : 0); " is 150.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The length of the statement  "            var width = _leftMargin + _mainDiagram.Width + _classDiagram.Uses.Sum(u => _classDiagramSvgRenderer.CalculateDiagramWidth(u)) + _classDiagram.Uses.Count * 50; " is 158.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The length of the statement  "            var maxUsedBy = _classDiagram.UsedBy.Any() ? _classDiagram.UsedBy.Max(u => _classDiagramSvgRenderer.CalculateDiagramHeight(u)) : 0.0; " is 133.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The length of the statement  "            var maxUses = _classDiagram.Uses.Any() ? _classDiagram.Uses.Max(u => _classDiagramSvgRenderer.CalculateDiagramHeight(u)) : 0.0;  " is 127.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,PositionMainDiagram,The length of the statement  "            translate.Value = string.Format("translate({0}' {1})"' _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)' _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)); " is 174.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The length of the statement  "                translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture)); " is 171.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The length of the statement  "                translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture)); " is 171.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The length of the statement  "                translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture)); " is 171.
Long Statement,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The length of the statement  "                translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture)); " is 171.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Friend.png"' entityType))); " is 142.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Private.png"' entityType))); " is 143.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Protected.png"' entityType))); " is 145.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Public.png"' entityType))); " is 142.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Sealed.png"' entityType))); " is 142.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Sealed.png"' entityType))); " is 142.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Shortcut.png"' entityType))); " is 144.
Long Statement,SharpDox.UML.Ressources,Icons,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Ressources\Icons.cs,GetIcon,The length of the statement  "                    bitmap = new BitmapImage(new Uri(string.Format("pack://application:'''/SharpDox.UML;component/Ressources/Icons/{0}_Public.png"' entityType))); " is 142.
Long Statement,SharpDox.UML.Extensions,StringToWidth,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\StringToWidth.cs,GetWidth,The length of the statement  "            var formattedText = new FormattedText(text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' typeFace' fontSize' Brushes.Black); " is 134.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The length of the statement  "            var link = new SvgLink(_svgRoot' node.Text' string.Format("{{{{type-link:{0}}}}}"' node.TypeIdentifier)' textPosition.X + 15' textPosition.Y + 22); " is 147.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The length of the statement  "            var link = new SvgLink(_svgRoot' connection.Text' string.Format("{{{{method-link:{0}}}}}"' connection.CalledMethodIdentifier)' callerNodeMiddlePoint + 10' _diagramSize.Height + 10); " is 181.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramParser,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\SequenceDiagramParser.cs,ParseTargetNode,The length of the statement  "                var called = _sequenceDiagram.Nodes.SingleOrDefault(o => o.TypeIdentifier == targetNode.CalledType.Identifier) ?? _sequenceDiagram.AddNode(targetNode.CalledType.Identifier); " is 173.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramParser,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\SequenceDiagramParser.cs,ParseTargetNode,The length of the statement  "                    composite.AddConnection(called.ID' caller.ID' targetMethod.ReturnType.Type.Name' targetNode.CalledMethod.Identifier' true); " is 123.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramParser,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\SequenceDiagramParser.cs,CreateReturn,The length of the statement  "                _sequenceDiagram.AddConnection(_sequenceDiagram.StartNodeID' Guid.Empty' method.ReturnType.Type.Name' string.Empty' true); " is 122.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The length of the statement  "            var text = new FormattedText(node.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black); " is 131.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnection,The length of the statement  "            var text = new FormattedText(connection.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black); " is 137.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionArrow,The length of the statement  "            var segments = new[] { new LineSegment(new Point(startX - 5' startY + 5)' true)' new LineSegment(new Point(startX - 5' startY - 5)' true) }; " is 140.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The length of the statement  "            var text = new FormattedText("return " + connection.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Gray); " is 148.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The length of the statement  "            _context.DrawLine(new Pen(Brushes.Gray' 1)' new Point(calledNodeMiddlePoint' size.Height + 20)' new Point(callerNodeMiddlePoint' size.Height + 20)); " is 148.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The length of the statement  "            var segments = new[] { new LineSegment(new Point(startX + 5' startY + 5)' true)' new LineSegment(new Point(startX + 5' startY - 5)' true) }; " is 140.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The length of the statement  "            var text = new FormattedText(block.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 10' Brushes.DimGray); " is 134.
Long Statement,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,CloseBlock,The length of the statement  "            var text = new FormattedText("end"' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 10' Brushes.DimGray); " is 129.
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramWidth,The following statement contains a magic number: var headerWidth = (int)Math.Max(classDiagram.Name.GetWidth(14' Fonts.FontLight)' classDiagram.Accessibility.GetWidth(11' Fonts.FontItalic));
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramWidth,The following statement contains a magic number: var headerWidth = (int)Math.Max(classDiagram.Name.GetWidth(14' Fonts.FontLight)' classDiagram.Accessibility.GetWidth(11' Fonts.FontItalic));
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramWidth,The following statement contains a magic number: var maxWidthRows = allRows.Count > 0 ? allRows.Max(o => (int)o.Text.GetWidth(14' Fonts.FontLight)) : 0;
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramWidth,The following statement contains a magic number: return Math.Max(headerWidth' maxWidthRows) + 65;
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramHeight,The following statement contains a magic number: var allRowsHeight = allRows.Count * 25 + (notEmptySections > 0 ? (notEmptySections - 1) * 10 : 0);
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramHeight,The following statement contains a magic number: var allRowsHeight = allRows.Count * 25 + (notEmptySections > 0 ? (notEmptySections - 1) * 10 : 0);
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,CalculateDiagramHeight,The following statement contains a magic number: return (FIRSTROW_OFFSET_Y - 15) + allRowsHeight;
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderFrame,The following statement contains a magic number: var rect = new SvgRectangle(_svgRoot' 0.5' 0.5' _diagramSize.Width' _diagramSize.Height);
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderFrame,The following statement contains a magic number: var rect = new SvgRectangle(_svgRoot' 0.5' 0.5' _diagramSize.Width' _diagramSize.Height);
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: var accessibility = new SvgText(                  _svgRoot'                   _classDiagram.Accessibility'                   (_diagramSize.Width - _classDiagram.Accessibility.GetWidth(11' Fonts.FontItalic)) / 2'                  ACCESSIBILITY_LABEL_Y);
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: var accessibility = new SvgText(                  _svgRoot'                   _classDiagram.Accessibility'                   (_diagramSize.Width - _classDiagram.Accessibility.GetWidth(11' Fonts.FontItalic)) / 2'                  ACCESSIBILITY_LABEL_Y);
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: accessibility.FontSize = 11;
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: if (_classDiagram.IsProjectStranger)              {                  name = new SvgText(                      _svgRoot'                      _classDiagram.Name'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgText)name).FontSize = 14;              }              else              {                  name = new SvgLink(                      _svgRoot'                      _classDiagram.Name'                      string.Format("{{{{type-link:{0}}}}}"' _classDiagram.TypeIdentifier)'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgLink)name).Text.FontSize = 14;              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: if (_classDiagram.IsProjectStranger)              {                  name = new SvgText(                      _svgRoot'                      _classDiagram.Name'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgText)name).FontSize = 14;              }              else              {                  name = new SvgLink(                      _svgRoot'                      _classDiagram.Name'                      string.Format("{{{{type-link:{0}}}}}"' _classDiagram.TypeIdentifier)'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgLink)name).Text.FontSize = 14;              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: if (_classDiagram.IsProjectStranger)              {                  name = new SvgText(                      _svgRoot'                      _classDiagram.Name'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgText)name).FontSize = 14;              }              else              {                  name = new SvgLink(                      _svgRoot'                      _classDiagram.Name'                      string.Format("{{{{type-link:{0}}}}}"' _classDiagram.TypeIdentifier)'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgLink)name).Text.FontSize = 14;              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: if (_classDiagram.IsProjectStranger)              {                  name = new SvgText(                      _svgRoot'                      _classDiagram.Name'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgText)name).FontSize = 14;              }              else              {                  name = new SvgLink(                      _svgRoot'                      _classDiagram.Name'                      string.Format("{{{{type-link:{0}}}}}"' _classDiagram.TypeIdentifier)'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgLink)name).Text.FontSize = 14;              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: if (_classDiagram.IsProjectStranger)              {                  name = new SvgText(                      _svgRoot'                      _classDiagram.Name'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgText)name).FontSize = 14;              }              else              {                  name = new SvgLink(                      _svgRoot'                      _classDiagram.Name'                      string.Format("{{{{type-link:{0}}}}}"' _classDiagram.TypeIdentifier)'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgLink)name).Text.FontSize = 14;              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: if (_classDiagram.IsProjectStranger)              {                  name = new SvgText(                      _svgRoot'                      _classDiagram.Name'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgText)name).FontSize = 14;              }              else              {                  name = new SvgLink(                      _svgRoot'                      _classDiagram.Name'                      string.Format("{{{{type-link:{0}}}}}"' _classDiagram.TypeIdentifier)'                      (_diagramSize.Width - _classDiagram.Name.GetWidth(14' Fonts.FontLight)) / 2'                      CLASSLABEL_Y);                  ((SvgLink)name).Text.FontSize = 14;              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderHeader,The following statement contains a magic number: var path = new SvgPath(                  _svgRoot'                   string.Format("M0.5'{0}L{1}'{0}"'                       (CLASSLABEL_Y + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      _diagramSize.Width.ToString("0.00"' CultureInfo.InvariantCulture)));
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: for (int i = 0; i < classDiagramRows.Count; i++)              {                  var image = new SvgImage(                      _svgRoot'                       15'                       FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10) - 12'                       16'                       16'                      string.Format("data:image/png;base64'{0}"' Icons.GetBase64Icon(classDiagramRows[i].Type' classDiagramRows[i].Accessibility)));                    SvgElement text;                  if (_classDiagram.IsProjectStranger)                  {                      text = new SvgText(                          _svgRoot'                          classDiagramRows[i].Text'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgText)text).FontSize = 14;                  }                  else                  {                      text = new SvgLink(                          _svgRoot'                          classDiagramRows[i].Text'                          string.Format("{{{{{0}-link:{1}}}}}"' memberType' classDiagramRows[i].Identifier)'                          40'                          FIRSTROW_OFFSET_Y + ((i + rowCountOffset) * 25) + (sectionOffset * 10));                      ((SvgLink)text).Text.FontSize = 14;                  }                    _svgGraphic.Add(image);                  _svgGraphic.Add(text);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: if (classDiagramRows.Count > 0 && FollowingSectionsNotEmpty(memberType))              {                  RenderLine(FIRSTROW_OFFSET_Y + ((classDiagramRows.Count + rowCountOffset) * 25) + (sectionOffset * 10) - 10);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: if (classDiagramRows.Count > 0 && FollowingSectionsNotEmpty(memberType))              {                  RenderLine(FIRSTROW_OFFSET_Y + ((classDiagramRows.Count + rowCountOffset) * 25) + (sectionOffset * 10) - 10);              }
Magic Number,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,RenderRowSection,The following statement contains a magic number: if (classDiagramRows.Count > 0 && FollowingSectionsNotEmpty(memberType))              {                  RenderLine(FIRSTROW_OFFSET_Y + ((classDiagramRows.Count + rowCountOffset) * 25) + (sectionOffset * 10) - 10);              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: var headerWidth = (int)Math.Max(classDiagram.Name.GetWidth(12' Fonts.FontLight)' classDiagram.Accessibility.GetWidth(10' Fonts.FontItalic));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: var headerWidth = (int)Math.Max(classDiagram.Name.GetWidth(12' Fonts.FontLight)' classDiagram.Accessibility.GetWidth(10' Fonts.FontItalic));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: var maxWidthRows = allRows.Count > 0 ? allRows.Max(o => (int)o.Text.GetWidth(12' Fonts.FontLight)) : 0;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: size.Width = Math.Max(headerWidth' maxWidthRows) + 65;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: size.Height = (3 * 20) + (10 * (horizontalLineCount > 0 ? horizontalLineCount - 1 : 0)) + allRows.Count * 20;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: size.Height = (3 * 20) + (10 * (horizontalLineCount > 0 ? horizontalLineCount - 1 : 0)) + allRows.Count * 20;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: size.Height = (3 * 20) + (10 * (horizontalLineCount > 0 ? horizontalLineCount - 1 : 0)) + allRows.Count * 20;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,CalculateDiagramSize,The following statement contains a magic number: size.Height = (3 * 20) + (10 * (horizontalLineCount > 0 ? horizontalLineCount - 1 : 0)) + allRows.Count * 20;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: var formattedAccessibility = new FormattedText(classDiagram.Accessibility' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontItalic' 10' Brushes.Black);
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: _context.DrawText(formattedAccessibility' new Point((_diagramSize.Width - classDiagram.Accessibility.GetWidth(10' Fonts.FontItalic)) / 2' position));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: _context.DrawText(formattedAccessibility' new Point((_diagramSize.Width - classDiagram.Accessibility.GetWidth(10' Fonts.FontItalic)) / 2' position));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: var formattedName = new FormattedText(classDiagram.Name' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: _context.DrawText(formattedName' new Point((_diagramSize.Width - classDiagram.Name.GetWidth(12' Fonts.FontLight)) / 2' position += 15));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: _context.DrawText(formattedName' new Point((_diagramSize.Width - classDiagram.Name.GetWidth(12' Fonts.FontLight)) / 2' position += 15));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: _context.DrawText(formattedName' new Point((_diagramSize.Width - classDiagram.Name.GetWidth(12' Fonts.FontLight)) / 2' position += 15));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: position += 20;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderHeader,The following statement contains a magic number: position += 10;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The following statement contains a magic number: foreach (var row in classDiagramRows)              {                  var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);                  _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16)));                  _context.DrawText(formattedText' new Point(40' actualPosition));                  actualPosition += 20;              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The following statement contains a magic number: foreach (var row in classDiagramRows)              {                  var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);                  _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16)));                  _context.DrawText(formattedText' new Point(40' actualPosition));                  actualPosition += 20;              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The following statement contains a magic number: foreach (var row in classDiagramRows)              {                  var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);                  _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16)));                  _context.DrawText(formattedText' new Point(40' actualPosition));                  actualPosition += 20;              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The following statement contains a magic number: foreach (var row in classDiagramRows)              {                  var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);                  _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16)));                  _context.DrawText(formattedText' new Point(40' actualPosition));                  actualPosition += 20;              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The following statement contains a magic number: foreach (var row in classDiagramRows)              {                  var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);                  _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16)));                  _context.DrawText(formattedText' new Point(40' actualPosition));                  actualPosition += 20;              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderRowSection,The following statement contains a magic number: foreach (var row in classDiagramRows)              {                  var formattedText = new FormattedText(row.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);                  _context.DrawImage(Icons.GetIcon(row.Type' row.Accessibility)' new Rect(new Point(15' actualPosition)' new Size(16' 16)));                  _context.DrawText(formattedText' new Point(40' actualPosition));                  actualPosition += 20;              }
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderLine,The following statement contains a magic number: return position + 10;
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderDiagramFrame,The following statement contains a magic number: _context.DrawRectangle(Brushes.Transparent' new Pen(Brushes.Black' 1)' new Rect(1' 1' _diagramSize.Width - 2' _diagramSize.Height - 2));
Magic Number,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,RenderDiagramFrame,The following statement contains a magic number: _context.DrawRectangle(Brushes.Transparent' new Pen(Brushes.Black' 1)' new Rect(1' 1' _diagramSize.Width - 2' _diagramSize.Height - 2));
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The following statement contains a magic number: _leftMargin = _classDiagram.UsedBy.Sum(u => _classDiagramSvgRenderer.CalculateDiagramWidth(u)) + _classDiagram.UsedBy.Count * 50;
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The following statement contains a magic number: _topMargin = 50 + Math.Max(                  _classDiagram.BaseTypes.Count > 0 ? _classDiagram.BaseTypes.Max(o => _classDiagramSvgRenderer.CalculateDiagramHeight(o)) : 0'                  _classDiagram.ImplementedInterfaces.Count > 0 ? _classDiagram.ImplementedInterfaces.Max(o => _classDiagramSvgRenderer.CalculateDiagramHeight(o)) : 0);
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,CalculateMainMarginsAndSize,The following statement contains a magic number: var width = _leftMargin + _mainDiagram.Width + _classDiagram.Uses.Sum(u => _classDiagramSvgRenderer.CalculateDiagramWidth(u)) + _classDiagram.Uses.Count * 50;
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The following statement contains a magic number: for (int i = 0; i < _classDiagram.BaseTypes.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.BaseTypes[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.BaseTypes[i])'                       _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.BaseTypes[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    offset += diagramSize.Width;                    var pathGraphic = new SvgGraphic(_mainDiagram);                    //line                  if (i == 0)                  {                      var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    //arrow                  var startX = positionX + 50;                  var startY = diagramSize.Height;                    var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                    pathGraphic.Add(arrow);                    _mainDiagram.Add(pathGraphic);              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The following statement contains a magic number: for (int i = 0; i < _classDiagram.BaseTypes.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.BaseTypes[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.BaseTypes[i])'                       _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.BaseTypes[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    offset += diagramSize.Width;                    var pathGraphic = new SvgGraphic(_mainDiagram);                    //line                  if (i == 0)                  {                      var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    //arrow                  var startX = positionX + 50;                  var startY = diagramSize.Height;                    var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                    pathGraphic.Add(arrow);                    _mainDiagram.Add(pathGraphic);              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The following statement contains a magic number: for (int i = 0; i < _classDiagram.BaseTypes.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.BaseTypes[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.BaseTypes[i])'                       _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.BaseTypes[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    offset += diagramSize.Width;                    var pathGraphic = new SvgGraphic(_mainDiagram);                    //line                  if (i == 0)                  {                      var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    //arrow                  var startX = positionX + 50;                  var startY = diagramSize.Height;                    var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                    pathGraphic.Add(arrow);                    _mainDiagram.Add(pathGraphic);              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The following statement contains a magic number: for (int i = 0; i < _classDiagram.BaseTypes.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.BaseTypes[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.BaseTypes[i])'                       _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.BaseTypes[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    offset += diagramSize.Width;                    var pathGraphic = new SvgGraphic(_mainDiagram);                    //line                  if (i == 0)                  {                      var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    //arrow                  var startX = positionX + 50;                  var startY = diagramSize.Height;                    var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                    pathGraphic.Add(arrow);                    _mainDiagram.Add(pathGraphic);              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The following statement contains a magic number: for (int i = 0; i < _classDiagram.BaseTypes.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.BaseTypes[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.BaseTypes[i])'                       _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.BaseTypes[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    offset += diagramSize.Width;                    var pathGraphic = new SvgGraphic(_mainDiagram);                    //line                  if (i == 0)                  {                      var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    //arrow                  var startX = positionX + 50;                  var startY = diagramSize.Height;                    var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                    pathGraphic.Add(arrow);                    _mainDiagram.Add(pathGraphic);              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawBaseTypes,The following statement contains a magic number: for (int i = 0; i < _classDiagram.BaseTypes.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.BaseTypes[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.BaseTypes[i])'                       _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.BaseTypes[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    offset += diagramSize.Width;                    var pathGraphic = new SvgGraphic(_mainDiagram);                    //line                  if (i == 0)                  {                      var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    //arrow                  var startX = positionX + 50;                  var startY = diagramSize.Height;                    var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                    pathGraphic.Add(arrow);                    _mainDiagram.Add(pathGraphic);              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: var offset = _leftMargin + _classDiagram.BaseTypes.Sum(b => _classDiagramSvgRenderer.CalculateDiagramWidth(b) + 25);
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawImplementedInterfaces,The following statement contains a magic number: for (int i = 0; i < _classDiagram.ImplementedInterfaces.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.ImplementedInterfaces[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.ImplementedInterfaces[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.ImplementedInterfaces[i]));                    var positionX = (i * 50) + offset;                  var positionY = 0;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY + diagramSize.Height).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  path.StrokeDashArray = "5' 5";                  pathGraphic.Add(path);                    var startX = positionX + 50;                  var startY = diagramSize.Height;                  var points = string.Format("{0}'{1} {2}'{3} {4}'{3}"'                      startX.ToString("0.00"' CultureInfo.InvariantCulture)'                      startY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startY + 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (startX + 5).ToString("0.00"' CultureInfo.InvariantCulture));                  var arrow = new SvgPolygon(_mainDiagram' points);                  arrow.Stroke = "#979797";                  arrow.Fill = "#FFFFFF";                  pathGraphic.Add(arrow);                    if (i == _classDiagram.ImplementedInterfaces.Count - 1)                  {                      var mainDiagramWidth = _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{1}"'                          (positionX + 50).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                          (_leftMargin + (mainDiagramWidth - 50)).ToString("0.00"' CultureInfo.InvariantCulture)'                          (_topMargin - 12.5).ToString("0.00"' CultureInfo.InvariantCulture)'                          _topMargin.ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      path.StrokeDashArray = "5' 5";                      pathGraphic.Add(path);                  }                                                    _mainDiagram.Add(pathGraphic);                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUsedBy,The following statement contains a magic number: for (int i = 0; i < _classDiagram.UsedBy.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.UsedBy[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.UsedBy[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.UsedBy[i]));                    var positionX = (i * 50) + offset;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    pathGraphic.Add(path);                  _mainDiagram.Add(pathGraphic);                    if (i == 0)                  {                      pathGraphic = new SvgGraphic(_mainDiagram);                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 30.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                          (_leftMargin - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 20.5d).ToString("0.00"' CultureInfo.InvariantCulture)'                          _leftMargin.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                        pathGraphic.Add(path);                        _mainDiagram.Add(pathGraphic);                  }                    offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Class.Renderer,ConnectedClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ConnectedClassDiagramSvgRenderer.cs,DrawUses,The following statement contains a magic number: for (int i = 0; i < _classDiagram.Uses.Count; i++)              {                  var diagram = _classDiagramSvgRenderer.RenderDiagram(_classDiagram.Uses[i]);                  var diagramSize = new Size(                      _classDiagramSvgRenderer.CalculateDiagramWidth(_classDiagram.Uses[i])'                      _classDiagramSvgRenderer.CalculateDiagramHeight(_classDiagram.Uses[i]));                    var positionX = (i * 50) + offset + 50;                  var positionY = _topMargin + 50;                    var translate = diagram.CreateAttribute("transform");                  translate.Value = string.Format("translate({0}' {1})"' positionX.ToString("0.00"' CultureInfo.InvariantCulture)' positionY.ToString("0.00"' CultureInfo.InvariantCulture));                  diagram["svg"]["g"].Attributes.Append(translate);                    _mainDiagram.ImportAdd((SvgElement)diagram["svg"]["g"]);                    var pathGraphic = new SvgGraphic(_mainDiagram);                    var path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{0}'{2}"'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 25).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) - 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    path = new SvgPath(_mainDiagram' string.Format("M{0}'{1}L{2}'{3}"'                      (positionX + (diagramSize.Width / 2) + 5).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionY - 10).ToString("0.00"' CultureInfo.InvariantCulture)'                      (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                      positionY.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                  pathGraphic.Add(path);                    if (i == _classDiagram.Uses.Count - 1)                  {                      path = new SvgPath(_mainDiagram' string.Format("M{0}'{2}L{1}'{2}"'                          (positionX + (diagramSize.Width / 2)).ToString("0.00"' CultureInfo.InvariantCulture)'                          leftOffset.ToString("0.00"' CultureInfo.InvariantCulture)'                          (positionY - 25.5d).ToString("0.00"' CultureInfo.InvariantCulture)));                      path.StrokeWidth = 1;                      path.Stroke = "#979797";                      pathGraphic.Add(path);                  }                    _mainDiagram.Add(pathGraphic);                  offset += diagramSize.Width;              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Extensions,DrawingVisualPngSaver,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Extensions\DrawingVisualPngSaver.cs,SaveAsPng,The following statement contains a magic number: if (visual.ContentBounds.Height > 4000 || visual.ContentBounds.Width > 4000)              {                  var scale = 0.99;                  var correctScaleFound = false;                  while (!correctScaleFound)                  {                      if (visual.ContentBounds.Height*scale < 4000 && visual.ContentBounds.Width*scale < 4000)                      {                          correctScaleFound = true;                      }                      else                      {                          scale -= 0.01;                      }                  }                  visual.Transform = new ScaleTransform(scale' scale);                  target = new RenderTargetBitmap(                      (int)(visual.ContentBounds.Width * scale)'                       (int)(visual.ContentBounds.Height * scale)'                      96' 96' PixelFormats.Pbgra32);              }              else              {                  target = new RenderTargetBitmap(                      (int) visual.ContentBounds.Width'                       (int) visual.ContentBounds.Height'                      96' 96' PixelFormats.Pbgra32);              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,RenderDiagram,The following statement contains a magic number: _diagramSize = new Size(0.5' 80.5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,RenderDiagram,The following statement contains a magic number: _diagramSize = new Size(0.5' 80.5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: var textWidth = node.Text.GetWidth(12' Fonts.FontLight);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: var textPosition = new Point(_diagramSize.Width' 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: var textSize = new Size(textWidth + 20' 35);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: var textSize = new Size(textWidth + 20' 35);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: _diagramSize = new Size(_diagramSize.Width + textWidth + 40' _diagramSize.Height);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: var link = new SvgLink(_svgRoot' node.Text' string.Format("{{{{type-link:{0}}}}}"' node.TypeIdentifier)' textPosition.X + 15' textPosition.Y + 22);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: var link = new SvgLink(_svgRoot' node.Text' string.Format("{{{{type-link:{0}}}}}"' node.TypeIdentifier)' textPosition.X + 15' textPosition.Y + 22);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: link.Text.FontSize = 12;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawNode,The following statement contains a magic number: _nodeMiddlePoints.Add(node.ID' textSize.Width / 2 + textPosition.X);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The following statement contains a magic number: var textWidth = connection.Text.GetWidth(12' Fonts.FontLight);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The following statement contains a magic number: var link = new SvgLink(_svgRoot' connection.Text' string.Format("{{{{method-link:{0}}}}}"' connection.CalledMethodIdentifier)' callerNodeMiddlePoint + 10' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The following statement contains a magic number: var link = new SvgLink(_svgRoot' connection.Text' string.Format("{{{{method-link:{0}}}}}"' connection.CalledMethodIdentifier)' callerNodeMiddlePoint + 10' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The following statement contains a magic number: link.Text.FontSize = 12;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The following statement contains a magic number: if ((textWidth + callerNodeMiddlePoint + 10) > _diagramSize.Width)              {                  _diagramSize.Width = textWidth + callerNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnection,The following statement contains a magic number: if ((textWidth + callerNodeMiddlePoint + 10) > _diagramSize.Width)              {                  _diagramSize.Width = textWidth + callerNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = _diagramSize.Height + 10;                  double y2 = _diagramSize.Height + 20;                    var path = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    var path2 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{0}'{2}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path2.StrokeWidth = 1;                  path2.Stroke = "#979797";                    var path3 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)));                  path3.StrokeWidth = 1;                  path3.Stroke = "#979797";                    _svgGraphic.Add(path);                  _svgGraphic.Add(path2);                  _svgGraphic.Add(path3);              }              else              {                  var path = new SvgPath(_svgRoot' string.Format("M{0}'{2}L{1}'{2}"'                      callerNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                      calledNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                       (_diagramSize.Height + 20).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    _svgGraphic.Add(path);              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = _diagramSize.Height + 10;                  double y2 = _diagramSize.Height + 20;                    var path = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    var path2 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{0}'{2}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path2.StrokeWidth = 1;                  path2.Stroke = "#979797";                    var path3 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)));                  path3.StrokeWidth = 1;                  path3.Stroke = "#979797";                    _svgGraphic.Add(path);                  _svgGraphic.Add(path2);                  _svgGraphic.Add(path3);              }              else              {                  var path = new SvgPath(_svgRoot' string.Format("M{0}'{2}L{1}'{2}"'                      callerNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                      calledNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                       (_diagramSize.Height + 20).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    _svgGraphic.Add(path);              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = _diagramSize.Height + 10;                  double y2 = _diagramSize.Height + 20;                    var path = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    var path2 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{0}'{2}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path2.StrokeWidth = 1;                  path2.Stroke = "#979797";                    var path3 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)));                  path3.StrokeWidth = 1;                  path3.Stroke = "#979797";                    _svgGraphic.Add(path);                  _svgGraphic.Add(path2);                  _svgGraphic.Add(path3);              }              else              {                  var path = new SvgPath(_svgRoot' string.Format("M{0}'{2}L{1}'{2}"'                      callerNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                      calledNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                       (_diagramSize.Height + 20).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    _svgGraphic.Add(path);              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = _diagramSize.Height + 10;                  double y2 = _diagramSize.Height + 20;                    var path = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    var path2 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{0}'{2}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y1.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)));                  path2.StrokeWidth = 1;                  path2.Stroke = "#979797";                    var path3 = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      x2.ToString("0.00"' CultureInfo.InvariantCulture)'                      y2.ToString("0.00"' CultureInfo.InvariantCulture)'                      x1.ToString("0.00"' CultureInfo.InvariantCulture)));                  path3.StrokeWidth = 1;                  path3.Stroke = "#979797";                    _svgGraphic.Add(path);                  _svgGraphic.Add(path2);                  _svgGraphic.Add(path3);              }              else              {                  var path = new SvgPath(_svgRoot' string.Format("M{0}'{2}L{1}'{2}"'                      callerNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                      calledNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                       (_diagramSize.Height + 20).ToString("0.00"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    _svgGraphic.Add(path);              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionLine,The following statement contains a magic number: _diagramSize.Height += 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var points = string.Format("{0}'{1} {2}'{3} {2}'{4}"' startX' startY' startX - 5' startY - 5' startY + 5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var points = string.Format("{0}'{1} {2}'{3} {2}'{4}"' startX' startY' startX - 5' startY - 5' startY + 5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var points = string.Format("{0}'{1} {2}'{3} {2}'{4}"' startX' startY' startX - 5' startY - 5' startY + 5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var textWidth = ("return " + connection.Text).GetWidth(12' Fonts.FontLight);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var text = new SvgText(_svgRoot' "return " + connection.Text' calledNodeMiddlePoint + 10' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var text = new SvgText(_svgRoot' "return " + connection.Text' calledNodeMiddlePoint + 10' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: text.FontSize = 12;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: if ((textWidth + calledNodeMiddlePoint + 10) > _diagramSize.Width)              {                  _diagramSize.Width = textWidth + calledNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: if ((textWidth + calledNodeMiddlePoint + 10) > _diagramSize.Width)              {                  _diagramSize.Width = textWidth + calledNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var path = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{2}'{1}"'                      calledNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)'                      (_diagramSize.Height + 20).ToString("0.00"' CultureInfo.InvariantCulture)'                      callerNodeMiddlePoint.ToString("0.00"' CultureInfo.InvariantCulture)));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var startY = (int)_diagramSize.Height + 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var points = string.Format("{0}'{1} {2}'{3} {2}'{4}"' startX' startY' startX + 5' startY + 5' startY - 5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var points = string.Format("{0}'{1} {2}'{3} {2}'{4}"' startX' startY' startX + 5' startY + 5' startY - 5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var points = string.Format("{0}'{1} {2}'{3} {2}'{4}"' startX' startY' startX + 5' startY + 5' startY - 5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawReturnConnection,The following statement contains a magic number: _diagramSize.Height += 35;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: var textWidth = block.Text.GetWidth(12' Fonts.FontLight);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: var text = new SvgText(_svgRoot' block.Text' 20 + _openBlocks * 15' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: var text = new SvgText(_svgRoot' block.Text' 20 + _openBlocks * 15' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: var text = new SvgText(_svgRoot' block.Text' 20 + _openBlocks * 15' _diagramSize.Height + 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: text.FontSize = 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: if ((textWidth + 20 + _openBlocks * 15) > _diagramSize.Width)                  _diagramSize.Width = textWidth + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: if ((textWidth + 20 + _openBlocks * 15) > _diagramSize.Width)                  _diagramSize.Width = textWidth + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: if ((textWidth + 20 + _openBlocks * 15) > _diagramSize.Width)                  _diagramSize.Width = textWidth + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: if ((textWidth + 20 + _openBlocks * 15) > _diagramSize.Width)                  _diagramSize.Width = textWidth + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: if ((textWidth + 20 + _openBlocks * 15) > _diagramSize.Width)                  _diagramSize.Width = textWidth + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,OpenBlock,The following statement contains a magic number: _diagramSize.Height += 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,CloseBlock,The following statement contains a magic number: var text = new SvgText(_svgRoot' "end"' 20 + _openBlocks * 15' _diagramSize.Height);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,CloseBlock,The following statement contains a magic number: var text = new SvgText(_svgRoot' "end"' 20 + _openBlocks * 15' _diagramSize.Height);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,CloseBlock,The following statement contains a magic number: text.FontSize = 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,CloseBlock,The following statement contains a magic number: _diagramSize.Height += 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramSvgRenderer.cs,DrawVerticalLines,The following statement contains a magic number: foreach (var node in _nodeMiddlePoints)              {                  var path = new SvgPath(_svgRoot' string.Format("M{0}'{1}L{0}'{2}"'                       node.Value.ToString("0.50"' CultureInfo.InvariantCulture)'                       45'                       _diagramSize.Height.ToString("0.50"' CultureInfo.InvariantCulture)));                  path.StrokeWidth = 1;                  path.Stroke = "#979797";                    _svgGraphic.Add(path);              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,RenderDiagram,The following statement contains a magic number: _diagramSize = new Size(0.5' 80.5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,RenderDiagram,The following statement contains a magic number: _diagramSize = new Size(0.5' 80.5);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: var text = new FormattedText(node.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: var position = new Point(diagramSize.Width' 10);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: var size = new Size(text.Width + 20' 35);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: var size = new Size(text.Width + 20' 35);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: diagramSize = new Size(diagramSize.Width + text.Width + 40' diagramSize.Height);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: _context.DrawText(text' new Point(position.X + 10' position.Y + 10));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: _context.DrawText(text' new Point(position.X + 10' position.Y + 10));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawNode,The following statement contains a magic number: _nodeMiddlePoints.Add(node.ID' size.Width / 2 + position.X);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnection,The following statement contains a magic number: var text = new FormattedText(connection.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Black);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnection,The following statement contains a magic number: _context.DrawText(text' new Point(callerNodeMiddlePoint + 10' size.Height));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnection,The following statement contains a magic number: if ((text.Width + callerNodeMiddlePoint + 10) > size.Width)              {                  size.Width = text.Width + callerNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnection,The following statement contains a magic number: if ((text.Width + callerNodeMiddlePoint + 10) > size.Width)              {                  size.Width = text.Width + callerNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = size.Height + 10;                  double y2 = size.Height + 20;                    _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x1' y1)' new Point(x2' y1));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y1)' new Point(x2' y2));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y2)' new Point(x1' y2));              }              else              {                  _context.DrawLine(new Pen(Brushes.Black' 1)'                                   new Point(callerNodeMiddlePoint' size.Height + 20)'                                   new Point(calledNodeMiddlePoint' size.Height + 20));              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = size.Height + 10;                  double y2 = size.Height + 20;                    _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x1' y1)' new Point(x2' y1));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y1)' new Point(x2' y2));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y2)' new Point(x1' y2));              }              else              {                  _context.DrawLine(new Pen(Brushes.Black' 1)'                                   new Point(callerNodeMiddlePoint' size.Height + 20)'                                   new Point(calledNodeMiddlePoint' size.Height + 20));              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = size.Height + 10;                  double y2 = size.Height + 20;                    _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x1' y1)' new Point(x2' y1));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y1)' new Point(x2' y2));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y2)' new Point(x1' y2));              }              else              {                  _context.DrawLine(new Pen(Brushes.Black' 1)'                                   new Point(callerNodeMiddlePoint' size.Height + 20)'                                   new Point(calledNodeMiddlePoint' size.Height + 20));              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = size.Height + 10;                  double y2 = size.Height + 20;                    _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x1' y1)' new Point(x2' y1));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y1)' new Point(x2' y2));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y2)' new Point(x1' y2));              }              else              {                  _context.DrawLine(new Pen(Brushes.Black' 1)'                                   new Point(callerNodeMiddlePoint' size.Height + 20)'                                   new Point(calledNodeMiddlePoint' size.Height + 20));              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionLine,The following statement contains a magic number: if (connection.CallerId == connection.CalledId)              {                  double x1 = callerNodeMiddlePoint;                  double x2 = callerNodeMiddlePoint - 10;                  double y1 = size.Height + 10;                  double y2 = size.Height + 20;                    _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x1' y1)' new Point(x2' y1));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y1)' new Point(x2' y2));                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(x2' y2)' new Point(x1' y2));              }              else              {                  _context.DrawLine(new Pen(Brushes.Black' 1)'                                   new Point(callerNodeMiddlePoint' size.Height + 20)'                                   new Point(calledNodeMiddlePoint' size.Height + 20));              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionLine,The following statement contains a magic number: size.Height += 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX - 5' startY + 5)' true)' new LineSegment(new Point(startX - 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX - 5' startY + 5)' true)' new LineSegment(new Point(startX - 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX - 5' startY + 5)' true)' new LineSegment(new Point(startX - 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawConnectionArrow,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX - 5' startY + 5)' true)' new LineSegment(new Point(startX - 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var text = new FormattedText("return " + connection.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 12' Brushes.Gray);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: _context.DrawText(text' new Point(calledNodeMiddlePoint + 10' size.Height));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: if ((text.Width + calledNodeMiddlePoint + 10) > size.Width)              {                  size.Width = text.Width + calledNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: if ((text.Width + calledNodeMiddlePoint + 10) > size.Width)              {                  size.Width = text.Width + calledNodeMiddlePoint + 20;              }
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: _context.DrawLine(new Pen(Brushes.Gray' 1)' new Point(calledNodeMiddlePoint' size.Height + 20)' new Point(callerNodeMiddlePoint' size.Height + 20));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: _context.DrawLine(new Pen(Brushes.Gray' 1)' new Point(calledNodeMiddlePoint' size.Height + 20)' new Point(callerNodeMiddlePoint' size.Height + 20));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var startY = (int)size.Height + 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX + 5' startY + 5)' true)' new LineSegment(new Point(startX + 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX + 5' startY + 5)' true)' new LineSegment(new Point(startX + 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX + 5' startY + 5)' true)' new LineSegment(new Point(startX + 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: var segments = new[] { new LineSegment(new Point(startX + 5' startY + 5)' true)' new LineSegment(new Point(startX + 5' startY - 5)' true) };
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawReturnConnection,The following statement contains a magic number: size.Height += 35;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: var text = new FormattedText(block.Text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 10' Brushes.DimGray);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: _context.DrawText(text' new Point(20 + _openBlocks * 15' size.Height));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: _context.DrawText(text' new Point(20 + _openBlocks * 15' size.Height));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: if ((text.Width + 20 + _openBlocks * 15) > size.Width)                  size.Width = text.Width + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: if ((text.Width + 20 + _openBlocks * 15) > size.Width)                  size.Width = text.Width + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: if ((text.Width + 20 + _openBlocks * 15) > size.Width)                  size.Width = text.Width + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: if ((text.Width + 20 + _openBlocks * 15) > size.Width)                  size.Width = text.Width + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: if ((text.Width + 20 + _openBlocks * 15) > size.Width)                  size.Width = text.Width + 20 + _openBlocks * 15 + 10;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,OpenBlock,The following statement contains a magic number: size.Height += 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,CloseBlock,The following statement contains a magic number: var text = new FormattedText("end"' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' Fonts.FontLight' 10' Brushes.DimGray);
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,CloseBlock,The following statement contains a magic number: _context.DrawText(text' new Point(20 + _openBlocks * 15' size.Height));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,CloseBlock,The following statement contains a magic number: _context.DrawText(text' new Point(20 + _openBlocks * 15' size.Height));
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,CloseBlock,The following statement contains a magic number: size.Height += 20;
Magic Number,SharpDox.UML.Sequence,SequenceDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Sequence\Renderer\SequenceDiagramPngRenderer.cs,DrawVerticalLines,The following statement contains a magic number: foreach (var node in _nodeMiddlePoints)              {                  _context.DrawLine(new Pen(Brushes.Black' 1)' new Point(node.Value' 45)' new Point(node.Value' _diagramSize.Height));              }
Missing Default,SharpDox.UML.Class,ClassDiagramSvgRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramSvgRenderer.cs,FollowingSectionsNotEmpty,The following switch statement is missing a default case: switch (section)              {                  case "field":                      notEmpty = (_classDiagram.PropertyRows.Count + _classDiagram.ConstructorRows.Count + _classDiagram.MethodRows.Count + _classDiagram.EventRows.Count) > 0;                      break;                  case "event":                      notEmpty = (_classDiagram.PropertyRows.Count + _classDiagram.ConstructorRows.Count + _classDiagram.MethodRows.Count) > 0;                      break;                  case "method":                      notEmpty = _classDiagram.PropertyRows.Count > 0;                      break;              }
Missing Default,SharpDox.UML.Class.Renderer,ClassDiagramPngRenderer,C:\repos\Geaz_sharpDox\src\Libraries\SharpDox.UML\Class\Renderer\ClassDiagramPngRenderer.cs,FollowingSectionsNotEmpty,The following switch statement is missing a default case: switch (section)              {                  case "Fields":                      empty = classDiagram.PropertyRows.Count + classDiagram.MethodRows.Count +                              classDiagram.EventRows.Count > 0;                      break;                  case "Events":                      empty = classDiagram.MethodRows.Count + classDiagram.EventRows.Count > 0;                      break;                  case "Methods":                      empty = classDiagram.PropertyRows.Count > 0;                      break;              }
