Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpDox.Model.Repository,SDType,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Repository\SDType.cs,GetTypeConstraintText,Cyclomatic complexity of the method is 8
Long Identifier,SharpDox.Model.Documentation.Token,SDTokenList,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Documentation\Token\SDTokenList.cs,,The length of the parameter SpecialTokensThatDontRequirePreSpace is 36.
Long Identifier,SharpDox.Model.Documentation.Token,SDTokenList,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Documentation\Token\SDTokenList.cs,,The length of the parameter SpecialTokensThatDontRequirePostSpace is 37.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("dynamic"' "Dynamic"' systemNamespace) { IsProjectStranger = true' CSharpName = "dynamic" }); " is 125.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Object"' "Object"' systemNamespace) { IsProjectStranger = true' CSharpName = "object" }); " is 129.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Boolean"' "Boolean"' systemNamespace) { IsProjectStranger = true' CSharpName = "bool" }); " is 129.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Char"' "Char"' systemNamespace) { IsProjectStranger = true' CSharpName = "char" }); " is 123.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.SByte"' "SByte"' systemNamespace) { IsProjectStranger = true' CSharpName = "sbyte" }); " is 126.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Byte"' "Byte"' systemNamespace) { IsProjectStranger = true' CSharpName = "byte" }); " is 123.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Int16"' "Int16"' systemNamespace) { IsProjectStranger = true' CSharpName = "short" }); " is 126.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.UInt16"' "UInt16"' systemNamespace) { IsProjectStranger = true' CSharpName = "ushort" }); " is 129.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Int32"' "Int32"' systemNamespace) { IsProjectStranger = true' CSharpName = "int" }); " is 124.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.UInt32"' "UInt32"' systemNamespace) { IsProjectStranger = true' CSharpName = "uint" }); " is 127.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Int64"' "Int64"' systemNamespace) { IsProjectStranger = true' CSharpName = "long" }); " is 125.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.UInt64"' "UInt64"' systemNamespace) { IsProjectStranger = true' CSharpName = "ulong" }); " is 128.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Single"' "Single"' systemNamespace) { IsProjectStranger = true' CSharpName = "float" }); " is 128.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Double"' "Double"' systemNamespace) { IsProjectStranger = true' CSharpName = "double" }); " is 129.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Decimal"' "Decimal"' systemNamespace) { IsProjectStranger = true' CSharpName = "decimal" }); " is 132.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.String"' "String"' systemNamespace) { IsProjectStranger = true' CSharpName = "string" }); " is 129.
Long Statement,SharpDox.Model,KnownReferences,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\KnownReferences.cs,AddKnownTypes,The length of the statement  "                sdRepository.AddType(new SDType("System.Void"' "Void"' systemNamespace) { IsProjectStranger = true' CSharpName = "void" }); " is 123.
Long Statement,SharpDox.Model.Documentation.Token,SDTokenList,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Documentation\Token\SDTokenList.cs,ToString,The length of the statement  "                        text += ((SDCodeToken)token).IsInline ? token.Text : string.Format("{0}{1}{0}"' System.Environment.NewLine' token.Text); " is 120.
Complex Conditional,SharpDox.Model.Documentation.Token,SDTokenList,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Documentation\Token\SDTokenList.cs,ToMarkdown,The conditional expression  "addSpace && stringBuilderLength > 0 &&                           !SpecialTokensThatDontRequirePostSpace.Contains(stringBuilder[stringBuilderLength - 1]) &&                          !SpecialTokensThatDontRequirePreSpace.Contains(textToAppend[0])"  is complex.
Magic Number,SharpDox.Model.Documentation,SDTemplate,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Documentation\SDTemplate.cs,ReplaceTokens,The following statement contains a magic number: if (_tokens != null)              {                  var regEx = new Regex(@"{{token:[^}}]*}}");                  var templateTokens = regEx.Matches(_transformedTemplate);                  foreach (Match match in templateTokens)                  {                      var token = match.Value.Remove(match.Value.Length - 2).Remove(0' 2);                      var key = token.Split(':')[1].Replace("&lt;"' "<").Replace("&gt;"' ">");                        var tokenValue = "TOKEN_NOT_DEFINED";                      if (_tokens.ContainsKey(key))                      {                          tokenValue = _tokens[key];                      }                      _transformedTemplate = _transformedTemplate.Replace(match.Value' tokenValue);                  }              }
Magic Number,SharpDox.Model.Documentation,SDTemplate,C:\repos\Geaz_sharpDox\src\Core\SharpDox.Model\Documentation\SDTemplate.cs,ReplaceTokens,The following statement contains a magic number: if (_tokens != null)              {                  var regEx = new Regex(@"{{token:[^}}]*}}");                  var templateTokens = regEx.Matches(_transformedTemplate);                  foreach (Match match in templateTokens)                  {                      var token = match.Value.Remove(match.Value.Length - 2).Remove(0' 2);                      var key = token.Split(':')[1].Replace("&lt;"' "<").Replace("&gt;"' ">");                        var tokenValue = "TOKEN_NOT_DEFINED";                      if (_tokens.ContainsKey(key))                      {                          tokenValue = _tokens[key];                      }                      _transformedTemplate = _transformedTemplate.Replace(match.Value' tokenValue);                  }              }
