Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SyncSvcUtilUI.CodegenWizardPages,Step2_SelectCodeGenPrams,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step2_SelectCodeGenPrams.cs,OnMovingNext,Cyclomatic complexity of the method is 15
Complex Method,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,dbsComboBox_SelectedIndexChanged,Cyclomatic complexity of the method is 9
Complex Method,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,Cyclomatic complexity of the method is 12
Complex Method,SyncSvcUtilUI.SyncProvisionWizardPages,Setp1_GetAndOpenConfigFile,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncProvisionWizardPages\Setp1_GetAndOpenConfigFile.cs,OnMovingNext,Cyclomatic complexity of the method is 9
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step1_PickConfigOrCSDLModelPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step1_PickConfigOrCSDLModelPage.cs,openBtn_Click,The length of the statement  "		WizardHelper.Instance.SyncConfigSection = (SyncConfigurationSection)((SyncConfigurationSection)config.GetSection ("SyncConfiguration")).Clone (); " is 145.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step1_PickConfigOrCSDLModelPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step1_PickConfigOrCSDLModelPage.cs,OnMovingNext,The length of the statement  "			MessageBox.Show ("Please specify a Target Database before proceeding."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step1_PickConfigOrCSDLModelPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step1_PickConfigOrCSDLModelPage.cs,OnMovingNext,The length of the statement  "		WizardHelper.Instance.CodeGenWizardHelper [WizardHelper.SELECTED_CONFIG_NAME] = this.scopesBox.SelectedItem.ToString (); " is 120.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step1_PickConfigOrCSDLModelPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step1_PickConfigOrCSDLModelPage.cs,OnMovingNext,The length of the statement  "		WizardHelper.Instance.CodeGenWizardHelper [WizardHelper.SELECTED_CODEGEN_SOURCE] = WizardHelper.CONFIG_FILE_CODEGEN_SOURCE; " is 123.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step1_PickConfigOrCSDLModelPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step1_PickConfigOrCSDLModelPage.cs,OnMovingNext,The length of the statement  "		WizardHelper.Instance.CodeGenWizardHelper [WizardHelper.SELECTED_CONFIG_NAME] = this.csdlScopesBox.SelectedItem.ToString (); " is 124.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step1_PickConfigOrCSDLModelPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step1_PickConfigOrCSDLModelPage.cs,OnMovingNext,The length of the statement  "		WizardHelper.Instance.CodeGenWizardHelper [WizardHelper.CSDL_CODEGEN_URL] = string.Format (WizardHelper.CSDL_CODEGEN_URL_FORMAT' this.csdlUrl.Text' this.csdlScopesBox.SelectedItem.ToString ()); " is 193.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step2_SelectCodeGenPrams,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step2_SelectCodeGenPrams.cs,OnFocus,The length of the statement  "	if (WizardHelper.Instance.CodeGenWizardHelper [WizardHelper.SELECTED_CODEGEN_SOURCE] == WizardHelper.CONFIG_FILE_CODEGEN_SOURCE) { " is 130.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step2_SelectCodeGenPrams,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step2_SelectCodeGenPrams.cs,OnMovingNext,The length of the statement  "		MessageBox.Show ("Please specify a target for which to generate files."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 126.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step2_SelectCodeGenPrams,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step2_SelectCodeGenPrams.cs,OnMovingNext,The length of the statement  "		MessageBox.Show ("Please specify a output folder name for generated files."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 130.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step2_SelectCodeGenPrams,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step2_SelectCodeGenPrams.cs,OnMovingNext,The length of the statement  "		MessageBox.Show ("Please specify a non empty namespace for generated files."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 131.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step3_SummaryOfCodegenPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step3_SummaryOfCodegenPage.cs,OnFocus,The length of the statement  "	if (WizardHelper.Instance.CodeGenWizardHelper [WizardHelper.SELECTED_CODEGEN_SOURCE] == WizardHelper.CONFIG_FILE_CODEGEN_SOURCE) { " is 130.
Long Statement,SyncSvcUtilUI.CodegenWizardPages,Step3_SummaryOfCodegenPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\CodegenWizardPages\Step3_SummaryOfCodegenPage.cs,OnFocus,The length of the statement  "	this.displayBox.Text += tArgs.Aggregate ("syncsvcutil.exe "' (current' tArg) => current + tArg + " ") + Environment.NewLine; " is 124.
Long Statement,SyncSvcUtilUI,Program,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\Program.cs,Main,The length of the statement  "		MessageBox.Show ("Something unexpected happened." + exp.StackTrace' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 121.
Long Statement,SyncSvcUtilUI,SyncMasterWizard,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncMasterWizard.cs,SetButtonLabels,The length of the statement  "	this.nextBtn.Text = (this.curPage >= this.wizardPages.Length - 1) ? SyncMasterWizard.FinishText : SyncMasterWizard.NextText; " is 124.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step1_CreateOrOpenPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step1_CreateOrOpenPage.cs,OnMovingNext,The length of the statement  "		WizardHelper.Instance.SyncConfigSection = (SyncConfigurationSection)((SyncConfigurationSection)config.GetSection ("SyncConfiguration")).Clone (); " is 145.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step2_AddDatabaseInfoPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step2_AddDatabaseInfoPage.cs,dbListBox_SelectedIndexChanged,The length of the statement  "		TargetDatabaseConfigElement db = WizardHelper.Instance.SyncConfigSection.Databases.GetElementAt (this.dbListBox.SelectedIndex); " is 127.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step2_AddDatabaseInfoPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step2_AddDatabaseInfoPage.cs,saveBtn_Click,The length of the statement  "			TargetDatabaseConfigElement db = WizardHelper.Instance.SyncConfigSection.Databases.GetElementAt (this.dbListBox.SelectedIndex); " is 127.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step2_AddDatabaseInfoPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step2_AddDatabaseInfoPage.cs,TestConnection,The length of the statement  "		MessageBox.Show ("Connection to database failed. " + sqlE.Message' "Connection test."' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 131.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step2_AddDatabaseInfoPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step2_AddDatabaseInfoPage.cs,removeBtn_Click,The length of the statement  "	if (MessageBox.Show ("Do you want to remove the Database config info?"' "Remove Database Config"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 170.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step3_AddSyncScopePage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step3_AddSyncScopePage.cs,syncScopeBox_SelectedIndexChanged,The length of the statement  "		SyncScopeConfigElement scope = WizardHelper.Instance.SyncConfigSection.SyncScopes.GetElementAt (this.syncScopeBox.SelectedIndex); " is 129.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step3_AddSyncScopePage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step3_AddSyncScopePage.cs,saveBtn_Click,The length of the statement  "		MessageBox.Show ("Please enter a valid name for sync scope Name."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 120.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step3_AddSyncScopePage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step3_AddSyncScopePage.cs,saveBtn_Click,The length of the statement  "		SyncScopeConfigElement scope = WizardHelper.Instance.SyncConfigSection.SyncScopes.GetElementAt (this.syncScopeBox.SelectedIndex); " is 129.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step3_AddSyncScopePage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step3_AddSyncScopePage.cs,removeBtn_Click,The length of the statement  "	if (MessageBox.Show ("Do you want to remove the selected SyncScope?"' "Remove SyncScope Config"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 169.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,dbsComboBox_SelectedIndexChanged,The length of the statement  "	TargetDatabaseConfigElement db = WizardHelper.Instance.SyncConfigSection.Databases.GetElementAt (this.dbsComboBox.SelectedIndex); " is 129.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,dbsComboBox_SelectedIndexChanged,The length of the statement  "							this.tablesBox.Items.Add (quotedTableName' (selectedScope.SyncTables.GetElement (quotedTableName) != null || selectedScope.SyncTables.GetElement (tableName) != null)); " is 167.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,dbsComboBox_SelectedIndexChanged,The length of the statement  "							this.tablesBox.Items.Add (quotedFullName' selectedScope.SyncTables.GetElement (quotedFullName) != null || selectedScope.SyncTables.GetElement (fullName) != null); " is 162.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,dbsComboBox_SelectedIndexChanged,The length of the statement  "		MessageBox.Show ("Error in querying database. " + exp.Message' "Target Database Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,IsTableNameValid,The length of the statement  "	return (WizardHelper.SYNC_TABLE_NAMES.Where (e => e.Equals (tableName' StringComparison.Ordinal)).FirstOrDefault () == null && !tableName.EndsWith ("_tracking")); " is 162.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,tablesBox_ItemCheck,The length of the statement  "			TargetDatabaseConfigElement db = WizardHelper.Instance.SyncConfigSection.Databases.GetElementAt (this.dbsComboBox.SelectedIndex); " is 129.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,tablesBox_ItemCheck,The length of the statement  "				tableDesc = SqlSyncDescriptionBuilder.GetDescriptionForTable (tableName' new SqlConnection (db.GetConnectionString ())); " is 120.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,tablesBox_ItemCheck,The length of the statement  "				MessageBox.Show ("Error in querying database. " + exp.Message' "Target Database Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The length of the statement  "				SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ()); " is 127.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The length of the statement  "			SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ()); " is 122.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The length of the statement  "						if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) { " is 248.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,tablesBox_SelectedIndexChanged,The length of the statement  "		TargetDatabaseConfigElement db = WizardHelper.Instance.SyncConfigSection.Databases.GetElementAt (this.dbsComboBox.SelectedIndex); " is 129.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,tablesBox_SelectedIndexChanged,The length of the statement  "		tableDesc = SqlSyncDescriptionBuilder.GetDescriptionForTable (table.Name' new SqlConnection (db.GetConnectionString ())); " is 121.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4_AddSyncTablesPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4_AddSyncTablesPage.cs,delBtn_Click,The length of the statement  "	if (MessageBox.Show ("Do you want to remove the selected SyncTable?"' "Remove SyncTable Config"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 169.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4_AddSyncTablesPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4_AddSyncTablesPage.cs,delBtn_Click,The length of the statement  "		WizardHelper.Instance.SyncConfigSection.SyncScopes.GetElementAt (this.scopeComboBox.SelectedIndex).SyncTables.Remove (this.syncTablesBox.SelectedItem.ToString ()); " is 163.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4_AddSyncTablesPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4_AddSyncTablesPage.cs,ReadAndBindTablesData,The length of the statement  "	SyncScopeConfigElement selectedScope = WizardHelper.Instance.SyncConfigSection.SyncScopes.GetElementAt (this.scopeComboBox.SelectedIndex); " is 138.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4_AddSyncTablesPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4_AddSyncTablesPage.cs,syncTablesBox_SelectedIndexChanged,The length of the statement  "		SyncScopeConfigElement selectedScope = WizardHelper.Instance.SyncConfigSection.SyncScopes.GetElementAt (this.scopeComboBox.SelectedIndex); " is 138.
Long Statement,SyncSvcUtilUI.SyncConfigWizardPages,Step4_AddSyncTablesPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4_AddSyncTablesPage.cs,MoveTable,The length of the statement  "	SyncScopeConfigElement selectedScope = WizardHelper.Instance.SyncConfigSection.SyncScopes.GetElementAt (this.scopeComboBox.SelectedIndex); " is 138.
Long Statement,SyncSvcUtilUI.SyncProvisionWizardPages,Setp1_GetAndOpenConfigFile,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncProvisionWizardPages\Setp1_GetAndOpenConfigFile.cs,openBtn_Click,The length of the statement  "		WizardHelper.Instance.SyncConfigSection = (SyncConfigurationSection)((SyncConfigurationSection)config.GetSection ("SyncConfiguration")).Clone (); " is 145.
Long Statement,SyncSvcUtilUI.SyncProvisionWizardPages,Setp1_GetAndOpenConfigFile,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncProvisionWizardPages\Setp1_GetAndOpenConfigFile.cs,OnMovingNext,The length of the statement  "		MessageBox.Show ("Please specify a Target Database before proceeding."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,SyncSvcUtilUI.SyncProvisionWizardPages,Setp1_GetAndOpenConfigFile,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncProvisionWizardPages\Setp1_GetAndOpenConfigFile.cs,OnMovingNext,The length of the statement  "	WizardHelper.Instance.ProvisioningWizardHelper [WizardHelper.SELECTED_CONFIG_NAME] = this.scopesBox.SelectedItem.ToString (); " is 125.
Long Statement,SyncSvcUtilUI.SyncProvisionWizardPages,Step2_SummaryOfProvDeProvPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncProvisionWizardPages\Step2_SummaryOfProvDeProvPage.cs,OnFocus,The length of the statement  "		this.displayBox.Text += tArgs.Aggregate ("syncsvcutil.exe "' (current' tArg) => current + tArg + " ") + Environment.NewLine; " is 124.
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,DisplaySyncTableDetails,The following statement contains a magic number: foreach (DbSyncColumnDescription colDesc in tableDesc.Columns) {  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colDesc.UnquotedName);  	if (colConfig == null) {  		colsView.Rows.Add (colDesc.UnquotedName' false' false);  	}  	else {  		colsView.Rows.Add (colConfig.Name' true' // IsSync  		table.FilterColumns.GetElement (colConfig.Name) != null);  		// IsFilterCol  	}  	DataGridViewRow row = colsView.Rows [colsView.Rows.Count - 1];  	if (colConfig != null && colConfig.IsPrimaryKey) {  		// Freeze the row if its a primary key  		row.ReadOnly = true;  	}  	row.Cells [2].ReadOnly = colConfig == null;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,DisplaySyncTableDetails,The following statement contains a magic number: row.Cells [2].ReadOnly = colConfig == null;  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex > 0) {  	// Check to see if its a column being added/removed from sync  	DataGridViewCheckBoxCell cell = this.colsView.Rows [e.RowIndex].Cells [e.ColumnIndex] as DataGridViewCheckBoxCell;  	DbSyncColumnDescription col = tableDesc.Columns [e.RowIndex];  	if (e.ColumnIndex == 1) {  		if (cell.Value == null || !(bool)cell.Value) {  			// Sync column unchecked  			SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  			if (colConfig != null) {  				table.SyncColumns.Remove (colConfig.Name);  				this.RemoveFilterColumnInfo (table' colConfig);  				this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  				// Make filter col readonly  				this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  			}  		}  		else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  			// Sync column is checked. Add it back to the SyncColumn list  			SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  				Name = col.UnquotedName'  				IsPrimaryKey = false'  				IsNullable = col.IsNullable'  				SqlType = col.Type'  			};  			table.SyncColumns.Add (colConfig);  			// Set the filter col to enabled.  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  		}  		table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  	}  	else {  		// Its a filter column  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  			string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			if (cell.Value != null && !(bool)cell.Value) {  				// Filter column unchecked  				this.RemoveFilterColumnInfo (table' colConfig);  			}  			else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  				// Add Filter column  				table.FilterColumns.Add (new FilterColumnConfigElement () {  					Name = colConfig.Name  				});  				// Add Filter parameter  				table.FilterParameters.Add (new FilterParameterConfigElement () {  					Name = filterParamName'  					SqlType = tableDesc.Columns [e.RowIndex].Type'  				});  				// Fix by xperiandi' Thks !  				if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  					// Set size  					DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  					string columnsSize = column.Size;  					if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  					}  					else {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  					}  				}  				if (string.IsNullOrEmpty (table.FilterClause)) {  					table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  				}  				else {  					table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  				}  			}  		}  		this.filterClauseTxtBox.Text = table.FilterClause;  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex > 0) {  	// Check to see if its a column being added/removed from sync  	DataGridViewCheckBoxCell cell = this.colsView.Rows [e.RowIndex].Cells [e.ColumnIndex] as DataGridViewCheckBoxCell;  	DbSyncColumnDescription col = tableDesc.Columns [e.RowIndex];  	if (e.ColumnIndex == 1) {  		if (cell.Value == null || !(bool)cell.Value) {  			// Sync column unchecked  			SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  			if (colConfig != null) {  				table.SyncColumns.Remove (colConfig.Name);  				this.RemoveFilterColumnInfo (table' colConfig);  				this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  				// Make filter col readonly  				this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  			}  		}  		else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  			// Sync column is checked. Add it back to the SyncColumn list  			SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  				Name = col.UnquotedName'  				IsPrimaryKey = false'  				IsNullable = col.IsNullable'  				SqlType = col.Type'  			};  			table.SyncColumns.Add (colConfig);  			// Set the filter col to enabled.  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  		}  		table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  	}  	else {  		// Its a filter column  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  			string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			if (cell.Value != null && !(bool)cell.Value) {  				// Filter column unchecked  				this.RemoveFilterColumnInfo (table' colConfig);  			}  			else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  				// Add Filter column  				table.FilterColumns.Add (new FilterColumnConfigElement () {  					Name = colConfig.Name  				});  				// Add Filter parameter  				table.FilterParameters.Add (new FilterParameterConfigElement () {  					Name = filterParamName'  					SqlType = tableDesc.Columns [e.RowIndex].Type'  				});  				// Fix by xperiandi' Thks !  				if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  					// Set size  					DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  					string columnsSize = column.Size;  					if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  					}  					else {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  					}  				}  				if (string.IsNullOrEmpty (table.FilterClause)) {  					table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  				}  				else {  					table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  				}  			}  		}  		this.filterClauseTxtBox.Text = table.FilterClause;  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex > 0) {  	// Check to see if its a column being added/removed from sync  	DataGridViewCheckBoxCell cell = this.colsView.Rows [e.RowIndex].Cells [e.ColumnIndex] as DataGridViewCheckBoxCell;  	DbSyncColumnDescription col = tableDesc.Columns [e.RowIndex];  	if (e.ColumnIndex == 1) {  		if (cell.Value == null || !(bool)cell.Value) {  			// Sync column unchecked  			SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  			if (colConfig != null) {  				table.SyncColumns.Remove (colConfig.Name);  				this.RemoveFilterColumnInfo (table' colConfig);  				this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  				// Make filter col readonly  				this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  			}  		}  		else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  			// Sync column is checked. Add it back to the SyncColumn list  			SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  				Name = col.UnquotedName'  				IsPrimaryKey = false'  				IsNullable = col.IsNullable'  				SqlType = col.Type'  			};  			table.SyncColumns.Add (colConfig);  			// Set the filter col to enabled.  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  		}  		table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  	}  	else {  		// Its a filter column  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  			string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			if (cell.Value != null && !(bool)cell.Value) {  				// Filter column unchecked  				this.RemoveFilterColumnInfo (table' colConfig);  			}  			else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  				// Add Filter column  				table.FilterColumns.Add (new FilterColumnConfigElement () {  					Name = colConfig.Name  				});  				// Add Filter parameter  				table.FilterParameters.Add (new FilterParameterConfigElement () {  					Name = filterParamName'  					SqlType = tableDesc.Columns [e.RowIndex].Type'  				});  				// Fix by xperiandi' Thks !  				if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  					// Set size  					DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  					string columnsSize = column.Size;  					if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  					}  					else {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  					}  				}  				if (string.IsNullOrEmpty (table.FilterClause)) {  					table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  				}  				else {  					table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  				}  			}  		}  		this.filterClauseTxtBox.Text = table.FilterClause;  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex > 0) {  	// Check to see if its a column being added/removed from sync  	DataGridViewCheckBoxCell cell = this.colsView.Rows [e.RowIndex].Cells [e.ColumnIndex] as DataGridViewCheckBoxCell;  	DbSyncColumnDescription col = tableDesc.Columns [e.RowIndex];  	if (e.ColumnIndex == 1) {  		if (cell.Value == null || !(bool)cell.Value) {  			// Sync column unchecked  			SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  			if (colConfig != null) {  				table.SyncColumns.Remove (colConfig.Name);  				this.RemoveFilterColumnInfo (table' colConfig);  				this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  				// Make filter col readonly  				this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  			}  		}  		else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  			// Sync column is checked. Add it back to the SyncColumn list  			SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  				Name = col.UnquotedName'  				IsPrimaryKey = false'  				IsNullable = col.IsNullable'  				SqlType = col.Type'  			};  			table.SyncColumns.Add (colConfig);  			// Set the filter col to enabled.  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  		}  		table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  	}  	else {  		// Its a filter column  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  			string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			if (cell.Value != null && !(bool)cell.Value) {  				// Filter column unchecked  				this.RemoveFilterColumnInfo (table' colConfig);  			}  			else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  				// Add Filter column  				table.FilterColumns.Add (new FilterColumnConfigElement () {  					Name = colConfig.Name  				});  				// Add Filter parameter  				table.FilterParameters.Add (new FilterParameterConfigElement () {  					Name = filterParamName'  					SqlType = tableDesc.Columns [e.RowIndex].Type'  				});  				// Fix by xperiandi' Thks !  				if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  					// Set size  					DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  					string columnsSize = column.Size;  					if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  					}  					else {  						table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  					}  				}  				if (string.IsNullOrEmpty (table.FilterClause)) {  					table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  				}  				else {  					table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  				}  			}  		}  		this.filterClauseTxtBox.Text = table.FilterClause;  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex == 1) {  	if (cell.Value == null || !(bool)cell.Value) {  		// Sync column unchecked  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			table.SyncColumns.Remove (colConfig.Name);  			this.RemoveFilterColumnInfo (table' colConfig);  			this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  			// Make filter col readonly  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  		}  	}  	else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  		// Sync column is checked. Add it back to the SyncColumn list  		SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  			Name = col.UnquotedName'  			IsPrimaryKey = false'  			IsNullable = col.IsNullable'  			SqlType = col.Type'  		};  		table.SyncColumns.Add (colConfig);  		// Set the filter col to enabled.  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  	}  	table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  }  else {  	// Its a filter column  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  		string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  		string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  		if (cell.Value != null && !(bool)cell.Value) {  			// Filter column unchecked  			this.RemoveFilterColumnInfo (table' colConfig);  		}  		else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  			// Add Filter column  			table.FilterColumns.Add (new FilterColumnConfigElement () {  				Name = colConfig.Name  			});  			// Add Filter parameter  			table.FilterParameters.Add (new FilterParameterConfigElement () {  				Name = filterParamName'  				SqlType = tableDesc.Columns [e.RowIndex].Type'  			});  			// Fix by xperiandi' Thks !  			if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  				// Set size  				DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  				string columnsSize = column.Size;  				if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  				}  				else {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  				}  			}  			if (string.IsNullOrEmpty (table.FilterClause)) {  				table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			}  			else {  				table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			}  		}  	}  	this.filterClauseTxtBox.Text = table.FilterClause;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex == 1) {  	if (cell.Value == null || !(bool)cell.Value) {  		// Sync column unchecked  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			table.SyncColumns.Remove (colConfig.Name);  			this.RemoveFilterColumnInfo (table' colConfig);  			this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  			// Make filter col readonly  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  		}  	}  	else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  		// Sync column is checked. Add it back to the SyncColumn list  		SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  			Name = col.UnquotedName'  			IsPrimaryKey = false'  			IsNullable = col.IsNullable'  			SqlType = col.Type'  		};  		table.SyncColumns.Add (colConfig);  		// Set the filter col to enabled.  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  	}  	table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  }  else {  	// Its a filter column  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  		string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  		string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  		if (cell.Value != null && !(bool)cell.Value) {  			// Filter column unchecked  			this.RemoveFilterColumnInfo (table' colConfig);  		}  		else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  			// Add Filter column  			table.FilterColumns.Add (new FilterColumnConfigElement () {  				Name = colConfig.Name  			});  			// Add Filter parameter  			table.FilterParameters.Add (new FilterParameterConfigElement () {  				Name = filterParamName'  				SqlType = tableDesc.Columns [e.RowIndex].Type'  			});  			// Fix by xperiandi' Thks !  			if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  				// Set size  				DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  				string columnsSize = column.Size;  				if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  				}  				else {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  				}  			}  			if (string.IsNullOrEmpty (table.FilterClause)) {  				table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			}  			else {  				table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			}  		}  	}  	this.filterClauseTxtBox.Text = table.FilterClause;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex == 1) {  	if (cell.Value == null || !(bool)cell.Value) {  		// Sync column unchecked  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			table.SyncColumns.Remove (colConfig.Name);  			this.RemoveFilterColumnInfo (table' colConfig);  			this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  			// Make filter col readonly  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  		}  	}  	else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  		// Sync column is checked. Add it back to the SyncColumn list  		SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  			Name = col.UnquotedName'  			IsPrimaryKey = false'  			IsNullable = col.IsNullable'  			SqlType = col.Type'  		};  		table.SyncColumns.Add (colConfig);  		// Set the filter col to enabled.  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  	}  	table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  }  else {  	// Its a filter column  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  		string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  		string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  		if (cell.Value != null && !(bool)cell.Value) {  			// Filter column unchecked  			this.RemoveFilterColumnInfo (table' colConfig);  		}  		else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  			// Add Filter column  			table.FilterColumns.Add (new FilterColumnConfigElement () {  				Name = colConfig.Name  			});  			// Add Filter parameter  			table.FilterParameters.Add (new FilterParameterConfigElement () {  				Name = filterParamName'  				SqlType = tableDesc.Columns [e.RowIndex].Type'  			});  			// Fix by xperiandi' Thks !  			if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  				// Set size  				DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  				string columnsSize = column.Size;  				if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  				}  				else {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  				}  			}  			if (string.IsNullOrEmpty (table.FilterClause)) {  				table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			}  			else {  				table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			}  		}  	}  	this.filterClauseTxtBox.Text = table.FilterClause;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (e.ColumnIndex == 1) {  	if (cell.Value == null || !(bool)cell.Value) {  		// Sync column unchecked  		SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  		if (colConfig != null) {  			table.SyncColumns.Remove (colConfig.Name);  			this.RemoveFilterColumnInfo (table' colConfig);  			this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  			// Make filter col readonly  			this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  		}  	}  	else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  		// Sync column is checked. Add it back to the SyncColumn list  		SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  			Name = col.UnquotedName'  			IsPrimaryKey = false'  			IsNullable = col.IsNullable'  			SqlType = col.Type'  		};  		table.SyncColumns.Add (colConfig);  		// Set the filter col to enabled.  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  	}  	table.IncludeAllColumns = table.SyncColumns.Count == colsView.Rows.Count;  }  else {  	// Its a filter column  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  		string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  		string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  		if (cell.Value != null && !(bool)cell.Value) {  			// Filter column unchecked  			this.RemoveFilterColumnInfo (table' colConfig);  		}  		else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  			// Add Filter column  			table.FilterColumns.Add (new FilterColumnConfigElement () {  				Name = colConfig.Name  			});  			// Add Filter parameter  			table.FilterParameters.Add (new FilterParameterConfigElement () {  				Name = filterParamName'  				SqlType = tableDesc.Columns [e.RowIndex].Type'  			});  			// Fix by xperiandi' Thks !  			if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  				// Set size  				DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  				string columnsSize = column.Size;  				if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  				}  				else {  					table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  				}  			}  			if (string.IsNullOrEmpty (table.FilterClause)) {  				table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  			}  			else {  				table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  			}  		}  	}  	this.filterClauseTxtBox.Text = table.FilterClause;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (cell.Value == null || !(bool)cell.Value) {  	// Sync column unchecked  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		table.SyncColumns.Remove (colConfig.Name);  		this.RemoveFilterColumnInfo (table' colConfig);  		this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  		// Make filter col readonly  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  	}  }  else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  	// Sync column is checked. Add it back to the SyncColumn list  	SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  		Name = col.UnquotedName'  		IsPrimaryKey = false'  		IsNullable = col.IsNullable'  		SqlType = col.Type'  	};  	table.SyncColumns.Add (colConfig);  	// Set the filter col to enabled.  	this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (cell.Value == null || !(bool)cell.Value) {  	// Sync column unchecked  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		table.SyncColumns.Remove (colConfig.Name);  		this.RemoveFilterColumnInfo (table' colConfig);  		this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  		// Make filter col readonly  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  	}  }  else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  	// Sync column is checked. Add it back to the SyncColumn list  	SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  		Name = col.UnquotedName'  		IsPrimaryKey = false'  		IsNullable = col.IsNullable'  		SqlType = col.Type'  	};  	table.SyncColumns.Add (colConfig);  	// Set the filter col to enabled.  	this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (cell.Value == null || !(bool)cell.Value) {  	// Sync column unchecked  	SyncColumnConfigElement colConfig = table.SyncColumns.GetElement (this.colsView.Rows [e.RowIndex].Cells [0].Value.ToString ());  	if (colConfig != null) {  		table.SyncColumns.Remove (colConfig.Name);  		this.RemoveFilterColumnInfo (table' colConfig);  		this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  		// Make filter col readonly  		this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  	}  }  else if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  	// Sync column is checked. Add it back to the SyncColumn list  	SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  		Name = col.UnquotedName'  		IsPrimaryKey = false'  		IsNullable = col.IsNullable'  		SqlType = col.Type'  	};  	table.SyncColumns.Add (colConfig);  	// Set the filter col to enabled.  	this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (colConfig != null) {  	table.SyncColumns.Remove (colConfig.Name);  	this.RemoveFilterColumnInfo (table' colConfig);  	this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  	// Make filter col readonly  	this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (colConfig != null) {  	table.SyncColumns.Remove (colConfig.Name);  	this.RemoveFilterColumnInfo (table' colConfig);  	this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  	// Make filter col readonly  	this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: this.colsView.Rows [e.RowIndex].Cells [2].Value = false;  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = true;  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (table.SyncColumns.GetElement (col.UnquotedName) == null) {  	// Sync column is checked. Add it back to the SyncColumn list  	SyncColumnConfigElement colConfig = new SyncColumnConfigElement () {  		Name = col.UnquotedName'  		IsPrimaryKey = false'  		IsNullable = col.IsNullable'  		SqlType = col.Type'  	};  	table.SyncColumns.Add (colConfig);  	// Set the filter col to enabled.  	this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: this.colsView.Rows [e.RowIndex].Cells [2].ReadOnly = false;  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (colConfig != null) {  	string filterParamName = "@" + WizardHelper.SanitizeName (colConfig.Name);  	string andFilterClause = string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  	string FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  	if (cell.Value != null && !(bool)cell.Value) {  		// Filter column unchecked  		this.RemoveFilterColumnInfo (table' colConfig);  	}  	else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  		// Add Filter column  		table.FilterColumns.Add (new FilterColumnConfigElement () {  			Name = colConfig.Name  		});  		// Add Filter parameter  		table.FilterParameters.Add (new FilterParameterConfigElement () {  			Name = filterParamName'  			SqlType = tableDesc.Columns [e.RowIndex].Type'  		});  		// Fix by xperiandi' Thks !  		if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  			// Set size  			DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  			string columnsSize = column.Size;  			if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  				table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  			}  			else {  				table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  			}  		}  		if (string.IsNullOrEmpty (table.FilterClause)) {  			table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  		}  		else {  			table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  		}  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (cell.Value != null && !(bool)cell.Value) {  	// Filter column unchecked  	this.RemoveFilterColumnInfo (table' colConfig);  }  else if (table.FilterColumns.GetElement (colConfig.Name) == null) {  	// Add Filter column  	table.FilterColumns.Add (new FilterColumnConfigElement () {  		Name = colConfig.Name  	});  	// Add Filter parameter  	table.FilterParameters.Add (new FilterParameterConfigElement () {  		Name = filterParamName'  		SqlType = tableDesc.Columns [e.RowIndex].Type'  	});  	// Fix by xperiandi' Thks !  	if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  		// Set size  		DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  		string columnsSize = column.Size;  		if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  			table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  		}  		else {  			table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  		}  	}  	if (string.IsNullOrEmpty (table.FilterClause)) {  		table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  	}  	else {  		table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (table.FilterColumns.GetElement (colConfig.Name) == null) {  	// Add Filter column  	table.FilterColumns.Add (new FilterColumnConfigElement () {  		Name = colConfig.Name  	});  	// Add Filter parameter  	table.FilterParameters.Add (new FilterParameterConfigElement () {  		Name = filterParamName'  		SqlType = tableDesc.Columns [e.RowIndex].Type'  	});  	// Fix by xperiandi' Thks !  	if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  		// Set size  		DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  		string columnsSize = column.Size;  		if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  			table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  		}  		else {  			table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  		}  	}  	if (string.IsNullOrEmpty (table.FilterClause)) {  		table.FilterClause = string.Format (FilterClauseFormat' colConfig.Name' filterParamName);  	}  	else {  		table.FilterClause += string.Format (AndFilterClauseFormat' colConfig.Name' filterParamName);  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if ((tableDesc.Columns [e.RowIndex].SizeSpecified)) {  	// Set size  	DbSyncColumnDescription column = tableDesc.Columns [e.RowIndex];  	string columnsSize = column.Size;  	if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  		table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  	}  	else {  		table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  	}  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: if (string.Compare (columnsSize' "max"' StringComparison.OrdinalIgnoreCase) == 0 && (string.Compare (column.Type' "nvarchar"' StringComparison.OrdinalIgnoreCase) * string.Compare (column.Type' "varchar"' StringComparison.OrdinalIgnoreCase)) == 0) {  	table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  }  else {  	table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = int.Parse (columnsSize);  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,colsView_CellEndEdit,The following statement contains a magic number: table.FilterParameters.GetElementAt (table.FilterParameters.Count - 1).DataSize = 4000;  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,RemoveFilterColumnInfo,The following statement contains a magic number: if (table.FilterClause.StartsWith (" AND ")) {  	table.FilterClause = table.FilterClause.Substring (5);  }  
Magic Number,SyncSvcUtilUI.SyncConfigWizardPages,Step4a_ReadTableInfoFromDbPage,C:\repos\Mimetis_SyncWinRT\C#\tools\SyncSvcUtilUI\SyncConfigWizardPages\Step4a_ReadTableInfoFromDbPage.cs,RemoveFilterColumnInfo,The following statement contains a magic number: table.FilterClause = table.FilterClause.Substring (5);  
