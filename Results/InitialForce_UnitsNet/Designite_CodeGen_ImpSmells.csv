Implementation smell,Namespace,Class,File,Method,Description
Long Method,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The method has 138 lines of code.
Long Method,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The method has 120 lines of code.
Long Method,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateConversionMethods,The method has 116 lines of code.
Long Method,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The method has 250 lines of code.
Long Method,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The method has 141 lines of code.
Complex Method,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,Cyclomatic complexity of the method is 12
Long Statement,CodeGen.Generators,QuantityJsonFilesParser,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\QuantityJsonFilesParser.cs,ParseQuantityFile,The length of the statement  "                var quantity = JsonConvert.DeserializeObject<Quantity>(File.ReadAllText(jsonFile' Encoding.UTF8)' JsonSerializerSettings); " is 122.
Long Statement,CodeGen.Generators,QuantityJsonFilesParser,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\QuantityJsonFilesParser.cs,GetLocalizationForPrefixUnit,The length of the statement  "                // No prefix unit abbreviations are specified' so fall back to prepending the default SI prefix to each unit abbreviation: " is 122.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,Generate,The length of the statement  "    public partial struct {_quantity.Name} : IQuantity<{_unitEnumName}>' IEquatable<{_quantity.Name}>' IComparable' IComparable<{_quantity.Name}>' IConvertible' IFormattable " is 169.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticConstructor,The length of the statement  "            BaseDimensions = new BaseDimensions({baseDimensions.L}' {baseDimensions.M}' {baseDimensions.T}' {baseDimensions.I}' {baseDimensions.Î˜}' {baseDimensions.N}' {baseDimensions.J}); " is 176.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateInstanceConstructors,The length of the statement  "        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref=""UnitSystem""/>. " is 131.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateInstanceConstructors,The length of the statement  "            _unit = firstUnitInfo?.Value ?? throw new ArgumentException(""No units were found for the given UnitSystem.""' nameof(unitSystem)); " is 131.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticProperties,The length of the statement  "        public static {_unitEnumName}[] Units {{ get; }} = Enum.GetValues(typeof({_unitEnumName})).Cast<{_unitEnumName}>().Except(new {_unitEnumName}[]{{ {_unitEnumName}.Undefined }}).ToArray(); " is 186.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticMethods,The length of the statement  "        /// <param name=""provider"">Format to use for localization. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 135.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticFactoryMethods,The length of the statement  "        ///     Dynamically convert from value and unit enum <see cref=""{_unitEnumName}"" /> to <see cref=""{_quantity.Name}"" />. " is 123.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        ///     <see cref=""VolumeUnit.MetricCup"" />' <see cref=""VolumeUnit.UsLegalCup"" /> and <see cref=""VolumeUnit.UsCustomaryCup"" />. " is 133.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        ///     <see cref=""VolumeUnit.MetricCup"" />' <see cref=""VolumeUnit.UsLegalCup"" /> and <see cref=""VolumeUnit.UsCustomaryCup"" />. " is 133.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""provider"">Format to use when parsing number and unit. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 147.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""provider"">Format to use when parsing number and unit. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 147.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""provider"">Format to use when parsing number and unit. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 147.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""provider"">Format to use when parsing number and unit. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 147.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from multiplying value and <see cref=""{_quantity.Name}""/>.</summary> " is 120.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from multiplying value and <see cref=""{_quantity.Name}""/>.</summary> " is 120.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateArithmeticOperators,The length of the statement  "        /// <summary>Get ratio value from dividing <see cref=""{_quantity.Name}""/> by <see cref=""{_quantity.Name}""/>.</summary> " is 122.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "            // Most logarithmic operators need a simple scaling factor of 10. However' certain units such as voltage ratio need to use 20 instead. " is 134.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from logarithmic addition of two <see cref=""{_quantity.Name}""/>.</summary> " is 126.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "            return new {_quantity.Name}({x}*Math.Log10(Math.Pow(10' left.Value/{x}) + Math.Pow(10' right.GetValueAs(left.Unit)/{x}))' left.Unit); " is 133.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from logarithmic subtraction of two <see cref=""{_quantity.Name}""/>.</summary> " is 129.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "            return new {_quantity.Name}({x}*Math.Log10(Math.Pow(10' left.Value/{x}) - Math.Pow(10' right.GetValueAs(left.Unit)/{x}))' left.Unit); " is 133.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from logarithmic multiplication of value and <see cref=""{_quantity.Name}""/>.</summary> " is 138.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from logarithmic multiplication of value and <see cref=""{_quantity.Name}""/>.</summary> " is 138.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "        /// <summary>Get <see cref=""{_quantity.Name}""/> from logarithmic division of <see cref=""{_quantity.Name}""/> by value.</summary> " is 131.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The length of the statement  "        /// <summary>Get ratio value from logarithmic division of <see cref=""{_quantity.Name}""/> by <see cref=""{_quantity.Name}""/>.</summary> " is 137.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        /// <remarks>Consider using <see cref=""Equals({_quantity.Name}' double' ComparisonType)""/> for safely comparing floating point values.</remarks> " is 146.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        /// <remarks>Consider using <see cref=""Equals({_quantity.Name}' double' ComparisonType)""/> for safely comparing floating point values.</remarks> " is 146.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "            if(!(obj is {_quantity.Name} obj{_quantity.Name})) throw new ArgumentException(""Expected type {_quantity.Name}.""' nameof(obj)); " is 129.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        /// <remarks>Consider using <see cref=""Equals({_quantity.Name}' double' ComparisonType)""/> for safely comparing floating point values.</remarks> " is 146.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        /// <remarks>Consider using <see cref=""Equals({_quantity.Name}' double' ComparisonType)""/> for safely comparing floating point values.</remarks> " is 146.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        ///     <paramref name=""other""/> as a percentage of this quantity's value. <paramref name=""other""/> will be converted into " is 126.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of " is 128.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        ///     <paramref name=""other""/> as a fixed number in this quantity's unit. <paramref name=""other""/> will be converted into " is 127.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns> " is 143.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateConversionMethods,The length of the statement  "                throw new ArgumentException($""The given unit is of type {{unit.GetType()}}. Only {{typeof({_unitEnumName})}} is supported.""' nameof(unit)); " is 141.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateConversionMethods,The length of the statement  "        ///     Converts this {_quantity.Name} to another {_quantity.Name} with the unit representation <paramref name=""unit"" />. " is 123.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateConversionMethods,The length of the statement  "                throw new ArgumentException($""The given unit is of type {{unit.GetType()}}. Only {{typeof({_unitEnumName})}} is supported.""' nameof(unit)); " is 141.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""provider"">Format to use for localization and number formatting. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 157.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""provider"">Format to use for localization and number formatting. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 157.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        [Obsolete(@""This method is deprecated and will be removed at a future release. Please use ToString(""""s2"""") or ToString(""""s2""""' provider) where 2 is an example of the number passed to significantDigitsAfterRadix."")] " is 224.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""format"">String format to use. Default:  ""{{0:0.##}} {{1}} for value and unit abbreviation respectively.""</param> " is 133.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""args"">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param> " is 122.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""provider"">Format to use for localization and number formatting. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 157.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// Gets the string representation of this instance in the specified format string using <see cref=""CultureInfo.CurrentUICulture"" />. " is 135.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// Gets the string representation of this instance in the specified format string using the specified format provider' or <see cref=""CultureInfo.CurrentUICulture"" /> if null. " is 177.
Long Statement,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""formatProvider"">Format to use for localization and number formatting. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 163.
Long Statement,CodeGen.Generators.UnitsNetGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// Dynamically constructs a quantity of the given <see cref=""QuantityType""/> with the value in the quantity's base units. " is 124.
Long Statement,CodeGen.Generators.UnitsNetGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <returns><c>True</c> if successful with <paramref name=""quantity""/> assigned the value' otherwise <c>false</c>.</returns> " is 127.
Long Statement,CodeGen.Generators.UnitsNetGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <param name=""formatProvider"">The format provider to use for lookup. Defaults to <see cref=""CultureInfo.CurrentUICulture"" /> if null.</param> " is 148.
Long Statement,CodeGen.Generators.UnitsNetGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <param name=""quantityString"">Quantity string representation' such as ""1.5 kg"". Must be compatible with given quantity type.</param> " is 139.
Long Statement,CodeGen.Generators.UnitsNetGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        public static bool TryParse([CanBeNull] IFormatProvider formatProvider' Type quantityType' string quantityString' out IQuantity quantity) " is 137.
Long Statement,CodeGen.Generators.UnitsNetGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "                    return parser.TryParse<{quantityName}' {quantityName}Unit>(quantityString' formatProvider' {quantityName}.From' out quantity);"); " is 129.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitAbbreviationsCacheGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitAbbreviationsCacheGenerator.cs,Generate,The length of the statement  "        private static readonly (string CultureName' Type UnitType' int UnitValue' string[] UnitAbbreviations)[] GeneratedLocalizations " is 127.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitAbbreviationsCacheGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitAbbreviationsCacheGenerator.cs,Generate,The length of the statement  "                (""{cultureName}""' typeof({unitEnumName})' (int){unitEnumName}.{unit.SingularName}' new string[]{{{abbreviationParams}}})'"); " is 126.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitConverterGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitConverterGenerator.cs,Generate,The length of the statement  "        /// <param name=""unitConverter"">The <see cref=""UnitConverter""/> to register the default conversion functions in.</param> " is 124.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitConverterGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitConverterGenerator.cs,Generate,The length of the statement  "            unitConverter.SetConversionFunction<{quantity.Name}>({quantity.Name}.BaseUnit' {quantity.Name}Unit.{unit.SingularName}' q => q.ToUnit({quantity.Name}Unit.{unit.SingularName})); " is 176.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitConverterGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitConverterGenerator.cs,Generate,The length of the statement  "            unitConverter.SetConversionFunction<{quantity.Name}>({quantity.Name}Unit.{unit.SingularName}' {quantity.Name}.BaseUnit' q => q.ToBaseUnit());"); " is 144.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            Assert.Throws<ArgumentException>(() => new {_quantity.Name}(double.PositiveInfinity' {_unitEnumName}.{_baseUnit.SingularName})); " is 128.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            Assert.Throws<ArgumentException>(() => new {_quantity.Name}(double.NegativeInfinity' {_unitEnumName}.{_baseUnit.SingularName})); " is 128.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance({unit.PluralName}InOne{_baseUnit.SingularName}' {baseUnitVariableName}.{unit.PluralName}' {unit.PluralName}Tolerance);"); " is 145.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance(1' {_quantity.Name}.From(1' {_unitEnumName}.{unit.SingularName}).{unit.PluralName}' {unit.PluralName}Tolerance);"); " is 139.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance({unit.PluralName}InOne{_baseUnit.SingularName}' {baseUnitVariableName}.As({_unitEnumName}.{unit.SingularName})' {unit.PluralName}Tolerance);"); " is 167.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance({unit.PluralName}InOne{_baseUnit.SingularName}' (double){asQuantityVariableName}.Value' {unit.PluralName}Tolerance); " is 140.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance(1' {_quantity.Name}.From{unit.PluralName}({baseUnitVariableName}.{unit.PluralName}).{_baseUnit.PluralName}' {unit.PluralName}Tolerance);"); " is 163.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance(2' ({_quantity.Name}.From{_baseUnit.PluralName}(3)-v).{_baseUnit.PluralName}' {_baseUnit.PluralName}Tolerance); " is 135.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance(2' ({_quantity.Name}.From{_baseUnit.PluralName}(10)/5).{_baseUnit.PluralName}' {_baseUnit.PluralName}Tolerance); " is 136.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            AssertEx.EqualTolerance(2' {_quantity.Name}.From{_baseUnit.PluralName}(10)/{_quantity.Name}.From{_baseUnit.PluralName}(5)' {_baseUnit.PluralName}Tolerance); " is 156.
Long Statement,CodeGen.Generators.UnitsNetGen,UnitTestBaseClassGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTestBaseClassGenerator.cs,Generate,The length of the statement  "            Assert.True(v.Equals({_quantity.Name}.From{_baseUnit.PluralName}(1)' {_baseUnit.PluralName}Tolerance' ComparisonType.Relative)); " is 128.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,Generate,The length of the statement  "    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components " is 162.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,Generate,The length of the statement  "    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism' you can create a public interface and implement that interface on the classes that must be polymorphic. " is 219.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticConstructor,The length of the statement  "            BaseDimensions = new BaseDimensions({baseDimensions.L}' {baseDimensions.M}' {baseDimensions.T}' {baseDimensions.I}' {baseDimensions.Î˜}' {baseDimensions.N}' {baseDimensions.J});"); " is 179.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateInstanceConstructors,The length of the statement  "        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks> " is 122.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticProperties,The length of the statement  "        public static {_unitEnumName}[] Units {{ get; }} = Enum.GetValues(typeof({_unitEnumName})).Cast<{_unitEnumName}>().Except(new {_unitEnumName}[]{{ {_unitEnumName}.Undefined }}).ToArray(); " is 186.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticMethods,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use when parsing number and unit. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 181.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticFactoryMethods,The length of the statement  "        ///     Dynamically convert from value and unit enum <see cref=""{_unitEnumName}"" /> to <see cref=""{_quantity.Name}"" />. " is 123.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        ///     <see cref=""VolumeUnit.MetricCup"" />' <see cref=""VolumeUnit.UsLegalCup"" /> and <see cref=""VolumeUnit.UsCustomaryCup"" />. " is 133.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        ///     <see cref=""VolumeUnit.MetricCup"" />' <see cref=""VolumeUnit.UsLegalCup"" /> and <see cref=""VolumeUnit.UsCustomaryCup"" />. " is 133.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use when parsing number and unit. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 181.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use when parsing number and unit. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 181.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use when parsing number and unit. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 181.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use when parsing number and unit. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 181.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "            if(!(obj is {_quantity.Name} obj{_quantity.Name})) throw new ArgumentException(""Expected type {_quantity.Name}.""' nameof(obj)); " is 129.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods " is 170.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        ///     <paramref name=""other""/> as a percentage of this quantity's value. <paramref name=""other""/> will be converted into " is 126.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of " is 128.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        ///     <paramref name=""other""/> as a fixed number in this quantity's unit. <paramref name=""other""/> will be converted into " is 127.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateEqualityAndComparison,The length of the statement  "        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns> " is 143.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateConversionMethods,The length of the statement  "        ///     Converts this {_quantity.Name} to another {_quantity.Name} with the unit representation <paramref name=""unit"" />. " is 123.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use for localization and number formatting. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 191.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use for localization and number formatting. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 191.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""format"">String format to use. Default:  ""{{0:0.##}} {{1}} for value and unit abbreviation respectively.""</param> " is 133.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""args"">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param> " is 122.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateToString,The length of the statement  "        /// <param name=""cultureName"">Name of culture (ex: ""en-US"") to use for localization and number formatting. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 191.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <returns><c>True</c> if successful with <paramref name=""quantity""/> assigned the value' otherwise <c>false</c>.</returns> " is 127.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <param name=""formatProvider"">The format provider to use for lookup. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 154.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <param name=""quantityString"">Quantity string representation' such as ""1.5 kg"". Must be compatible with given quantity type.</param> " is 139.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <exception cref=""ArgumentException"">Type must be of type UnitsNet.IQuantity -or- Type is not a known quantity type.</exception> " is 133.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <param name=""formatProvider"">The format provider to use for lookup. Defaults to <see cref=""GlobalConfiguration.DefaultCulture"" /> if null.</param> " is 154.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        /// <param name=""quantityString"">Quantity string representation' such as ""1.5 kg"". Must be compatible with given quantity type.</param> " is 139.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "        internal static bool TryParse([CanBeNull] IFormatProvider formatProvider' Type quantityType' string quantityString' out IQuantity quantity) " is 139.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "                return parser.TryParse<{quantity.Name}' {quantity.Name}Unit>(quantityString' formatProvider' {quantity.Name}.From' out quantity); " is 129.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,StaticQuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\StaticQuantityGenerator.cs,Generate,The length of the statement  "                $""Type {{quantityType}} is not a known quantity type. Did you pass in a third-party quantity type defined outside UnitsNet library?""); " is 136.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,UnitAbbreviationsCacheGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\UnitAbbreviationsCacheGenerator.cs,Generate,The length of the statement  "        private static readonly (string CultureName' Type UnitType' int UnitValue' string[] UnitAbbreviations)[] GeneratedLocalizations " is 127.
Long Statement,CodeGen.Generators.UnitsNetWrcGen,UnitAbbreviationsCacheGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\UnitAbbreviationsCacheGenerator.cs,Generate,The length of the statement  "                (""{cultureName}""' typeof({unitEnumName})' (int){unitEnumName}.{unit.SingularName}' new string[]{{{abbreviationParams}}})'"); " is 126.
Long Statement,CodeGen.JsonTypes,Localization,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\JsonTypes\Localization.cs,TryGetAbbreviationsForPrefix,The length of the statement  "                    throw new NotSupportedException($"AbbreviationsForPrefixes.{prefix} must be a string or an array of strings' but was {value.Type}."); " is 133.
Magic Number,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateConversionProperties,The following statement contains a magic number: Writer.WLIfText(2' GetObsoleteAttributeOrNull(unit));
Magic Number,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticFactoryMethods,The following statement contains a magic number: Writer.WLIfText(2' GetObsoleteAttributeOrNull(unit));
Magic Number,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateLogarithmicArithmeticOperators,The following statement contains a magic number: var x = (10 * scalingFactor).ToString();
Magic Number,CodeGen.Generators.UnitsNetGen,UnitTypeGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\UnitTypeGenerator.cs,Generate,The following statement contains a magic number: Writer.WLIfText(2' QuantityGenerator.GetObsoleteAttributeOrNull(unit));
Magic Number,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateConversionProperties,The following statement contains a magic number: Writer.WLIfText(2' GetObsoleteAttributeOrNull(unit));
Magic Number,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticFactoryMethods,The following statement contains a magic number: Writer.WLIfText(2' GetObsoleteAttributeOrNull(unit));
Magic Number,CodeGen.Generators.UnitsNetWrcGen,UnitTypeGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\UnitTypeGenerator.cs,Generate,The following statement contains a magic number: Writer.WLIfText(2' UnitsNetGen.QuantityGenerator.GetObsoleteAttributeOrNull(unit));
Duplicate Code,CodeGen.Generators.UnitsNetGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetGen\QuantityGenerator.cs,GenerateStaticParseMethods,The method contains a code clone-set at the following line numbers (starting from the method definition): ((4' 26)' (31' 53))
Duplicate Code,CodeGen.Generators.UnitsNetWrcGen,QuantityGenerator,D:\research\architectureSmells\repos\InitialForce_UnitsNet\CodeGen\Generators\UnitsNetWrcGen\QuantityGenerator.cs,GenerateStaticParseMethods,The method contains a code clone-set at the following line numbers (starting from the method definition): ((4' 26)' (31' 53))
