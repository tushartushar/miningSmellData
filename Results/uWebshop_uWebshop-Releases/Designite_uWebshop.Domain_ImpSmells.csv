Implementation smell,Namespace,Class,File,Method,Description
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The method has 225 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The method has 196 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,The method has 90 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,ConfirmOrder,The method has 76 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCoupon,The method has 65 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddShippingMethod,The method has 65 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddPaymentMethod,The method has 72 lines of code.
Long Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The method has 74 lines of code.
Long Method,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The method has 92 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The method has 109 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The method has 69 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadType,The method has 89 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,SerializeNode,The method has 79 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadAttributeElements,The method has 62 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonSerializer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializer.cs,ApplySerializerSettings,The method has 68 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The method has 138 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseValue,The method has 99 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The method has 76 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateCurrentToken,The method has 101 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteToken,The method has 88 lines of code.
Long Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteValue,The method has 147 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,ReadContentFrom,The method has 90 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ToObject,The method has 88 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,The method has 95 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The method has 116 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,WriteTo,The method has 64 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ResolveReferences,The method has 64 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessSchemaProperties,The method has 93 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GenerateInternal,The method has 102 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaWriter.cs,WriteSchema,The method has 74 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The method has 86 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,JsonArrayContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonArrayContract.cs,JsonArrayContract,The method has 77 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The method has 83 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The method has 75 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The method has 65 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The method has 84 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The method has 60 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Convert,The method has 75 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,The method has 71 lines of code.
Long Method,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The method has 100 lines of code.
Long Method,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,The method has 75 lines of code.
Long Method,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The method has 110 lines of code.
Long Method,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateStock,The method has 126 lines of code.
Long Method,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The method has 115 lines of code.
Long Method,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The method has 150 lines of code.
Long Method,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The method has 83 lines of code.
Long Method,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The method has 113 lines of code.
Long Method,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The method has 96 lines of code.
Complex Method,uWebshop.Domain.BaseClasses,uWebshopEntity,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Base classes\uWebshopEntity.cs,LoadFieldsFromExamine,Cyclomatic complexity of the method is 15
Complex Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,Cyclomatic complexity of the method is 50
Complex Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,Cyclomatic complexity of the method is 28
Complex Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountUpdate,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,ConfirmOrder,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCoupon,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain,DiscountProduct,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\DiscountProduct.cs,GetDiscountAmountInCents,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,Cyclomatic complexity of the method is 23
Complex Method,uWebshop.Domain,ProductVariantInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductVariantInfo.cs,ProductVariantInfo,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain,ShippingProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\ShippingProvider.cs,IsApplicableToOrder,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteTokenInternal,Cyclomatic complexity of the method is 43
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadInternal,Cyclomatic complexity of the method is 19
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadCodeWScope,Cyclomatic complexity of the method is 19
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadReference,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadNormal,Cyclomatic complexity of the method is 28
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadType,Cyclomatic complexity of the method is 63
Complex Method,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadString,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,ReadByteArray,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Converters,DataTableConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\DataTableConverter.cs,GetColumnDataType,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Converters,ExpandoObjectConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\ExpandoObjectConverter.cs,ReadValue,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Converters,ExpandoObjectConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\ExpandoObjectConverter.cs,ReadList,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Converters,ExpandoObjectConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\ExpandoObjectConverter.cs,ReadObject,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json.Converters,RegexConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\RegexConverter.cs,ReadRegexString,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Converters,RegexConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\RegexConverter.cs,ReadRegexObject,Cyclomatic complexity of the method is 14
Complex Method,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,ReadJson,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,PushParentNamespaces,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,GetPropertyName,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,SerializeGroupedNodes,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,SerializeNode,Cyclomatic complexity of the method is 45
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadJson,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,DeserializeValue,Cyclomatic complexity of the method is 17
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadElement,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ConvertTokenToXmlValue,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadAttributeElements,Cyclomatic complexity of the method is 33
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,CreateInstruction,Cyclomatic complexity of the method is 16
Complex Method,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,DeserializeNode,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,Cyclomatic complexity of the method is 20
Complex Method,uWebshop.Newtonsoft.Json,JsonPosition,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonPosition.cs,WriteTo,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDateTimeOffsetInternal,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsBytesInternal,Cyclomatic complexity of the method is 16
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDecimalInternal,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsInt32Internal,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,SetToken,Cyclomatic complexity of the method is 37
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,SetStateBasedOnCurrent,Cyclomatic complexity of the method is 14
Complex Method,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,IsPrimitiveToken,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json,JsonSerializer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializer.cs,ApplySerializerSettings,Cyclomatic complexity of the method is 29
Complex Method,uWebshop.Newtonsoft.Json,JsonSerializer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializer.cs,DeserializeInternal,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Newtonsoft.Json,JsonSerializer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializer.cs,SerializeInternal,Cyclomatic complexity of the method is 16
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseString,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadData,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadInternal,Cyclomatic complexity of the method is 25
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,Cyclomatic complexity of the method is 37
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadNumberIntoBuffer,Cyclomatic complexity of the method is 35
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParsePostValue,Cyclomatic complexity of the method is 34
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseObject,Cyclomatic complexity of the method is 24
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseUnquotedProperty,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseValue,Cyclomatic complexity of the method is 56
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,EatWhitespace,Cyclomatic complexity of the method is 16
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseConstructor,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseComment,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,IsSeperator,Cyclomatic complexity of the method is 15
Complex Method,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteEnd,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,GetCurrentNodeSchemaType,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateCurrentToken,Cyclomatic complexity of the method is 82
Complex Method,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,WriteToken,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateInteger,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateFloat,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,BuildStateArray,Cyclomatic complexity of the method is 15
Complex Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteToken,Cyclomatic complexity of the method is 64
Complex Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteEnd,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoCompleteClose,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteValue,Cyclomatic complexity of the method is 124
Complex Method,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,SetWriteState,Cyclomatic complexity of the method is 41
Complex Method,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,RemoveItemAt,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,SetItem,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,ReadContentFrom,Cyclomatic complexity of the method is 71
Complex Method,uWebshop.Newtonsoft.Json.Linq,JPath,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JPath.cs,ParseMain,Cyclomatic complexity of the method is 23
Complex Method,uWebshop.Newtonsoft.Json.Linq,JPath,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JPath.cs,Evaluate,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ToObject,Cyclomatic complexity of the method is 39
Complex Method,uWebshop.Newtonsoft.Json.Linq,JTokenReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JTokenReader.cs,SetToken,Cyclomatic complexity of the method is 53
Complex Method,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,Cyclomatic complexity of the method is 43
Complex Method,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,Cyclomatic complexity of the method is 55
Complex Method,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,WriteTo,Cyclomatic complexity of the method is 31
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ResolveReferences,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessSchemaProperties,Cyclomatic complexity of the method is 88
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessItems,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessType,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GenerateInternal,Cyclomatic complexity of the method is 53
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GetJsonSchemaType,Cyclomatic complexity of the method is 28
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaModelBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaModelBuilder.cs,AddSchema,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaModelBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaModelBuilder.cs,BuildNodeModel,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Schema,JsonSchemaWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaWriter.cs,WriteSchema,Cyclomatic complexity of the method is 14
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetSerializableMembers,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateObjectContract,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,ResolveCallbackMethods,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonArrayContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonArrayContract.cs,JsonArrayContract,Cyclomatic complexity of the method is 14
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonContract.cs,JsonContract,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonDictionaryContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonDictionaryContract.cs,JsonDictionaryContract,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonPropertyCollection,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonPropertyCollection.cs,AddProperty,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,GetExpectedDescription,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,GetConverter,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,Cyclomatic complexity of the method is 19
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,Cyclomatic complexity of the method is 17
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewList,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,Cyclomatic complexity of the method is 34
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateList,Cyclomatic complexity of the method is 18
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,Cyclomatic complexity of the method is 20
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,Cyclomatic complexity of the method is 20
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,Cyclomatic complexity of the method is 14
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,Cyclomatic complexity of the method is 22
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadForType,Cyclomatic complexity of the method is 23
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,Cyclomatic complexity of the method is 21
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,Cyclomatic complexity of the method is 16
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,Cyclomatic complexity of the method is 29
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeDictionary,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Convert,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,IsInteger,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,EnsureDateTime,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,Cyclomatic complexity of the method is 25
Complex Method,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateMicrosoft,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,Cyclomatic complexity of the method is 46
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,RemoveAssemblyDetails,Cyclomatic complexity of the method is 19
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,ImplementsGenericDefinition,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,SetMemberValue,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,CanReadMemberValue,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,CanSetMemberValue,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetChildPrivateProperties,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetDefaultValue,Cyclomatic complexity of the method is 17
Complex Method,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,Cyclomatic complexity of the method is 18
Complex Method,uWebshop.Domain.Services,UmbracoStorePickerStoreUrlRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UmbracoStorePickerStoreUrlService.cs,GetUrls,Cyclomatic complexity of the method is 15
Complex Method,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,Cyclomatic complexity of the method is 27
Complex Method,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,GetApplicableOrderLines,Cyclomatic complexity of the method is 12
Complex Method,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateStock,Cyclomatic complexity of the method is 17
Complex Method,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidatePayment,Cyclomatic complexity of the method is 9
Complex Method,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,Cyclomatic complexity of the method is 13
Complex Method,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,UrlPointsToCatalogRepository,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,Cyclomatic complexity of the method is 35
Complex Method,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCoupon,Cyclomatic complexity of the method is 10
Complex Method,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,Cyclomatic complexity of the method is 27
Complex Method,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,Cyclomatic complexity of the method is 8
Complex Method,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendMemberEmailCustomer,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvidersFromDLLs,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,ReadMultiStoreItemFromPropertiesDictionary,Cyclomatic complexity of the method is 11
Complex Method,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,SetStoreInfoCookie,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetUnmodifiedCurrentOrder,Cyclomatic complexity of the method is 7
Complex Method,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,Cyclomatic complexity of the method is 41
Complex Method,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,Cyclomatic complexity of the method is 20
Complex Method,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetInterfaces,Cyclomatic complexity of the method is 7
Long Parameter List,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetPaymentProvidersForOrder,The method has 4 parameters.
Long Parameter List,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetPaymentProvidersForOrder,The method has 4 parameters.
Long Parameter List,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetFulfillmentProvidersForOrder,The method has 4 parameters.
Long Parameter List,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetFulfillmentProvidersForOrder,The method has 4 parameters.
Long Parameter List,uWebshop.API,ShippingFulfillmentAdaptor,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\DataClasses\ShippingFulfillmentAdaptor.cs,ShippingFulfillmentAdaptor,The method has 4 parameters.
Long Parameter List,uWebshop.API,ShippingMethodFulfillmentAdaptor,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\DataClasses\ShippingMethodFulfillmentAdaptor.cs,ShippingMethodFulfillmentAdaptor,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,SummedPrice,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,SummedPrice,The method has 5 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,PriceOrderline,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,PriceOrderline,The method has 6 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,Price,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,CreateSimplePrice,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,Price,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,CreateDiscountedRanged,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,Price,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,CreateDiscountedRanged,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,Price,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,Price,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,Price,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,Price,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,Price,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\Price.cs,Price,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddOrderLineDetails,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCustomerInformation,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IBasketChangingoid,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\External API\IBasket.cs,AddOrUpdateOrderLine,The method has 6 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IProductDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IProductDiscountService.cs,GetAdjustedPriceForProductWithId,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IProductService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IProductService.cs,CreateProductInfoByProductId,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IStockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IStockService.cs,SetStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IStockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IStockService.cs,SubstractStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IStockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IStockService.cs,ReplaceStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IStockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IStockService.cs,ReturnStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IOrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IOrderUpdatingService.cs,AddOrUpdateOrderLine,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IOrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IOrderUpdatingService.cs,AddPaymentProvider,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IOrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IOrderUpdatingService.cs,AddShippingProvider,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IOrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IOrderUpdatingService.cs,AddCustomerFields,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IOrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IOrderRepository.cs,SetOrderNumber,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Interfaces,IOrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IOrderRepository.cs,SetCustomerInfo,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,SimplePrice,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\SimplePrice.cs,Amount,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,IVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IVatCalculationStrategy.cs,WithVat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,IVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IVatCalculationStrategy.cs,WithoutVat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,IVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Interfaces\IVatCalculationStrategy.cs,Vat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OverSmallestPartsVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\OverSmallestPartsVatCalculationStrategy.cs,WithVat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OverSmallestPartsVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\OverSmallestPartsVatCalculationStrategy.cs,WithoutVat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OverSmallestPartsVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\OverSmallestPartsVatCalculationStrategy.cs,Vat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OverTotalVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\OverTotalVatCalculationStrategy.cs,WithVat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OverTotalVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\OverTotalVatCalculationStrategy.cs,WithoutVat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OverTotalVatCalculationStrategy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\OverTotalVatCalculationStrategy.cs,Vat,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,ClientErrorHandling,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\ClientErrorHandling.cs,SetOrClearErrorMessage,The method has 4 parameters.
Long Parameter List,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,AddOrUpdateOrderLine,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,BsonObjectIdConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BsonObjectIdConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,CustomCreationConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\CustomCreationConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,DataSetConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\DataSetConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,DataTableConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\DataTableConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,EntityKeyMemberConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\EntityKeyMemberConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,ExpandoObjectConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\ExpandoObjectConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,IsoDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\IsoDateTimeConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,KeyValuePairConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\KeyValuePairConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,RegexConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\RegexConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,VersionConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\VersionConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,SerializeGroupedNodes,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,SerializeNode,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,DeserializeValue,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadElement,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadArrayElements,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,CreateInstruction,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,CreateElement,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,DeserializeNode,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,EnsureFloatFormat,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,SerializeObject,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConverter.cs,ReadJson,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonReaderException,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReaderException.cs,JsonReaderException,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonReaderException,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReaderException.cs,Create,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonSerializationException,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializationException.cs,Create,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,BlockCopyChars,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,WriteCharToBuffer,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteToken,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Schema,JsonSchemaException,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaException.cs,JsonSchemaException,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,ErrorContext,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ErrorContext.cs,ErrorContext,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalBase,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalBase.cs,GetErrorContext,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalBase,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalBase.cs,IsErrorHandled,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The method has 7 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,GetConverter,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The method has 7 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The method has 9 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EnsureType,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The method has 10 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ThrowUnexpectedEndException,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateList,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetExtensionData,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializePrimitive,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ResolveIsReference,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteReference,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeObject,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The method has 7 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeISerializable,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeDictionary,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,BidirectionalDictionary,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\BidirectionalDictionary.cs,BidirectionalDictionary,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,TryConvert,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateMicrosoft,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The method has 6 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxy.cs,TryBinaryOperation,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxy.cs,TryCreateInstance,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxy.cs,TryGetIndex,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxy.cs,TryInvoke,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxy.cs,TryInvokeMember,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxy,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxy.cs,TrySetIndex,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,DynamicProxyMetaObject,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,CallMethodWithResult,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BuildCallMethodWithResult,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,CallMethodReturnLast,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,CallMethodNoResult,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,DynamicReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicReflectionDelegateFactory.cs,CreateDynamicMethod,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The method has 5 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The method has 7 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,FormatWith,The method has 4 parameters.
Long Parameter List,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,FormatWith,The method has 5 parameters.
Long Parameter List,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,GenerateOrderNumber,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,ProductDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ProductDiscountService.cs,GetAdjustedPriceForProductWithId,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,SellableUnitPriceService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\SellableUnitPriceService.cs,GetOriginalPrice,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,SellableUnitPriceService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\SellableUnitPriceService.cs,GetPrice,The method has 5 parameters.
Long Parameter List,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,UrlRewritingService,The method has 8 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,OrderUpdatingService,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddShippingProvider,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddPaymentProvider,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,OrderProduct,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,StockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StockService.cs,SetStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,StockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StockService.cs,SubstractStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,StockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StockService.cs,ReplaceStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,StockService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StockService.cs,ReturnStock,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Services,UrlService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlService.cs,UrlService,The method has 7 parameters.
Long Parameter List,uWebshop.Domain.Services,ProductService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ProductService.cs,CreateProductInfoByProductId,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendMemberEmailCustomer,The method has 5 parameters.
Long Parameter List,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendMail,The method has 5 parameters.
Long Parameter List,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendMail,The method has 6 parameters.
Long Parameter List,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvidersForOrder,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,AddValidationResult,The method has 6 parameters.
Long Parameter List,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetNiceUrl,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetMultiStoreItem,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetMultiStoreIntValue,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetMultiStoreDoubleValue,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetMultiStoreDecimalValue,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetBillingProvidersForOrder,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,AddValidationResult,The method has 6 parameters.
Long Parameter List,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetObjectsByAlias,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Repositories,OrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\OrderRepository.cs,SetOrderNumber,The method has 4 parameters.
Long Parameter List,uWebshop.Domain.Repositories,OrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\OrderRepository.cs,SetCustomerInfo,The method has 4 parameters.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter orderlineIdQueryStringCollection is 32.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter orderlineDetailsQueryStringCollection is 37.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter couponCodeQueryStringCollection is 31.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter shippingProviderQueryStringCollection is 37.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter paymentProviderQueryStringCollection is 36.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter createAccountQueryStringCollection is 34.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter updateAccountQueryStringCollection is 34.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter accountChangePaswordQueryStringCollection is 41.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter accountSignOutQueryStringCollection is 35.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter accountSignInQueryStringCollection is 34.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter wishlistCreateQueryStringCollection is 35.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter wishlistRenameQueryStringCollection is 35.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter wishlistToBasketQueryStringCollection is 37.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter wishlistRemoveQueryStringCollection is 35.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter accountRequestPaswordQueryStringCollection is 42.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter validateCustomerQueryStringCollection is 37.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter validateCustomQueryStringCollection is 35.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter validateStockQueryStringCollection is 34.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the parameter validateOrderlinesQueryStringCollection is 39.
Long Identifier,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The length of the parameter orderlineDetailsQueryStringCollection is 37.
Long Identifier,uWebshop.Domain.Model,DiscountEffects,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\DiscountEffects.cs,GetDiscountedPrice,The length of the parameter priceBeforeThisDiscountEffects is 30.
Long Identifier,uWebshop.Domain.Model,DiscountEffects,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\DiscountEffects.cs,GetDiscountAmountWithoutPercentage,The length of the parameter priceBeforeThisDiscountEffects is 30.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the parameter setExtensionDataDictionaryValue is 31.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the parameter createdFromNonDefaultConstructor is 32.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the parameter createdFromNonDefaultConstructor is 32.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the parameter createdFromNonDefaultConstructor is 32.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the parameter createdFromNonDefaultConstructor is 32.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the parameter createdFromNonDefaultConstructor is 32.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the parameter createdObjectCollectionWrapper is 30.
Long Identifier,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the parameter createdFromNonDefaultConstructor is 32.
Long Identifier,uWebshop.Domain.Services,StoreFromUrlDeterminationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StorepickerUrlDeterminationService.cs,DetermineStoreAndUrlParts,The length of the parameter urlIncludingDomainHttpStripped is 30.
Long Identifier,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,OrderService,The length of the parameter newOrdersDefaultVatCalculationStrategy is 38.
Long Identifier,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,UrlRewritingService,The length of the parameter storeFromUrlDeterminationService is 32.
Long Identifier,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the parameter paymentProviderRepositoryCmsNodeName is 36.
Long Identifier,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the parameter paymentProviderSectionCmsNodeName is 33.
Long Identifier,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetLocalizedPrice,The length of the parameter fullLocalizedPricePropetryAlias is 31.
Long Identifier,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The length of the parameter overruleCopyOrderOnConfirmedOrder is 33.
Long Identifier,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The length of the parameter overruleCopyOrderOnConfirmedOrder is 33.
Long Identifier,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrderInfo,The length of the parameter overruleCopyOrderOnConfirmedOrder is 33.
Long Identifier,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrderInfo,The length of the parameter overruleCopyOrderOnConfirmedOrder is 33.
Long Identifier,uWebshop.Domain.Helpers,PaymentProviderExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,ReportUrl,The length of the parameter paymentProviderRepositoryCmsNodeName is 36.
Long Identifier,uWebshop.Domain.Helpers,PaymentProviderExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,ReportUrl,The length of the parameter paymentProviderSectionCmsNodeName is 33.
Long Statement,uWebshop.API,Basket,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Basket.cs,GetFulfillmentProviders,The length of the statement  "	return ShippingProviderHelper.GetShippingProvidersForOrder (currentOrder' useZone' storeAlias' currencyCode).Select (s => new ShippingFulfillmentAdaptor (s' inclVat' localization' currentOrder)); " is 195.
Long Statement,uWebshop.API,Basket,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Basket.cs,GetPaymentProviders,The length of the statement  "	return PaymentProviderHelper.GetBillingProvidersForOrder (OrderHelper.GetOrder ()' useZone' storeAlias' currencyCode).Select (s => new BillingFulfillmentAdaptor (s' inclVat' localization)); " is 189.
Long Statement,uWebshop.API,Basket,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Basket.cs,GetAllOrderDiscounts,The length of the statement  "	return IO.Container.Resolve<IOrderDiscountService> ().GetApplicableDiscountsForOrder (OrderHelper.GetOrder ()' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Select (d => new DiscountAdaptor (d)); " is 214.
Long Statement,uWebshop.API,BasketOrderInfoAdaptor,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\DataClasses\BasketOrderInfoAdaptor.cs,BasketTotalBeforeDiscount,The length of the statement  "	return _source.OrderLines.Sum (orderline => orderline.AmountInCents) + _source.ShippingProviderAmountInCents + _source.PaymentProviderPriceInCents; " is 147.
Long Statement,uWebshop.API,Catalog,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Catalog.cs,GetAllRootCategories,The length of the statement  "	return DomainHelper.GetAllCategories (false' storeAlias' currencyCode).Where (x => x.ParentNodeTypeAlias == Domain.Catalog.CategoryRepositoryNodeAlias).Select (CategoryAdaptor.Create); " is 184.
Long Statement,uWebshop.API,Catalog,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Catalog.cs,MatchingTagCategories,The length of the statement  "	return DomainHelper.GetAllCategories (false' storeAlias' currencyCode).Where (x => x.Tags.Intersect (category.Tags).Any ()).ToList (); " is 134.
Long Statement,uWebshop.API,Catalog,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Catalog.cs,MatchingTagProducts,The length of the statement  "	return DomainHelper.GetAllProducts (false' storeAlias' currencyCode).Where (x => x.Tags.Intersect (product.Tags).Any ()).ToList (); " is 131.
Long Statement,uWebshop.API,CustomerNetMembershipAdaptor,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetValue,The length of the statement  "	if (ProfileBase.Properties.Cast<SettingsProperty> ().Any (x => x.Name.ToLowerInvariant () == property.ToLowerInvariant ())) { " is 125.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetAllCustomers,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) { " is 125.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetCustomers,The length of the statement  "	if ((IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) && Roles.RoleExists (@group)) { " is 156.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetCustomersBySpending,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) { " is 125.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlist,The length of the statement  "	return !string.IsNullOrEmpty (wishlistName) ? wishlists.FirstOrDefault (x => x.Name == wishlistName) : wishlists.FirstOrDefault (); " is 131.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlists,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.ProviderUserKey as string == customerId.ToString () || UwebshopRequest.Current.PaymentProvider != null) { " is 221.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlists,The length of the statement  "		return OrderHelper.GetWishlistsForCustomer (customerId' storeAlias).Select (Orders.CreateBasketFromOrderInfo).Cast<IWishlist> (); " is 129.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlists,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == userName || UwebshopRequest.Current.PaymentProvider != null) { " is 190.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlists,The length of the statement  "		return OrderHelper.GetWishlistsForCustomer (userName' storeAlias).Select (Orders.CreateBasketFromOrderInfo).Cast<IWishlist> (); " is 127.
Long Statement,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetCustomerValueFromSession,The length of the statement  "			var customerFieldFromSession = fields.FirstOrDefault (x => string.Equals (x.Key' fieldName' StringComparison.InvariantCultureIgnoreCase)).Value; " is 144.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetAllOrderDiscounts,The length of the statement  "	return IO.Container.Resolve<IOrderDiscountService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Select (d => new DiscountAdaptor (d)); " is 165.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetOrderDiscount,The length of the statement  "	return new DiscountAdaptor (IO.Container.Resolve<IOrderDiscountService> ().GetById (discountId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode))); " is 162.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetDiscountsForOrder,The length of the statement  "	return IO.Container.Resolve<IOrderDiscountService> ().GetApplicableDiscountsForOrder (orderInfo' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Select (d => new DiscountAdaptor (d)); " is 200.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetDiscountsForOrder,The length of the statement  "	return IO.Container.Resolve<IOrderDiscountService> ().GetApplicableDiscountsForOrder (orderInfo' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Select (d => new DiscountAdaptor (d)); " is 200.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetProductDiscount,The length of the statement  "	return IO.Container.Resolve<IProductDiscountService> ().GetById (discountId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 142.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetDiscountForProduct,The length of the statement  "	return IO.Container.Resolve<IProductDiscountService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Where (p => p.Products.Any (x => x.Id == productId)); " is 182.
Long Statement,uWebshop.API,Discounts,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Discounts.cs,GetDiscountForProductVariant,The length of the statement  "	return IO.Container.Resolve<IProductDiscountService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Where (p => p.ProductVariants.Any (x => x.Id == variantId)); " is 189.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrder,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == order.CustomerInfo.LoginName || UwebshopRequest.Current.PaymentProvider != null || OrderHelper.IsCompletedOrderWithinValidLifetime (order)) { " is 269.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrderByTransactionId,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == order.CustomerInfo.LoginName || UwebshopRequest.Current.PaymentProvider != null || OrderHelper.IsCompletedOrderWithinValidLifetime (order)) { " is 269.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetAllOrders,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) { " is 125.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrders,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) { " is 125.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrders,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) { " is 125.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrders,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null) { " is 125.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrdersForCustomer,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.ProviderUserKey == customerId.ToString () || UwebshopRequest.Current.PaymentProvider != null) { " is 211.
Long Statement,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrdersForCustomer,The length of the statement  "	if (IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == userName || UwebshopRequest.Current.PaymentProvider != null) { " is 190.
Long Statement,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetAllPaymentProviders,The length of the statement  "	return IO.Container.Resolve<IPaymentProviderService> ().GetAll (localization).Select (s => new BillingFulfillmentAdaptor (s' inclVat' localization)); " is 149.
Long Statement,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetPaymentProvidersForOrder,The length of the statement  "	return PaymentProviderHelper.GetBillingProvidersForOrder (orderInfo' useZone' storeAlias' currencyCode).Select (s => new BillingFulfillmentAdaptor (s' orderInfo.PricesAreIncludingVAT' localization)); " is 199.
Long Statement,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetPaymentProvidersForCountry,The length of the statement  "	return PaymentProviderHelper.GetAllPaymentProviders (storeAlias' currencyCode).Where (x => x.Zones.Any (y => y.CountryCodes.Contains (countryCode))).Select (p => new BillingFulfillmentAdaptor (p' inclVat' localization)); " is 220.
Long Statement,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetAllFulfillmentProviders,The length of the statement  "	return IO.Container.Resolve<IShippingProviderService> ().GetAll (localization).Select (s => new ShippingFulfillmentAdaptor (s' inclVat' localization' currentOrder)); " is 165.
Long Statement,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetFulfillmentProvidersForOrder,The length of the statement  "	return ShippingProviderHelper.GetShippingProvidersForOrder (orderInfo' useZone' storeAlias' currencyCode).Select (p => new ShippingFulfillmentAdaptor (p' orderInfo.PricesAreIncludingVAT' localization' currentOrder)); " is 216.
Long Statement,uWebshop.API,Providers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Providers.cs,GetFulfillmentProvidersForCountry,The length of the statement  "	return ShippingProviderHelper.GetAllShippingProviders (storeAlias' currencyCode).Where (x => x.Zone.CountryCodes.Contains (countryCode)).Select (p => new ShippingFulfillmentAdaptor (p' inclVat' localization' null)); " is 215.
Long Statement,uWebshop.API,Store,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Store.cs,GetAllCountries,The length of the statement  "	return IO.Container.Resolve<ICountryRepository> ().GetAllCountries (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 133.
Long Statement,uWebshop.API,Store,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Store.cs,GetCurrencySymbol,The length of the statement  "	return _isoCurrencySymbolMapping.GetOrAdd (ISOCurrencySymbol' isoSymbol => CultureInfo.GetCultures (CultureTypes.AllCultures).Where (c => !c.IsNeutralCulture).Select (culture => { " is 179.
Long Statement,uWebshop.API,Store,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Store.cs,GetCurrencySymbol,The length of the statement  "	}).Where (ri => ri != null && ri.ISOCurrencySymbol == ISOCurrencySymbol).Select (ri => ri.CurrencySymbol).FirstOrDefault () ?? string.Empty); " is 141.
Long Statement,uWebshop.Domain.BaseClasses,uWebshopEntity,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Base classes\uWebshopEntity.cs,LoadFieldsFromExamine,The length of the statement  "	//	_nodeId = GetIntValue("id"' examineNode).GetValueOrDefault(); can't use multistore here!!!! -> vanwege Store (will cause endless loop) " is 137.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	var fieldsToSession = requestParameters.AllKeys.Where (x => !x.ToLowerInvariant ().Contains ("password")).ToDictionary (key => key' key => requestParameters [key]); " is 164.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	var currencyQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower ().StartsWith ("changecurrency")); " is 131.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> shippingQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower ().StartsWith ("shipping") && x.ToLower () != "shippingprovider").ToList (); " is 182.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		var result = AddCustomerInformation (requestParameters' shippingQueryStringCollection' CustomerDatatypes.Shipping' rawRequestUrl); " is 130.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> customerQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower ().StartsWith ("customer")).ToList (); " is 144.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		var result = AddCustomerInformation (requestParameters' customerQueryStringCollection' CustomerDatatypes.Customer' rawRequestUrl); " is 130.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	//var customerIsShipping = requestParameters.AllKeys.FirstOrDefault(x => x != null && x.ToLower() == "customerisshipping"); " is 123.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> extraQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower ().StartsWith ("extra")).ToList (); " is 138.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		var result = AddCustomerInformation (requestParameters' extraQueryStringCollection' CustomerDatatypes.Extra' rawRequestUrl); " is 124.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> cleanOrderLinesCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "clearbasket").ToList (); " is 133.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "clearbasket" || keyValue.ToLower () == "on" || keyValue == "1") { " is 126.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> cleanOrderCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "clearorder").ToList (); " is 127.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "clearorder" || keyValue.ToLower () == "on" || keyValue == "1") { " is 125.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> productQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "productid").ToList (); " is 134.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> orderlineIdQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "orderlineid").ToList (); " is 140.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (orderLineIdValue != null && (orderlineDetailsQueryStringCollection.Any () && !string.IsNullOrEmpty (orderLineIdValue))) { " is 125.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "					var result = AddOrderLineDetails (requestParameters' orderlineDetailsQueryStringCollection' orderlineId' rawRequestUrl); " is 120.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> couponCodeQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "couponcode").ToList (); " is 138.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> shippingProviderQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "shippingprovider").ToList (); " is 150.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> paymentProviderQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "paymentprovider").ToList (); " is 148.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> createAccountQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "createaccount").ToList (); " is 144.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "createaccount" || keyValue.ToLower () == "on" || keyValue == "1") { " is 128.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> updateAccountQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "updateaccount").ToList (); " is 144.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "updateaccount" || keyValue.ToLower () == "on" || keyValue == "1") { " is 128.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> accountChangePaswordQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "changepassword").ToList (); " is 152.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "changepassword" || keyValue.ToLower () == "on" || keyValue == "1") { " is 129.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> accountSignOutQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "accountsignout").ToList (); " is 146.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "accountsignout" || keyValue.ToLower () == "on" || keyValue == "1") { " is 129.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> accountSignInQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "accountsignin").ToList (); " is 144.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "accountsignin" || keyValue.ToLower () == "on" || keyValue == "1") { " is 128.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> wishlistCreateQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "createwishlist").ToList (); " is 146.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "createwishlist" || keyValue.ToLower () == "on" || keyValue == "1") { " is 129.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> wishlistRenameQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "renamewishlist").ToList (); " is 146.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "renamewishlist" || keyValue.ToLower () == "on" || keyValue == "1") { " is 129.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> wishlistToBasketQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "wishlisttobasket").ToList (); " is 150.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "wishlisttobasket" || keyValue.ToLower () == "on" || keyValue == "1") { " is 131.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> wishlistRemoveQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "removewishlist").ToList (); " is 146.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "removewishlist" || keyValue.ToLower () == "on" || keyValue == "1") { " is 129.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> accountRequestPaswordQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "requestpassword").ToList (); " is 154.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "requestpassword" || keyValue.ToLower () == "on" || keyValue == "1") { " is 130.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> validateQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "validate").ToList (); " is 134.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "validate" || keyValue.ToLower () == "on" || keyValue == "1") { " is 123.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> validateCustomerQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "validatecustomer").ToList (); " is 150.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "validatecustomer" || keyValue.ToLower () == "on" || keyValue == "1") { " is 131.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> validateCustomQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "validatecustom").ToList (); " is 146.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "validatecustom" || keyValue.ToLower () == "on" || keyValue == "1") { " is 129.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> validateStockQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "validatestock").ToList (); " is 144.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "validatestock" || keyValue.ToLower () == "on" || keyValue == "1") { " is 128.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> validateOrderlinesQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "validateorderlines").ToList (); " is 154.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "validateorderlines" || keyValue.ToLower () == "on" || keyValue == "1") { " is 133.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "	List<string> confirmQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "confirm").ToList (); " is 132.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The length of the statement  "		if (keyValue.ToLower () == "true" || keyValue.ToLower () == "confirm" || keyValue.ToLower () == "on" || keyValue == "1") { " is 122.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,GetWishlist,The length of the statement  "	var wishlistQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "wishlist").ToList (); " is 125.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,CreateWishlist,The length of the statement  "	var wishlistQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "wishlist").ToList (); " is 125.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,GetOrCreateWishlist,The length of the statement  "	var wishlistQueryStringCollection = requestParameters.AllKeys.Where (x => x != null && x.ToLower () == "wishlist").ToList (); " is 125.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountSignIn,The length of the statement  "	string userNameKey = requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "username") ?? requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "customeremail") ?? string.Empty; " is 195.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The length of the statement  "	var userKey = requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "username") ?? requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "customeremail"); " is 172.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The length of the statement  "	var ignoreMemberexistsError = requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "ignorememberexistserror"); " is 120.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The length of the statement  "	var ignoreMemberexists = ignoreMemberexistsValue != null && (ignoreMemberexistsValue.ToLower () == "true" || ignoreMemberexistsValue.ToLower () == "ignorememberexistserror" || ignoreMemberexistsValue.ToLower () == "on" || ignoreMemberexistsValue == "1") || Membership.GetUser () != null; " is 287.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The length of the statement  "					result.Add (Constants.CreateMemberSessionKey' AccountActionResult.MinRequiredNonAlphanumericCharactersError.ToString ()); " is 121.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The length of the statement  "		passwordValue = Membership.GeneratePassword (Membership.MinRequiredPasswordLength' Membership.MinRequiredNonAlphanumericCharacters); " is 132.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountCreate,The length of the statement  "				Log.Instance.LogDebug (string.Format ("UpdateAccount Failed for Request Property: {0}' currentNodeId: {1}"' settingsProperty.Name' IO.Container.Resolve<ICMSApplication> ().CurrentNodeId ())); " is 191.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountRequestPassword,The length of the statement  "	string userNameKey = requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "username") ?? requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "customeremail"); " is 179.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountRequestPassword,The length of the statement  "		result.Add (Constants.RequestPasswordSessionKey' AccountActionResult.AccountForgotPasswordEmailNotConfigured.ToString ()); " is 122.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountRequestPassword,The length of the statement  "	string newPassword = Membership.GeneratePassword (Membership.MinRequiredPasswordLength' Membership.MinRequiredNonAlphanumericCharacters); " is 137.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,The length of the statement  "	if (!string.IsNullOrEmpty (currentPasswordValue) || !string.IsNullOrEmpty (newPasswordValue) || !string.IsNullOrEmpty (validatePasswordValue) || !string.IsNullOrEmpty (generatePasswordValue)) { " is 193.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,The length of the statement  "				newPasswordValue = Membership.GeneratePassword (Membership.MinRequiredPasswordLength' Membership.MinRequiredNonAlphanumericCharacters); " is 135.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,The length of the statement  "						result.Add (Constants.ChangePasswordSessionKey' AccountActionResult.PasswordStrengthRegularExpressionError.ToString ()); " is 120.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,The length of the statement  "						result.Add (Constants.ChangePasswordSessionKey' AccountActionResult.MinRequiredNonAlphanumericCharactersError.ToString ()); " is 123.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountUpdate,The length of the statement  "	// note don't forget to disable automatic profile save!: <profile defaultProvider="UmbracoMemberProfileProvider" enabled="true" automaticSaveEnabled="false"> " is 157.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountUpdate,The length of the statement  "			Log.Instance.LogDebug (string.Format ("UpdateAccount Failed for Request Property: {0}' currentNodeId: {1}"' settingsProperty.Name' IO.Container.Resolve<ICMSApplication> ().CurrentNodeId ())); " is 191.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,ConfirmOrder,The length of the statement  "	bool termsAccepted = acceptTermsValue != null && (acceptTermsValue.ToLower () == "true" || acceptTermsValue.ToLower () == "acceptterms" || acceptTermsValue.ToLower () == "on" || acceptTermsValue == "1"); " is 203.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,ConfirmOrder,The length of the statement  "	string confirmOrderNodeRequestKey = requestParameters.AllKeys.FirstOrDefault (x => x.ToLower () == "confirmordernodeid"); " is 121.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,ConfirmOrder,The length of the statement  "		Log.Instance.LogDebug ("CONFIRM ORDER REDIRECT URL: " + redirectUrl + " (handleObject.PostConfirmUrl) handleObject.PostConfirmUrl.AbsoluteUri: " + handleObject.PostConfirmUrl.AbsoluteUri); " is 188.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCoupon,The length of the statement  "		if (removeCouponValue.ToLower () == "true" || removeCouponValue.ToLower () == "removecoupon" && removeCouponValue.ToLower () != "on" && removeCouponValue != "1") { " is 163.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddOrderLineDetails,The length of the statement  "	// todo: updating an account' while there is an order will also update those details on the current order; do we want that? " is 123.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCustomerInformation,The length of the statement  "		if (customerIsShippingValue != null && (customerIsShippingValue.ToLower () == "customerisshipping" || customerIsShippingValue.ToLower () == "true" || customerIsShippingValue.ToLower () == "on" || customerIsShippingValue == "1")) { " is 230.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCustomerInformation,The length of the statement  "			var shippingFields = stringCollection.ToDictionary (s => s.Replace ("customer"' "shipping")' s => requestParameters [s]); " is 121.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddShippingMethod,The length of the statement  "	if (shippingProviderValue != null && (shippingProviderValue.ToLower () == "indication" || shippingProviderValue.ToLower () == "auto")) { " is 136.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddShippingMethod,The length of the statement  "			Log.Instance.LogDebug ("AddShippingMethod: " + ProviderActionResult.NoCorrectInput + " value: " + shippingProviderValue); " is 121.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddShippingMethod,The length of the statement  "			Log.Instance.LogDebug ("AddShippingMethod: " + ProviderActionResult.ProviderIdZero + " value: " + shippingProviderValue); " is 121.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddPaymentMethod,The length of the statement  "	if (!paymentProviderValue.Contains ("-"))// if the payment provider/method is given' act as PaymentHandler and request payment " is 126.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddPaymentMethod,The length of the statement  "		var paymentProvider = IO.Container.Resolve<IPaymentProviderService> ().GetPaymentProviderWithName (paymentProviderValue' StoreHelper.CurrentLocalization); " is 154.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddPaymentMethod,The length of the statement  "		Log.Instance.LogError ("BasketHandler AddPaymentMethod !paymentProviderValue.Contains(-) && paymentProviderNode != null"); " is 122.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,WishlistToBasket,The length of the statement  "			order.AddOrUpdateOrderLine (0' line.ProductInfo.Id' "add"' line.ProductInfo.ItemCount.GetValueOrDefault (1)' line.ProductInfo.ProductVariants.Select (v => v.Id)' dictionary); " is 174.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The length of the statement  "		var variants = requestParameters.Keys.Cast<string> ().Where (key => key.ToLower ().StartsWith ("variant")).Select (key => Common.Helpers.ParseInt (requestParameters [key])).ToList (); " is 183.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The length of the statement  "		Dictionary<string' string> fields = orderlineDetailsQueryStringCollection.Where (s => !string.IsNullOrEmpty (requestParameters [s])).ToDictionary (s => s' s => requestParameters [s]); " is 183.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The length of the statement  "			Log.Instance.LogDebug ("ADD TO BASKET DEBUG order: " + order.UniqueOrderId + " orderLineId: " + orderLineId + " productId: " + productId + " action: " + action + " quantity: " + quantity + " variantsCount: " + variants.Count () + " fieldsCount: " + fields.Count ()); " is 266.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The length of the statement  "				Session.Add (order.Status == OrderStatus.Wishlist ? Constants.WishlistActionResult : Constants.BasketActionResult' BasketActionResult.Success); " is 143.
Long Statement,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddProduct,The length of the statement  "			result.Add (order.Status == OrderStatus.Wishlist ? Constants.WishlistActionResult : Constants.BasketActionResult' BasketActionResult.Success.ToString ()); " is 154.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer InstallOrderTable Start: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 126.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer InstallOrderTable End: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 124.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer AddStoreOrderReferenceIdToExistingOrders Start: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 149.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer AddStoreOrderReferenceIdToExistingOrders End: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 147.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer InstallStockTable Start: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 126.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer InstallStockTable End: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 124.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer InstallCouponsTable Start: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 128.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "		Log.Instance.LogDebug ("uWebshop Installer InstallCouponsTable End: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 126.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "	Log.Instance.LogDebug ("uWebshop Installer InstalluWebshopDocumentTypes Start: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 137.
Long Statement,uWebshop.Domain.Businesslogic,UwebshopDefaultInstaller,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\UwebshopDefaultInstaller.cs,Install,The length of the statement  "	Log.Instance.LogDebug ("uWebshop Installer InstalluWebshopDocumentTypes End: " + DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt")); " is 135.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,StartOrContinuInitializingModulesState,The length of the statement  "			failedInitializations.Add (new Tuple<IUwebshopAddon' IStateInitialization' Exception> (registration.Addon' registration.Initialization' e)); " is 140.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,StartOrContinuInitializingModulesState,The length of the statement  "		Log.Instance.LogError (initialization.Item3' "Failed registering addon " + initialization.Item1.Name () + " on part " + initialization.Item2.Description ()); " is 157.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,StartOrContinuRegisteringDependencies,The length of the statement  "	})).Where (d => d.DependencyRegistration.Order () > FinishedRegistrationLevel).OrderBy (d => d.DependencyRegistration.Order ())) { " is 130.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,StartOrContinuRegisteringDependencies,The length of the statement  "			failedRegistrations.Add (new Tuple<IUwebshopAddon' IDependencyRegistration' Exception> (registration.Addon' registration.DependencyRegistration' e)); " is 149.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,StartOrContinuRegisteringDependencies,The length of the statement  "		Log.Instance.LogError (registration.Item3' "Failed registering addon " + registration.Item1.Name () + " on part " + registration.Item2.Description ()); " is 151.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,LoadAddons,The length of the statement  "	var dlls = files.Select (filepath => new FileInfo (filepath)).Where (fileInfo => fileInfo.Name.ToLowerInvariant ().StartsWith ("uwebshop.") && fileInfo.Name.ToLowerInvariant ().EndsWith (".dll")).ToList (); " is 206.
Long Statement,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,LoadAddons,The length of the statement  "			addons.AddRange (GetMatchingTypesInAssembly (assembly' type => targetType.IsAssignableFrom (type) && targetType != type && !type.IsAbstract).Select (type => { " is 158.
Long Statement,uWebshop.Domain,SellableUnit,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\SellableUnit.cs,GetAmount,The length of the statement  "	return new SellableUnitPriceService ().GetPrice (new ProductInfoSellableUnitPriceSource (Product' this)' inclVat' discounted' true' ranged); " is 140.
Long Statement,uWebshop.Domain,SellableUnit,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\SellableUnit.cs,GetOriginalAmount,The length of the statement  "	return new SellableUnitPriceService ().GetOriginalPrice (new ProductInfoSellableUnitPriceSource (Product' this)' discounted' true' ranged); " is 139.
Long Statement,uWebshop.Domain,DiscountExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\DiscountExtensions.cs,HasDiscountForOrder,The length of the statement  "	return discounts.Where (discount => discount.DiscountType == DiscountType.FreeShipping || IO.Container.Resolve<IDiscountCalculationService> ().DiscountAmountForOrder (discount' orderInfo) > 0); " is 193.
Long Statement,uWebshop.Domain,Catalog,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Catalog.cs,GetAllRootCategories,The length of the statement  "	return IO.Container.Resolve<ICategoryService> ().GetAllRootCategories (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 136.
Long Statement,uWebshop.Domain,Catalog,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Catalog.cs,GetProductRepositoryNode,The length of the statement  "	return DomainHelper.GetObjectsByAlias<uWebshopEntity> (ProductRepositoryNodeAlias' Constants.NonMultiStoreAlias).FirstOrDefault (); " is 131.
Long Statement,uWebshop.Domain,Category,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Category.cs,IsAlias,The length of the statement  "	return nodeTypeAlias != null && !nodeTypeAlias.StartsWith (Catalog.CategoryRepositoryNodeAlias) && nodeTypeAlias.StartsWith (NodeAlias); " is 136.
Long Statement,uWebshop.Domain,Category,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Category.cs,NiceUrl,The length of the statement  "	var localization = storeAlias == null && currencyCode == null ? Localization : StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode); " is 143.
Long Statement,uWebshop.Domain,Category,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Category.cs,NiceUrl,The length of the statement  "	return getCanonicalUrl ? urlService.CategoryCanonicalUrl (this' localization) : urlService.CategoryUrlUsingCurrentPath (this' localization); " is 140.
Long Statement,uWebshop.Domain,DiscountProduct,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\DiscountProduct.cs,GetDiscountAmountInCents,The length of the statement  "			//productPrice = product.Price.BeforeDiscount.ValueInCents; this doesn't work' because IsDiscounted will call this function' creating a loop " is 140.
Long Statement,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The length of the statement  "		return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range { " is 261.
Long Statement,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The length of the statement  "			To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])' " is 128.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The length of the statement  "			var discount = orderInfo.DiscountAmountInCents > 0 ? orderInfo.DiscountAmountInCents : (int)(orderInfo._discountAmount.GetValueOrDefault () * 100); " is 147.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The length of the statement  "		foreach (var orderLine in orderInfo.OrderLines.Where (line => line.ProductInfo.PriceInCents != line.ProductInfo.ProductRangePriceInCents)) { " is 140.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The length of the statement  "			orderLine.ProductInfo.DiscountAmountInCents = orderLine.ProductInfo.ProductRangePriceInCents - orderLine.ProductInfo.PriceInCents; " is 130.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The length of the statement  "			if (!DateTime.TryParse (orderInfo.OrderDate' orderInfo.StoreInfo.CultureInfo.DateTimeFormat' DateTimeStyles.None' out val)) " is 123.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "		throw new Exception ("Trying to load order without data (xml)' id: " + (orderData == null ? "no data!" : orderData.DatabaseId.ToString ()) + "' ordernumber: " + (orderData == null ? "no data!" : orderData.OrderReferenceNumber)); " is 228.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "		orderInfo = orderData.OrderXML.Contains ("<OrderInfo ") ? CreateOrderInfoFromLegacyXmlString (orderData.OrderXML) : CreateOrderInfoFromOrderDataObject<OrderDTO.Order> (orderData.OrderXML); " is 188.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "		var message = "Failed to load order data' id: " + orderData.DatabaseId + "' ordernumber: " + orderData.OrderReferenceNumber; " is 124.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "	if (HttpContext.Current != null && (!IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || UwebshopRequest.Current.PaymentProvider != null)) { " is 159.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "			Log.Instance.LogWarning ("Order: " + orderInfo.UniqueOrderId + " User IP address changed from: " + orderInfo.CustomerInfo.CustomerIPAddress + " to: " + currentUserIp); " is 167.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "		if (currentStore != null && UwebshopConfiguration.Current.ShareBasketBetweenStores && orderInfo.StoreInfo.Alias != currentStore.Alias) { " is 136.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "			orderUpdatingService.ChangeLocalization (orderInfo' Model.Localization.CreateLocalization (orderInfo.Localization.Store' StoreHelper.CurrentLocalization.CurrencyCode)); " is 168.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromOrderData,The length of the statement  "		//orderInfo._pricesAreIncludingVAT = null; todo: yes or no? (if yes' you could argue you need to look at current prices aswell..) " is 129.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,AddOrderLineDetails,The length of the statement  "	var documentTypeAlias = orderline.ProductInfo.CatalogProduct.NodeTypeAlias ().Replace (Product.NodeAlias' OrderedProduct.NodeAlias); " is 132.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,AddOrUpdateOrderLine,The length of the statement  "	IO.Container.Resolve<IOrderUpdatingService> ().AddOrUpdateOrderLine (this' orderLineId' productId' action' itemCount' variantsList' fields); " is 140.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,AddPaymentProvider,The length of the statement  "	return IO.Container.Resolve<IOrderUpdatingService> ().AddPaymentProvider (this' paymentProviderId' paymentProviderMethodId' StoreHelper.CurrentLocalization); " is 157.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,AddShippingProvider,The length of the statement  "	return IO.Container.Resolve<IOrderUpdatingService> ().AddShippingProvider (this' shippingProviderId' shippingProviderMethodId' StoreHelper.CurrentLocalization); " is 160.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,AddCustomerFields,The length of the statement  "	return IO.Container.Resolve<IOrderUpdatingService> ().AddCustomerFields (this' fields' customerDataType' ingnoreNotAllowed); " is 124.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,GetAmount,The length of the statement  "	discountedTotal = inclVat ? VatCalculationStrategy.WithVat (PricesAreIncludingVAT' originalTotal' AverageOrderVatPercentage' discountedTotal) : VatCalculationStrategy.WithoutVat (PricesAreIncludingVAT' originalTotal' AverageOrderVatPercentage' discountedTotal); " is 261.
Long Statement,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,ResetDiscounts,The length of the statement  "	//OrderDiscountEffects = DiscountEffects.CreateSellableUnitOrOrderDiscountEffects( // future build up using OrderlineDiscountEffects " is 132.
Long Statement,uWebshop.Domain,OrderLine,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderLine.cs,VariantsMatch,The length of the statement  "	return variants.OrderBy (v => v).SequenceEqual (ProductInfo.ProductVariants.Select (variant => variant.Id).OrderBy (v => v)); " is 125.
Long Statement,uWebshop.Domain,PaymentProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\PaymentProvider.cs,GetPaymentProvider,The length of the statement  "	return IO.Container.Resolve<IPaymentProviderService> ().GetById (id' StoreHelper.GetLocalization (storeAlias' currencyCode) ?? StoreHelper.CurrentLocalization); " is 160.
Long Statement,uWebshop.Domain,Product,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Product.cs,IsAlias,The length of the statement  "	return nodeTypeAlias != null && !nodeTypeAlias.StartsWith (Catalog.ProductRepositoryNodeAlias) && !ProductVariant.IsAlias (nodeTypeAlias) && nodeTypeAlias.StartsWith (NodeAlias); " is 178.
Long Statement,uWebshop.Domain,Product,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Product.cs,NiceUrl,The length of the statement  "	var localization = storeAlias == null && currencyCode == null ? Localization : StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode); " is 143.
Long Statement,uWebshop.Domain,Product,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Product.cs,NiceUrl,The length of the statement  "		return IO.Container.Resolve<IUrlService> ().ProductUsingCurrentCategoryPathOrCurrentCategoryOrCanonical (this' localization); " is 125.
Long Statement,uWebshop.Domain,ShippingProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\ShippingProvider.cs,IsApplicableToOrder,The length of the statement  "		// orderInfo.OrderLines.Aggregate<OrderLine' decimal>(0' (current' orderLine) => (decimal) (current + orderLine.ProductInfo.ItemCount)); " is 136.
Long Statement,uWebshop.Domain,ShippingProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\ShippingProvider.cs,LoadShippingMethods,The length of the statement  "	return shippingProviders.Where (shippingProvider => shippingProvider.GetName ().ToLowerInvariant () == Title.ToLowerInvariant ()).SelectMany (shippingProvider => shippingProvider.GetAllShippingMethods (Id)); " is 207.
Long Statement,uWebshop.Domain,ShippingConfigHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingConfigHelper.cs,LoadProviderSettings,The length of the statement  "	XmlNode providerNode = doc.SelectSingleNode (string.Format ("//provider[translate(@title' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')='{0}']"' Provider.Node.Name.ToLower ())); " is 191.
Long Statement,uWebshop.Domain,ShippingConfigHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingConfigHelper.cs,LoadProviderSettings,The length of the statement  "		Log.Instance.LogError (string.Format ("Could not find provider with title {0} in ShippingProviders.config"' Provider.Node.Name)); " is 129.
Long Statement,uWebshop.Domain,IoCContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\IO.cs,InstanceFactory,The length of the statement  "	var parameters = constructor.GetParameters ().Select (p => new Tuple<Type' object> (p.ParameterType' _instanceMap.GetOrAdd (p.ParameterType' InstanceFactory))).ToArray (); " is 171.
Long Statement,uWebshop.Domain,IoCContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\IO.cs,InstanceFactory,The length of the statement  "		throw new Exception ("IoC container could not resolve type " + type.Name + " because of required service " + p.Item1.Name); " is 123.
Long Statement,uWebshop.Domain,IoCContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\IO.cs,InstanceFactory,The length of the statement  "	var result = parameters.Any () ? constructor.Invoke (parameters.Select (p => p.Item2).ToArray ()) : Activator.CreateInstance (resolvedType); " is 140.
Long Statement,uWebshop.Domain.Model,DiscountEffects,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\DiscountEffects.cs,GetDiscountedPrice,The length of the statement  "		discounted += (int)Math.Round ((1 - (decimal)priceBeforeThisDiscountEffects / originalCurrentPrice) * summedAmountDiscount' MidpointRounding.AwayFromZero); " is 155.
Long Statement,uWebshop.Domain.Model,Localization,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Localization.cs,CreateLocalization,The length of the statement  "	// todo: if no defaultstore currency is set (should not be possible)' fallback to EUR (since most customers are EUR based) " is 122.
Long Statement,uWebshop.Domain.Model,Localization,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Localization.cs,CreateLocalization,The length of the statement  "		currencyCode = currencyCode != null ? currencyCode.ToUpperInvariant () : store.DefaultCurrencyCultureSymbol.ToUpperInvariant (); " is 128.
Long Statement,uWebshop.Domain.Model,Localization,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Localization.cs,CreateLocalization,The length of the statement  "		var currency = store.Currencies.SingleOrDefault (c => c.ISOCurrencySymbol == currencyCode) ?? new DefaultStoreCurrency { " is 120.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The length of the statement  "		throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type)); " is 137.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The length of the statement  "		throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type)); " is 137.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadInternal,The length of the statement  "			throw JsonReaderException.Create (this' "Unexpected state: {0}".FormatWith (CultureInfo.InvariantCulture' _bsonReaderState)); " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,GetString,The length of the statement  "		int count = ((length - totalBytesRead) > MaxCharBytesSize - offset) ? MaxCharBytesSize - offset : length - totalBytesRead; " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonWriter.cs,AddToken,The length of the statement  "			throw JsonWriterException.Create (this' "Error writing {0} value. BSON must start with an Object or Array.".FormatWith (CultureInfo.InvariantCulture' token.Type)' null); " is 169.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonWriter.cs,WriteValue,The length of the statement  "		throw JsonWriterException.Create (this' "Value is too large to fit in a signed 32 bit integer. BSON does not support unsigned values."' null); " is 142.
Long Statement,uWebshop.Newtonsoft.Json.Bson,BsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonWriter.cs,WriteValue,The length of the statement  "		throw JsonWriterException.Create (this' "Value is too large to fit in a signed 64 bit integer. BSON does not support unsigned values."' null); " is 142.
Long Statement,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,GetByteArray,The length of the statement  "	throw new JsonSerializationException ("Unexpected value type when writing binary: {0}".FormatWith (CultureInfo.InvariantCulture' value.GetType ())); " is 148.
Long Statement,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,ReadJson,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot convert null value to {0}.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,ReadJson,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected token parsing binary. Expected String or StartArray' got {0}.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 185.
Long Statement,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,ReadJson,The length of the statement  "	throw JsonSerializationException.Create (reader' "Unexpected object type when writing binary: {0}".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 154.
Long Statement,uWebshop.Newtonsoft.Json.Converters,BinaryConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BinaryConverter.cs,ReadByteArray,The length of the statement  "			throw JsonSerializationException.Create (reader' "Unexpected token when reading bytes: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 153.
Long Statement,uWebshop.Newtonsoft.Json.Converters,BsonObjectIdConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\BsonObjectIdConverter.cs,ReadJson,The length of the statement  "		throw new JsonSerializationException ("Expected Bytes but got {0}.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Converters,DataTableConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\DataTableConverter.cs,WriteJson,The length of the statement  "			writer.WritePropertyName ((resolver != null) ? resolver.GetResolvedPropertyName (column.ColumnName) : column.ColumnName); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Converters,EntityKeyMemberConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\EntityKeyMemberConverter.cs,ReadAndAssertProperty,The length of the statement  "		throw new JsonSerializationException ("Expected JSON property '{0}'.".FormatWith (CultureInfo.InvariantCulture' propertyName)); " is 127.
Long Statement,uWebshop.Newtonsoft.Json.Converters,ExpandoObjectConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\ExpandoObjectConverter.cs,ReadValue,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected token when converting ExpandoObject: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 164.
Long Statement,uWebshop.Newtonsoft.Json.Converters,IsoDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\IsoDateTimeConverter.cs,WriteJson,The length of the statement  "		if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal) " is 181.
Long Statement,uWebshop.Newtonsoft.Json.Converters,IsoDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\IsoDateTimeConverter.cs,WriteJson,The length of the statement  "		if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal) " is 181.
Long Statement,uWebshop.Newtonsoft.Json.Converters,IsoDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\IsoDateTimeConverter.cs,WriteJson,The length of the statement  "		throw new JsonSerializationException ("Unexpected value when converting date. Expected DateTime or DateTimeOffset' got {0}.".FormatWith (CultureInfo.InvariantCulture' ReflectionUtils.GetObjectType (value))); " is 207.
Long Statement,uWebshop.Newtonsoft.Json.Converters,IsoDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\IsoDateTimeConverter.cs,ReadJson,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot convert null value to {0}.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Converters,IsoDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\IsoDateTimeConverter.cs,ReadJson,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected token parsing date. Expected String' got {0}.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 169.
Long Statement,uWebshop.Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot convert null value to {0}.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "	if (reader.TokenType != JsonToken.StartConstructor || !string.Equals (reader.Value.ToString ()' "Date"' StringComparison.Ordinal)) " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected token or value when parsing date. Token: {0}' Value: {1}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType' reader.Value)); " is 194.
Long Statement,uWebshop.Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected token parsing date. Expected Integer' got {0}.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 170.
Long Statement,uWebshop.Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected token parsing date. Expected EndConstructor' got {0}.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 177.
Long Statement,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot convert null value to {0}.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "		throw JsonSerializationException.Create (reader' "Error converting value {0} to type '{1}'.".FormatWith (CultureInfo.InvariantCulture' MiscellaneousUtils.FormatValueForPrint (reader.Value)' objectType)' ex); " is 207.
Long Statement,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "	throw JsonSerializationException.Create (reader' "Unexpected token when parsing enum. Expected String or Integer' got {0}.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 185.
Long Statement,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,GetEnumNameMap,The length of the statement  "				n2 = f.GetCustomAttributes (typeof(EnumMemberAttribute)' true).Cast<EnumMemberAttribute> ().Select (a => a.Value).SingleOrDefault () ?? f.Name; " is 143.
Long Statement,uWebshop.Newtonsoft.Json.Converters,StringEnumConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\StringEnumConverter.cs,GetEnumNameMap,The length of the statement  "					throw new InvalidOperationException ("Enum name '{0}' already exists on enum '{1}'.".FormatWith (CultureInfo.InvariantCulture' n2' t.Name)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Converters,VersionConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\VersionConverter.cs,ReadJson,The length of the statement  "				throw JsonSerializationException.Create (reader' "Error parsing version string: {0}".FormatWith (CultureInfo.InvariantCulture' reader.Value)' ex); " is 146.
Long Statement,uWebshop.Newtonsoft.Json.Converters,VersionConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\VersionConverter.cs,ReadJson,The length of the statement  "			throw JsonSerializationException.Create (reader' "Unexpected token or value when parsing version. Token: {0}' Value: {1}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType' reader.Value)); " is 197.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ResolveFullName,The length of the statement  "	string prefix = (node.NamespaceUri == null || (node.LocalName == "xmlns" && node.NamespaceUri == "http://www.w3.org/2000/xmlns/")) ? null : manager.LookupPrefix (node.NamespaceUri); " is 181.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsArray,The length of the statement  "	IXmlNode jsonArrayAttribute = (node.Attributes != null) ? node.Attributes.SingleOrDefault (a => a.LocalName == "Array" && a.NamespaceUri == JsonNamespaceUri) : null; " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,SerializeNode,The length of the statement  "			if (!ValueAttributes (node.Attributes).Any () && node.ChildNodes.Count == 1 && node.ChildNodes [0].NodeType == XmlNodeType.Text) { " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadElement,The length of the statement  "		var attribute = (!string.IsNullOrEmpty (attributePrefix)) ? document.CreateAttribute (attributeName' manager.LookupNamespace (attributePrefix)' attributeValue) : document.CreateAttribute (attributeName' attributeValue); " is 219.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadElement,The length of the statement  "			IXmlNode attribute = (!string.IsNullOrEmpty (attributePrefix)) ? document.CreateAttribute (nameValue.Key' manager.LookupNamespace (attributePrefix)' nameValue.Value) : document.CreateAttribute (nameValue.Key' nameValue.Value); " is 226.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadElement,The length of the statement  "		if (reader.TokenType == JsonToken.String || reader.TokenType == JsonToken.Integer || reader.TokenType == JsonToken.Float || reader.TokenType == JsonToken.Boolean || reader.TokenType == JsonToken.Date) { " is 202.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ConvertTokenToXmlValue,The length of the statement  "		throw JsonSerializationException.Create (reader' "Cannot get an XML string value from token type '{0}'.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadArrayElements,The length of the statement  "		IXmlElement arrayElement = nestedArrayElement.ChildNodes.OfType<IXmlElement> ().Single (n => n.LocalName == propertyName); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadAttributeElements,The length of the statement  "	if (reader.TokenType != JsonToken.String && reader.TokenType != JsonToken.Null && reader.TokenType != JsonToken.Boolean && reader.TokenType != JsonToken.Integer && reader.TokenType != JsonToken.Float && reader.TokenType != JsonToken.Date && reader.TokenType != JsonToken.StartConstructor) { " is 290.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,CreateInstruction,The length of the statement  "				throw new JsonSerializationException ("Unexpected property name encountered while deserializing XmlDeclaration: " + reader.Value); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,CreateElement,The length of the statement  "	IXmlElement element = (!string.IsNullOrEmpty (ns)) ? document.CreateElement (elementName' ns) : document.CreateElement (elementName); " is 133.
Long Statement,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,DeserializeNode,The length of the statement  "				throw new JsonSerializationException ("JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifing a DeserializeRootElementName."); " is 217.
Long Statement,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The length of the statement  "	return EnsureFloatFormat (value' EnsureDecimalPlace (value' value.ToString ("R"' CultureInfo.InvariantCulture))' floatFormatHandling' quoteChar' nullable); " is 155.
Long Statement,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The length of the statement  "	return EnsureFloatFormat (value' EnsureDecimalPlace (value' value.ToString ("R"' CultureInfo.InvariantCulture))' floatFormatHandling' quoteChar' nullable); " is 155.
Long Statement,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,EnsureDecimalPlace,The length of the statement  "	if (double.IsNaN (value) || double.IsInfinity (value) || text.IndexOf ('.') != -1 || text.IndexOf ('E') != -1 || text.IndexOf ('e') != -1) " is 138.
Long Statement,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The length of the statement  "	throw new ArgumentException ("Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith (CultureInfo.InvariantCulture' value.GetType ())); " is 185.
Long Statement,uWebshop.Newtonsoft.Json,JsonPosition,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonPosition.cs,FormatMessage,The length of the statement  "		message += "' line {0}' position {1}".FormatWith (CultureInfo.InvariantCulture' lineInfo.LineNumber' lineInfo.LinePosition); " is 124.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,Push,The length of the statement  "		// this is a little hacky because Depth increases when first property/value is written but only testing here is faster/simpler " is 126.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,Push,The length of the statement  "			throw JsonReaderException.Create (this' "The reader's MaxDepth of {0} has been exceeded.".FormatWith (CultureInfo.InvariantCulture' _maxDepth)); " is 144.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDateTimeOffsetInternal,The length of the statement  "			throw JsonReaderException.Create (this' "Could not convert string to DateTimeOffset: {0}.".FormatWith (CultureInfo.InvariantCulture' Value)); " is 141.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDateTimeOffsetInternal,The length of the statement  "	throw JsonReaderException.Create (this' "Error reading date. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' t)); " is 131.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsBytesInternal,The length of the statement  "				throw JsonReaderException.Create (this' "Unexpected token when reading bytes: {0}.".FormatWith (CultureInfo.InvariantCulture' t)); " is 130.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsBytesInternal,The length of the statement  "	throw JsonReaderException.Create (this' "Error reading bytes. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' t)); " is 132.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDecimalInternal,The length of the statement  "			throw JsonReaderException.Create (this' "Could not convert string to decimal: {0}.".FormatWith (CultureInfo.InvariantCulture' Value)); " is 134.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDecimalInternal,The length of the statement  "	throw JsonReaderException.Create (this' "Error reading decimal. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' t)); " is 134.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsInt32Internal,The length of the statement  "			throw JsonReaderException.Create (this' "Could not convert string to integer: {0}.".FormatWith (CultureInfo.InvariantCulture' Value)); " is 134.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsInt32Internal,The length of the statement  "	throw JsonReaderException.Create (this' "Error reading integer. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' TokenType)); " is 142.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsStringInternal,The length of the statement  "	throw JsonReaderException.Create (this' "Error reading string. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' t)); " is 133.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDateTimeInternal,The length of the statement  "			throw JsonReaderException.Create (this' "Could not convert string to DateTime: {0}.".FormatWith (CultureInfo.InvariantCulture' Value)); " is 135.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ReadAsDateTimeInternal,The length of the statement  "	throw JsonReaderException.Create (this' "Error reading date. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' TokenType)); " is 139.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,IsWrappedInTypeObject,The length of the statement  "		throw JsonReaderException.Create (this' "Error reading bytes. Unexpected token: {0}.".FormatWith (CultureInfo.InvariantCulture' JsonToken.StartObject)); " is 152.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,ValidateEnd,The length of the statement  "		throw JsonReaderException.Create (this' "JsonToken {0} is not valid for closing JsonType {1}.".FormatWith (CultureInfo.InvariantCulture' endToken' currentObject)); " is 163.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,SetStateBasedOnCurrent,The length of the statement  "		throw JsonReaderException.Create (this' "While setting the reader state back to current object an unexpected JsonType was encountered: {0}".FormatWith (CultureInfo.InvariantCulture' currentObject)); " is 198.
Long Statement,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,GetTypeForCloseToken,The length of the statement  "		throw JsonReaderException.Create (this' "Not a valid close JsonToken: {0}".FormatWith (CultureInfo.InvariantCulture' token)); " is 125.
Long Statement,uWebshop.Newtonsoft.Json,JsonSerializer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializer.cs,DeserializeInternal,The length of the statement  "	TraceJsonReader traceJsonReader = (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose) ? new TraceJsonReader (reader) : null; " is 143.
Long Statement,uWebshop.Newtonsoft.Json,JsonSerializer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonSerializer.cs,SerializeInternal,The length of the statement  "	TraceJsonWriter traceJsonWriter = (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose) ? new TraceJsonWriter (jsonWriter) : null; " is 147.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadInternal,The length of the statement  "					throw JsonReaderException.Create (this' "Additional text encountered after finished reading JSON content: {0}.".FormatWith (CultureInfo.InvariantCulture' _chars [_charPos])); " is 174.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadInternal,The length of the statement  "			throw JsonReaderException.Create (this' "Unexpected state: {0}.".FormatWith (CultureInfo.InvariantCulture' CurrentState)); " is 122.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The length of the statement  "					throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote)); " is 138.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The length of the statement  "				throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote)); " is 138.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The length of the statement  "				throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar)); " is 136.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParsePostValue,The length of the statement  "				throw JsonReaderException.Create (this' "After parsing a value an unexpected character was encountered: {0}.".FormatWith (CultureInfo.InvariantCulture' currentChar)); " is 166.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseProperty,The length of the statement  "		throw JsonReaderException.Create (this' "Invalid property identifier character: {0}.".FormatWith (CultureInfo.InvariantCulture' _chars [_charPos])); " is 148.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseProperty,The length of the statement  "		throw JsonReaderException.Create (this' "Invalid character after parsing property name. Expected ':' but got: {0}.".FormatWith (CultureInfo.InvariantCulture' _chars [_charPos])); " is 178.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseUnquotedProperty,The length of the statement  "			throw JsonReaderException.Create (this' "Invalid JavaScript property identifier character: {0}.".FormatWith (CultureInfo.InvariantCulture' currentChar)); " is 153.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseValue,The length of the statement  "					throw JsonReaderException.Create (this' "Unexpected character encountered while parsing value: {0}.".FormatWith (CultureInfo.InvariantCulture' _chars [_charPos])); " is 163.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseValue,The length of the statement  "				throw JsonReaderException.Create (this' "Unexpected character encountered while parsing value: {0}.".FormatWith (CultureInfo.InvariantCulture' currentChar)); " is 157.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseConstructor,The length of the statement  "				throw JsonReaderException.Create (this' "Unexpected character while parsing constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' currentChar)); " is 151.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseConstructor,The length of the statement  "			throw JsonReaderException.Create (this' "Unexpected character while parsing constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' _chars [_charPos])); " is 157.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The length of the statement  "	bool nonBase10 = (firstChar == '0' && _stringReference.Length > 1 && _stringReference.Chars [_stringReference.StartIndex + 1] != '.' && _stringReference.Chars [_stringReference.StartIndex + 1] != 'e' && _stringReference.Chars [_stringReference.StartIndex + 1] != 'E'); " is 268.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The length of the statement  "			int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8); " is 136.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The length of the statement  "			long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8); " is 137.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The length of the statement  "			numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8); " is 136.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The length of the statement  "			ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value); " is 143.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The length of the statement  "            throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));" is 165.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseComment,The length of the statement  "		throw JsonReaderException.Create (this' "Error parsing comment. Expected: *' got {0}.".FormatWith (CultureInfo.InvariantCulture' _chars [_charPos])); " is 149.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteEscapedString,The length of the statement  "	JavaScriptUtils.WriteEscapedJavaScriptString (_writer' value' _quoteChar' _quoteName' _charEscapeFlags' StringEscapeHandling' ref _writeBuffer); " is 144.
Long Statement,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteValue,The length of the statement  "		pos = DateTimeUtils.WriteDateTimeString (_writeBuffer' pos' (DateFormatHandling == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' DateFormatHandling); " is 209.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,RaiseError,The length of the statement  "	string exceptionMessage = (lineInfo.HasLineInfo ()) ? message + " Line {0}' position {1}.".FormatWith (CultureInfo.InvariantCulture' lineInfo.LineNumber' lineInfo.LinePosition) : message; " is 187.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,WriteToken,The length of the statement  "		bool isInUniqueArray = (schemaScope.TokenType == JTokenType.Array && schemaScope.IsUniqueArray && schemaScope.ArrayItemCount > 0); " is 130.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,WriteToken,The length of the statement  "						RaiseError ("Non-unique array item at index {0}.".FormatWith (CultureInfo.InvariantCulture' schemaScope.ArrayItemCount - 1)' schemaScope.Schemas.First (s => s.UniqueItems)); " is 173.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateEndObject,The length of the statement  "			RaiseError ("Required properties are missing from object: {0}.".FormatWith (CultureInfo.InvariantCulture' string.Join ("' "' unmatchedRequiredProperties.ToArray ()))' schema); " is 175.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateEndArray,The length of the statement  "		RaiseError ("Array item count {0} exceeds maximum count of {1}.".FormatWith (CultureInfo.InvariantCulture' arrayItemCount' schema.MaximumItems)' schema); " is 153.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateEndArray,The length of the statement  "		RaiseError ("Array item count {0} is less than minimum count of {1}.".FormatWith (CultureInfo.InvariantCulture' arrayItemCount' schema.MinimumItems)' schema); " is 158.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateString,The length of the statement  "		RaiseError ("String '{0}' exceeds maximum length of {1}.".FormatWith (CultureInfo.InvariantCulture' value' schema.MaximumLength)' schema); " is 138.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateString,The length of the statement  "		RaiseError ("String '{0}' is less than minimum length of {1}.".FormatWith (CultureInfo.InvariantCulture' value' schema.MinimumLength)' schema); " is 143.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateString,The length of the statement  "				RaiseError ("String '{0}' does not match regex pattern '{1}'.".FormatWith (CultureInfo.InvariantCulture' value' pattern)' schema); " is 130.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "			RaiseError ("Integer {0} exceeds maximum value of {1}.".FormatWith (CultureInfo.InvariantCulture' value' schema.Maximum)' schema); " is 130.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "			RaiseError ("Integer {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith (CultureInfo.InvariantCulture' value' schema.Maximum)' schema); " is 159.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "			RaiseError ("Integer {0} is less than minimum value of {1}.".FormatWith (CultureInfo.InvariantCulture' value' schema.Minimum)' schema); " is 135.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "			RaiseError ("Integer {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith (CultureInfo.InvariantCulture' value' schema.Minimum)' schema); " is 159.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "			RaiseError ("Integer {0} is not evenly divisible by {1}.".FormatWith (CultureInfo.InvariantCulture' JsonConvert.ToString (value)' schema.DivisibleBy)' schema); " is 159.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ProcessValue,The length of the statement  "			// if there is positional validation and the array index is past the number of item validation schemas and there is no additonal items then error " is 145.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ProcessValue,The length of the statement  "			if (currentSchema != null && currentSchema.PositionalItemsValidation && !currentSchema.AllowAdditionalItems && (currentSchema.Items == null || _currentScope.ArrayItemCount - 1 >= currentSchema.Items.Count)) { " is 208.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ProcessValue,The length of the statement  "				RaiseError ("Index {0} has not been defined and the schema does not allow additional items.".FormatWith (CultureInfo.InvariantCulture' _currentScope.ArrayItemCount)' currentSchema); " is 181.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "			RaiseError ("Float {0} exceeds maximum value of {1}.".FormatWith (CultureInfo.InvariantCulture' JsonConvert.ToString (value)' schema.Maximum)' schema); " is 151.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "			RaiseError ("Float {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith (CultureInfo.InvariantCulture' JsonConvert.ToString (value)' schema.Maximum)' schema); " is 180.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "			RaiseError ("Float {0} is less than minimum value of {1}.".FormatWith (CultureInfo.InvariantCulture' JsonConvert.ToString (value)' schema.Minimum)' schema); " is 156.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "			RaiseError ("Float {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith (CultureInfo.InvariantCulture' JsonConvert.ToString (value)' schema.Minimum)' schema); " is 180.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "			RaiseError ("Float {0} is not evenly divisible by {1}.".FormatWith (CultureInfo.InvariantCulture' JsonConvert.ToString (value)' schema.DivisibleBy)' schema); " is 157.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ValidatePropertyName,The length of the statement  "			RaiseError ("Property '{0}' has not been defined and the schema does not allow additional properties.".FormatWith (CultureInfo.InvariantCulture' propertyName)' schema); " is 168.
Long Statement,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,TestType,The length of the statement  "		RaiseError ("Invalid type. Expected {0} but got {1}.".FormatWith (CultureInfo.InvariantCulture' currentSchema.Type' currentType)' currentSchema); " is 145.
Long Statement,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteConstructorDate,The length of the statement  "		throw JsonWriterException.Create (this' "Unexpected token when reading date constructor. Expected Integer' got " + reader.TokenType' null); " is 139.
Long Statement,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,WriteConstructorDate,The length of the statement  "		throw JsonWriterException.Create (this' "Unexpected token when reading date constructor. Expected EndConstructor' got " + reader.TokenType' null); " is 146.
Long Statement,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoComplete,The length of the statement  "		throw JsonWriterException.Create (this' "Token {0} in state {1} would result in an invalid JSON object.".FormatWith (CultureInfo.InvariantCulture' tokenBeingWritten.ToString ()' _currentState.ToString ())' null); " is 212.
Long Statement,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoComplete,The length of the statement  "	if ((_currentState == State.Object || _currentState == State.Array || _currentState == State.Constructor) && tokenBeingWritten != JsonToken.Comment) { " is 150.
Long Statement,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoComplete,The length of the statement  "		if ((_currentState == State.Array || _currentState == State.ArrayStart || _currentState == State.Constructor || _currentState == State.ConstructorStart) || (tokenBeingWritten == JsonToken.PropertyName && _currentState != State.Start)) " is 234.
Long Statement,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,CreateUnsupportedTypeException,The length of the statement  "	return JsonWriterException.Create (writer' "Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith (CultureInfo.InvariantCulture' value.GetType ())' null); " is 205.
Long Statement,uWebshop.Newtonsoft.Json.Linq,Extensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\Extensions.cs,Convert,The length of the statement  "			throw new InvalidCastException ("Cannot cast {0} to {1}.".FormatWith (CultureInfo.InvariantCulture' token.GetType ()' typeof(T))); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JArray,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JArray.cs,Load,The length of the statement  "		throw JsonReaderException.Create (reader' "Error reading JArray from JsonReader. Current JsonReader item is not an array: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 188.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JArray,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JArray.cs,FromObject,The length of the statement  "		throw new ArgumentException ("Object serialized to {0}. JArray instance expected.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 138.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JConstructor,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JConstructor.cs,Load,The length of the statement  "		throw JsonReaderException.Create (reader' "Error reading JConstructor from JsonReader. Current JsonReader item is not a constructor: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 199.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,CheckReentrancy,The length of the statement  "		throw new InvalidOperationException ("Cannot change {0} during a collection change event.".FormatWith (CultureInfo.InvariantCulture' GetType ())); " is 146.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,SetItem,The length of the statement  "		OnCollectionChanged (new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Replace' item' existing' index)); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,CopyItemsTo,The length of the statement  "		throw new ArgumentException ("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array."); " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,ValidateToken,The length of the statement  "		throw new ArgumentException ("Can not add {0} to {1}.".FormatWith (CultureInfo.InvariantCulture' o.GetType ()' GetType ())); " is 124.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,ReadTokenFrom,The length of the statement  "		throw JsonReaderException.Create (reader' "Error reading {0} from JsonReader.".FormatWith (CultureInfo.InvariantCulture' GetType ().Name)); " is 139.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,ReadTokenFrom,The length of the statement  "		throw JsonReaderException.Create (reader' "Unexpected end of content while loading {0}.".FormatWith (CultureInfo.InvariantCulture' GetType ().Name)); " is 149.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,ReadContentFrom,The length of the statement  "			throw new InvalidOperationException ("The JsonReader should not be on a token of type {0}.".FormatWith (CultureInfo.InvariantCulture' r.TokenType)); " is 148.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,AddNew,The length of the statement  "		throw new JsonException ("Could not determine new value to add to '{0}'.".FormatWith (CultureInfo.InvariantCulture' GetType ())); " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,AddNew,The length of the statement  "		throw new JsonException ("New item to be added to collection must be compatible with {0}.".FormatWith (CultureInfo.InvariantCulture' typeof(JToken))); " is 150.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JObject.cs,ValidateToken,The length of the statement  "		throw new ArgumentException ("Can not add {0} to {1}.".FormatWith (CultureInfo.InvariantCulture' o.GetType ()' GetType ())); " is 124.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JObject.cs,ValidateToken,The length of the statement  "		throw new ArgumentException ("Can not add property {0} to {1}. Property with the same name already exists on object.".FormatWith (CultureInfo.InvariantCulture' newProperty.Name' GetType ())); " is 191.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JObject.cs,InternalPropertyChanged,The length of the statement  "		OnCollectionChanged (new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Replace' childProperty' childProperty' IndexOfItem (childProperty))); " is 158.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JObject.cs,Load,The length of the statement  "		throw JsonReaderException.Create (reader' "Error reading JObject from JsonReader. Current JsonReader item is not an object: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 190.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JObject.cs,FromObject,The length of the statement  "		throw new ArgumentException ("Object serialized to {0}. JObject instance expected.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 139.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JObject.cs,CopyTo,The length of the statement  "		throw new ArgumentException ("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array."); " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JPath,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JPath.cs,Evaluate,The length of the statement  "					throw new JsonException ("Property '{0}' does not exist on JObject.".FormatWith (CultureInfo.InvariantCulture' propertyName)); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JPath,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JPath.cs,Evaluate,The length of the statement  "					throw new JsonException ("Property '{0}' not valid on {1}.".FormatWith (CultureInfo.InvariantCulture' propertyName' current.GetType ().Name)); " is 142.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JPath,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JPath.cs,Evaluate,The length of the statement  "						throw new JsonException ("Index {0} outside the bounds of JConstructor.".FormatWith (CultureInfo.InvariantCulture' index)); " is 123.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JPath,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JPath.cs,Evaluate,The length of the statement  "					throw new JsonException ("Index {0} not valid on {1}.".FormatWith (CultureInfo.InvariantCulture' index' current.GetType ().Name)); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JProperty,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JProperty.cs,RemoveItem,The length of the statement  "	throw new JsonException ("Cannot add or remove items from {0}.".FormatWith (CultureInfo.InvariantCulture' typeof(JProperty))); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JProperty,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JProperty.cs,RemoveItemAt,The length of the statement  "	throw new JsonException ("Cannot add or remove items from {0}.".FormatWith (CultureInfo.InvariantCulture' typeof(JProperty))); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JProperty,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JProperty.cs,InsertItem,The length of the statement  "		throw new JsonException ("{0} cannot have multiple values.".FormatWith (CultureInfo.InvariantCulture' typeof(JProperty))); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JProperty,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JProperty.cs,ClearItems,The length of the statement  "	throw new JsonException ("Cannot add or remove items from {0}.".FormatWith (CultureInfo.InvariantCulture' typeof(JProperty))); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JProperty,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JProperty.cs,Load,The length of the statement  "		throw JsonReaderException.Create (reader' "Error reading JProperty from JsonReader. Current JsonReader item is not a property: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 193.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,Values,The length of the statement  "	throw new InvalidOperationException ("Cannot access child value on {0}.".FormatWith (CultureInfo.InvariantCulture' GetType ())); " is 128.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ValidateToken,The length of the statement  "	return (Array.IndexOf (validTypes' o.Type) != -1) || (nullable && (o.Type == JTokenType.Null || o.Type == JTokenType.Undefined)); " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ToBigInteger,The length of the statement  "		throw new ArgumentException ("Can not convert {0} to BigInteger.".FormatWith (CultureInfo.InvariantCulture' GetType (value))); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ToBigIntegerNullable,The length of the statement  "		throw new ArgumentException ("Can not convert {0} to BigInteger.".FormatWith (CultureInfo.InvariantCulture' GetType (value))); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ReadFrom,The length of the statement  "	throw JsonReaderException.Create (reader' "Error reading JToken from JsonReader. Unexpected token: {0}".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,The length of the statement  "			return Convert.ToDecimal (objA' CultureInfo.InvariantCulture).CompareTo (Convert.ToDecimal (objB' CultureInfo.InvariantCulture)); " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,The length of the statement  "			return Convert.ToInt64 (objA' CultureInfo.InvariantCulture).CompareTo (Convert.ToInt64 (objB' CultureInfo.InvariantCulture)); " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,The length of the statement  "		throw MiscellaneousUtils.CreateArgumentOutOfRangeException ("valueType"' valueType' "Unexpected value type: {0}".FormatWith (CultureInfo.InvariantCulture' valueType)); " is 167.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The length of the statement  "	} else if (objA is int || objA is uint || objA is long || objA is short || objA is ushort || objA is sbyte || objA is byte || objB is int || objB is uint || objB is long || objB is short || objB is ushort || objB is sbyte || objB is byte) { " is 240.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,GetValueType,The length of the statement  "	else if (value is long || value is int || value is short || value is sbyte || value is ulong || value is uint || value is ushort || value is byte) " is 146.
Long Statement,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,GetValueType,The length of the statement  "	throw new ArgumentException ("Could not determine JSON object type for type {0}.".FormatWith (CultureInfo.InvariantCulture' value.GetType ())); " is 143.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ResolveReferences,The length of the statement  "				throw new JsonException ("Could not resolve schema reference '{0}'.".FormatWith (CultureInfo.InvariantCulture' schema.DeferredReference)); " is 138.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,BuildSchema,The length of the statement  "		throw JsonException.Create (token' token.Path' "Expected object while parsing schema object' got {0}.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 158.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessEnum,The length of the statement  "		throw JsonException.Create (token' token.Path' "Expected Array token while parsing enum values' got {0}.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 161.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessProperties,The length of the statement  "		throw JsonException.Create (token' token.Path' "Expected Object token while parsing schema properties' got {0}.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 168.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessProperties,The length of the statement  "			throw new JsonException ("Property {0} has already been defined in schema.".FormatWith (CultureInfo.InvariantCulture' propertyToken.Name)); " is 139.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessItems,The length of the statement  "		throw JsonException.Create (token' token.Path' "Expected array or JSON schema object' got {0}.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 151.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessType,The length of the statement  "				throw JsonException.Create (typeToken' typeToken.Path' "Exception JSON schema type string token' got {0}.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 162.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessType,The length of the statement  "		throw JsonException.Create (token' token.Path' "Expected array or JSON schema type string token' got {0}.".FormatWith (CultureInfo.InvariantCulture' token.Type)); " is 162.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "		throw new JsonException ("Unresolved circular reference for type '{0}'. Explicitly define an Id for the type using a JsonObject/JsonArray attribute or automatically generate a type Id using the UndefinedSchemaIdHandling property.".FormatWith (CultureInfo.InvariantCulture' type)); " is 280.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "				CurrentSchema.Items.Add (GenerateInternal (collectionItemType' (!allowNullItem) ? Required.Always : Required.Default' false)); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "			JsonSchemaType schemaType = (!ReflectionUtils.IsNullable (contract.UnderlyingType)) ? JsonSchemaType.String : AddNullType (JsonSchemaType.String' valueRequired); " is 161.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GenerateObjectSchema,The length of the statement  "			bool optional = property.NullValueHandling == NullValueHandling.Ignore || HasFlag (property.DefaultValueHandling.GetValueOrDefault ()' DefaultValueHandling.Ignore) || property.ShouldSerialize != null || property.GetIsSpecified != null; " is 235.
Long Statement,uWebshop.Newtonsoft.Json.Schema,JsonSchemaGenerator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaGenerator.cs,GetJsonSchemaType,The length of the statement  "		throw new JsonException ("Unexpected type code '{0}' for type '{1}'.".FormatWith (CultureInfo.InvariantCulture' typeCode' type)); " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,ResolveContract,The length of the statement  "			Dictionary<ResolverContractKey' JsonContract> updatedCache = (cache != null) ? new Dictionary<ResolverContractKey' JsonContract> (cache) : new Dictionary<ResolverContractKey' JsonContract> (); " is 192.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "	MemberSerialization memberSerialization = JsonTypeReflector.GetObjectMemberSerialization (objectType' ignoreSerializableAttribute); " is 131.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "	List<MemberInfo> allMembers = ReflectionUtils.GetFieldsAndProperties (objectType' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static).Where (m => !ReflectionUtils.IsIndexedProperty (m)).ToList (); " is 236.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "		List<MemberInfo> defaultMembers = ReflectionUtils.GetFieldsAndProperties (objectType' DefaultMembersSearchFlags).Where (m => !ReflectionUtils.IsIndexedProperty (m)).ToList (); " is 175.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,ShouldSerializeEntityMember,The length of the statement  "		if (propertyInfo.PropertyType.IsGenericType () && propertyInfo.PropertyType.GetGenericTypeDefinition ().FullName == "System.Data.Objects.DataClasses.EntityReference`1") " is 168.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "	contract.MemberSerialization = JsonTypeReflector.GetObjectMemberSerialization (contract.NonNullableUnderlyingType' ignoreSerializableAttribute); " is 144.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "		// mimic DataContractSerializer behaviour when populating fields by overriding default creator to create an uninitialized object " is 128.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "		// note that this is only possible when the application is fully trusted so fall back to using the default constructor (if available) in partial trust " is 150.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "		members.AddRange (baseType.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)); " is 141.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "		members.AddRange (baseType.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)); " is 137.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "					Func<object' object> getExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object> (member); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "					Action<object' object> setExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateSet<object> (member); " is 123.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "					Func<object> createExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object> (t); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "					MethodCall<object' object> setExtensionDataDictionaryValue = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object> (addMethod); " is 142.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetExtensionDataForType,The length of the statement  "			throw new JsonException ("Invalid extension data attribute on '{0}'. Member '{1}' type must implement IDictionary<string' JToken>.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (member.DeclaringType)' member.Name)); " is 231.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetAttributeConstructor,The length of the statement  "	IList<ConstructorInfo> markedConstructors = objectType.GetConstructors (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where (c => c.IsDefined (typeof(JsonConstructorAttribute)' true)).ToList (); " is 218.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetParametrizedConstructor,The length of the statement  "	IList<ConstructorInfo> constructors = objectType.GetConstructors (BindingFlags.Public | BindingFlags.Instance).ToList (); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateConstructorParameters,The length of the statement  "		JsonProperty matchingMemberProperty = (parameterInfo.Name != null) ? memberProperties.GetClosestMatchProperty (parameterInfo.Name) : null; " is 138.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreatePropertyFromConstructorParameter,The length of the statement  "	SetPropertySettingsFromAttributes (property' parameterInfo' parameterInfo.Name' parameterInfo.Member.DeclaringType' MemberSerialization.OptOut' out allowNonPublicAccess); " is 170.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreatePropertyFromConstructorParameter,The length of the statement  "		property.PropertyName = (property.PropertyName != parameterInfo.Name) ? property.PropertyName : matchingMemberProperty.PropertyName; " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "	JsonContainerAttribute containerAttribute = JsonTypeReflector.GetJsonContainerAttribute (contract.NonNullableUnderlyingType); " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "		DataContractAttribute dataContractAttribute = JsonTypeReflector.GetDataContractAttribute (contract.NonNullableUnderlyingType); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "	contract.InternalConverter = JsonSerializer.GetMatchingConverter (BuiltInConverters' contract.NonNullableUnderlyingType); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "		contract.DefaultCreatorNonPublic = (!contract.CreatedType.IsValueType () && ReflectionUtils.GetDefaultConstructor (contract.CreatedType) == null); " is 146.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,ResolveCallbackMethods,The length of the statement  "	GetCallbackMethodsForType (t' out onSerializing' out onSerialized' out onDeserializing' out onDeserialized' out onError); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,ResolveCallbackMethods,The length of the statement  "		// ConcurrentDictionary throws an error here so don't use its OnDeserialized - http://json.codeplex.com/discussions/257093 " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "		foreach (var method in baseType.GetMethods (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)) { " is 144.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "			if (IsValidCallback (method' parameters' typeof(OnSerializingAttribute)' currentOnSerializing' ref prevAttributeType)) { " is 120.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "			if (IsValidCallback (method' parameters' typeof(OnDeserializingAttribute)' currentOnDeserializing' ref prevAttributeType)) { " is 124.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "			if (IsValidCallback (method' parameters' typeof(OnDeserializedAttribute)' currentOnDeserialized' ref prevAttributeType)) { " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateISerializableContract,The length of the statement  "	ConstructorInfo constructorInfo = contract.NonNullableUnderlyingType.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' new[] { " is 168.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateISerializableContract,The length of the statement  "		MethodCall<object' object> methodCall = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object> (constructorInfo); " is 127.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsIConvertible,The length of the statement  "	if (typeof(IConvertible).IsAssignableFrom (t) || (ReflectionUtils.IsNullableType (t) && typeof(IConvertible).IsAssignableFrom (Nullable.GetUnderlyingType (t)))) { " is 162.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "		throw new JsonException ("Invalid attribute. Both '{0}' and '{1}' in type '{2}' have '{3}'.".FormatWith (CultureInfo.InvariantCulture' method' currentCallback' GetClrTypeFullName (method.DeclaringType)' attributeType)); " is 219.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "		throw new JsonException ("Invalid Callback. Method '{3}' in type '{2}' has both '{0}' and '{1}'.".FormatWith (CultureInfo.InvariantCulture' prevAttributeType' attributeType' GetClrTypeFullName (method.DeclaringType)' method)); " is 226.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "		throw new JsonException ("Virtual Method '{0}' of type '{1}' cannot be marked with '{2}' attribute.".FormatWith (CultureInfo.InvariantCulture' method' GetClrTypeFullName (method.DeclaringType)' attributeType)); " is 210.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "		throw new JsonException ("Serialization Callback '{1}' in type '{0}' must return void.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (method.DeclaringType)' method)); " is 182.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "		if (parameters == null || parameters.Length != 2 || parameters [0].ParameterType != typeof(StreamingContext) || parameters [1].ParameterType != typeof(ErrorContext)) " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "			throw new JsonException ("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (method.DeclaringType)' method' typeof(StreamingContext)' typeof(ErrorContext))); " is 268.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "			throw new JsonException ("Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (method.DeclaringType)' method' typeof(StreamingContext))); " is 234.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateProperty,The length of the statement  "	SetPropertySettingsFromAttributes (property' member' member.Name' member.DeclaringType' memberSerialization' out allowNonPublicAccess); " is 135.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "		property.DefaultValueHandling = (!dataMemberAttribute.EmitDefaultValue) ? (DefaultValueHandling?)DefaultValueHandling.Ignore : null; " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "	bool hasJsonIgnoreAttribute = JsonTypeReflector.GetAttribute<JsonIgnoreAttribute> (attributeProvider) != null // automatically ignore extension data dictionary property if it is public " is 184.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "	property.ItemConverter = (propertyAttribute != null && propertyAttribute.ItemConverterType != null) ? JsonConverterAttribute.CreateJsonConverterInstance (propertyAttribute.ItemConverterType) : null; " is 198.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateShouldSerializeTest,The length of the statement  "	MethodInfo shouldSerializeMethod = member.DeclaringType.GetMethod (JsonTypeReflector.ShouldSerializePrefix + member.Name' ReflectionUtils.EmptyTypes); " is 150.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CreateShouldSerializeTest,The length of the statement  "	MethodCall<object' object> shouldSerializeCall = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object> (shouldSerializeMethod); " is 142.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,SetIsSpecifiedActions,The length of the statement  "	Func<object' object> specifiedPropertyGet = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object> (specifiedMember); " is 124.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "			throw new JsonSerializationException ("Could not load assembly '{0}'.".FormatWith (CultureInfo.InvariantCulture' assemblyName)); " is 128.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "			throw new JsonSerializationException ("Could not find type '{0}' in assembly '{1}'.".FormatWith (CultureInfo.InvariantCulture' typeName' assembly.FullName)); " is 157.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DynamicValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DynamicValueProvider.cs,SetValue,The length of the statement  "				throw new JsonSerializationException ("Incompatible value. Cannot set {0} to null.".FormatWith (CultureInfo.InvariantCulture' _memberInfo)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DynamicValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DynamicValueProvider.cs,SetValue,The length of the statement  "			throw new JsonSerializationException ("Incompatible value. Cannot set {0} to type {1}.".FormatWith (CultureInfo.InvariantCulture' _memberInfo' value.GetType ())); " is 162.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DynamicValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DynamicValueProvider.cs,SetValue,The length of the statement  "		throw new JsonSerializationException ("Error setting value to '{0}' on '{1}'.".FormatWith (CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType ())' ex); " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,DynamicValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DynamicValueProvider.cs,GetValue,The length of the statement  "		throw new JsonSerializationException ("Error getting value from '{0}' on '{1}'.".FormatWith (CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType ())' ex); " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,ExpressionValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "				throw new JsonSerializationException ("Incompatible value. Cannot set {0} to null.".FormatWith (CultureInfo.InvariantCulture' _memberInfo)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,ExpressionValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "			throw new JsonSerializationException ("Incompatible value. Cannot set {0} to type {1}.".FormatWith (CultureInfo.InvariantCulture' _memberInfo' value.GetType ())); " is 162.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,ExpressionValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "		throw new JsonSerializationException ("Error setting value to '{0}' on '{1}'.".FormatWith (CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType ())' ex); " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,ExpressionValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ExpressionValueProvider.cs,GetValue,The length of the statement  "		throw new JsonSerializationException ("Error getting value from '{0}' on '{1}'.".FormatWith (CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType ())' ex); " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonArrayContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonArrayContract.cs,CreateWrapper,The length of the statement  "		if (ReflectionUtils.InheritsGenericDefinition (_genericCollectionDefinitionType' typeof(List<>)) || _genericCollectionDefinitionType.GetGenericTypeDefinition () == typeof(IEnumerable<>)) " is 186.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonArrayContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonArrayContract.cs,CreateWrapper,The length of the statement  "		_genericWrapperCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object> (genericWrapperConstructor); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonArrayContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonArrayContract.cs,CreateTemporaryCollection,The length of the statement  "		_genericTemporaryCollectionCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object> (temporaryListType); " is 134.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonDictionaryContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonDictionaryContract.cs,CreateWrapper,The length of the statement  "		_genericWrapperCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object> (genericWrapperConstructor); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonDictionaryContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonDictionaryContract.cs,CreateTemporaryDictionary,The length of the statement  "		_genericTemporaryDictionaryCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object> (temporaryDictionaryType); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonObjectContract,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonObjectContract.cs,GetUninitializedObject,The length of the statement  "		throw new JsonException ("Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.".FormatWith (CultureInfo.InvariantCulture' NonNullableUnderlyingType)); " is 181.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonPropertyCollection,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonPropertyCollection.cs,AddProperty,The length of the statement  "			throw new JsonSerializationException ("A member with the name '{0}' already exists on '{1}'. Use the JsonPropertyAttribute to specify another name.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName' _type)); " is 222.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "			PopulateList ((arrayContract.ShouldCreateWrapper) ? arrayContract.CreateWrapper (target) : (IList)target' reader' arrayContract' null' null); " is 141.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot populate JSON array onto type '{0}'.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 150.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "		if (reader.TokenType == JsonToken.PropertyName && string.Equals (reader.Value.ToString ()' JsonTypeReflector.IdPropertyName' StringComparison.Ordinal)) { " is 153.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "			PopulateDictionary ((dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper (target) : (IDictionary)target' reader' dictionaryContract' null' id); " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot populate JSON object onto type '{0}'.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 151.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unexpected initial token '{0}' when populating object. Expected JSON object or array.".FormatWith (CultureInfo.InvariantCulture' reader.TokenType)); " is 198.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,Deserialize,The length of the statement  "				throw JsonSerializationException.Create (reader' "No JSON content found and type '{0}' is not nullable.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 173.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The length of the statement  "			if (string.IsNullOrEmpty (s) && objectType != typeof(string) && objectType != typeof(object) && contract != null && contract.IsNullable) " is 136.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "	if (ReadSpecialProperties (reader' ref objectType' ref contract' member' containerContract' containerMember' existingValue' out newValue' out id)) " is 146.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "			targetObject = CreateNewObject (reader' objectContract' member' containerMember' id' out createdFromNonDefaultConstructor); " is 123.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "		if (reader.TokenType == JsonToken.PropertyName && string.Equals (reader.Value.ToString ()' JsonTypeReflector.ValuePropertyName' StringComparison.Ordinal)) { " is 156.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "				throw JsonSerializationException.Create (reader' "Unexpected token when deserializing primitive value: " + reader.TokenType); " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "				throw JsonSerializationException.Create (reader' "Cannot preserve reference to readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 228.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "				throw JsonSerializationException.Create (reader' "Cannot call OnSerializing on readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 228.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "				throw JsonSerializationException.Create (reader' "Cannot call OnError on readonly list' or dictionary created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 216.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "			targetDictionary = PopulateDictionary (dictionaryContract.ShouldCreateWrapper ? dictionaryContract.CreateWrapper (existingValue) : (IDictionary)existingValue' reader' dictionaryContract' member' id); " is 199.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "	throw JsonSerializationException.Create (reader' @"Cannot deserialize the current JSON object (e.g. {{""name"":""value""}}) into type '{0}' because the type requires a {1} to deserialize correctly." is 197.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "To fix this error either change the JSON to a {1} or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer' not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object." is 345.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "						throw JsonSerializationException.Create (reader' "JSON reference {0} property must have a string or null value.".FormatWith (CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)); " is 191.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "							throw JsonSerializationException.Create (reader' "Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith (CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)); " is 237.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "							TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Resolved object reference '{0}' to {1}.".FormatWith (CultureInfo.InvariantCulture' reference' newValue.GetType ()))' null); " is 226.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "					TypeNameHandling resolvedTypeNameHandling = ((member != null) ? member.TypeNameHandling : null) ?? ((containerContract != null) ? containerContract.ItemTypeNameHandling : null) ?? ((containerMember != null) ? containerMember.ItemTypeNameHandling : null) ?? Serializer._typeNameHandling; " is 286.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "							throw JsonSerializationException.Create (reader' "Error resolving type specified in JSON '{0}'.".FormatWith (CultureInfo.InvariantCulture' qualifiedTypeName)' ex); " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "							throw JsonSerializationException.Create (reader' "Type specified in JSON '{0}' was not resolved.".FormatWith (CultureInfo.InvariantCulture' qualifiedTypeName)); " is 160.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "							TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Resolved type '{0}' to {1}.".FormatWith (CultureInfo.InvariantCulture' qualifiedTypeName' specifiedType))' null); " is 219.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ReadSpecialProperties,The length of the statement  "							throw JsonSerializationException.Create (reader' "Type specified in JSON '{0}' is not compatible with '{1}'.".FormatWith (CultureInfo.InvariantCulture' specifiedType.AssemblyQualifiedName' objectType.AssemblyQualifiedName)); " is 224.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "		throw JsonSerializationException.Create (reader' "Could not resolve type '{0}' to a JsonContract.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 154.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "		throw JsonSerializationException.Create (reader' @"Cannot deserialize the current JSON array (e.g. [1'2'3]) into type '{0}' because the type requires a {1} to deserialize correctly." is 181.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "To fix this error either change the JSON to a {1} or change the deserialized type to an array or a type that implements a collection interface (e.g. ICollection' IList) like List<T> that can be deserialized from a JSON array. JsonArrayAttribute can also be added to the type to force it to deserialize from a JSON array." is 320.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot preserve reference to array or readonly list' or list created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 225.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot call OnSerializing on an array or readonly list' or list created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 228.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "			throw JsonSerializationException.Create (reader' "Cannot call OnError on an array or readonly list' or list created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 222.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "				list = CollectionUtils.ToMultidimensionalArray (list' arrayContract.CollectionItemType' contract.CreatedType.GetArrayRank ()); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "		value = PopulateList ((arrayContract.ShouldCreateWrapper) ? arrayContract.CreateWrapper (existingValue) : (IList)existingValue' reader' arrayContract' member' id); " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EnsureType,The length of the statement  "			throw JsonSerializationException.Create (reader' "Error converting value {0} to type '{1}'.".FormatWith (CultureInfo.InvariantCulture' MiscellaneousUtils.FormatValueForPrint (value)' targetType)' ex); " is 200.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "	if (CalculatePropertyDetails (property' ref propertyConverter' containerContract' containerProperty' reader' target' out useExistingValue' out currentValue' out propertyContract' out gottenCurrentValue)) " is 203.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "		value = CreateValueInternal (reader' property.PropertyType' propertyContract' property' containerContract' containerProperty' (useExistingValue) ? currentValue : null); " is 168.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "				TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "IsSpecified for property '{0}' on {1} set to true.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType))' null); " is 255.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "	ObjectCreationHandling objectCreationHandling = property.ObjectCreationHandling.GetValueOrDefault (Serializer._objectCreationHandling); " is 135.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "	if ((objectCreationHandling != ObjectCreationHandling.Replace) && (tokenType == JsonToken.StartArray || tokenType == JsonToken.StartObject) && property.Readable) { " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "	if (property.NullValueHandling.GetValueOrDefault (Serializer._nullValueHandling) == NullValueHandling.Ignore && tokenType == JsonToken.Null) " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "	if (HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) && !HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && JsonReader.IsPrimitiveToken (tokenType) && MiscellaneousUtils.ValueEquals (reader.Value' property.GetResolvedDefaultValue ())) " is 383.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,AddReference,The length of the statement  "			TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Read object reference Id '{0}' for {1}.".FormatWith (CultureInfo.InvariantCulture' id' value.GetType ()))' null); " is 219.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,AddReference,The length of the statement  "		throw JsonSerializationException.Create (reader' "Error reading object reference '{0}'.".FormatWith (CultureInfo.InvariantCulture' id)' ex); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "	if (property.NullValueHandling.GetValueOrDefault (Serializer._nullValueHandling) == NullValueHandling.Ignore && value == null) " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "	if (HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) && !HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && MiscellaneousUtils.ValueEquals (value' property.GetResolvedDefaultValue ())) " is 333.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "		throw JsonSerializationException.Create (reader' "Cannot create and populate list type {0}.".FormatWith (CultureInfo.InvariantCulture' contract.CreatedType)); " is 158.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "	} else if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) { " is 175.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unable to find a constructor to use for type {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 169.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "	} else if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) { " is 175.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unable to find a default constructor to use for type {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 177.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,OnDeserializing,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Started deserializing {0}".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 205.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,OnDeserialized,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Finished deserializing {0}".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 206.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "	JsonConverter dictionaryValueConverter = contract.ItemConverter ?? GetConverter (contract.ItemContract' null' contract' containerProperty); " is 139.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "	PrimitiveTypeCode keyTypeCode = (contract.KeyContract is JsonPrimitiveContract) ? ((JsonPrimitiveContract)contract.KeyContract).TypeCode : PrimitiveTypeCode.Empty; " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "					if ((keyTypeCode == PrimitiveTypeCode.DateTime || keyTypeCode == PrimitiveTypeCode.DateTimeNullable) && DateTimeUtils.TryParseDateTime (keyValue.ToString ()' DateParseHandling.DateTime' reader.DateTimeZoneHandling' out dt)) { " is 225.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "					else if ((keyTypeCode == PrimitiveTypeCode.DateTimeOffset || keyTypeCode == PrimitiveTypeCode.DateTimeOffsetNullable) && DateTimeUtils.TryParseDateTime (keyValue.ToString ()' DateParseHandling.DateTimeOffset' reader.DateTimeZoneHandling' out dt)) { " is 248.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "						keyValue = EnsureType (reader' keyValue' CultureInfo.InvariantCulture' contract.KeyContract' contract.DictionaryKeyType); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "					throw JsonSerializationException.Create (reader' "Could not convert string '{0}' to dictionary key type '{1}'. Create a TypeConverter to convert from the string to the key type object.".FormatWith (CultureInfo.InvariantCulture' reader.Value' contract.DictionaryKeyType)' ex); " is 275.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "					itemValue = CreateValueInternal (reader' contract.DictionaryValueType' contract.ItemContract' null' contract' containerProperty' null); " is 135.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The length of the statement  "							value = CreateValueInternal (reader' contract.CollectionItemType' collectionItemContract' null' contract' containerProperty' null); " is 131.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The length of the statement  "					throw JsonSerializationException.Create (reader' "Unexpected token when deserializing multidimensional array: " + reader.TokenType); " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateList,The length of the statement  "						value = CreateValueInternal (reader' contract.CollectionItemType' contract.ItemContract' null' contract' containerProperty' null); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "		throw JsonSerializationException.Create (reader' @"Type '{0}' implements ISerializable but cannot be deserialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data." is 242.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "To fix this error either change the environment to be fully trusted' change the application to not deserialize the type' add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true." is 293.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Deserializing {0} using ISerializable constructor.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 230.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "				throw JsonSerializationException.Create (reader' "Unexpected end when setting {0}'s value.".FormatWith (CultureInfo.InvariantCulture' memberName)); " is 147.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "		throw JsonSerializationException.Create (reader' "ISerializable type '{0}' does not have a valid constructor. To correctly implement ISerializable a constructor that takes SerializationInfo and StreamingContext parameters should be present.".FormatWith (CultureInfo.InvariantCulture' objectType)); " is 297.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "	// these are together because OnDeserializing takes an object but for an ISerializable the object is fully created in the constructor " is 133.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "		throw JsonSerializationException.Create (reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 228.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "	if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unable to find a default constructor to use for type {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 177.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "					throw JsonSerializationException.Create (reader' "Unexpected end when setting {0}'s value.".FormatWith (CultureInfo.InvariantCulture' memberName)); " is 147.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Deserializing {0} using a non-default constructor '{1}'.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType' constructorInfo))' null); " is 253.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the statement  "	IDictionary<JsonProperty' object> propertyValues = ResolvePropertyAndConstructorValues (contract' containerProperty' reader' objectType); " is 137.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the statement  "	IDictionary<ParameterInfo' object> constructorParameters = constructorInfo.GetParameters ().ToDictionary (p => p' p => (object)null); " is 133.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the statement  "		ParameterInfo matchingConstructorParameter = constructorParameters.ForgivingCaseSensitiveFind (kv => kv.Key.Name' propertyValue.Key.UnderlyingName).Key; " is 152.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the statement  "					IDictionary targetDictionary = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper (createdObjectDictionary) : (IDictionary)createdObjectDictionary; " is 172.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObjectFromNonDefaultConstructor,The length of the statement  "					IDictionary newValues = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper (value) : (IDictionary)value; " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Started deserializing {0} with converter {1}.".FormatWith (CultureInfo.InvariantCulture' objectType' converter.GetType ()))' null); " is 234.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Finished deserializing {0} with converter {1}.".FormatWith (CultureInfo.InvariantCulture' objectType' converter.GetType ()))' null); " is 235.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "			JsonProperty property = contract.ConstructorParameters.GetClosestMatchProperty (memberName) ?? contract.Properties.GetClosestMatchProperty (memberName); " is 152.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "				JsonConverter propertyConverter = GetConverter (property.PropertyContract' property.MemberConverter' contract' containerProperty); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "					throw JsonSerializationException.Create (reader' "Unexpected end when setting {0}'s value.".FormatWith (CultureInfo.InvariantCulture' memberName)); " is 147.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "						propertyValue = CreateValueInternal (reader' property.PropertyType' property.PropertyContract' property' contract' containerProperty' null); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "					throw JsonSerializationException.Create (reader' "Unexpected end when setting {0}'s value.".FormatWith (CultureInfo.InvariantCulture' memberName)); " is 147.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "					TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Could not find member '{0}' on {1}.".FormatWith (CultureInfo.InvariantCulture' memberName' contract.UnderlyingType))' null); " is 230.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndConstructorValues,The length of the statement  "					throw JsonSerializationException.Create (reader' "Could not find member '{0}' on object of type '{1}'".FormatWith (CultureInfo.InvariantCulture' memberName' objectType.Name)); " is 175.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "		throw JsonSerializationException.Create (reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith (CultureInfo.InvariantCulture' objectContract.UnderlyingType)); " is 234.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "			return CreateObjectFromNonDefaultConstructor (reader' objectContract' containerMember' objectContract.OverrideConstructor' id); " is 127.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "	} else if (objectContract.DefaultCreator != null && (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParametrizedConstructor == null)) { " is 237.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "		return CreateObjectFromNonDefaultConstructor (reader' objectContract' containerMember' objectContract.ParametrizedConstructor' id); " is 131.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "		throw JsonSerializationException.Create (reader' "Unable to find a constructor to use for type {0}. A class should either have a default constructor' one constructor with arguments or a constructor marked with the JsonConstructor attribute.".FormatWith (CultureInfo.InvariantCulture' objectContract.UnderlyingType)); " is 316.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "	Dictionary<JsonProperty' PropertyPresence> propertiesPresence = (contract.HasRequiredOrDefaultValueProperties || HasFlag (Serializer._defaultValueHandling' DefaultValueHandling.Populate)) ? contract.Properties.ToDictionary (m => m' m => PropertyPresence.None) : null; " is 267.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "							TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (reader as IJsonLineInfo' reader.Path' "Could not find member '{0}' on {1}".FormatWith (CultureInfo.InvariantCulture' memberName' contract.UnderlyingType))' null); " is 229.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "							throw JsonSerializationException.Create (reader' "Could not find member '{0}' on object of type '{1}'".FormatWith (CultureInfo.InvariantCulture' memberName' contract.UnderlyingType.Name)); " is 188.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "						throw JsonSerializationException.Create (reader' "Unexpected end when setting {0}'s value.".FormatWith (CultureInfo.InvariantCulture' memberName)); " is 147.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetExtensionData,The length of the statement  "			throw JsonSerializationException.Create (reader' "Error setting value in extension data for type '{0}'.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType)' ex); " is 177.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "							throw JsonSerializationException.Create (reader' "Required property '{0}' not found in JSON.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName)); " is 160.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "						if (HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && property.Writable) " is 149.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "							property.ValueProvider.SetValue (newObject' EnsureType (reader' property.GetResolvedDefaultValue ()' CultureInfo.InvariantCulture' property.PropertyContract' property.PropertyType)); " is 182.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "							throw JsonSerializationException.Create (reader' "Required property '{0}' expects a value but got null.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName)); " is 171.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,SetPropertyPresence,The length of the statement  "		requiredProperties [property] = (reader.TokenType == JsonToken.Null || reader.TokenType == JsonToken.Undefined) ? PropertyPresence.Null : PropertyPresence.Value; " is 161.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializePrimitive,The length of the statement  "		bool includeTypeDetails = ShouldWriteType (TypeNameHandling.Objects' contract' member' containerContract' containerProperty); " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "	if ((((converter = (member != null) ? member.Converter : null) != null) || ((converter = (containerProperty != null) ? containerProperty.ItemConverter : null) != null) || ((converter = (containerContract != null) ? containerContract.ItemConverter : null) != null) || ((converter = valueContract.Converter) != null) || ((converter = Serializer.GetMatchingConverter (valueContract.UnderlyingType)) != null) || ((converter = valueContract.InternalConverter) != null)) && converter.CanWrite) { " is 489.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "		SerializeDictionary (writer' (value is IDictionary) ? (IDictionary)value : dictionaryContract.CreateWrapper (value)' dictionaryContract' member' containerContract' containerProperty); " is 183.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "		SerializeDynamic (writer' (IDynamicMetaObjectProvider)value' (JsonDynamicContract)valueContract' member' containerContract' containerProperty); " is 143.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "		SerializeISerializable (writer' (ISerializable)value' (JsonISerializableContract)valueContract' member' containerContract' containerProperty); " is 142.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteProperty,The length of the statement  "	if (property.NullValueHandling.GetValueOrDefault (Serializer._nullValueHandling) == NullValueHandling.Ignore && memberValue == null) " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteProperty,The length of the statement  "	if (HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) && MiscellaneousUtils.ValueEquals (memberValue' property.GetResolvedDefaultValue ())) " is 211.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "	if (value == null || contract.ContractType == JsonContractType.Primitive || contract.ContractType == JsonContractType.String) " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "				TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' message + ". Skipping serializing self referenced value.")' null); " is 152.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "				TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' message + ". Serializing self referenced value.")' null); " is 143.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteReference,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (null' writer.Path' "Writing object reference to Id '{0}' for {1}.".FormatWith (CultureInfo.InvariantCulture' reference' value.GetType ()))' null); " is 210.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,GetReference,The length of the statement  "		throw JsonSerializationException.Create (null' writer.ContainerPath' "Error writing object reference for '{0}'.".FormatWith (CultureInfo.InvariantCulture' value.GetType ())' ex); " is 178.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,OnSerializing,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (null' writer.Path' "Started serializing {0}".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 184.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,OnSerialized,The length of the statement  "		TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (null' writer.Path' "Finished serializing {0}".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 185.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "	if (!property.Ignored && property.Readable && ShouldSerialize (writer' property' value) && IsSpecified (writer' property' value)) { " is 131.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "				Required resolvedRequired = property._required ?? ((objectContract != null) ? objectContract.ItemRequired : null) ?? Required.Default; " is 134.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "					throw JsonSerializationException.Create (null' writer.ContainerPath' "Cannot write a null value for property '{0}'. Property requires a value.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName)' null); " is 216.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The length of the statement  "	bool isReference = ResolveIsReference (contract' member' collectionContract' containerProperty) ?? HasFlag (Serializer._preserveReferencesHandling' PreserveReferencesHandling.Objects); " is 184.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteReferenceIdProperty,The length of the statement  "		TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' "Writing object reference Id '{0}' for {1}.".FormatWith (CultureInfo.InvariantCulture' reference' type))' null); " is 198.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteTypeProperty,The length of the statement  "		TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' "Writing type name '{0}' for {1}.".FormatWith (CultureInfo.InvariantCulture' typeName' type))' null); " is 187.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The length of the statement  "			TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (null' writer.Path' "Started serializing {0} with converter {1}.".FormatWith (CultureInfo.InvariantCulture' value.GetType ()' converter.GetType ()))' null); " is 219.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The length of the statement  "			TraceWriter.Trace (TraceLevel.Info' JsonPosition.FormatMessage (null' writer.Path' "Finished serializing {0} with converter {1}.".FormatWith (CultureInfo.InvariantCulture' value.GetType ()' converter.GetType ()))' null); " is 220.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The length of the statement  "	bool hasWrittenMetadataObject = WriteStartArray (writer' underlyingList' contract' member' collectionContract' containerProperty); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The length of the statement  "	bool hasWrittenMetadataObject = WriteStartArray (writer' values' contract' member' collectionContract' containerProperty); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The length of the statement  "	bool isReference = ResolveIsReference (contract' member' containerContract' containerProperty) ?? HasFlag (Serializer._preserveReferencesHandling' PreserveReferencesHandling.Arrays); " is 182.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The length of the statement  "	bool includeTypeDetails = ShouldWriteType (TypeNameHandling.Arrays' contract' member' containerContract' containerProperty); " is 124.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeISerializable,The length of the statement  "		throw JsonSerializationException.Create (null' writer.ContainerPath' @"Type '{0}' implements ISerializable but cannot be serialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data." is 260.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeISerializable,The length of the statement  "To fix this error either change the environment to be fully trusted' change the application to not deserialize the type' add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true.".FormatWith (CultureInfo.InvariantCulture' value.GetType ())' null); " is 362.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,The length of the statement  "					string resolvedPropertyName = (contract.PropertyNameResolver != null) ? contract.PropertyNameResolver (memberName) : memberName; " is 128.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteDynamicProperty,The length of the statement  "	if (HasFlag (Serializer._defaultValueHandling' DefaultValueHandling.Ignore) && (memberValue == null || MiscellaneousUtils.ValueEquals (memberValue' ReflectionUtils.GetDefaultValue (memberValue.GetType ())))) " is 207.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The length of the statement  "	TypeNameHandling resolvedTypeNameHandling = ((member != null) ? member.TypeNameHandling : null) ?? ((containerProperty != null) ? containerProperty.ItemTypeNameHandling : null) ?? ((containerContract != null) ? containerContract.ItemTypeNameHandling : null) ?? Serializer._typeNameHandling; " is 290.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The length of the statement  "	// instance type and the property's type's contract default type are different (no need to put the type in JSON because the type will be created by default) " is 156.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "		if (primitiveContract.TypeCode == PrimitiveTypeCode.DateTime || primitiveContract.TypeCode == PrimitiveTypeCode.DateTimeNullable) { " is 131.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "			DateTimeUtils.WriteDateTimeString (sw' (DateTime)key' writer.DateFormatHandling' writer.DateFormatString' writer.Culture); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "		else if (primitiveContract.TypeCode == PrimitiveTypeCode.DateTimeOffset || primitiveContract.TypeCode == PrimitiveTypeCode.DateTimeOffsetNullable) { " is 148.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "			DateTimeUtils.WriteDateTimeOffsetString (sw' (DateTimeOffset)key' writer.DateFormatHandling' writer.DateFormatString' writer.Culture); " is 134.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,ShouldSerialize,The length of the statement  "		TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' "ShouldSerialize result for property '{0}' on {1}: {2}".FormatWith (CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' shouldSerialize))' null); " is 256.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,IsSpecified,The length of the statement  "		TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' "IsSpecified result for property '{0}' on {1}: {2}".FormatWith (CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' isSpecified))' null); " is 248.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,JsonTypeReflector,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonTypeReflector.cs,GetAssociateMetadataTypeFromAttribute,The length of the statement  "	IMetadataTypeAttribute metadataTypeAttribute = (DynamicCodeGeneration) ? DynamicWrapper.CreateWrapper<IMetadataTypeAttribute> (attribute) : new LateBoundMetadataTypeAttribute (attribute); " is 187.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,MemoryTraceWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\MemoryTraceWriter.cs,Trace,The length of the statement  "	string traceMessage = DateTime.Now.ToString ("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff"' CultureInfo.InvariantCulture) + " " + level.ToString ("g") + " " + message; " is 159.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,ReflectionValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ReflectionValueProvider.cs,SetValue,The length of the statement  "		throw new JsonSerializationException ("Error setting value to '{0}' on '{1}'.".FormatWith (CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType ())' ex); " is 163.
Long Statement,uWebshop.Newtonsoft.Json.Serialization,ReflectionValueProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\ReflectionValueProvider.cs,GetValue,The length of the statement  "		throw new JsonSerializationException ("Error getting value from '{0}' on '{1}'.".FormatWith (CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType ())' ex); " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,CollectionWrapper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\CollectionWrapper.cs,VerifyValueType,The length of the statement  "		throw new ArgumentException ("The value '{0}' is not of type '{1}' and cannot be used in this generic collection.".FormatWith (CultureInfo.InvariantCulture' value' typeof(T))' "value"); " is 185.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,IsConvertible,The length of the statement  "        t == typeof(bool) || t == typeof(byte) || t == typeof(char) || t == typeof(DateTime) || t == typeof(decimal) || t == typeof(double) || t == typeof(short) || t == typeof(int) ||" is 176.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,IsConvertible,The length of the statement  "        t == typeof(long) || t == typeof(sbyte) || t == typeof(float) || t == typeof(string) || t == typeof(ushort) || t == typeof(uint) || t == typeof(ulong) || t.IsEnum());" is 166.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,CreateCastConverter,The length of the statement  "	MethodCall<object' object> call = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object> (castMethodInfo); " is 120.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,ToBigInteger,The length of the statement  "	throw new InvalidCastException ("Cannot convert {0} to BigInteger.".FormatWith (CultureInfo.InvariantCulture' value.GetType ())); " is 129.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,FromBigInteger,The length of the statement  "		throw new InvalidOperationException ("Can not convert from BigInteger to {0}.".FormatWith (CultureInfo.InvariantCulture' targetType)' ex); " is 138.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Convert,The length of the statement  "		throw new Exception ("Can not convert null {0} into non-nullable {1}.".FormatWith (CultureInfo.InvariantCulture' initialType' targetType)); " is 139.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Convert,The length of the statement  "		throw new ArgumentException ("Target type {0} is not a value type or a non-abstract class.".FormatWith (CultureInfo.InvariantCulture' targetType)' "targetType"); " is 161.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Convert,The length of the statement  "	throw new InvalidOperationException ("Can not convert from {0} to {1}.".FormatWith (CultureInfo.InvariantCulture' initialType' targetType)); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,EnsureTypeAssignable,The length of the statement  "	throw new ArgumentException ("Could not cast or convert from {0} to {1}.".FormatWith (CultureInfo.InvariantCulture' (initialType != null) ? initialType.ToString () : "{null}"' targetType)); " is 189.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,ToValue,The length of the statement  "	throw new ArgumentException ("Unsupported INullable type: {0}".FormatWith (CultureInfo.InvariantCulture' nullableValue.GetType ())); " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseDate,The length of the statement  "	return (Parse4Digit (start' out Year) && 1 <= Year && ParseChar (start + Lzyyyy' '-') && Parse2Digit (start + Lzyyyy_' out Month) && 1 <= Month && Month <= 12 && ParseChar (start + Lzyyyy_MM' '-') && Parse2Digit (start + Lzyyyy_MM_' out Day) && 1 <= Day && Day <= DateTime.DaysInMonth (Year' Month)); " is 300.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The length of the statement  "	if (!(Parse2Digit (start' out Hour) && Hour < 24 && ParseChar (start + LzHH' ':') && Parse2Digit (start + LzHH_' out Minute) && Minute < 60 && ParseChar (start + LzHH_mm' ':') && Parse2Digit (start + LzHH_mm_' out Second) && Second < 60)) { " is 240.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The length of the statement  "			if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) { " is 189.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The length of the statement  "		if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) { " is 123.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,The length of the statement  "	var d = new DateTime (dateTimeParser.Year' dateTimeParser.Month' dateTimeParser.Day' dateTimeParser.Hour' dateTimeParser.Minute' dateTimeParser.Second); " is 152.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The length of the statement  "		int pos = WriteDateTimeString (chars' 0' (format == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' format); " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DictionaryWrapper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DictionaryWrapper.cs,GetEnumerator,The length of the statement  "		return _dictionary.Cast<DictionaryEntry> ().Select (de => new KeyValuePair<TKey' TValue> ((TKey)de.Key' (TValue)de.Value)).GetEnumerator (); " is 140.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindGetMember,The length of the statement  "	return IsOverridden ("TryGetMember") ? CallMethodWithResult ("TryGetMember"' binder' NoArgs' e => binder.FallbackGetMember (this' e)) : base.BindGetMember (binder); " is 164.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindSetMember,The length of the statement  "	return IsOverridden ("TrySetMember") ? CallMethodReturnLast ("TrySetMember"' binder' GetArgs (value)' e => binder.FallbackSetMember (this' value' e)) : base.BindSetMember (binder' value); " is 187.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindDeleteMember,The length of the statement  "	return IsOverridden ("TryDeleteMember") ? CallMethodNoResult ("TryDeleteMember"' binder' NoArgs' e => binder.FallbackDeleteMember (this' e)) : base.BindDeleteMember (binder); " is 174.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindConvert,The length of the statement  "	return IsOverridden ("TryConvert") ? CallMethodWithResult ("TryConvert"' binder' NoArgs' e => binder.FallbackConvert (this' e)) : base.BindConvert (binder); " is 156.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindInvokeMember,The length of the statement  "	DynamicMetaObject call = BuildCallMethodWithResult ("TryInvokeMember"' binder' GetArgArray (args)' BuildCallMethodWithResult ("TryGetMember"' new GetBinderAdapter (binder)' NoArgs' fallback (null)' e => binder.FallbackInvoke (e' args' null))' null); " is 249.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindCreateInstance,The length of the statement  "	return IsOverridden ("TryCreateInstance") ? CallMethodWithResult ("TryCreateInstance"' binder' GetArgArray (args)' e => binder.FallbackCreateInstance (this' args' e)) : base.BindCreateInstance (binder' args); " is 208.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindInvoke,The length of the statement  "	return IsOverridden ("TryInvoke") ? CallMethodWithResult ("TryInvoke"' binder' GetArgArray (args)' e => binder.FallbackInvoke (this' args' e)) : base.BindInvoke (binder' args); " is 176.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindBinaryOperation,The length of the statement  "	return IsOverridden ("TryBinaryOperation") ? CallMethodWithResult ("TryBinaryOperation"' binder' GetArgs (arg)' e => binder.FallbackBinaryOperation (this' arg' e)) : base.BindBinaryOperation (binder' arg); " is 205.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindUnaryOperation,The length of the statement  "	return IsOverridden ("TryUnaryOperation") ? CallMethodWithResult ("TryUnaryOperation"' binder' NoArgs' e => binder.FallbackUnaryOperation (this' e)) : base.BindUnaryOperation (binder); " is 184.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindGetIndex,The length of the statement  "	return IsOverridden ("TryGetIndex") ? CallMethodWithResult ("TryGetIndex"' binder' GetArgArray (indexes)' e => binder.FallbackGetIndex (this' indexes' e)) : base.BindGetIndex (binder' indexes); " is 193.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindSetIndex,The length of the statement  "	return IsOverridden ("TrySetIndex") ? CallMethodReturnLast ("TrySetIndex"' binder' GetArgArray (indexes' value)' e => binder.FallbackSetIndex (this' indexes' value' e)) : base.BindSetIndex (binder' indexes' value); " is 214.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BindDeleteIndex,The length of the statement  "	return IsOverridden ("TryDeleteIndex") ? CallMethodNoResult ("TryDeleteIndex"' binder' GetArgArray (indexes)' e => binder.FallbackDeleteIndex (this' indexes' e)) : base.BindDeleteIndex (binder' indexes); " is 203.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,BuildCallMethodWithResult,The length of the statement  "	}' Expression.Condition (Expression.Call (Expression.Constant (_proxy)' typeof(DynamicProxy<T>).GetMethod (methodName)' callArgs)' resultMetaObject.Expression' fallbackResult.Expression' binder.ReturnType))' GetRestrictions ().Merge (resultMetaObject.Restrictions).Merge (fallbackResult.Restrictions)); " is 302.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,CallMethodReturnLast,The length of the statement  "	}' Expression.Condition (Expression.Call (Expression.Constant (_proxy)' typeof(DynamicProxy<T>).GetMethod (methodName)' callArgs)' result' fallbackResult.Expression' typeof(object)))' GetRestrictions ().Merge (fallbackResult.Restrictions)); " is 240.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,CallMethodNoResult,The length of the statement  "	var callDynamic = new DynamicMetaObject (Expression.Condition (Expression.Call (Expression.Constant (_proxy)' typeof(DynamicProxy<T>).GetMethod (methodName)' callArgs)' Expression.Empty ()' fallbackResult.Expression' typeof(void))' GetRestrictions ().Merge (fallbackResult.Restrictions)); " is 288.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicProxyMetaObject,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicProxyMetaObject.cs,GetRestrictions,The length of the statement  "	return (Value == null && HasValue) ? BindingRestrictions.GetInstanceRestriction (Expression' null) : BindingRestrictions.GetTypeRestriction (Expression' LimitType); " is 164.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicReflectionDelegateFactory.cs,CreateDynamicMethod,The length of the statement  "	DynamicMethod dynamicMethod = !owner.IsInterface () ? new DynamicMethod (name' returnType' parameterTypes' owner' true) : new DynamicMethod (name' returnType' parameterTypes' owner.Module' true); " is 195.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicReflectionDelegateFactory.cs,CreateDefaultConstructor,The length of the statement  "	DynamicMethod dynamicMethod = CreateDynamicMethod ("Create" + type.FullName' typeof(T)' ReflectionUtils.EmptyTypes' type); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicReflectionDelegateFactory.cs,GenerateCreateDefaultConstructorIL,The length of the statement  "		ConstructorInfo constructorInfo = type.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' ReflectionUtils.EmptyTypes' null); " is 165.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicReflectionDelegateFactory.cs,GenerateCreateGetPropertyIL,The length of the statement  "		throw new ArgumentException ("Property '{0}' does not have a getter.".FormatWith (CultureInfo.InvariantCulture' propertyInfo.Name)); " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,DynamicWrapper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicWrapper.cs,GenerateWrapperType,The length of the statement  "	TypeBuilder wrapperBuilder = ModuleBuilder.DefineType ("{0}_{1}_Wrapper".FormatWith (CultureInfo.InvariantCulture' interfaceType.Name' underlyingType.Name)' TypeAttributes.NotPublic | TypeAttributes.Sealed' typeof(DynamicWrapperBase)' new[] { " is 242.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,WrapperMethodBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicWrapper.cs,Generate,The length of the statement  "	FieldInfo srcField = typeof(DynamicWrapperBase).GetField ("UnderlyingObject"' BindingFlags.Instance | BindingFlags.NonPublic); " is 126.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,WrapperMethodBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DynamicWrapper.cs,Generate,The length of the statement  "	MethodBuilder methodBuilder = _wrapperBuilder.DefineMethod (newMethod.Name' MethodAttributes.Public | MethodAttributes.Virtual' newMethod.ReturnType' parameterTypes); " is 166.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,EnumUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\EnumUtils.cs,GetFlagsValues,The length of the statement  "		throw new ArgumentException ("Enum type {0} is not a set of flags.".FormatWith (CultureInfo.InvariantCulture' enumType)); " is 121.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,EnumUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\EnumUtils.cs,GetNamesAndValues,The length of the statement  "			nameValues.Add (new EnumValue<TUnderlyingType> (enumNames [i]' (TUnderlyingType)Convert.ChangeType (enumValues [i]' typeof(TUnderlyingType)' CultureInfo.CurrentCulture))); " is 171.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,EnumUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\EnumUtils.cs,GetNamesAndValues,The length of the statement  "			throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "Value from enum with the underlying type of {0} cannot be added to dictionary with a value type of {1}. Value was too large: {2}"' Enum.GetUnderlyingType (enumType)' typeof(TUnderlyingType)' Convert.ToUInt64 (enumValues [i]' CultureInfo.InvariantCulture))' e); " is 343.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ExpressionReflectionDelegateFactory.cs,CreateMethodCall,The length of the statement  "	LambdaExpression lambdaExpression = Expression.Lambda (typeof(MethodCall<T' object>)' callExpression' targetParameterExpression' argsParameterExpression); " is 154.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ExpressionReflectionDelegateFactory.cs,CreateSet,The length of the statement  "	LambdaExpression lambdaExpression = Expression.Lambda (typeof(Action<T' object>)' assignExpression' sourceParameterExpression' valueParameterExpression); " is 153.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ExpressionReflectionDelegateFactory.cs,CreateSet,The length of the statement  "	LambdaExpression lambdaExpression = Expression.Lambda (typeof(Action<T' object>)' setExpression' instanceParameter' valueParameter); " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The length of the statement  "		ImmutableCollectionTypeInfo definition = ArrayContractImmutableCollectionDefinitions.FirstOrDefault (d => d.ContractTypeName == name); " is 134.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The length of the statement  "				MethodInfo mb = builderTypeDefinition.GetMethods ().FirstOrDefault (m => m.Name == "From" && m.GetParameters ().Length == 1); " is 125.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The length of the statement  "		ImmutableCollectionTypeInfo definition = DictionaryContractImmutableCollectionDefinitions.FirstOrDefault (d => d.ContractTypeName == name); " is 139.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The length of the statement  "					return m.Name == "Create" && parameters.Length == 1 && parameters [0].ParameterType.IsGenericType () && parameters [0].ParameterType.GetGenericTypeDefinition () == typeof(IEnumerable<>); " is 186.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,ToEscapedJavaScriptString,The length of the statement  "		WriteEscapedJavaScriptString (w' value' delimiter' appendDelimiters' (delimiter == '"') ? DoubleQuoteCharEscapeFlags : SingleQuoteCharEscapeFlags' StringEscapeHandling.Default' ref buffer); " is 189.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,MiscellaneousUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MiscellaneousUtils.cs,ValueEquals,The length of the statement  "			return Convert.ToDecimal (objA' CultureInfo.CurrentCulture).Equals (Convert.ToDecimal (objB' CultureInfo.CurrentCulture)); " is 122.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,MiscellaneousUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MiscellaneousUtils.cs,ValueEquals,The length of the statement  "			return MathUtils.ApproxEquals (Convert.ToDouble (objA' CultureInfo.CurrentCulture)' Convert.ToDouble (objB' CultureInfo.CurrentCulture)); " is 137.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,MiscellaneousUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MiscellaneousUtils.cs,CreateArgumentOutOfRangeException,The length of the statement  "	string newMessage = message + Environment.NewLine + @"Actual value was {0}.".FormatWith (CultureInfo.InvariantCulture' actualValue); " is 132.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,ImplementsGenericDefinition,The length of the statement  "		throw new ArgumentNullException ("'{0}' is not a generic interface definition.".FormatWith (CultureInfo.InvariantCulture' genericInterfaceDefinition)); " is 151.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,InheritsGenericDefinition,The length of the statement  "		throw new ArgumentNullException ("'{0}' is not a generic class definition.".FormatWith (CultureInfo.InvariantCulture' genericClassDefinition)); " is 143.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetMemberValue,The length of the statement  "			throw new ArgumentException ("MemberInfo '{0}' has index parameters".FormatWith (CultureInfo.InvariantCulture' member.Name)' e); " is 128.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetMemberValue,The length of the statement  "		throw new ArgumentException ("MemberInfo '{0}' is not of type FieldInfo or PropertyInfo".FormatWith (CultureInfo.InvariantCulture' CultureInfo.InvariantCulture' member.Name)' "member"); " is 185.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,SetMemberValue,The length of the statement  "		throw new ArgumentException ("MemberInfo '{0}' must be of type FieldInfo or PropertyInfo".FormatWith (CultureInfo.InvariantCulture' member.Name)' "member"); " is 156.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,SplitFullyQualifiedTypeName,The length of the statement  "		assemblyName = fullyQualifiedTypeName.Substring (assemblyDelimiterIndex.Value + 1' fullyQualifiedTypeName.Length - assemblyDelimiterIndex.Value - 1).Trim (); " is 157.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,The length of the statement  "	// e.g. System.Collections.Generic.Dictionary`2[[System.String' mscorlib'Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]'[System.String' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]]' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089 " is 310.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetMemberInfoFromType,The length of the statement  "	const BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 124.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetChildPrivateFields,The length of the statement  "			IEnumerable<MemberInfo> childPrivateFields = targetType.GetFields (nonPublicBindingAttr).Where (f => f.IsPrivate).Cast<MemberInfo> (); " is 134.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetChildPrivateProperties,The length of the statement  "					int index = initialProperties.IndexOf (p => p.Name == subTypeProperty.Name && p.DeclaringType == subTypeProperty.DeclaringType); " is 128.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetChildPrivateProperties,The length of the statement  "					int index = initialProperties.IndexOf (p => p.Name == subTypeProperty.Name && p.IsVirtual () && p.GetBaseDefinition () != null && p.GetBaseDefinition ().DeclaringType.IsAssignableFrom (subTypeProperty.DeclaringType)); " is 217.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,IsMethodOverridden,The length of the statement  "	bool isMethodOverriden = currentType.GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Any (info => info.Name == method && // check that the method overrides the original on DynamicObjectProxy " is 224.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ForgivingCaseSensitiveFind,The length of the statement  "	var caseInsensitiveResults = source.Where (s => string.Equals (valueSelector (s)' testValue' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ValidationUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ValidationUtils.cs,ArgumentNotNullOrEmpty,The length of the statement  "		throw new ArgumentException ("'{0}' cannot be empty.".FormatWith (CultureInfo.InvariantCulture' parameterName)' parameterName); " is 127.
Long Statement,uWebshop.Newtonsoft.Json.Utilities,ValidationUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ValidationUtils.cs,ArgumentTypeIsEnum,The length of the statement  "		throw new ArgumentException ("Type {0} is not an Enum.".FormatWith (CultureInfo.InvariantCulture' enumType)' parameterName); " is 124.
Long Statement,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,The length of the statement  "		var type = Type.GetType ("uWebshop.API." + className + "' uWebshop.Domain' Version=" + Assembly.GetExecutingAssembly ().GetName ().Version + "' Culture=neutral' PublicKeyToken=null"); " is 183.
Long Statement,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,The length of the statement  "		methods.AddRange (types.SelectMany (t => t.GetMethods ()).Where (m => m.Name.ToLowerInvariant () == functionName.ToLowerInvariant ())); " is 135.
Long Statement,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,The length of the statement  "		simpleargumentMethod = methods.FirstOrDefault (x => x.GetParameters ().Any () && x.GetParameters ().All (p => p.ParameterType == typeof(string) || p.ParameterType == typeof(int) || p.ParameterType == typeof(bool) || p.ParameterType == typeof(decimal))); " is 253.
Long Statement,uWebshop.Domain.NewtonsoftJsonNet,JSONXMLRender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\uWebshopRender.cs,Render,The length of the statement  "		simpleargumentMethod = methods.FirstOrDefault (x => x.GetParameters ().All (p => p.ParameterType == typeof(string) || p.ParameterType == typeof(int) || p.ParameterType == typeof(bool) || p.ParameterType == typeof(decimal))); " is 224.
Long Statement,uWebshop.Domain.Services,ConfigFileDefaultCurrencyCultureService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ConfigFileDefaultCurrencyCultureService.cs,GetCultureForCurrency,The length of the statement  "		if (!System.IO.File.Exists (HttpContext.Current.Server.MapPath ("/App_Plugins/uWebshop/config/CurrencyCultures.config"))) { " is 123.
Long Statement,uWebshop.Domain.Services,ConfigFileDefaultCurrencyCultureService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ConfigFileDefaultCurrencyCultureService.cs,GetCultureForCurrency,The length of the statement  "		XmlNode providerNode = doc.SelectSingleNode (string.Format ("//currency[translate(@code' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')='{0}']"' currencyCode.ToLower ())); " is 184.
Long Statement,uWebshop.Domain.Services,ConfigFileDefaultCurrencyCultureService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ConfigFileDefaultCurrencyCultureService.cs,GetCultureForCurrency,The length of the statement  "			Log.Instance.LogWarning (string.Format ("Could not find currency with code: {0} in /App_Plugins/uWebshop/config/CurrencyCultures.config"' currencyCode)); " is 153.
Long Statement,uWebshop.Domain.Services,CurrencyCultureInfoForLocalizationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CurrencyCultureInfoForLocalizationService.cs,GetCurrencyCulture,The length of the statement  "	result = _defaultCurrencyCultureService.GetCultureForCurrency (localization.CurrencyCode) ?? CultureInfo.GetCultures (CultureTypes.SpecificCultures).FirstOrDefault (c => new RegionInfo (c.LCID).ISOCurrencySymbol == localization.CurrencyCode); " is 242.
Long Statement,uWebshop.Domain.Services,EntityService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\EntityService.cs,GetAll,The length of the statement  "	var entities = _cache.GetOrAdd (GetCacheKey (localization)' alias => _repository.GetAll (localization).Cast<T> ().ToList ()); " is 125.
Long Statement,uWebshop.Domain.Services,LoadBalancedApplicationCacheService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\LoadBalancedApplicationCacheService.cs,CheckCacheStateAndRebuildIfNeccessary,The length of the statement  "		Log.Instance.LogError ("Error in load balanced caching' did you install the azure binaries and configured the azure cache settings? Exception: " + exception.Message); " is 166.
Long Statement,uWebshop.Domain.Services,LoadBalancedApplicationCacheService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\LoadBalancedApplicationCacheService.cs,CheckCacheStateAndRebuildIfNeccessary,The length of the statement  "		Log.Instance.LogDebug ("LOADBALANCE Local first time' loaded token " + _localCacheToken + " at " + HttpContext.Current.Request ["LOCAL_ADDR"]); " is 143.
Long Statement,uWebshop.Domain.Services,LoadBalancedApplicationCacheService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\LoadBalancedApplicationCacheService.cs,CheckCacheStateAndRebuildIfNeccessary,The length of the statement  "		Log.Instance.LogDebug ("LOADBALANCE Token changed from " + _localCacheToken + " to " + token + " at " + HttpContext.Current.Request ["LOCAL_ADDR"]); " is 148.
Long Statement,uWebshop.Domain.Services,OrderDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderDiscountService.cs,GetApplicableDiscountsForOrder,The length of the statement  "		Log.Instance.LogError ("GetApplicableDiscountsForOrder with NOT incomplete order: " + order.UniqueOrderId + " status: " + order.Status); " is 136.
Long Statement,uWebshop.Domain.Services,OrderDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderDiscountService.cs,GetApplicableDiscountsForOrder,The length of the statement  "	return orderDiscounts.Where (discount => !discount.Disabled && orderLinesAmount >= discount.MinimumOrderAmount.ValueInCents () && (!discount.RequiredItemIds.Any () || _orderService.OrderContainsItem (order' discount.RequiredItemIds)) && (!discount.CounterEnabled || discount.Counter > 0)).HasDiscountForOrder (order).ToList (); " is 327.
Long Statement,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,GetTransaction,The length of the statement  "	o => _orderRepository.SetOrderNumber (order.UniqueOrderId' order.OrderNumber' order.StoreInfo.Alias' id)' () => Monitor.Exit (this)); " is 133.
Long Statement,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,GenerateOrderNumber,The length of the statement  "	var currentHighestOrderNumber = UwebshopConfiguration.Current.ShareBasketBetweenStores ? _orderRepository.GetHighestOrderNumber (ref lastOrderReferenceNumber) : _orderRepository.GetHighestOrderNumberForStore (store.Alias' ref lastOrderReferenceNumber); " is 252.
Long Statement,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,GenerateOrderNumber,The length of the statement  "	Log.Instance.LogDebug ("GenerateOrderNumber currentHighestOrderNumber: " + currentHighestOrderNumber + " lastOrderReferenceNumber: " + lastOrderReferenceNumber); " is 161.
Long Statement,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,GenerateOrderNumber,The length of the statement  "			int.TryParse (currentHighestOrderNumber.Substring (orderNumberPrefix.Length' currentHighestOrderNumber.Length - orderNumberPrefix.Length)' out lastOrderReferenceNumber); " is 169.
Long Statement,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,GenerateOrderNumber,The length of the statement  "	return template.Replace ("#orderId#"' lastOrderReferenceNumber.ToString ()).Replace ("#orderIdPadded#"' lastOrderReferenceNumber.ToString ("0000")).Replace ("#storeAlias#"' store.Alias).Replace ("#day#"' orderInfo.ConfirmDate.GetValueOrDefault ().Day.ToString ()).Replace ("#month#"' orderInfo.ConfirmDate.GetValueOrDefault ().Month.ToString ()).Replace ("#year#"' orderInfo.ConfirmDate.GetValueOrDefault ().Year.ToString ()); " is 426.
Long Statement,uWebshop.Domain.Services,OrderNumberService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderNumberService.cs,AssignNewOrderNumberToOrder,The length of the statement  "	var newNumber = UwebshopConfiguration.Current.ShareBasketBetweenStores ? _orderRepository.AssignNewOrderNumberToOrderSharedBasket (orderInfo.DatabaseId' store.Alias' store.OrderNumberStartNumber) : _orderRepository.AssignNewOrderNumberToOrder (orderInfo.DatabaseId' store.Alias' store.OrderNumberStartNumber); " is 309.
Long Statement,uWebshop.Domain.Services,ProductDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ProductDiscountService.cs,GetAllForProductAndCurrentUser,The length of the statement  "	return GetAll (localization).Where (discount => discount.IsActive && discount.Products.Any (x => x.Id == productId) && (!discount.MemberGroups.Any () || Membership.GetUser () != null && discount.MemberGroups.Intersect (Roles.GetRolesForUser (Membership.GetUser ().UserName)).Any ())); " is 284.
Long Statement,uWebshop.Domain.Services,ProductDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ProductDiscountService.cs,GetDiscountByProductId,The length of the statement  "	return GetAllForProductAndCurrentUser (productId' localization)// todo: below can give some unexpected behaviour since GetDiscountAmountInCents doens't take ranges into account " is 176.
Long Statement,uWebshop.Domain.Services,ProductDiscountService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ProductDiscountService.cs,GetAdjustedPriceForProductWithId,The length of the statement  "	return discountProducts.Select (discount => discount.GetAdjustedPrice (currentProductPrice' orderTotalItemCount)).Min (); " is 121.
Long Statement,uWebshop.Domain.Services,ProductInfoSellableUnitPriceSource,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\SellableUnitPriceService.cs,GetPrice,The length of the statement  "	var suBasePrice = _product.GetAmount (saleDiscounted' ranged) + _product.ProductVariants.Sum (v => v.GetAmount (saleDiscounted' ranged)); " is 137.
Long Statement,uWebshop.Domain.Services,ProductInfoSellableUnitPriceSource,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\SellableUnitPriceService.cs,GetPrice,The length of the statement  "	return hasSellableUnitSaleDiscount ? (int)((100 - (long)_product.DiscountPercentage) * suBasePrice / 100 - _product.DiscountAmountInCents) : suBasePrice; " is 153.
Long Statement,uWebshop.Domain.Services,StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService.cs,LogWarningOfDelayMaximumOncePer5Minutes,The length of the statement  "	var message = "No store url known for store " + store.Alias + " waiting 300ms for possible cache rebuild " + (store.CanonicalStoreURL == null ? "C" : string.Empty) + (store.StoreURL == null ? "S" : string.Empty); " is 212.
Long Statement,uWebshop.Domain.Services,StoreFromUrlDeterminationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StorepickerUrlDeterminationService.cs,DetermineStoreAndUrlParts,The length of the statement  "	var match = storeUrlsWithDomain.Where (t => urlIncludingDomainHttpStripped.StartsWith (t.Url.Replace ("http://"' "").Replace ("https://"' "").TrimEnd ('/'))).OrderByDescending (t => t.Url.Length).FirstOrDefault (); " is 214.
Long Statement,uWebshop.Domain.Services,StoreFromUrlDeterminationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StorepickerUrlDeterminationService.cs,DetermineStoreAndUrlParts,The length of the statement  "	var matches = storeUrlsWithoutDomain.Where (store => store.Url == "/" || url.ToLowerInvariant ().StartsWith (store.Url.Trim ('/').ToLowerInvariant ())).ToList (); " is 162.
Long Statement,uWebshop.Domain.Services,StoreFromUrlDeterminationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StorepickerUrlDeterminationService.cs,DetermineStoreAndUrlParts,The length of the statement  "		var catalogUrl = match.Url == "/" ? url : url.Substring (url.IndexOf (match.Url.TrimStart ('/')) + match.Url.Length - 1); " is 121.
Long Statement,uWebshop.Domain.Services,UmbracoStorePickerStoreUrlService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UmbracoStorePickerStoreUrlService.cs,GetCanonicalUrlForStore,The length of the statement  "	var storeUrl = GetStoreUrlsWithDomain ().FirstOrDefault (u => u.Store.Alias == store.Alias) ?? GetStoreUrlsWithoutDomain ().FirstOrDefault (u => u.Store.Alias == store.Alias); " is 175.
Long Statement,uWebshop.Domain.Services,CatalogUrlResolvingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CatalogUrlResolvingService.cs,GetProductFromUrlName,The length of the statement  "		return categoryNode.Products.FirstOrDefault (product => product != null && product.UrlName.ToLowerInvariant () == productUrlName.ToLowerInvariant ()); " is 150.
Long Statement,uWebshop.Domain.Services,CatalogUrlResolvingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CatalogUrlResolvingService.cs,GetProductFromUrlName,The length of the statement  "	return _productService.GetAll (_storeService.GetCurrentLocalization ()).FirstOrDefault (x => x.UrlName.ToLowerInvariant () == productUrlName.ToLowerInvariant ()); " is 162.
Long Statement,uWebshop.Domain.Services,CatalogUrlResolvingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CatalogUrlResolvingService.cs,GetCategoryPathFromUrlName,The length of the statement  "	//Log.Instance.LogDebug( "foreach (var url in catalogUrls.Skip(1)) start: " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss.fff tt")); " is 131.
Long Statement,uWebshop.Domain.Services,CatalogUrlResolvingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CatalogUrlResolvingService.cs,GetCategoryPathFromUrlName,The length of the statement  "		possibilities = possibilities//.Where(x =>// Category.IsAlias(x.ParentNodeTypeAlias) && x.ParentNodeTypeAlias != Catalog.CategoryRepositoryNodeAlias &&  " is 151.
Long Statement,uWebshop.Domain.Services,CatalogUrlResolvingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CatalogUrlResolvingService.cs,GetCategoryPathFromUrlName,The length of the statement  "		.SelectMany (currentLevelCategory => currentLevelCategory.GetParentCategories ()).Where (c => c.CurrentCategory.UrlName.ToLowerInvariant () == urlVariable); " is 156.
Long Statement,uWebshop.Domain.Services,CatalogUrlResolvingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\CatalogUrlResolvingService.cs,GetCategoryPathFromUrlName,The length of the statement  "		categoryTreeWalkers = categoryTreeWalkers.Where (x => x.ParentNodeTypeAlias.ToLowerInvariant () == Catalog.CategoryRepositoryNodeAlias.ToLowerInvariant ()); " is 156.
Long Statement,uWebshop.Domain.Services,ShippingProviderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\ShippingProviderService.cs,GetPaymentProviderWithName,The length of the statement  "	return _shippingProviderRepository.GetAll (localization).FirstOrDefault (x => x.Name.ToLower () == paymentProviderName.ToLower ()); " is 131.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,RangedDiscountValueForOrder,The length of the statement  "		var affectedOrderLines = discount.AffectedOrderlines.Any () || discount.RequiredItemIds.Any () ? _orderService.GetApplicableOrderLines (order' discount.AffectedOrderlines.Any () ? discount.AffectedOrderlines : discount.RequiredItemIds) : order.OrderLines; " is 255.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "	if (discount.MemberGroups.Any () && !discount.MemberGroups.Intersect (authenticationProvider.RolesForCurrentUser).Any ()) { " is 123.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "		var ordersforCurrentMember = OrderHelper.GetOrdersForCustomer (authenticationProvider.CurrentLoginName).Where (x => x.Status != OrderStatus.Incomplete && x.Status != OrderStatus.Cancelled && x.Status != OrderStatus.Returned); " is 225.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "	var applicableOrderLines = !discount.AffectedOrderlines.Any () ? orderInfo.OrderLines : _orderService.GetApplicableOrderLines (orderInfo' discount.AffectedOrderlines); " is 167.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "		applicableOrderLines = applicableOrderLines.Where (line => line.ProductInfo.Tags.Intersect (discount.AffectedProductTags).Any ()).ToList (); " is 140.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "	var isSellableUnitDiscount = discount.AffectedOrderlines.Any () || (discount.AffectedProductTags != null && discount.AffectedProductTags.Any ()); " is 145.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "	var numberOfItemsLeftOutOfSets = discount.NumberOfItemsCondition == 0 ? 0 : applicableOrderLines.Sum (line => line.ProductInfo.ItemCount.GetValueOrDefault (1)) % discount.NumberOfItemsCondition; " is 194.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "	var applicableSellableUnits = orderSellableUnits.OrderBy (item => item.PriceInCents).Take (orderSellableUnits.Count - numberOfItemsLeftOutOfSets).ToList (); " is 156.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "		maximumDiscountableAmount = applicableOrderLines.Sum (orderline => orderline.AmountInCents - (orderline.GetOriginalAmount (false' true) - orderline.GetOriginalAmount (true' true))); " is 181.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "		applicableSellableUnits = applicableSellableUnits.Take (orderSellableUnits.Count / discount.NumberOfItemsCondition).ToList (); " is 126.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "			applicableSellableUnits = applicableSellableUnits.Take (orderSellableUnits.Count / discount.NumberOfItemsCondition).ToList (); " is 126.
Long Statement,uWebshop.Domain.Services,DiscountCalculationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\DiscountCalculationService.cs,DiscountAmountForOrder,The length of the statement  "			return applicableSellableUnits.Take (orderSellableUnits.Count / discount.NumberOfItemsCondition).Select (su => Math.Max (0' su.PriceInCents - discountAmount)).Sum (); " is 166.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,CreateOrder,The length of the statement  "	order.CustomerInfo.CountryCode = !string.IsNullOrEmpty (store.DefaultCountryCode) ? store.DefaultCountryCode : store.CountryCode; " is 129.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,CreateOrder,The length of the statement  "			//uWebshopOrders.SetCustomerId(order.UniqueOrderId' (int)currentMember.ProviderUserKey); heeft toch geen effect (geen row in db) " is 128.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,UseDatabaseDiscounts,The length of the statement  "	order.OrderDiscountsFactory = () => discountService.GetApplicableDiscountsForOrder (order' order.Localization).ToList (); " is 121.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,GetApplicableOrderLines,The length of the statement  "	var objects = itemIdsToCheck.Select (id => IO.Container.Resolve<ICMSEntityRepository> ().GetByGlobalId (id)).Where (o => o != null); " is 132.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,GetApplicableOrderLines,The length of the statement  "		if (node.NodeTypeAlias.StartsWith (DiscountProduct.NodeAlias) && orderinfo.OrderLines.Any (x => x.ProductInfo.CatalogProduct != null && x.ProductInfo.CatalogProduct.Discount.Id != node.Id)) { " is 191.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,GetApplicableOrderLines,The length of the statement  "	return orderinfo.OrderLines.Where (orderLine => !productIds.Any () || productIds.Contains (orderLine.ProductInfo.Id)).Where (orderLine => !productVariantIds.Any () || orderLine.ProductInfo.ProductVariants.Any (x => productVariantIds.Contains (x.Id))).ToList (); " is 261.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateCustomer,The length of the statement  "	errors.AddRange (ValidateInformationDoc (orderInfo.CustomerInfo.customerInformation' orderDocumentType.Properties.Where (property => property.Alias.StartsWith ("customer")))); " is 175.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateCustomer,The length of the statement  "	errors.AddRange (ValidateInformationDoc (orderInfo.CustomerInfo.shippingInformation' orderDocumentType.Properties.Where (property => property.Alias.StartsWith ("shipping")))); " is 175.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateCustomer,The length of the statement  "	errors.AddRange (ValidateInformationDoc (orderInfo.CustomerInfo.extraInformation' orderDocumentType.Properties.Where (property => property.Alias.StartsWith ("extra")))); " is 169.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateOrderlines,The length of the statement  "		var replacedOrderlineDocTypeAlias = orderline.ProductInfo.CatalogProduct.NodeTypeAlias ().Replace (Product.NodeAlias' OrderedProduct.NodeAlias); " is 144.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateOrderlines,The length of the statement  "		var orderlineDocType = IO.Container.Resolve<ICMSDocumentTypeService> ().GetByAlias (replacedOrderlineDocTypeAlias) ?? IO.Container.Resolve<ICMSDocumentTypeService> ().GetByAlias (OrderedProduct.NodeAlias); " is 205.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateOrderlines,The length of the statement  "		var propertiesToValidate = orderlineDocType.Properties.Where (x => !OrderedProduct.DefaultProperties.Contains (x.Alias)).ToList (); " is 131.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateOrderlines,The length of the statement  "			if (!productvariantGroup.Variants.Any (x => x.Required) || orderline.ProductInfo.ProductVariants.Count (x => x.Group == productvariantGroup.Title) != 0) " is 152.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateOrderlines,The length of the statement  "			// productvariantgroup has required variants (so whole group is required!) but non are in the productinfo == validation error " is 125.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateGlobalValidations,The length of the statement  "		if (orderInfo.Status == OrderStatus.Confirmed && orderInfo.ShippingCostsMightBeOutdated && shippingProvidersForOrder.Count > 0 && shippingProvidersForOrder.All (shipPro => shipPro.Id != orderInfo.ShippingInfo.Id)) { " is 215.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateCustomValidations,The length of the statement  "	foreach (var customValidation in orderInfo.CustomOrderValiations.Where (customValidation => !customValidation.Condition (orderInfo))) { " is 135.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidatePayment,The length of the statement  "			if ((paymentProvider.Type != PaymentProviderType.OfflinePaymentAtCustomer && paymentProvider.Type != PaymentProviderType.OfflinePaymentInStore) && !paymentProvider.Zones.SelectMany (x => x.CountryCodes).Contains (orderInfo.CustomerInfo.CountryCode)) { " is 251.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidatePayment,The length of the statement  "			errors.AddRange (PaymentProviderHelper.GetPaymentValidationResults (orderInfo).Where (e => e.Id == orderInfo.PaymentInfo.Id)); " is 126.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidatePayment,The length of the statement  "		if (orderInfo.ConfirmValidationFailed && (orderInfo.PaymentInfo.Id == 0 && PaymentProviderHelper.GetPaymentProvidersForOrder (orderInfo).Count > 0)) { " is 150.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateShipping,The length of the statement  "		if (shippingProvider.Type != ShippingProviderType.Pickup && !shippingProvider.Zone.CountryCodes.Contains (shippingCountryCode)) { " is 129.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateShipping,The length of the statement  "		errors.AddRange (ShippingProviderHelper.GetPaymentValidationResults (orderInfo).Where (e => e.Id == orderInfo.ShippingInfo.Id)); " is 128.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateShipping,The length of the statement  "	if (orderInfo.ConfirmValidationFailed && orderInfo.ShippingInfo.Id == 0 && ShippingProviderHelper.GetShippingProvidersForOrder (orderInfo).Count > 0) { " is 151.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateInformationDoc,The length of the statement  "		if (propertyType != null && xmlElement != null && (!string.IsNullOrEmpty (propertyType.ValidationRegularExpression) && !Regex.IsMatch (xmlElement.Value' propertyType.ValidationRegularExpression))) { " is 198.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateInformationDoc,The length of the statement  "			Log.Instance.LogWarning ("VALIDATECUSTOMER ERROR ValidationErrorRegEx: " + propertyType.Alias + " Is Not Correctly Set"); " is 121.
Long Statement,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateInformationDoc,The length of the statement  "		if (propertyType != null && propertyType.Mandatory && (xmlElement == null || string.IsNullOrEmpty (xmlElement.Value))) { " is 120.
Long Statement,uWebshop.Domain.Services,PaymentProviderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\PaymentProviderService.cs,GetPaymentProviderWithName,The length of the statement  "	return _paymentProviderRepository.GetAll (localization).FirstOrDefault (x => x.Name.ToLower () == paymentProviderName.ToLower ()); " is 130.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	if (absolutePath.ToLowerInvariant ().StartsWith ("/umbraco") || absolutePath.ToLowerInvariant ().StartsWith ("/base/") || absolutePath.ToLowerInvariant () == "/umbraco/webservices/legacyajaxcalls.asmx/getsecondsbeforeuserlogout" || absolutePath.ToLowerInvariant () == "/umbraco/ping.aspx") " is 289.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	if (absolutePath == "" || absolutePath.EndsWith (".js") || absolutePath.EndsWith (".ico") || absolutePath.EndsWith (".gif") || absolutePath.EndsWith (".css") || absolutePath.EndsWith (".jpg") || absolutePath.EndsWith (".jpeg") || absolutePath.EndsWith (".png") || absolutePath.EndsWith (".axd")) " is 295.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	// location might seem weird' but this is the clearest entry point for a uWebshop request. Possible todo: move it to a requestStartService " is 138.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	var paymentProviderRepositoryCmsNodeName = _cmsApplication.GetPaymentProviderRepositoryCMSNodeUrlName () ?? "PaymentProviders"; " is 127.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	var paymentProviderSectionCmsNodeName = _cmsApplication.GetPaymentProviderSectionCMSNodeUrlName () ?? "PaymentProviders"; " is 121.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	var paymentProviderPath = string.Format ("/{0}/{1}/"' paymentProviderRepositoryCmsNodeName' paymentProviderSectionCmsNodeName); " is 127.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "		var paymentProviderNode = _paymentProviderService.GetPaymentProviderWithName (paymentProviderName' _storeService.GetCurrentLocalization ()); " is 140.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The length of the statement  "	//CatalogUrlResolveServiceResult catalogUrlResolveServiceResult = _catalogUrlSplitterService.DetermineCatalogUrlComponents(absolutePath); // relatief duur " is 154.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,Rewrite,The length of the statement  "		var rewritePath = _storeService.GetAllStores ().First ().StoreURL + "?paymentprovider=" + (content as PaymentProvider).Name + _httpContextWrapper.QueryString; " is 158.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,Rewrite,The length of the statement  "		Log.Instance.LogDebug ("Rewrite: StoreHelper.GetAllStores().First().StoreURL: " + _storeService.GetAllStores ().First ().StoreURL); " is 131.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,Rewrite,The length of the statement  "		_httpContextWrapper.RewritePath (FixUrlForRewrite (result.StoreUrl) + "?resolvedProductId=" + content.Id + "&category=" + result.CategoryUrl + "&product=" + result.ProductUrl + _httpContextWrapper.QueryString); " is 210.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,Rewrite,The length of the statement  "		_httpContextWrapper.RewritePath (FixUrlForRewrite (result.StoreUrl) + "?resolvedCategoryId=" + content.Id + "&category=" + result.CategoryUrl + _httpContextWrapper.QueryString); " is 177.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,UrlPointsToCatalogRepository,The length of the statement  "		string catalogpathWithuWebshop = string.Format ("/{0}/{1}/{2}"' uWebshopCmsNodeName' catalogRepositoryCmsNodeName' categoryRepositoryCmsNodeName); " is 146.
Long Statement,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,UrlPointsToCatalogRepository,The length of the statement  "		var catalogpathWithuWebshop = string.Format ("/{0}/{1}/{2}"' uWebshopCmsNodeName' catalogRepositoryCmsNodeName' productRepositoryCmsNodeName); " is 142.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "		if (order == null || order.Paid.GetValueOrDefault (false) || (order.Status != OrderStatus.PaymentFailed && order.Status != OrderStatus.Incomplete && order.Status != OrderStatus.WaitingForPayment)) { " is 198.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "			Log.Instance.LogDebug ("Starting new order for user" + (order == null ? "" : "' previous order: " + order.UniqueOrderId)); " is 122.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "		orderLine = order.OrderLines.FirstOrDefault (line => line.ProductInfo.Id == productId && line.VariantsMatch (variants)); " is 120.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "		if (product != null && !product.UseVariantStock && product.StockStatus && !product.BackorderStatus && product.Stock < itemCount) { " is 130.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "			ClientErrorHandling.SetOrClearErrorMessage (!tooMuchStock' "Ordered higher quantity than available stock. Updated the basked to available stock count"' "Stock"' requestedItemCount.ToString ()); " is 193.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "				orderLine.ProductInfo.ProductVariants = variants.Select (variant => new ProductVariantInfo (DomainHelper.GetProductVariantById (variant)' orderLine.ProductInfo' itemCount)).ToList (); " is 183.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "	//Log.Instance.LogDebug( "AddOrUpdateOrderLine() AutoSelectShippingProvider START: " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss.fff tt")); " is 140.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "	//Log.Instance.LogDebug( "AddOrUpdateOrderLine() AutoSelectShippingProvider END: " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss.fff tt")); " is 138.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The length of the statement  "	//Log.Instance.LogDebug( "AddOrUpdateOrderLine() function END: " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss.fff tt")); " is 120.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,UpdateProductInfoDiscountInformation,The length of the statement  "		var discount = IO.Container.Resolve<IProductDiscountService> ().GetById (product.DiscountId' product.Order.Localization); " is 121.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,UpdateProductInfoDiscountInformation,The length of the statement  "			product.DiscountAmountInCents = product.OriginalPriceInCents - discount.RangedDiscountValue (product.ItemCount.GetValueOrDefault (1)); " is 134.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,SetCurrentMember,The length of the statement  "		Log.Instance.LogError ("SetCurrentMember for NOT incomplete order: " + order.UniqueOrderId + " status: " + order.Status); " is 121.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,SetCurrentMember,The length of the statement  "		if (currentMember != null && (order.CustomerInfo.LoginName != currentMember.UserName || currentMember.ProviderUserKey != null && order.CustomerInfo.CustomerId != (int)currentMember.ProviderUserKey)) { " is 200.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCoupon,The length of the statement  "	var discounts = IO.Container.Resolve<ICouponCodeService> ().GetAllWithCouponcode (couponCode).Where (coupon => coupon.NumberAvailable > 0).Select (coupon => orderDiscountService.GetById (coupon.DiscountId' order.Localization ?? StoreHelper.CurrentLocalization)).Where (c => c != null).ToList (); " is 295.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCoupon,The length of the statement  "	var couponOrderDiscount = orderDiscountService.GetAll (order.Localization).FirstOrDefault (x => x.CouponCode == couponCode); " is 124.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCoupon,The length of the statement  "			if (ordersOfMember.Any (x => x.CouponCodes != null && x.CouponCodes.Contains (couponCode) && (x.Discounts.Any (d => d.OriginalId == discount.Id)) || x.OrderLines.Any (l => l.ProductInfo.DiscountId == discount.Id))) { " is 216.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCoupon,The length of the statement  "	if (discounts.All (discount => discount.MinimumOrderAmount.WithVat.ValueInCents > 0) && order.GrandtotalInCents < discounts.Max (d => d.MinimumOrderAmount.WithVat.ValueInCents)) { " is 179.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddShippingProvider,The length of the statement  "	var shippingProvider = ShippingProviderHelper.GetAllShippingProviders (localization.StoreAlias' localization.CurrencyCode).FirstOrDefault (x => x.Id == shippingProviderId); " is 172.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddShippingProvider,The length of the statement  "		Log.Instance.LogDebug ("AddShippingMethod shippingProvider " + ProviderActionResult.NoCorrectInput + " shippingProviderId: " + shippingProviderId); " is 147.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddShippingProvider,The length of the statement  "		Log.Instance.LogDebug ("AddShippingMethod shippingMethod " + ProviderActionResult.NoCorrectInput + " shippingProviderMethodId: " + shippingProviderMethodId); " is 157.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The length of the statement  "					Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value)); " is 168.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The length of the statement  "					Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value)); " is 168.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The length of the statement  "				Log.Instance.LogDebug (string.Format ("customerregion Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value)); " is 167.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The length of the statement  "			if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketing" || field.Value == "customeracceptsmarketing") { " is 155.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The length of the statement  "		// 'hack' because if you an empty checkbox is not send to the browser' by supporting this option the developer can add a hidden input 'false' field and make it checked using javascript. " is 185.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The length of the statement  "			if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketingfalse" || field.Value == "customeracceptsmarketingfalse") { " is 165.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddPaymentProvider,The length of the statement  "	var paymentProvider = PaymentProviderHelper.GetPaymentProvidersForOrder (order).SingleOrDefault (x => x.Id == paymentProviderId); " is 129.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,ChangeOrderToIncompleteAndReturnTrueIfNotAllowed,The length of the statement  "		if (order.Paid.GetValueOrDefault () || order.Status != OrderStatus.PaymentFailed && order.Status != OrderStatus.Incomplete && order.Status != OrderStatus.WaitingForPayment) { " is 174.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,ChangeLocalization,The length of the statement  "		Log.Instance.LogError ("ChangeLocalization for NOT incomplete order: " + order.UniqueOrderId + " status: " + order.Status); " is 123.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,ReloadOrderData,The length of the statement  "		var product = new ProductInfo (_productService.GetById (line.ProductInfo.Id' localization)' order' line.ProductInfo.ItemCount.GetValueOrDefault (1)); " is 149.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,ReloadOrderData,The length of the statement  "		product.ProductVariants = line.ProductInfo.ProductVariants.Select (variant => new ProductVariantInfo (_productVariantService.GetById (variant.Id' localization)' product' line.ProductInfo.ItemCount.GetValueOrDefault (1))).ToList (); " is 231.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,ReloadOrderData,The length of the statement  "		Log.Instance.LogError ("ReloadOrderData for NOT incomplete order: " + order.UniqueOrderId + " status: " + order.Status); " is 120.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddFieldsToXDocumentBasedOnCMSDocumentType,The length of the statement  "	var documentType = IO.Container.Resolve<ICMSDocumentTypeService> ().GetByAlias (replacedOrderlineDocTypeAlias) ?? IO.Container.Resolve<ICMSDocumentTypeService> ().GetByAlias (OrderedProduct.NodeAlias); " is 201.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddFieldsToXDocumentBasedOnCMSDocumentType,The length of the statement  "			ClientErrorHandling.SetOrClearErrorMessage (propertyType.ValidationRegularExpression != null && new Regex (propertyType.ValidationRegularExpression).IsMatch (field.Value)' "Error in field: " + field.Key' field.Key' field.Value); " is 228.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddFieldsToXDocumentBasedOnCMSDocumentType,The length of the statement  "	var xNodeList = fields.Where (field => documentType.Properties.Any (x => x.Alias.ToLower () == field.Key.ToLower ())).Select (field => new XElement (field.Key' new XCData (field.Value))).Cast<XNode> ().ToList (); " is 212.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,OrderProduct,The length of the statement  "		var variantClasses = variants.Select (variant => productVariantService.GetById (variant' currentLocalization)).Where (variant => variant != null).GroupBy (a => a.Group).Select (g => g.FirstOrDefault ()).Where (variant => variant != null); " is 238.
Long Statement,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,OrderProduct,The length of the statement  "		productInfo.ProductVariants = variantClasses.Select (variant => new ProductVariantInfo (variant' productInfo' itemCount)).ToList (); " is 132.
Long Statement,uWebshop.Domain.Services,MultiStoreEntityService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\MultiStoreEntityService.cs,GetAll,The length of the statement  "	var entities = _cache.GetOrAdd (GetCacheKey (localization)' alias => _repository.GetAll (localization).Cast<T1> ().ToList ()); " is 126.
Long Statement,uWebshop.Domain.OrderDTO,Order,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderDTO\Order.cs,ToOrderInfo,The length of the statement  "	orderInfo.VatCalculationStrategy = VatCalculatedOverParts.GetValueOrDefault () ? (IVatCalculationStrategy)new OverSmallestPartsVatCalculationStrategy () : new OverTotalVatCalculationStrategy (); " is 194.
Long Statement,uWebshop.Domain.Helpers,DiscountHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DiscountHelper.cs,GetProductDiscount,The length of the statement  "	return IO.Container.Resolve<IProductDiscountService> ().GetDiscountByProductId (itemId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 153.
Long Statement,uWebshop.Domain.Helpers,DiscountHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DiscountHelper.cs,GetOrderDiscounts,The length of the statement  "		foreach (var discount in orderDiscounts.Where (x => x.MinimumOrderAmount.WithVat.ValueInCents <= orderinfo.Grandtotal)) { " is 121.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailCustomer,The length of the statement  "		Log.Instance.LogDebug (string.Format ("SendOrderEmailCustomer orderInfo.UniqueOrderId: {0} orderInfo.OrderNumber: {1}"' orderInfo.UniqueOrderId' orderInfo.OrderNumber)); " is 169.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailCustomer,The length of the statement  "		SendMail (orderInfo' emailTo' orderInfo.StoreInfo.Store.EmailAddressFrom' emailTitle' body' orderInfo.StoreInfo.Store.EmailAddressFromName); " is 140.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,The length of the statement  "		Log.Instance.LogDebug (string.Format ("SendOrderEmailStore orderInfo.UniqueOrderId: {0} orderInfo.OrderNumber: {1}"' orderInfo.UniqueOrderId' orderInfo.OrderNumber)); " is 166.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,The length of the statement  "			Log.Instance.LogWarning ("SendOrderEmailCustomer nodeId: " + emailNodeId + " no valid Tempalte value: " + email.Template + " : no email send"); " is 143.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,The length of the statement  "				Log.Instance.LogWarning ("SendOrderEmailStore nodeId: " + emailNodeId + " no valid Tempalte value: " + email.Template + " : no email send"); " is 140.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,The length of the statement  "			SendMail (orderInfo' emailTo' orderInfo.StoreInfo.Store.EmailAddressFrom' emailTitle' body' orderInfo.StoreInfo.Store.EmailAddressFromName); " is 140.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,The length of the statement  "				Log.Instance.LogDebug ("SendOrderEmailStore Multiple EmailFromName: " + orderInfo.StoreInfo.Store.EmailAddressFromName); " is 120.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,SendOrderEmailStore,The length of the statement  "				SendMail (orderInfo' emailToArrayValue.Trim ()' orderInfo.StoreInfo.Store.EmailAddressFrom' emailTitle' body' orderInfo.StoreInfo.Store.EmailAddressFromName); " is 158.
Long Statement,uWebshop.Domain.Helpers,EmailHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\EmailHelper.cs,ReplaceStrings,The length of the statement  "		XElement element = doc.Descendants ().FirstOrDefault (x => x.Name.LocalName == match.Value.Replace ("#"' string.Empty)); " is 120.
Long Statement,uWebshop.Domain.Helpers,InterfaceHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\InterfaceHelper.cs,GetInterfaces,The length of the statement  "		return Directory.GetFiles (path).Select (filepath => new FileInfo (filepath)).Where (fileInfo => fileInfo.Name.StartsWith ("uWebshop.")).Select (fileInfo => Assembly.LoadFrom (fileInfo.FullName)).Where (assembly => assembly != null).SelectMany (assembly => assembly.GetExportedTypes ()).Where (type => targetType.IsAssignableFrom (type)).Select (type => (T)Activator.CreateInstance (type)).Where (obj => obj != null).ToList (); " is 427.
Long Statement,uWebshop.Domain.Helpers,InterfaceHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\InterfaceHelper.cs,GetInterfaces,The length of the statement  "		Log.Instance.LogDebug (DateTime.Now.ToString ("MM/dd/yyyy hh:mm:ss.fff tt") + " failure with loading payment or shipping extension " + typeof(T).Name); " is 151.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentRequest,The length of the statement  "		Log.Instance.LogError ("HandleuWebshopPaymentRequest paymentProvider.Name == null paymentProviderNodeId: " + paymentProvider.Id); " is 129.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentRequest,The length of the statement  "	var responsehandler = PaymentProviderHelper.GetAllPaymentResponseHandlers ().FirstOrDefault (paymentResponseHandler => paymentResponseHandler.GetName ().ToLower () == paymentProvider.Name.ToLower ()); " is 200.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentRequest,The length of the statement  "		Log.Instance.LogError ("HandleuWebshopPaymentRequest responsehandler == null paymentProvider.Name: " + paymentProvider.Name); " is 125.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentResponse,The length of the statement  "		Log.Instance.LogError ("HandleuWebshopPaymentRequest paymentProvider.Name == null paymentProviderNodeId: " + paymentProvider.Id); " is 129.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentResponse,The length of the statement  "	var responsehandler = PaymentProviderHelper.GetAllPaymentResponseHandlers ().FirstOrDefault (paymentResponseHandler => paymentResponseHandler.GetName ().ToLower () == paymentProvider.Name.ToLower ()); " is 200.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentResponse,The length of the statement  "		Log.Instance.LogError ("HandleuWebshopPaymentRequest responsehandler == null paymentProvider.Name: " + paymentProvider.Name); " is 125.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentResponse,The length of the statement  "		Log.Instance.LogError ("HandleuWebshopPaymentRequest paymentProvider.Name == null paymentProviderNodeId: " + paymentProvider.Id); " is 129.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentResponse,The length of the statement  "	var responsehandler = PaymentProviderHelper.GetAllPaymentResponseHandlers ().FirstOrDefault (paymentResponseHandler => paymentResponseHandler.GetName ().ToLower () == paymentProvider.Name.ToLower ()); " is 200.
Long Statement,uWebshop.Domain.Helpers,PaymentRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\PaymentRequestHandler.cs,HandleuWebshopPaymentResponse,The length of the statement  "		Log.Instance.LogError ("HandleuWebshopPaymentRequest responsehandler == null paymentProvider.Name: " + paymentProvider.Name); " is 125.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetAllShippingProviders,The length of the statement  "	return IO.Container.Resolve<IShippingProviderService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Where (x => !x.Disabled); " is 155.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,AutoSelectShippingProvider,The length of the statement  "	var shippingProviderForOrder = shippingProvidersForOrder.FirstOrDefault (x => x.ShippingProviderMethods.Contains (shippingProviderMethod)); " is 139.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingZones,The length of the statement  "	return DomainHelper.GetObjectsByAlias<Zone> (Zone.ShippingZoneNodeAlias).Where (x => x.CountryCodes.Contains (countryCode)).ToList (); " is 134.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvidersForOrder,The length of the statement  "	//var providers = Providers.GetFulfillmentProvidersForOrder(Basket.CreateBasketFromOrderInfo(orderInfo)' useCountry' storeAlias' currencyCode); " is 143.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvidersForOrder,The length of the statement  "	var shippingProviders = GetAllShippingProviders (storeAlias' currencyCode).Where (shippingProvider => shippingProvider.IsApplicableToOrder (orderInfo)).ToList (); " is 162.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvidersForOrder,The length of the statement  "		shippingProviders = shippingProviders.Where (shippingProvider => shippingProvider.Type == ShippingProviderType.Pickup || ShippingProviderHasCountyCodeInZone (shippingProvider' shippingCountryCode)).ToList (); " is 208.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvidersForOrder,The length of the statement  "		shippingProviders = shippingProviders.Where (shippingProvider => shippingProvider.Type == ShippingProviderType.Pickup || shippingProvider.TypeOfRange == ShippingRangeType.Weight).ToList (); " is 189.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,ShippingProviderHasCountyCodeInZone,The length of the statement  "	return shippingProvider.Zone != null && shippingProvider.Zone.CountryCodes != null && shippingProvider.Zone.CountryCodes.Contains (shippingCountryCode); " is 152.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetShippingProvider,The length of the statement  "	return IO.Container.Resolve<IShippingProviderService> ().GetById (id' StoreHelper.GetLocalization (storeAlias' currencyCode) ?? StoreHelper.CurrentLocalization); " is 161.
Long Statement,uWebshop.Domain.Helpers,ShippingProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\ShippingProviderHelper.cs,GetPaymentValidationResults,The length of the statement  "		return (List<OrderValidationError>)HttpContext.Current.Session [Constants.ShippingValidationResultsKey + order.UniqueOrderId]; " is 126.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetCurrentCulture,The length of the statement  "	}).Where (@t => string.Equals (t.region.ISOCurrencySymbol' currentStore.CurrencyCulture' StringComparison.InvariantCultureIgnoreCase)).Select (@t => t.culture).FirstOrDefault (); " is 178.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetCultureByCurrencyCode,The length of the statement  "	return CultureInfo.GetCultures (CultureTypes.SpecificCultures).First (culture => string.Equals (new RegionInfo (culture.LCID).ISOCurrencySymbol' store.CurrencyCulture' StringComparison.InvariantCultureIgnoreCase)); " is 214.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetMultiStoreItem,The length of the statement  "	return IO.Container.Resolve<ICMSApplication> ().GetMultiStoreContentProperty (contentId' propertyAlias' GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 157.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,ReturnCachedFieldOrLoadValueUsingGetMultiStoreExamineAndUpdateField,The length of the statement  "	return field ?? (field = newValue == "enable" || newValue == "1" || newValue == "true" || newValue == string.Empty).GetValueOrDefault (); " is 137.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,ReturnCachedFieldOrLoadValueAndUpdateField,The length of the statement  "	return field ?? (field = newValue == "enable" || newValue == "1" || newValue == "true" || newValue == string.Empty).GetValueOrDefault (); " is 137.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetMultiStoreStock,The length of the statement  "	return currentStore != null && currentStore.UseStoreSpecificStock ? UWebshopStock.GetStock (id' currentStore.Alias) : UWebshopStock.GetStock (id); " is 146.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetProductsRecursive,The length of the statement  "	return GetProductsRecursive (IO.Container.Resolve<ICategoryService> ().GetById (categoryId' GetLocalizationOrCurrent (storeAlias' currencyCode))); " is 146.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetCategoriesFromCategory,The length of the statement  "	foreach (Category category in mainCategory.SubCategories.Where (category => categoryList.All (x => x.Id != category.Id))) { " is 123.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetAllCountries,The length of the statement  "	return IO.Container.Resolve<ICountryRepository> ().GetAllCountries (GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 121.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,CreateFullLocalizedPropertyAlias,The length of the statement  "	return CreateMultiStorePropertyAlias (CreateMultiStorePropertyAlias (propertyAlias' localization.StoreAlias)' localization.CurrencyCode); " is 137.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetLocalizedPrice,The length of the statement  "	if (fields.ContainsKey (fullLocalizedPricePropetryAlias) && int.TryParse (fields.GetStringValue (fullLocalizedPricePropetryAlias)' out price)) { " is 144.
Long Statement,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetLocalizedPrice,The length of the statement  "	if (fields.ContainsKey (localizedPricePropertyAlias) && int.TryParse (fields.GetStringValue (localizedPricePropertyAlias)' out price)) { " is 136.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrderCookieName,The length of the statement  "	return cookiePrefix + (uwebshopConfiguration == null || uwebshopConfiguration.ShareBasketBetweenStores ? string.Empty : StoreHelper.GetCurrentStore ().UrlName); " is 160.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetUnmodifiedCurrentOrder,The length of the statement  "		if (IsCompletedOrderWithinValidLifetime (orderInfo) && orderInfo.PaymentInfo.PaymentType == PaymentProviderType.OnlinePayment && orderInfo.Paid == true) { " is 154.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetUnmodifiedCurrentOrder,The length of the statement  "		if (IsCompletedOrderWithinValidLifetime (orderInfo) && orderInfo.PaymentInfo.PaymentType != PaymentProviderType.OnlinePayment) { " is 128.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetUnmodifiedCurrentOrder,The length of the statement  "		if (IsCompletedOrderWithinValidLifetime (orderInfo) && orderInfo.PaymentInfo.PaymentType == PaymentProviderType.OnlinePayment && orderInfo.Paid == true) { " is 154.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetUnmodifiedCurrentOrder,The length of the statement  "		if (IsCompletedOrderWithinValidLifetime (orderInfo) && orderInfo.PaymentInfo.PaymentType != PaymentProviderType.OnlinePayment) { " is 128.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The length of the statement  "	// if status is NOT incomplete' and status is PAID or status is OfflinePayment' or if status is confirmed without a payment provider (only possible if there are no payment providers created) return null. " is 203.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The length of the statement  "	if (orderInfo.Status == OrderStatus.OfflinePayment || orderInfo.Status != OrderStatus.Incomplete && orderInfo.Paid == true || orderInfo.Status == OrderStatus.Confirmed && orderInfo.PaymentInfo.Id == 0) { " is 203.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The length of the statement  "	// if status is NOT incomplete and NOT waiting for paymentprovider and NOT paid it means the order is in 'payment progress' " is 123.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The length of the statement  "	if (orderInfo.Status != OrderStatus.OfflinePayment && orderInfo.Status != OrderStatus.Incomplete && orderInfo.Status != OrderStatus.WaitingForPaymentProvider && orderInfo.Paid != true) { " is 186.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetAllOrders,The length of the statement  "	return storeAlias != null ? OrderRepository.GetAllOrders ().Where (x => x.StoreInfo.Alias.ToLowerInvariant () == storeAlias.ToLowerInvariant ()) : OrderRepository.GetAllOrders (); " is 179.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetApplicableOrderLines,The length of the statement  "	return orderinfo.OrderLines.Where (line => applicableOrderLines.Any (l => l.OrderLineId == line.OrderLineId)).ToList (); " is 120.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The length of the statement  "			var iPaymentProvider = PaymentProviderHelper.GetAllIPaymentProviders ().FirstOrDefault (x => x.GetName ().ToLowerInvariant () == paymentProvider.Name.ToLowerInvariant ()); " is 171.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The length of the statement  "				var handler = PaymentProviderHelper.GetAllPaymentRequestHandlers ().FirstOrDefault (x => x.GetName ().ToLowerInvariant () == paymentProvider.Name.ToLowerInvariant ()); " is 167.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The length of the statement  "					Log.Instance.LogWarning ("HandlePaymentRequest PaymentTransactionMethod.Form/Custom FAILED - paymentProvider.ControlNodeId not found: try fallback to orderInfo.PaymentInfo.Url"); " is 178.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The length of the statement  "						Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost OrderInfo.PaymentInfo.Url: " + orderInfo.PaymentInfo.Url); " is 139.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The length of the statement  "							Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost OrderInfo.PaymentInfo.Url: " + orderInfo.PaymentInfo.Url); " is 139.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The length of the statement  "		string confirmNodeId = confirmedNodeId != 0 ? IO.Container.Resolve<ICMSApplication> ().GetUrlForContentWithId (confirmedNodeId) : string.Empty; " is 143.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "			} else if (orderLine.ProductInfo.CatalogProduct.UseVariantStock && orderLine.ProductInfo.CatalogProduct.GetAllVariants ().Any ()) { " is 131.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetStock (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' true' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 188.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetOrderCount (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 187.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetStock (orderLine.ProductInfo.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' true' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 202.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetOrderCount (orderLine.ProductInfo.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 201.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetStock (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' true' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 188.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetOrderCount (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 187.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetOrderCount (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 187.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "				stockService.SetOrderCount (orderLine.ProductInfo.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 201.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "					stockService.SetOrderCount (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 187.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "		stockService.SetStock (orderDiscount.OriginalId' 1' false' orderInfo.StoreInfo.Store != null && orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 188.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "	foreach (var discountProduct in orderInfo.OrderLines.Select (l => DiscountHelper.GetProductDiscount (l.ProductInfo.DiscountId)).Where (discount => discount != null && discount.CounterEnabled)) { " is 194.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "		stockService.SetStock (discountProduct.Id' 1' false' orderInfo.StoreInfo.Store != null && orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 182.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "	var discounts = orderInfo.Discounts.Select (d => d.Id).Concat (orderInfo.OrderLines.Select (l => l.ProductInfo.DiscountId)); " is 124.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,UpdateStock,The length of the statement  "		var coupons = couponCodeService.GetAllForDiscount (discountId).Where (c => c.NumberAvailable > 0).Where (c => orderInfo.CouponCodes.Contains (c.CouponCode)); " is 157.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,ReturnStock,The length of the statement  "			stockService.ReturnStock (orderLine.ProductInfo.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' true' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 205.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,ReturnStock,The length of the statement  "				stockService.ReturnStock (variant.Id' orderLine.ProductInfo.ItemCount.GetValueOrDefault (1)' true' orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 191.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,ReturnStock,The length of the statement  "		stockService.ReturnStock (orderDiscount.OriginalId' 1' false' orderInfo.StoreInfo.Store != null && orderInfo.StoreInfo.Store.UseStoreSpecificStock ? orderInfo.StoreInfo.Alias : string.Empty); " is 191.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,CopyCustomerToShipping,The length of the statement  "	if (orderInfo.CustomerInfo.ShippingInformation == null || (orderInfo.CustomerInfo.ShippingInformation != null && !orderInfo.CustomerInfo.ShippingInformation.Descendants ().Any ())) { " is 182.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,IsCompletedOrderWithinValidLifetime,The length of the statement  "	return completedOrderCookie != null && (completedOrderCookie == order.UniqueOrderId.ToString () && order.ConfirmDate.GetValueOrDefault ().AddMinutes (10) >= DateTime.Now); " is 171.
Long Statement,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,IsCompletedOrderWithinValidLifetime,The length of the statement  "	return completedOrderCookie != null && (completedOrderCookie == order.UniqueId.ToString () && order.ConfirmDate.AddMinutes (10) >= DateTime.Now); " is 145.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetAllIPaymentProviders,The length of the statement  "	//var paymentProviders = new OrderRepository().GetAllPaymentProviders().Where(x => x.Type == Common.PaymentProviderType.OfflinePaymentAtCustomer || x.Type == Common.PaymentProviderType.OfflinePaymentInStore); " is 208.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetAllPaymentProviders,The length of the statement  "	return IO.Container.Resolve<IPaymentProviderService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)).Where (x => !x.Disabled); " is 154.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetBillingProvidersForOrder,The length of the statement  "	return GetBillingProvidersForOrder (orderInfo' useZone' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 121.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetBillingProvidersForOrder,The length of the statement  "		paymentProviders = paymentProviders.Where (paymentProvider => paymentProvider.Type == PaymentProviderType.OfflinePaymentInStore || paymentProvider.Zones.SelectMany (x => x.CountryCodes).Contains (paymentCountry)).Distinct ().ToList (); " is 235.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetPaymentZones,The length of the statement  "	return IO.Container.Resolve<IZoneService> ().GetAllPaymentZones (StoreHelper.CurrentLocalization).Where (x => x.CountryCodes.Contains (countryCode)).ToList (); " is 159.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetPaymentValidationResults,The length of the statement  "		return (List<OrderValidationError>)HttpContext.Current.Session [Constants.PaymentValidationResultsKey + order.UniqueOrderId]; " is 125.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,GetSetting,The length of the statement  "	Log.Instance.LogError (paymentProvider.Name + ": Missing or empty PaymentProvider.Config field with Key: " + helperKey); " is 120.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,ReportUrl,The length of the statement  "	var paymentProviderRepositoryCmsNodeName = IO.Container.Resolve<ICMSApplication> ().GetPaymentProviderRepositoryCMSNodeUrlName () ?? "PaymentProviders"; " is 152.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,ReportUrl,The length of the statement  "	var paymentProviderSectionCmsNodeName = IO.Container.Resolve<ICMSApplication> ().GetPaymentProviderSectionCMSNodeUrlName () ?? "PaymentProviders"; " is 146.
Long Statement,uWebshop.Domain.Helpers,PaymentProviderExtensions,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\PaymentProviderHelper.cs,ReportUrl,The length of the statement  "	var paymentProviderPath = string.Format ("/{0}/{1}/"' paymentProviderRepositoryCmsNodeName' paymentProviderSectionCmsNodeName); " is 127.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetAllCategories,The length of the statement  "	return IO.Container.Resolve<ICategoryService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)' includeDisabled); " is 139.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetAllProducts,The length of the statement  "	return IO.Container.Resolve<IProductService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)' includeDisabled); " is 138.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetAllProductVariants,The length of the statement  "	return IO.Container.Resolve<IProductVariantService> ().GetAll (StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)' includeDisabled); " is 145.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetCategoryById,The length of the statement  "	return IO.Container.Resolve<ICategoryService> ().GetById (categoryId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 135.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetObjectsByAlias,The length of the statement  "	return IO.Container.Resolve<ICMSEntityRepository> ().GetObjectsByAlias<T> (nodeTypeAlias' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)' startNodeId); " is 168.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,MultiStorePropertyAlias,The length of the statement  "	return !string.IsNullOrEmpty (storeAlias) ? StoreHelper.CreateMultiStorePropertyAlias (propertyAlias' storeAlias) : propertyAlias; " is 130.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetProductById,The length of the statement  "	return IO.Container.Resolve<IProductService> ().GetById (productId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 133.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetProductVariantGroupById,The length of the statement  "	return IO.Container.Resolve<IProductVariantGroupService> ().GetById (productVariantGroupId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 157.
Long Statement,uWebshop.Domain.Helpers,DomainHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DomainHelper.cs,GetProductVariantById,The length of the statement  "	return IO.Container.Resolve<IProductVariantService> ().GetById (productVariantId' StoreHelper.GetLocalizationOrCurrent (storeAlias' currencyCode)); " is 147.
Long Statement,uWebshop.Domain.Repositories,OrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\OrderRepository.cs,GetOrdersFromCustomer,The length of the statement  "	return uWebshopOrders.GetOrdersFromCustomer (customerId' includeIncomplete).Select (OrderInfo.CreateOrderInfoFromOrderData); " is 124.
Long Statement,uWebshop.Domain.Repositories,OrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\OrderRepository.cs,GetOrdersFromCustomer,The length of the statement  "	return uWebshopOrders.GetOrdersFromCustomer (customerUsername' includeIncomplete).Select (OrderInfo.CreateOrderInfoFromOrderData); " is 130.
Long Statement,uWebshop.Domain.Repositories,OrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\OrderRepository.cs,LegacyStoreOrder,The length of the statement  "	uWebshopOrders.SetOrderInfo (order.UniqueOrderId' DomainHelper.SerializeObjectToXmlString (order)' OrderStatus.Incomplete); " is 123.
Long Statement,uWebshop.Domain.Repositories,OrderRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\OrderRepository.cs,RemoveIncompleOrdersBeforeDate,The length of the statement  "	var orders = uWebshopOrders.GetAllOrderInfos ().Where (x => DateTime.Now.AddDays (-daysAgo) >= x.UpdateDate.GetValueOrDefault () && x.OrderStatus == OrderStatus.Incomplete.ToString ()); " is 185.
Long Statement,uWebshop.Domain.Repositories,UwebshopApplicationCachedCountriesRepository,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Repositories\UwebshopApplicationCachedCountriesRepository.cs,GetAllCountries,The length of the statement  "		var path = HttpContext.Current.Server.MapPath (string.Format ("/scripts/uWebshop/" + BaseXMLFileName + "_{0}.xml"' storeAlias)); " is 128.
Long Statement,uWebshop.Domain.Upgrading,OrderTableUpdater,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Upgrading\OrderTableUpdater.cs,AddStoreOrderReferenceIdToExistingOrders,The length of the statement  "	var orders = OrderHelper.GetAllOrders ().Where (orderinfo => orderinfo != null && orderinfo.Status != OrderStatus.Incomplete); " is 126.
Long Statement,uWebshop.Domain.Upgrading,OrderTableUpdater,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Upgrading\OrderTableUpdater.cs,AddStoreOrderReferenceIdToExistingOrders,The length of the statement  "			Log.Instance.LogWarning ("Ordernumber could not be parsed' for order with id " + orderInfo.DatabaseId + "' guid " + orderInfo.UniqueOrderId); " is 141.
Long Statement,uWebshop.Domain.Upgrading,OrderTableUpdater,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Upgrading\OrderTableUpdater.cs,AddStoreOrderReferenceIdToExistingOrders,The length of the statement  "			Log.Instance.LogWarning ("Order without ordernumber' id " + orderInfo.DatabaseId + "' guid " + orderInfo.UniqueOrderId); " is 120.
Complex Conditional,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlists,The conditional expression  "IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.ProviderUserKey as string == customerId.ToString () || UwebshopRequest.Current.PaymentProvider != null"  is complex.
Complex Conditional,uWebshop.API,Customers,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Customers.cs,GetWishlists,The conditional expression  "IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == userName || UwebshopRequest.Current.PaymentProvider != null"  is complex.
Complex Conditional,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrder,The conditional expression  "IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == order.CustomerInfo.LoginName || UwebshopRequest.Current.PaymentProvider != null || OrderHelper.IsCompletedOrderWithinValidLifetime (order)"  is complex.
Complex Conditional,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrderByTransactionId,The conditional expression  "IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == order.CustomerInfo.LoginName || UwebshopRequest.Current.PaymentProvider != null || OrderHelper.IsCompletedOrderWithinValidLifetime (order)"  is complex.
Complex Conditional,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrdersForCustomer,The conditional expression  "IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.ProviderUserKey == customerId.ToString () || UwebshopRequest.Current.PaymentProvider != null"  is complex.
Complex Conditional,uWebshop.API,Orders,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\API\Orders.cs,GetOrdersForCustomer,The conditional expression  "IO.Container.Resolve<ICMSApplication> ().IsBackendUserAuthenticated || membershipUser != null && membershipUser.UserName == userName || UwebshopRequest.Current.PaymentProvider != null"  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "clearbasket" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "clearorder" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "createaccount" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "updateaccount" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "changepassword" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "accountsignout" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "accountsignin" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "createwishlist" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "renamewishlist" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "wishlisttobasket" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "removewishlist" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "requestpassword" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "validate" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "validatecustomer" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "validatecustom" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "validatestock" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "validateorderlines" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,HandleBasketRequest,The conditional expression  "keyValue.ToLower () == "true" || keyValue.ToLower () == "confirm" || keyValue.ToLower () == "on" || keyValue == "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountChangePassword,The conditional expression  "!string.IsNullOrEmpty (currentPasswordValue) || !string.IsNullOrEmpty (newPasswordValue) || !string.IsNullOrEmpty (validatePasswordValue) || !string.IsNullOrEmpty (generatePasswordValue)"  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCoupon,The conditional expression  "removeCouponValue.ToLower () == "true" || removeCouponValue.ToLower () == "removecoupon" && removeCouponValue.ToLower () != "on" && removeCouponValue != "1""  is complex.
Complex Conditional,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AddCustomerInformation,The conditional expression  "customerIsShippingValue != null && (customerIsShippingValue.ToLower () == "customerisshipping" || customerIsShippingValue.ToLower () == "true" || customerIsShippingValue.ToLower () == "on" || customerIsShippingValue == "1")"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadElement,The conditional expression  "reader.TokenType == JsonToken.String || reader.TokenType == JsonToken.Integer || reader.TokenType == JsonToken.Float || reader.TokenType == JsonToken.Boolean || reader.TokenType == JsonToken.Date"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,ReadAttributeElements,The conditional expression  "reader.TokenType != JsonToken.String && reader.TokenType != JsonToken.Null && reader.TokenType != JsonToken.Boolean && reader.TokenType != JsonToken.Integer && reader.TokenType != JsonToken.Float && reader.TokenType != JsonToken.Date && reader.TokenType != JsonToken.StartConstructor"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,EnsureDecimalPlace,The conditional expression  "double.IsNaN (value) || double.IsInfinity (value) || text.IndexOf ('.') != -1 || text.IndexOf ('E') != -1 || text.IndexOf ('e') != -1"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,ProcessValue,The conditional expression  "currentSchema != null && currentSchema.PositionalItemsValidation && !currentSchema.AllowAdditionalItems && (currentSchema.Items == null || _currentScope.ArrayItemCount - 1 >= currentSchema.Items.Count)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoComplete,The conditional expression  "(_currentState == State.Object || _currentState == State.Array || _currentState == State.Constructor) && tokenBeingWritten != JsonToken.Comment"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoComplete,The conditional expression  "(_currentState == State.Array || _currentState == State.ArrayStart || _currentState == State.Constructor || _currentState == State.ConstructorStart) || (tokenBeingWritten == JsonToken.PropertyName && _currentState != State.Start)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JContainer,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JContainer.cs,EnsureParentToken,The conditional expression  "item.Parent != null || item == this || (item.HasValues && Root == item)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Compare,The conditional expression  "objA is float || objB is float || objA is double || objB is double"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The conditional expression  "objA is float || objB is float || objA is double || objB is double"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The conditional expression  "objA is int || objA is uint || objA is long || objA is short || objA is ushort || objA is sbyte || objA is byte || objB is int || objB is uint || objB is long || objB is short || objB is ushort || objB is sbyte || objB is byte"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,GetValueType,The conditional expression  "value is long || value is int || value is short || value is sbyte || value is ulong || value is uint || value is ushort || value is byte"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,CanConvertToString,The conditional expression  "converter != null   #if !SILVERLIGHT  && !(converter is ComponentConverter) && !(converter is ReferenceConverter)   #endif  && converter.GetType () != typeof(TypeConverter)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The conditional expression  "parameters == null || parameters.Length != 2 || parameters [0].ParameterType != typeof(StreamingContext) || parameters [1].ParameterType != typeof(ErrorContext)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The conditional expression  "string.IsNullOrEmpty (s) && objectType != typeof(string) && objectType != typeof(object) && contract != null && contract.IsNullable"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The conditional expression  "(objectCreationHandling != ObjectCreationHandling.Replace) && (tokenType == JsonToken.StartArray || tokenType == JsonToken.StartObject) && property.Readable"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The conditional expression  "HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) && !HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && JsonReader.IsPrimitiveToken (tokenType) && MiscellaneousUtils.ValueEquals (reader.Value' property.GetResolvedDefaultValue ())"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The conditional expression  "objectContract.DefaultCreator != null && (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParametrizedConstructor == null)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The conditional expression  "(((converter = (member != null) ? member.Converter : null) != null) || ((converter = (containerProperty != null) ? containerProperty.ItemConverter : null) != null) || ((converter = (containerContract != null) ? containerContract.ItemConverter : null) != null) || ((converter = valueContract.Converter) != null) || ((converter = Serializer.GetMatchingConverter (valueContract.UnderlyingType)) != null) || ((converter = valueContract.InternalConverter) != null)) && converter.CanWrite"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The conditional expression  "!property.Ignored && property.Readable && ShouldSerialize (writer' property' value) && IsSpecified (writer' property' value)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,CollectionWrapper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\CollectionWrapper.cs,IsCompatibleObject,The conditional expression  "!(value is T) && (value != null || (typeof(T).IsValueType () && !ReflectionUtils.IsNullableType (typeof(T))))"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The conditional expression  "!(Parse2Digit (start' out Hour) && Hour < 24 && ParseChar (start + LzHH' ':') && Parse2Digit (start + LzHH_' out Minute) && Minute < 60 && ParseChar (start + LzHH_mm' ':') && Parse2Digit (start + LzHH_mm_' out Second) && Second < 60)"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The conditional expression  "start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The conditional expression  "0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The conditional expression  "0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The conditional expression  "s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T'"  is complex.
Complex Conditional,uWebshop.Newtonsoft.Json.Utilities,MiscellaneousUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MiscellaneousUtils.cs,ValueEquals,The conditional expression  "(objA is double || objA is float || objA is decimal) && (objB is double || objB is float || objB is decimal)"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateGlobalValidations,The conditional expression  "orderInfo.Status == OrderStatus.Confirmed && orderInfo.ShippingCostsMightBeOutdated && shippingProvidersForOrder.Count > 0 && shippingProvidersForOrder.All (shipPro => shipPro.Id != orderInfo.ShippingInfo.Id)"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateInformationDoc,The conditional expression  "propertyType != null && xmlElement != null && (!string.IsNullOrEmpty (propertyType.ValidationRegularExpression) && !Regex.IsMatch (xmlElement.Value' propertyType.ValidationRegularExpression))"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderService.cs,ValidateInformationDoc,The conditional expression  "propertyType != null && propertyType.Mandatory && (xmlElement == null || string.IsNullOrEmpty (xmlElement.Value))"  is complex.
Complex Conditional,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The conditional expression  "absolutePath.ToLowerInvariant ().StartsWith ("/umbraco") || absolutePath.ToLowerInvariant ().StartsWith ("/base/") || absolutePath.ToLowerInvariant () == "/umbraco/webservices/legacyajaxcalls.asmx/getsecondsbeforeuserlogout" || absolutePath.ToLowerInvariant () == "/umbraco/ping.aspx""  is complex.
Complex Conditional,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The conditional expression  "absolutePath == "" || absolutePath.EndsWith (".js") || absolutePath.EndsWith (".ico") || absolutePath.EndsWith (".gif") || absolutePath.EndsWith (".css") || absolutePath.EndsWith (".jpg") || absolutePath.EndsWith (".jpeg") || absolutePath.EndsWith (".png") || absolutePath.EndsWith (".axd")"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The conditional expression  "order == null || order.Paid.GetValueOrDefault (false) || (order.Status != OrderStatus.PaymentFailed && order.Status != OrderStatus.Incomplete && order.Status != OrderStatus.WaitingForPayment)"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The conditional expression  "variant != null && variant.StockStatus && !variant.BackorderStatus && variant.Stock < requestedItemCount"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddOrUpdateOrderLine,The conditional expression  "product != null && !product.UseVariantStock && product.StockStatus && !product.BackorderStatus && product.Stock < itemCount"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,SetCurrentMember,The conditional expression  "currentMember != null && (order.CustomerInfo.LoginName != currentMember.UserName || currentMember.ProviderUserKey != null && order.CustomerInfo.CustomerId != (int)currentMember.ProviderUserKey)"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCoupon,The conditional expression  "ordersOfMember.Any (x => x.CouponCodes != null && x.CouponCodes.Contains (couponCode) && (x.Discounts.Any (d => d.OriginalId == discount.Id)) || x.OrderLines.Any (l => l.ProductInfo.DiscountId == discount.Id))"  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The conditional expression  "field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketing" || field.Value == "customeracceptsmarketing""  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The conditional expression  "field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketingfalse" || field.Value == "customeracceptsmarketingfalse""  is complex.
Complex Conditional,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,ChangeOrderToIncompleteAndReturnTrueIfNotAllowed,The conditional expression  "order.Paid.GetValueOrDefault () || order.Status != OrderStatus.PaymentFailed && order.Status != OrderStatus.Incomplete && order.Status != OrderStatus.WaitingForPayment"  is complex.
Complex Conditional,uWebshop.Domain.Helpers,DiscountHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\DiscountHelper.cs,GetOrderDiscounts,The conditional expression  "!discount.Disabled && (discount.CounterEnabled && discount.Counter > 0 || discount.CounterEnabled == false)"  is complex.
Complex Conditional,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The conditional expression  "orderInfo.Status == OrderStatus.OfflinePayment || orderInfo.Status != OrderStatus.Incomplete && orderInfo.Paid == true || orderInfo.Status == OrderStatus.Confirmed && orderInfo.PaymentInfo.Id == 0"  is complex.
Complex Conditional,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,GetOrder,The conditional expression  "orderInfo.Status != OrderStatus.OfflinePayment && orderInfo.Status != OrderStatus.Incomplete && orderInfo.Status != OrderStatus.WaitingForPaymentProvider && orderInfo.Paid != true"  is complex.
Empty Catch Block,uWebshop.Domain.Businesslogic,BasketRequestHandler,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\BasketRequestHandler.cs,AccountUpdate,The method has an empty catch block.
Empty Catch Block,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,LoadAddons,The method has an empty catch block.
Empty Catch Block,uWebshop.Domain.Core,Initialize,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\Initialize.cs,GetMatchingTypesInAssembly,The method has an empty catch block.
Magic Number,uWebshop.Common,HttpRequestSender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\HttpRequestSender.cs,SendRequest,The following statement contains a magic number: request.Timeout = (300 * 1000);  
Magic Number,uWebshop.Common,HttpRequestSender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\HttpRequestSender.cs,SendRequest,The following statement contains a magic number: request.Timeout = (300 * 1000);  
Magic Number,uWebshop.Common,HttpRequestSender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\HttpRequestSender.cs,GetRequest,The following statement contains a magic number: request.Timeout = (300 * 1000);  
Magic Number,uWebshop.Common,HttpRequestSender,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\HttpRequestSender.cs,GetRequest,The following statement contains a magic number: request.Timeout = (300 * 1000);  
Magic Number,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The following statement contains a magic number: try {  	if (string.IsNullOrWhiteSpace (rangesData) || rangesData.Contains ("Range"))  		return new List<Range> ();  	return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range {  		From = int.Parse (splitStrings [0])'  		PriceInCents = int.Parse (splitStrings [2])'  		To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])'  	}).ToList ();  } catch (Exception ex) {  	Log.Instance.LogDebug ("Exception in parsing ranges data: " + ex);  	return new List<Range> ();  }  
Magic Number,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The following statement contains a magic number: try {  	if (string.IsNullOrWhiteSpace (rangesData) || rangesData.Contains ("Range"))  		return new List<Range> ();  	return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range {  		From = int.Parse (splitStrings [0])'  		PriceInCents = int.Parse (splitStrings [2])'  		To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])'  	}).ToList ();  } catch (Exception ex) {  	Log.Instance.LogDebug ("Exception in parsing ranges data: " + ex);  	return new List<Range> ();  }  
Magic Number,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The following statement contains a magic number: try {  	if (string.IsNullOrWhiteSpace (rangesData) || rangesData.Contains ("Range"))  		return new List<Range> ();  	return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range {  		From = int.Parse (splitStrings [0])'  		PriceInCents = int.Parse (splitStrings [2])'  		To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])'  	}).ToList ();  } catch (Exception ex) {  	Log.Instance.LogDebug ("Exception in parsing ranges data: " + ex);  	return new List<Range> ();  }  
Magic Number,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The following statement contains a magic number: return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range {  	From = int.Parse (splitStrings [0])'  	PriceInCents = int.Parse (splitStrings [2])'  	To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])'  }).ToList ();  
Magic Number,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The following statement contains a magic number: return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range {  	From = int.Parse (splitStrings [0])'  	PriceInCents = int.Parse (splitStrings [2])'  	To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])'  }).ToList ();  
Magic Number,uWebshop.Domain,Range,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Range.cs,CreateFromString,The following statement contains a magic number: return rangesData.Split ('#').Select (rangeCode => rangeCode.Split ('|')).Where (splitStrings => splitStrings.Length > 2 && !(int.Parse (splitStrings [0]) == 0 && int.Parse (splitStrings [1]) == 0 && splitStrings [2] == "0")).Select (splitStrings => new Range {  	From = int.Parse (splitStrings [0])'  	PriceInCents = int.Parse (splitStrings [2])'  	To = splitStrings [1] == "*" || splitStrings [1] == "0" || splitStrings [1] == "" ? int.MaxValue : int.Parse (splitStrings [1])'  }).ToList ();  
Magic Number,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The following statement contains a magic number: if (orderInfo.OrderLines.Any ()) {  	// determine whether PricesAreIncludingVAT by comparing ProductRangePriceInCents with ProductRangePriceWithVatInCents  	var productInfo = orderInfo.OrderLines.First ().ProductInfo;  	#pragma  	orderInfo.PricesAreIncludingVAT = productInfo.ProductRangePriceInCents == productInfo.ProductRangePriceWithVatInCents;  	// sic!! legacy readback  	#pragma  }  
Magic Number,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The following statement contains a magic number: if (orderInfo.OrderLines.Any ()) {  	// determine whether PricesAreIncludingVAT by comparing ProductRangePriceInCents with ProductRangePriceWithVatInCents  	var productInfo = orderInfo.OrderLines.First ().ProductInfo;  	#pragma  	orderInfo.PricesAreIncludingVAT = productInfo.ProductRangePriceInCents == productInfo.ProductRangePriceWithVatInCents;  	// sic!! legacy readback  	#pragma  }  
Magic Number,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The following statement contains a magic number: if (orderInfo.OrderLines.Any ()) {  	// determine whether PricesAreIncludingVAT by comparing ProductRangePriceInCents with ProductRangePriceWithVatInCents  	var productInfo = orderInfo.OrderLines.First ().ProductInfo;  	#pragma  	orderInfo.PricesAreIncludingVAT = productInfo.ProductRangePriceInCents == productInfo.ProductRangePriceWithVatInCents;  	// sic!! legacy readback  	#pragma  }  
Magic Number,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The following statement contains a magic number: if (orderInfo.OrderLines.Any ()) {  	// determine whether PricesAreIncludingVAT by comparing ProductRangePriceInCents with ProductRangePriceWithVatInCents  	var productInfo = orderInfo.OrderLines.First ().ProductInfo;  	#pragma  	orderInfo.PricesAreIncludingVAT = productInfo.ProductRangePriceInCents == productInfo.ProductRangePriceWithVatInCents;  	// sic!! legacy readback  	#pragma  }  
Magic Number,uWebshop.Domain,OrderInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\OrderInfo.cs,CreateOrderInfoFromLegacyXmlString,The following statement contains a magic number: if (orderInfo.DiscountAmountInCents != 0 || orderInfo._discountAmount != null) {  	var discount = orderInfo.DiscountAmountInCents > 0 ? orderInfo.DiscountAmountInCents : (int)(orderInfo._discountAmount.GetValueOrDefault () * 100);  	discounts.Add (new OrderDTO.OrderDiscount (orderInfo.Localization) {  		DiscountType = DiscountType.Amount'  		DiscountValue = discount'  		RequiredItemIds = new List<int> ()'  		AffectedOrderlines = new List<int> ()'  		MemberGroups = new List<string> ()  	});  }  
Magic Number,uWebshop.Domain,ProductInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductInfo.cs,GetAmount,The following statement contains a magic number: if (saleDiscounted && DiscountExcludingVariants) {  	price = (int)((100 - (long)DiscountPercentage) * price) / 100 - DiscountAmountInCents;  }  
Magic Number,uWebshop.Domain,ProductInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductInfo.cs,GetAmount,The following statement contains a magic number: if (saleDiscounted && DiscountExcludingVariants) {  	price = (int)((100 - (long)DiscountPercentage) * price) / 100 - DiscountAmountInCents;  }  
Magic Number,uWebshop.Domain,ProductInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductInfo.cs,GetAmount,The following statement contains a magic number: price = (int)((100 - (long)DiscountPercentage) * price) / 100 - DiscountAmountInCents;  
Magic Number,uWebshop.Domain,ProductInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductInfo.cs,GetAmount,The following statement contains a magic number: price = (int)((100 - (long)DiscountPercentage) * price) / 100 - DiscountAmountInCents;  
Magic Number,uWebshop.Domain,ProductVariantInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductVariantInfo.cs,ApplyDiscount,The following statement contains a magic number: return (int)((100 - DiscountPercentage) * price) / 100 - DiscountAmountInCents;  
Magic Number,uWebshop.Domain,ProductVariantInfo,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\OrderInfo\ProductVariantInfo.cs,ApplyDiscount,The following statement contains a magic number: return (int)((100 - DiscountPercentage) * price) / 100 - DiscountAmountInCents;  
Magic Number,uWebshop.Domain,UwebshopConfiguration,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Configuration\UwebshopConfiguration.cs,UwebshopConfiguration,The following statement contains a magic number: OrdersCacheTimeoutMilliseconds = Common.Helpers.ParseInt (ConfigurationManager.AppSettings ["uwbsOrdersCacheTimeoutMilliseconds"]' 2000);  
Magic Number,uWebshop.Domain,CoreServices,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Core\RegisterTypes.cs,DependencyRegistrationOrder,The following statement contains a magic number: return base.DependencyRegistrationOrder () + 13;  
Magic Number,uWebshop.Domain.Model,Localization,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\Localization.cs,GetHashCode,The following statement contains a magic number: return CurrencyCode.GetHashCode () * 7 + StoreAlias.GetHashCode ();  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object:  	{  		var value = (BsonObject)t;  		_writer.Write (value.CalculatedSize);  		foreach (var property in value) {  			_writer.Write ((sbyte)property.Value.Type);  			WriteString ((string)property.Name.Value' property.Name.ByteCount' null);  			WriteTokenInternal (property.Value);  		}  		_writer.Write ((byte)0);  	}  	break;  case BsonType.Array:  	{  		var value = (BsonArray)t;  		_writer.Write (value.CalculatedSize);  		ulong index = 0;  		foreach (var c in value) {  			_writer.Write ((sbyte)c.Type);  			WriteString (index.ToString (CultureInfo.InvariantCulture)' MathUtils.IntLength (index)' null);  			WriteTokenInternal (c);  			index++;  		}  		_writer.Write ((byte)0);  	}  	break;  case BsonType.Integer:  	{  		var value = (BsonValue)t;  		_writer.Write (Convert.ToInt32 (value.Value' CultureInfo.InvariantCulture));  	}  	break;  case BsonType.Long:  	{  		var value = (BsonValue)t;  		_writer.Write (Convert.ToInt64 (value.Value' CultureInfo.InvariantCulture));  	}  	break;  case BsonType.Number:  	{  		var value = (BsonValue)t;  		_writer.Write (Convert.ToDouble (value.Value' CultureInfo.InvariantCulture));  	}  	break;  case BsonType.String:  	{  		var value = (BsonString)t;  		WriteString ((string)value.Value' value.ByteCount' value.CalculatedSize - 4);  	}  	break;  case BsonType.Boolean:  	{  		var value = (BsonValue)t;  		_writer.Write ((bool)value.Value);  	}  	break;  case BsonType.Null:  case BsonType.Undefined:  	break;  case BsonType.Date:  	{  		var value = (BsonValue)t;  		long ticks = 0;  		if (value.Value is DateTime) {  			var dateTime = (DateTime)value.Value;  			if (DateTimeKindHandling == DateTimeKind.Utc)  				dateTime = dateTime.ToUniversalTime ();  			else if (DateTimeKindHandling == DateTimeKind.Local)  				dateTime = dateTime.ToLocalTime ();  			ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks (dateTime' false);  		}   		#if !NET20  		else {  			var dateTimeOffset = (DateTimeOffset)value.Value;  			ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks (dateTimeOffset.UtcDateTime' dateTimeOffset.Offset);  		}  		#endif  		_writer.Write (ticks);  	}  	break;  case BsonType.Binary:  	{  		var value = (BsonBinary)t;  		var data = (byte[])value.Value;  		_writer.Write (data.Length);  		_writer.Write ((byte)value.BinaryType);  		_writer.Write (data);  	}  	break;  case BsonType.Oid:  	{  		var value = (BsonValue)t;  		var data = (byte[])value.Value;  		_writer.Write (data);  	}  	break;  case BsonType.Regex:  	{  		var value = (BsonRegex)t;  		WriteString ((string)value.Pattern.Value' value.Pattern.ByteCount' null);  		WriteString ((string)value.Options.Value' value.Options.ByteCount' null);  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The following statement contains a magic number: WriteString ((string)value.Value' value.ByteCount' value.CalculatedSize - 4);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: if (s != null) {  	if (_largeByteBuffer == null) {  		_largeByteBuffer = new byte[256];  	}  	if (byteCount <= 256) {  		Encoding.GetBytes (s' 0' s.Length' _largeByteBuffer' 0);  		_writer.Write (_largeByteBuffer' 0' byteCount);  	} else {  		byte[] bytes = Encoding.GetBytes (s);  		_writer.Write (bytes);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: if (s != null) {  	if (_largeByteBuffer == null) {  		_largeByteBuffer = new byte[256];  	}  	if (byteCount <= 256) {  		Encoding.GetBytes (s' 0' s.Length' _largeByteBuffer' 0);  		_writer.Write (_largeByteBuffer' 0' byteCount);  	} else {  		byte[] bytes = Encoding.GetBytes (s);  		_writer.Write (bytes);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: if (_largeByteBuffer == null) {  	_largeByteBuffer = new byte[256];  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: _largeByteBuffer = new byte[256];  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: if (byteCount <= 256) {  	Encoding.GetBytes (s' 0' s.Length' _largeByteBuffer' 0);  	_writer.Write (_largeByteBuffer' 0' byteCount);  } else {  	byte[] bytes = Encoding.GetBytes (s);  	_writer.Write (bytes);  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type) {  case BsonType.Object: {  	var value = (BsonObject)t;  	int bases = 4;  	foreach (var p in value) {  		int size = 1;  		size += CalculateSize (p.Name);  		size += CalculateSize (p.Value);  		bases += size;  	}  	bases += 1;  	value.CalculatedSize = bases;  	return bases;  }  case BsonType.Array: {  	var value = (BsonArray)t;  	int size = 4;  	ulong index = 0;  	foreach (var c in value) {  		size += 1;  		size += CalculateSize (MathUtils.IntLength (index));  		size += CalculateSize (c);  		index++;  	}  	size += 1;  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  case BsonType.Integer:  	return 4;  case BsonType.Long:  	return 8;  case BsonType.Number:  	return 8;  case BsonType.String: {  	var value = (BsonString)t;  	var s = (string)value.Value;  	value.ByteCount = (s != null) ? Encoding.GetByteCount (s) : 0;  	value.CalculatedSize = CalculateSizeWithLength (value.ByteCount' value.IncludeLength);  	return value.CalculatedSize;  }  case BsonType.Boolean:  	return 1;  case BsonType.Null:  case BsonType.Undefined:  	return 0;  case BsonType.Date:  	return 8;  case BsonType.Binary: {  	var value = (BsonBinary)t;  	var data = (byte[])value.Value;  	value.CalculatedSize = 4 + 1 + data.Length;  	return value.CalculatedSize;  }  case BsonType.Oid:  	return 12;  case BsonType.Regex: {  	var value = (BsonRegex)t;  	int size = 0;  	size += CalculateSize (value.Pattern);  	size += CalculateSize (value.Options);  	value.CalculatedSize = size;  	return value.CalculatedSize;  }  default:  	throw new ArgumentOutOfRangeException ("t"' "Unexpected token when writing BSON: {0}".FormatWith (CultureInfo.InvariantCulture' t.Type));  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: return 4;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: return 8;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: return 8;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: return 8;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: value.CalculatedSize = 4 + 1 + data.Length;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonBinaryWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: return 12;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonObjectId,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonObjectId.cs,BsonObjectId,The following statement contains a magic number: if (value.Length != 12)  	throw new ArgumentException ("An ObjectId must be 12 bytes"' "value");  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadReference,The following statement contains a magic number: switch (CurrentState) {  case State.ObjectStart: {  	SetToken (JsonToken.PropertyName' "$ref");  	_bsonReaderState = BsonReaderState.ReferenceRef;  	return true;  }  case State.Property: {  	if (_bsonReaderState == BsonReaderState.ReferenceRef) {  		SetToken (JsonToken.String' ReadLengthString ());  		return true;  	} else if (_bsonReaderState == BsonReaderState.ReferenceId) {  		SetToken (JsonToken.Bytes' ReadBytes (12));  		return true;  	} else {  		throw JsonReaderException.Create (this' "Unexpected state when reading BSON reference: " + _bsonReaderState);  	}  }  case State.PostValue: {  	if (_bsonReaderState == BsonReaderState.ReferenceRef) {  		SetToken (JsonToken.PropertyName' "$id");  		_bsonReaderState = BsonReaderState.ReferenceId;  		return true;  	} else if (_bsonReaderState == BsonReaderState.ReferenceId) {  		SetToken (JsonToken.EndObject);  		_bsonReaderState = BsonReaderState.Normal;  		return true;  	} else {  		throw JsonReaderException.Create (this' "Unexpected state when reading BSON reference: " + _bsonReaderState);  	}  }  default:  	throw JsonReaderException.Create (this' "Unexpected state when reading BSON reference: " + CurrentState);  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadReference,The following statement contains a magic number: if (_bsonReaderState == BsonReaderState.ReferenceRef) {  	SetToken (JsonToken.String' ReadLengthString ());  	return true;  } else if (_bsonReaderState == BsonReaderState.ReferenceId) {  	SetToken (JsonToken.Bytes' ReadBytes (12));  	return true;  } else {  	throw JsonReaderException.Create (this' "Unexpected state when reading BSON reference: " + _bsonReaderState);  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadReference,The following statement contains a magic number: if (_bsonReaderState == BsonReaderState.ReferenceId) {  	SetToken (JsonToken.Bytes' ReadBytes (12));  	return true;  } else {  	throw JsonReaderException.Create (this' "Unexpected state when reading BSON reference: " + _bsonReaderState);  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadReference,The following statement contains a magic number: SetToken (JsonToken.Bytes' ReadBytes (12));  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadType,The following statement contains a magic number: switch (type) {  case BsonType.Number:  	double d = ReadDouble ();  	if (_floatParseHandling == FloatParseHandling.Decimal)  		SetToken (JsonToken.Float' Convert.ToDecimal (d' CultureInfo.InvariantCulture));  	else  		SetToken (JsonToken.Float' d);  	break;  case BsonType.String:  case BsonType.Symbol:  	SetToken (JsonToken.String' ReadLengthString ());  	break;  case BsonType.Object: {  	SetToken (JsonToken.StartObject);  	var newContext = new ContainerContext (BsonType.Object);  	PushContext (newContext);  	newContext.Length = ReadInt32 ();  	break;  }  case BsonType.Array: {  	SetToken (JsonToken.StartArray);  	var newContext = new ContainerContext (BsonType.Array);  	PushContext (newContext);  	newContext.Length = ReadInt32 ();  	break;  }  case BsonType.Binary:  	SetToken (JsonToken.Bytes' ReadBinary ());  	break;  case BsonType.Undefined:  	SetToken (JsonToken.Undefined);  	break;  case BsonType.Oid:  	byte[] oid = ReadBytes (12);  	SetToken (JsonToken.Bytes' oid);  	break;  case BsonType.Boolean:  	bool b = Convert.ToBoolean (ReadByte ());  	SetToken (JsonToken.Boolean' b);  	break;  case BsonType.Date:  	long ticks = ReadInt64 ();  	DateTime utcDateTime = DateTimeUtils.ConvertJavaScriptTicksToDateTime (ticks);  	DateTime dateTime;  	switch (DateTimeKindHandling) {  	case DateTimeKind.Unspecified:  		dateTime = DateTime.SpecifyKind (utcDateTime' DateTimeKind.Unspecified);  		break;  	case DateTimeKind.Local:  		dateTime = utcDateTime.ToLocalTime ();  		break;  	default:  		dateTime = utcDateTime;  		break;  	}  	SetToken (JsonToken.Date' dateTime);  	break;  case BsonType.Null:  	SetToken (JsonToken.Null);  	break;  case BsonType.Regex:  	string expression = ReadString ();  	string modifiers = ReadString ();  	string regex = @"/" + expression + @"/" + modifiers;  	SetToken (JsonToken.String' regex);  	break;  case BsonType.Reference:  	SetToken (JsonToken.StartObject);  	_bsonReaderState = BsonReaderState.ReferenceStart;  	break;  case BsonType.Code:  	SetToken (JsonToken.String' ReadLengthString ());  	break;  case BsonType.CodeWScope:  	SetToken (JsonToken.StartObject);  	_bsonReaderState = BsonReaderState.CodeWScopeStart;  	break;  case BsonType.Integer:  	SetToken (JsonToken.Integer' (long)ReadInt32 ());  	break;  case BsonType.TimeStamp:  case BsonType.Long:  	SetToken (JsonToken.Integer' ReadInt64 ());  	break;  default:  	throw new ArgumentOutOfRangeException ("type"' "Unexpected BsonType value: " + type);  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadString,The following statement contains a magic number: do {  	int count = offset;  	byte b;  	while (count < MaxCharBytesSize && (b = _reader.ReadByte ()) > 0) {  		_byteBuffer [count++] = b;  	}  	int byteCount = count - offset;  	totalBytesRead += byteCount;  	if (count < MaxCharBytesSize && builder == null) {  		// pref optimization to avoid reading into a string builder  		// if string is smaller than the buffer then return it directly  		int length = Encoding.UTF8.GetChars (_byteBuffer' 0' byteCount' _charBuffer' 0);  		MovePosition (totalBytesRead + 1);  		return new string (_charBuffer' 0' length);  	} else {  		// calculate the index of the end of the last full character in the buffer  		int lastFullCharStop = GetLastFullCharStop (count - 1);  		int charCount = Encoding.UTF8.GetChars (_byteBuffer' 0' lastFullCharStop + 1' _charBuffer' 0);  		if (builder == null)  			builder = new StringBuilder (MaxCharBytesSize * 2);  		builder.Append (_charBuffer' 0' charCount);  		if (lastFullCharStop < byteCount - 1) {  			offset = byteCount - lastFullCharStop - 1;  			// copy left over multi byte characters to beginning of buffer for next iteration  			Array.Copy (_byteBuffer' lastFullCharStop + 1' _byteBuffer' 0' offset);  		} else {  			// reached end of string  			if (count < MaxCharBytesSize) {  				MovePosition (totalBytesRead + 1);  				return builder.ToString ();  			}  			offset = 0;  		}  	}  } while (true);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadString,The following statement contains a magic number: if (count < MaxCharBytesSize && builder == null) {  	// pref optimization to avoid reading into a string builder  	// if string is smaller than the buffer then return it directly  	int length = Encoding.UTF8.GetChars (_byteBuffer' 0' byteCount' _charBuffer' 0);  	MovePosition (totalBytesRead + 1);  	return new string (_charBuffer' 0' length);  } else {  	// calculate the index of the end of the last full character in the buffer  	int lastFullCharStop = GetLastFullCharStop (count - 1);  	int charCount = Encoding.UTF8.GetChars (_byteBuffer' 0' lastFullCharStop + 1' _charBuffer' 0);  	if (builder == null)  		builder = new StringBuilder (MaxCharBytesSize * 2);  	builder.Append (_charBuffer' 0' charCount);  	if (lastFullCharStop < byteCount - 1) {  		offset = byteCount - lastFullCharStop - 1;  		// copy left over multi byte characters to beginning of buffer for next iteration  		Array.Copy (_byteBuffer' lastFullCharStop + 1' _byteBuffer' 0' offset);  	} else {  		// reached end of string  		if (count < MaxCharBytesSize) {  			MovePosition (totalBytesRead + 1);  			return builder.ToString ();  		}  		offset = 0;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadString,The following statement contains a magic number: if (builder == null)  	builder = new StringBuilder (MaxCharBytesSize * 2);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadString,The following statement contains a magic number: builder = new StringBuilder (MaxCharBytesSize * 2);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: if (b >= SeqRange2 [0] && b <= SeqRange2 [1])  	return 2;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: return 2;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: if (b >= SeqRange3 [0] && b <= SeqRange3 [1])  	return 3;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: return 3;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: if (b >= SeqRange4 [0] && b <= SeqRange4 [1])  	return 4;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: return 4;  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadDouble,The following statement contains a magic number: MovePosition (8);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadInt32,The following statement contains a magic number: MovePosition (4);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonReader.cs,ReadInt64,The following statement contains a magic number: MovePosition (8);  
Magic Number,uWebshop.Newtonsoft.Json.Bson,BsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Bson\BsonWriter.cs,WriteObjectId,The following statement contains a magic number: if (value.Length != 12)  	throw JsonWriterException.Create (this' "An object id must be 12 bytes"' null);  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith ("xmlns"' StringComparison.Ordinal)) {  	if (attributeName.Length == 5) {  		prefix = string.Empty;  		return true;  	} else if (attributeName [5] == ':') {  		prefix = attributeName.Substring (6' attributeName.Length - 6);  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith ("xmlns"' StringComparison.Ordinal)) {  	if (attributeName.Length == 5) {  		prefix = string.Empty;  		return true;  	} else if (attributeName [5] == ':') {  		prefix = attributeName.Substring (6' attributeName.Length - 6);  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith ("xmlns"' StringComparison.Ordinal)) {  	if (attributeName.Length == 5) {  		prefix = string.Empty;  		return true;  	} else if (attributeName [5] == ':') {  		prefix = attributeName.Substring (6' attributeName.Length - 6);  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith ("xmlns"' StringComparison.Ordinal)) {  	if (attributeName.Length == 5) {  		prefix = string.Empty;  		return true;  	} else if (attributeName [5] == ':') {  		prefix = attributeName.Substring (6' attributeName.Length - 6);  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.Length == 5) {  	prefix = string.Empty;  	return true;  } else if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.Length == 5) {  	prefix = string.Empty;  	return true;  } else if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.Length == 5) {  	prefix = string.Empty;  	return true;  } else if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.Length == 5) {  	prefix = string.Empty;  	return true;  } else if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName [5] == ':') {  	prefix = attributeName.Substring (6' attributeName.Length - 6);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: prefix = attributeName.Substring (6' attributeName.Length - 6);  
Magic Number,uWebshop.Newtonsoft.Json.Converters,XmlNodeConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: prefix = attributeName.Substring (6' attributeName.Length - 6);  
Magic Number,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The following statement contains a magic number: using (StringWriter writer = StringUtils.CreateStringWriter (64)) {  	writer.Write ('"');  	DateTimeUtils.WriteDateTimeString (writer' updatedDateTime' format' null' CultureInfo.InvariantCulture);  	writer.Write ('"');  	return writer.ToString ();  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The following statement contains a magic number: using (StringWriter writer = StringUtils.CreateStringWriter (64)) {  	writer.Write ('"');  	DateTimeUtils.WriteDateTimeOffsetString (writer' value' format' null' CultureInfo.InvariantCulture);  	writer.Write ('"');  	return writer.ToString ();  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,JsonReader,The following statement contains a magic number: _stack = new List<JsonPosition> (4);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,JsonTextReader,The following statement contains a magic number: _chars = new char[1025];  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,GetBuffer,The following statement contains a magic number: if (_buffer == null) {  	_buffer = new StringBuffer (1025);  } else {  	_buffer.Position = 0;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,GetBuffer,The following statement contains a magic number: _buffer = new StringBuffer (1025);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ShiftBufferIfNeeded,The following statement contains a magic number: if (length - _charPos <= length * 0.1) {  	int count = _charsUsed - _charPos;  	if (count > 0)  		BlockCopyChars (_chars' _charPos' _chars' 0' count);  	_lineStartPos -= _charPos;  	_charPos = 0;  	_charsUsed = count;  	_chars [_charsUsed] = '\0';  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadData,The following statement contains a magic number: if (_charsUsed + charsRequired >= _chars.Length - 1) {  	if (append) {  		// copy to new array either double the size of the current or big enough to fit required content  		int newArrayLength = Math.Max (_chars.Length * 2' _charsUsed + charsRequired + 1);  		// increase the size of the buffer  		var dst = new char[newArrayLength];  		BlockCopyChars (_chars' 0' dst' 0' _chars.Length);  		_chars = dst;  	} else {  		int remainingCharCount = _charsUsed - _charPos;  		if (remainingCharCount + charsRequired + 1 >= _chars.Length) {  			// the remaining count plus the required is bigger than the current buffer size  			var dst = new char[remainingCharCount + charsRequired + 1];  			if (remainingCharCount > 0)  				BlockCopyChars (_chars' _charPos' dst' 0' remainingCharCount);  			_chars = dst;  		} else {  			// copy any remaining data to the beginning of the buffer if needed and reset positions  			if (remainingCharCount > 0)  				BlockCopyChars (_chars' _charPos' _chars' 0' remainingCharCount);  		}  		_lineStartPos -= _charPos;  		_charPos = 0;  		_charsUsed = remainingCharCount;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadData,The following statement contains a magic number: if (append) {  	// copy to new array either double the size of the current or big enough to fit required content  	int newArrayLength = Math.Max (_chars.Length * 2' _charsUsed + charsRequired + 1);  	// increase the size of the buffer  	var dst = new char[newArrayLength];  	BlockCopyChars (_chars' 0' dst' 0' _chars.Length);  	_chars = dst;  } else {  	int remainingCharCount = _charsUsed - _charPos;  	if (remainingCharCount + charsRequired + 1 >= _chars.Length) {  		// the remaining count plus the required is bigger than the current buffer size  		var dst = new char[remainingCharCount + charsRequired + 1];  		if (remainingCharCount > 0)  			BlockCopyChars (_chars' _charPos' dst' 0' remainingCharCount);  		_chars = dst;  	} else {  		// copy any remaining data to the beginning of the buffer if needed and reset positions  		if (remainingCharCount > 0)  			BlockCopyChars (_chars' _charPos' _chars' 0' remainingCharCount);  	}  	_lineStartPos -= _charPos;  	_charPos = 0;  	_charsUsed = remainingCharCount;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: while (true) {  	switch (_chars [charPos++]) {  	case '\0':  		if (_charsUsed == charPos - 1) {  			charPos--;  			if (ReadData (true) == 0) {  				_charPos = charPos;  				throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  			}  		}  		break;  	case '\\':  		_charPos = charPos;  		if (!EnsureChars (0' true)) {  			_charPos = charPos;  			throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  		}  		// start of escape sequence  		int escapeStartPos = charPos - 1;  		char currentChar = _chars [charPos];  		char writeChar;  		switch (currentChar) {  		case 'b':  			charPos++;  			writeChar = '\b';  			break;  		case 't':  			charPos++;  			writeChar = '\t';  			break;  		case 'n':  			charPos++;  			writeChar = '\n';  			break;  		case 'f':  			charPos++;  			writeChar = '\f';  			break;  		case 'r':  			charPos++;  			writeChar = '\r';  			break;  		case '\\':  			charPos++;  			writeChar = '\\';  			break;  		case '"':  		case '\'':  		case '/':  			writeChar = currentChar;  			charPos++;  			break;  		case 'u':  			charPos++;  			_charPos = charPos;  			writeChar = ParseUnicode ();  			if (StringUtils.IsLowSurrogate (writeChar)) {  				// low surrogate with no preceding high surrogate; this char is replaced  				writeChar = UnicodeReplacementChar;  			} else if (StringUtils.IsHighSurrogate (writeChar)) {  				bool anotherHighSurrogate;  				// loop for handling situations where there are multiple consecutive high surrogates  				do {  					anotherHighSurrogate = false;  					// potential start of a surrogate pair  					if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  						char highSurrogate = writeChar;  						_charPos += 2;  						writeChar = ParseUnicode ();  						if (StringUtils.IsLowSurrogate (writeChar)) {  							// a valid surrogate pair!  						} else if (StringUtils.IsHighSurrogate (writeChar)) {  							// another high surrogate; replace current and start check over  							highSurrogate = UnicodeReplacementChar;  							anotherHighSurrogate = true;  						} else {  							// high surrogate not followed by low surrogate; original char is replaced  							highSurrogate = UnicodeReplacementChar;  						}  						if (buffer == null)  							buffer = GetBuffer ();  						WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  						lastWritePosition = _charPos;  					} else {  						// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  						// replace high surrogate and continue on as usual  						writeChar = UnicodeReplacementChar;  					}  				} while (anotherHighSurrogate);  			}  			charPos = _charPos;  			break;  		default:  			charPos++;  			_charPos = charPos;  			throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar));  		}  		if (buffer == null)  			buffer = GetBuffer ();  		WriteCharToBuffer (buffer' writeChar' lastWritePosition' escapeStartPos);  		lastWritePosition = charPos;  		break;  	case StringUtils.CarriageReturn:  		_charPos = charPos - 1;  		ProcessCarriageReturn (true);  		charPos = _charPos;  		break;  	case StringUtils.LineFeed:  		_charPos = charPos - 1;  		ProcessLineFeed ();  		charPos = _charPos;  		break;  	case '"':  	case '\'':  		if (_chars [charPos - 1] == quote) {  			charPos--;  			if (initialPosition == lastWritePosition) {  				_stringReference = new StringReference (_chars' initialPosition' charPos - initialPosition);  			} else {  				if (buffer == null)  					buffer = GetBuffer ();  				if (charPos > lastWritePosition)  					buffer.Append (_chars' lastWritePosition' charPos - lastWritePosition);  				_stringReference = new StringReference (buffer.GetInternalBuffer ()' 0' buffer.Position);  			}  			charPos++;  			_charPos = charPos;  			return;  		}  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: while (true) {  	switch (_chars [charPos++]) {  	case '\0':  		if (_charsUsed == charPos - 1) {  			charPos--;  			if (ReadData (true) == 0) {  				_charPos = charPos;  				throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  			}  		}  		break;  	case '\\':  		_charPos = charPos;  		if (!EnsureChars (0' true)) {  			_charPos = charPos;  			throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  		}  		// start of escape sequence  		int escapeStartPos = charPos - 1;  		char currentChar = _chars [charPos];  		char writeChar;  		switch (currentChar) {  		case 'b':  			charPos++;  			writeChar = '\b';  			break;  		case 't':  			charPos++;  			writeChar = '\t';  			break;  		case 'n':  			charPos++;  			writeChar = '\n';  			break;  		case 'f':  			charPos++;  			writeChar = '\f';  			break;  		case 'r':  			charPos++;  			writeChar = '\r';  			break;  		case '\\':  			charPos++;  			writeChar = '\\';  			break;  		case '"':  		case '\'':  		case '/':  			writeChar = currentChar;  			charPos++;  			break;  		case 'u':  			charPos++;  			_charPos = charPos;  			writeChar = ParseUnicode ();  			if (StringUtils.IsLowSurrogate (writeChar)) {  				// low surrogate with no preceding high surrogate; this char is replaced  				writeChar = UnicodeReplacementChar;  			} else if (StringUtils.IsHighSurrogate (writeChar)) {  				bool anotherHighSurrogate;  				// loop for handling situations where there are multiple consecutive high surrogates  				do {  					anotherHighSurrogate = false;  					// potential start of a surrogate pair  					if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  						char highSurrogate = writeChar;  						_charPos += 2;  						writeChar = ParseUnicode ();  						if (StringUtils.IsLowSurrogate (writeChar)) {  							// a valid surrogate pair!  						} else if (StringUtils.IsHighSurrogate (writeChar)) {  							// another high surrogate; replace current and start check over  							highSurrogate = UnicodeReplacementChar;  							anotherHighSurrogate = true;  						} else {  							// high surrogate not followed by low surrogate; original char is replaced  							highSurrogate = UnicodeReplacementChar;  						}  						if (buffer == null)  							buffer = GetBuffer ();  						WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  						lastWritePosition = _charPos;  					} else {  						// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  						// replace high surrogate and continue on as usual  						writeChar = UnicodeReplacementChar;  					}  				} while (anotherHighSurrogate);  			}  			charPos = _charPos;  			break;  		default:  			charPos++;  			_charPos = charPos;  			throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar));  		}  		if (buffer == null)  			buffer = GetBuffer ();  		WriteCharToBuffer (buffer' writeChar' lastWritePosition' escapeStartPos);  		lastWritePosition = charPos;  		break;  	case StringUtils.CarriageReturn:  		_charPos = charPos - 1;  		ProcessCarriageReturn (true);  		charPos = _charPos;  		break;  	case StringUtils.LineFeed:  		_charPos = charPos - 1;  		ProcessLineFeed ();  		charPos = _charPos;  		break;  	case '"':  	case '\'':  		if (_chars [charPos - 1] == quote) {  			charPos--;  			if (initialPosition == lastWritePosition) {  				_stringReference = new StringReference (_chars' initialPosition' charPos - initialPosition);  			} else {  				if (buffer == null)  					buffer = GetBuffer ();  				if (charPos > lastWritePosition)  					buffer.Append (_chars' lastWritePosition' charPos - lastWritePosition);  				_stringReference = new StringReference (buffer.GetInternalBuffer ()' 0' buffer.Position);  			}  			charPos++;  			_charPos = charPos;  			return;  		}  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: switch (_chars [charPos++]) {  case '\0':  	if (_charsUsed == charPos - 1) {  		charPos--;  		if (ReadData (true) == 0) {  			_charPos = charPos;  			throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  		}  	}  	break;  case '\\':  	_charPos = charPos;  	if (!EnsureChars (0' true)) {  		_charPos = charPos;  		throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  	}  	// start of escape sequence  	int escapeStartPos = charPos - 1;  	char currentChar = _chars [charPos];  	char writeChar;  	switch (currentChar) {  	case 'b':  		charPos++;  		writeChar = '\b';  		break;  	case 't':  		charPos++;  		writeChar = '\t';  		break;  	case 'n':  		charPos++;  		writeChar = '\n';  		break;  	case 'f':  		charPos++;  		writeChar = '\f';  		break;  	case 'r':  		charPos++;  		writeChar = '\r';  		break;  	case '\\':  		charPos++;  		writeChar = '\\';  		break;  	case '"':  	case '\'':  	case '/':  		writeChar = currentChar;  		charPos++;  		break;  	case 'u':  		charPos++;  		_charPos = charPos;  		writeChar = ParseUnicode ();  		if (StringUtils.IsLowSurrogate (writeChar)) {  			// low surrogate with no preceding high surrogate; this char is replaced  			writeChar = UnicodeReplacementChar;  		} else if (StringUtils.IsHighSurrogate (writeChar)) {  			bool anotherHighSurrogate;  			// loop for handling situations where there are multiple consecutive high surrogates  			do {  				anotherHighSurrogate = false;  				// potential start of a surrogate pair  				if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  					char highSurrogate = writeChar;  					_charPos += 2;  					writeChar = ParseUnicode ();  					if (StringUtils.IsLowSurrogate (writeChar)) {  						// a valid surrogate pair!  					} else if (StringUtils.IsHighSurrogate (writeChar)) {  						// another high surrogate; replace current and start check over  						highSurrogate = UnicodeReplacementChar;  						anotherHighSurrogate = true;  					} else {  						// high surrogate not followed by low surrogate; original char is replaced  						highSurrogate = UnicodeReplacementChar;  					}  					if (buffer == null)  						buffer = GetBuffer ();  					WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  					lastWritePosition = _charPos;  				} else {  					// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  					// replace high surrogate and continue on as usual  					writeChar = UnicodeReplacementChar;  				}  			} while (anotherHighSurrogate);  		}  		charPos = _charPos;  		break;  	default:  		charPos++;  		_charPos = charPos;  		throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar));  	}  	if (buffer == null)  		buffer = GetBuffer ();  	WriteCharToBuffer (buffer' writeChar' lastWritePosition' escapeStartPos);  	lastWritePosition = charPos;  	break;  case StringUtils.CarriageReturn:  	_charPos = charPos - 1;  	ProcessCarriageReturn (true);  	charPos = _charPos;  	break;  case StringUtils.LineFeed:  	_charPos = charPos - 1;  	ProcessLineFeed ();  	charPos = _charPos;  	break;  case '"':  case '\'':  	if (_chars [charPos - 1] == quote) {  		charPos--;  		if (initialPosition == lastWritePosition) {  			_stringReference = new StringReference (_chars' initialPosition' charPos - initialPosition);  		} else {  			if (buffer == null)  				buffer = GetBuffer ();  			if (charPos > lastWritePosition)  				buffer.Append (_chars' lastWritePosition' charPos - lastWritePosition);  			_stringReference = new StringReference (buffer.GetInternalBuffer ()' 0' buffer.Position);  		}  		charPos++;  		_charPos = charPos;  		return;  	}  	break;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: switch (_chars [charPos++]) {  case '\0':  	if (_charsUsed == charPos - 1) {  		charPos--;  		if (ReadData (true) == 0) {  			_charPos = charPos;  			throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  		}  	}  	break;  case '\\':  	_charPos = charPos;  	if (!EnsureChars (0' true)) {  		_charPos = charPos;  		throw JsonReaderException.Create (this' "Unterminated string. Expected delimiter: {0}.".FormatWith (CultureInfo.InvariantCulture' quote));  	}  	// start of escape sequence  	int escapeStartPos = charPos - 1;  	char currentChar = _chars [charPos];  	char writeChar;  	switch (currentChar) {  	case 'b':  		charPos++;  		writeChar = '\b';  		break;  	case 't':  		charPos++;  		writeChar = '\t';  		break;  	case 'n':  		charPos++;  		writeChar = '\n';  		break;  	case 'f':  		charPos++;  		writeChar = '\f';  		break;  	case 'r':  		charPos++;  		writeChar = '\r';  		break;  	case '\\':  		charPos++;  		writeChar = '\\';  		break;  	case '"':  	case '\'':  	case '/':  		writeChar = currentChar;  		charPos++;  		break;  	case 'u':  		charPos++;  		_charPos = charPos;  		writeChar = ParseUnicode ();  		if (StringUtils.IsLowSurrogate (writeChar)) {  			// low surrogate with no preceding high surrogate; this char is replaced  			writeChar = UnicodeReplacementChar;  		} else if (StringUtils.IsHighSurrogate (writeChar)) {  			bool anotherHighSurrogate;  			// loop for handling situations where there are multiple consecutive high surrogates  			do {  				anotherHighSurrogate = false;  				// potential start of a surrogate pair  				if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  					char highSurrogate = writeChar;  					_charPos += 2;  					writeChar = ParseUnicode ();  					if (StringUtils.IsLowSurrogate (writeChar)) {  						// a valid surrogate pair!  					} else if (StringUtils.IsHighSurrogate (writeChar)) {  						// another high surrogate; replace current and start check over  						highSurrogate = UnicodeReplacementChar;  						anotherHighSurrogate = true;  					} else {  						// high surrogate not followed by low surrogate; original char is replaced  						highSurrogate = UnicodeReplacementChar;  					}  					if (buffer == null)  						buffer = GetBuffer ();  					WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  					lastWritePosition = _charPos;  				} else {  					// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  					// replace high surrogate and continue on as usual  					writeChar = UnicodeReplacementChar;  				}  			} while (anotherHighSurrogate);  		}  		charPos = _charPos;  		break;  	default:  		charPos++;  		_charPos = charPos;  		throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar));  	}  	if (buffer == null)  		buffer = GetBuffer ();  	WriteCharToBuffer (buffer' writeChar' lastWritePosition' escapeStartPos);  	lastWritePosition = charPos;  	break;  case StringUtils.CarriageReturn:  	_charPos = charPos - 1;  	ProcessCarriageReturn (true);  	charPos = _charPos;  	break;  case StringUtils.LineFeed:  	_charPos = charPos - 1;  	ProcessLineFeed ();  	charPos = _charPos;  	break;  case '"':  case '\'':  	if (_chars [charPos - 1] == quote) {  		charPos--;  		if (initialPosition == lastWritePosition) {  			_stringReference = new StringReference (_chars' initialPosition' charPos - initialPosition);  		} else {  			if (buffer == null)  				buffer = GetBuffer ();  			if (charPos > lastWritePosition)  				buffer.Append (_chars' lastWritePosition' charPos - lastWritePosition);  			_stringReference = new StringReference (buffer.GetInternalBuffer ()' 0' buffer.Position);  		}  		charPos++;  		_charPos = charPos;  		return;  	}  	break;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: switch (currentChar) {  case 'b':  	charPos++;  	writeChar = '\b';  	break;  case 't':  	charPos++;  	writeChar = '\t';  	break;  case 'n':  	charPos++;  	writeChar = '\n';  	break;  case 'f':  	charPos++;  	writeChar = '\f';  	break;  case 'r':  	charPos++;  	writeChar = '\r';  	break;  case '\\':  	charPos++;  	writeChar = '\\';  	break;  case '"':  case '\'':  case '/':  	writeChar = currentChar;  	charPos++;  	break;  case 'u':  	charPos++;  	_charPos = charPos;  	writeChar = ParseUnicode ();  	if (StringUtils.IsLowSurrogate (writeChar)) {  		// low surrogate with no preceding high surrogate; this char is replaced  		writeChar = UnicodeReplacementChar;  	} else if (StringUtils.IsHighSurrogate (writeChar)) {  		bool anotherHighSurrogate;  		// loop for handling situations where there are multiple consecutive high surrogates  		do {  			anotherHighSurrogate = false;  			// potential start of a surrogate pair  			if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  				char highSurrogate = writeChar;  				_charPos += 2;  				writeChar = ParseUnicode ();  				if (StringUtils.IsLowSurrogate (writeChar)) {  					// a valid surrogate pair!  				} else if (StringUtils.IsHighSurrogate (writeChar)) {  					// another high surrogate; replace current and start check over  					highSurrogate = UnicodeReplacementChar;  					anotherHighSurrogate = true;  				} else {  					// high surrogate not followed by low surrogate; original char is replaced  					highSurrogate = UnicodeReplacementChar;  				}  				if (buffer == null)  					buffer = GetBuffer ();  				WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  				lastWritePosition = _charPos;  			} else {  				// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  				// replace high surrogate and continue on as usual  				writeChar = UnicodeReplacementChar;  			}  		} while (anotherHighSurrogate);  	}  	charPos = _charPos;  	break;  default:  	charPos++;  	_charPos = charPos;  	throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar));  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: switch (currentChar) {  case 'b':  	charPos++;  	writeChar = '\b';  	break;  case 't':  	charPos++;  	writeChar = '\t';  	break;  case 'n':  	charPos++;  	writeChar = '\n';  	break;  case 'f':  	charPos++;  	writeChar = '\f';  	break;  case 'r':  	charPos++;  	writeChar = '\r';  	break;  case '\\':  	charPos++;  	writeChar = '\\';  	break;  case '"':  case '\'':  case '/':  	writeChar = currentChar;  	charPos++;  	break;  case 'u':  	charPos++;  	_charPos = charPos;  	writeChar = ParseUnicode ();  	if (StringUtils.IsLowSurrogate (writeChar)) {  		// low surrogate with no preceding high surrogate; this char is replaced  		writeChar = UnicodeReplacementChar;  	} else if (StringUtils.IsHighSurrogate (writeChar)) {  		bool anotherHighSurrogate;  		// loop for handling situations where there are multiple consecutive high surrogates  		do {  			anotherHighSurrogate = false;  			// potential start of a surrogate pair  			if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  				char highSurrogate = writeChar;  				_charPos += 2;  				writeChar = ParseUnicode ();  				if (StringUtils.IsLowSurrogate (writeChar)) {  					// a valid surrogate pair!  				} else if (StringUtils.IsHighSurrogate (writeChar)) {  					// another high surrogate; replace current and start check over  					highSurrogate = UnicodeReplacementChar;  					anotherHighSurrogate = true;  				} else {  					// high surrogate not followed by low surrogate; original char is replaced  					highSurrogate = UnicodeReplacementChar;  				}  				if (buffer == null)  					buffer = GetBuffer ();  				WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  				lastWritePosition = _charPos;  			} else {  				// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  				// replace high surrogate and continue on as usual  				writeChar = UnicodeReplacementChar;  			}  		} while (anotherHighSurrogate);  	}  	charPos = _charPos;  	break;  default:  	charPos++;  	_charPos = charPos;  	throw JsonReaderException.Create (this' "Bad JSON escape sequence: {0}.".FormatWith (CultureInfo.InvariantCulture' @"\" + currentChar));  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: if (StringUtils.IsLowSurrogate (writeChar)) {  	// low surrogate with no preceding high surrogate; this char is replaced  	writeChar = UnicodeReplacementChar;  } else if (StringUtils.IsHighSurrogate (writeChar)) {  	bool anotherHighSurrogate;  	// loop for handling situations where there are multiple consecutive high surrogates  	do {  		anotherHighSurrogate = false;  		// potential start of a surrogate pair  		if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  			char highSurrogate = writeChar;  			_charPos += 2;  			writeChar = ParseUnicode ();  			if (StringUtils.IsLowSurrogate (writeChar)) {  				// a valid surrogate pair!  			} else if (StringUtils.IsHighSurrogate (writeChar)) {  				// another high surrogate; replace current and start check over  				highSurrogate = UnicodeReplacementChar;  				anotherHighSurrogate = true;  			} else {  				// high surrogate not followed by low surrogate; original char is replaced  				highSurrogate = UnicodeReplacementChar;  			}  			if (buffer == null)  				buffer = GetBuffer ();  			WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  			lastWritePosition = _charPos;  		} else {  			// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  			// replace high surrogate and continue on as usual  			writeChar = UnicodeReplacementChar;  		}  	} while (anotherHighSurrogate);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: if (StringUtils.IsLowSurrogate (writeChar)) {  	// low surrogate with no preceding high surrogate; this char is replaced  	writeChar = UnicodeReplacementChar;  } else if (StringUtils.IsHighSurrogate (writeChar)) {  	bool anotherHighSurrogate;  	// loop for handling situations where there are multiple consecutive high surrogates  	do {  		anotherHighSurrogate = false;  		// potential start of a surrogate pair  		if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  			char highSurrogate = writeChar;  			_charPos += 2;  			writeChar = ParseUnicode ();  			if (StringUtils.IsLowSurrogate (writeChar)) {  				// a valid surrogate pair!  			} else if (StringUtils.IsHighSurrogate (writeChar)) {  				// another high surrogate; replace current and start check over  				highSurrogate = UnicodeReplacementChar;  				anotherHighSurrogate = true;  			} else {  				// high surrogate not followed by low surrogate; original char is replaced  				highSurrogate = UnicodeReplacementChar;  			}  			if (buffer == null)  				buffer = GetBuffer ();  			WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  			lastWritePosition = _charPos;  		} else {  			// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  			// replace high surrogate and continue on as usual  			writeChar = UnicodeReplacementChar;  		}  	} while (anotherHighSurrogate);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: if (StringUtils.IsHighSurrogate (writeChar)) {  	bool anotherHighSurrogate;  	// loop for handling situations where there are multiple consecutive high surrogates  	do {  		anotherHighSurrogate = false;  		// potential start of a surrogate pair  		if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  			char highSurrogate = writeChar;  			_charPos += 2;  			writeChar = ParseUnicode ();  			if (StringUtils.IsLowSurrogate (writeChar)) {  				// a valid surrogate pair!  			} else if (StringUtils.IsHighSurrogate (writeChar)) {  				// another high surrogate; replace current and start check over  				highSurrogate = UnicodeReplacementChar;  				anotherHighSurrogate = true;  			} else {  				// high surrogate not followed by low surrogate; original char is replaced  				highSurrogate = UnicodeReplacementChar;  			}  			if (buffer == null)  				buffer = GetBuffer ();  			WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  			lastWritePosition = _charPos;  		} else {  			// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  			// replace high surrogate and continue on as usual  			writeChar = UnicodeReplacementChar;  		}  	} while (anotherHighSurrogate);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: if (StringUtils.IsHighSurrogate (writeChar)) {  	bool anotherHighSurrogate;  	// loop for handling situations where there are multiple consecutive high surrogates  	do {  		anotherHighSurrogate = false;  		// potential start of a surrogate pair  		if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  			char highSurrogate = writeChar;  			_charPos += 2;  			writeChar = ParseUnicode ();  			if (StringUtils.IsLowSurrogate (writeChar)) {  				// a valid surrogate pair!  			} else if (StringUtils.IsHighSurrogate (writeChar)) {  				// another high surrogate; replace current and start check over  				highSurrogate = UnicodeReplacementChar;  				anotherHighSurrogate = true;  			} else {  				// high surrogate not followed by low surrogate; original char is replaced  				highSurrogate = UnicodeReplacementChar;  			}  			if (buffer == null)  				buffer = GetBuffer ();  			WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  			lastWritePosition = _charPos;  		} else {  			// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  			// replace high surrogate and continue on as usual  			writeChar = UnicodeReplacementChar;  		}  	} while (anotherHighSurrogate);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: do {  	anotherHighSurrogate = false;  	// potential start of a surrogate pair  	if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  		char highSurrogate = writeChar;  		_charPos += 2;  		writeChar = ParseUnicode ();  		if (StringUtils.IsLowSurrogate (writeChar)) {  			// a valid surrogate pair!  		} else if (StringUtils.IsHighSurrogate (writeChar)) {  			// another high surrogate; replace current and start check over  			highSurrogate = UnicodeReplacementChar;  			anotherHighSurrogate = true;  		} else {  			// high surrogate not followed by low surrogate; original char is replaced  			highSurrogate = UnicodeReplacementChar;  		}  		if (buffer == null)  			buffer = GetBuffer ();  		WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  		lastWritePosition = _charPos;  	} else {  		// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  		// replace high surrogate and continue on as usual  		writeChar = UnicodeReplacementChar;  	}  } while (anotherHighSurrogate);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: do {  	anotherHighSurrogate = false;  	// potential start of a surrogate pair  	if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  		char highSurrogate = writeChar;  		_charPos += 2;  		writeChar = ParseUnicode ();  		if (StringUtils.IsLowSurrogate (writeChar)) {  			// a valid surrogate pair!  		} else if (StringUtils.IsHighSurrogate (writeChar)) {  			// another high surrogate; replace current and start check over  			highSurrogate = UnicodeReplacementChar;  			anotherHighSurrogate = true;  		} else {  			// high surrogate not followed by low surrogate; original char is replaced  			highSurrogate = UnicodeReplacementChar;  		}  		if (buffer == null)  			buffer = GetBuffer ();  		WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  		lastWritePosition = _charPos;  	} else {  		// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  		// replace high surrogate and continue on as usual  		writeChar = UnicodeReplacementChar;  	}  } while (anotherHighSurrogate);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  	char highSurrogate = writeChar;  	_charPos += 2;  	writeChar = ParseUnicode ();  	if (StringUtils.IsLowSurrogate (writeChar)) {  		// a valid surrogate pair!  	} else if (StringUtils.IsHighSurrogate (writeChar)) {  		// another high surrogate; replace current and start check over  		highSurrogate = UnicodeReplacementChar;  		anotherHighSurrogate = true;  	} else {  		// high surrogate not followed by low surrogate; original char is replaced  		highSurrogate = UnicodeReplacementChar;  	}  	if (buffer == null)  		buffer = GetBuffer ();  	WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  	lastWritePosition = _charPos;  } else {  	// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  	// replace high surrogate and continue on as usual  	writeChar = UnicodeReplacementChar;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: if (EnsureChars (2' true) && _chars [_charPos] == '\\' && _chars [_charPos + 1] == 'u') {  	char highSurrogate = writeChar;  	_charPos += 2;  	writeChar = ParseUnicode ();  	if (StringUtils.IsLowSurrogate (writeChar)) {  		// a valid surrogate pair!  	} else if (StringUtils.IsHighSurrogate (writeChar)) {  		// another high surrogate; replace current and start check over  		highSurrogate = UnicodeReplacementChar;  		anotherHighSurrogate = true;  	} else {  		// high surrogate not followed by low surrogate; original char is replaced  		highSurrogate = UnicodeReplacementChar;  	}  	if (buffer == null)  		buffer = GetBuffer ();  	WriteCharToBuffer (buffer' highSurrogate' lastWritePosition' escapeStartPos);  	lastWritePosition = _charPos;  } else {  	// there are not enough remaining chars for the low surrogate or is not follow by unicode sequence  	// replace high surrogate and continue on as usual  	writeChar = UnicodeReplacementChar;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: _charPos += 2;  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: if (EnsureChars (4' true)) {  	var hexValues = new string (_chars' _charPos' 4);  	char hexChar = Convert.ToChar (int.Parse (hexValues' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo));  	writeChar = hexChar;  	_charPos += 4;  } else {  	throw JsonReaderException.Create (this' "Unexpected end while parsing unicode character.");  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: if (EnsureChars (4' true)) {  	var hexValues = new string (_chars' _charPos' 4);  	char hexChar = Convert.ToChar (int.Parse (hexValues' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo));  	writeChar = hexChar;  	_charPos += 4;  } else {  	throw JsonReaderException.Create (this' "Unexpected end while parsing unicode character.");  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: if (EnsureChars (4' true)) {  	var hexValues = new string (_chars' _charPos' 4);  	char hexChar = Convert.ToChar (int.Parse (hexValues' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo));  	writeChar = hexChar;  	_charPos += 4;  } else {  	throw JsonReaderException.Create (this' "Unexpected end while parsing unicode character.");  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: _charPos += 4;  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  		numberValue = integer;  	} else {  		numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  	}  	numberType = JsonToken.Integer;  } else if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = firstChar - 48;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  	numberValue = integer;  } else {  	numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = firstChar - 48;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  	numberValue = integer;  } else {  	numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = firstChar - 48;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  	numberValue = integer;  } else {  	numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: numberValue = firstChar - 48;  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  	numberValue = integer;  } else {  	numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	int integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32 (number' 16) : Convert.ToInt32 (number' 8);  	numberValue = integer;  } else {  	numberValue = ConvertUtils.Int32Parse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsDecimal) {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (decimal)firstChar - 48;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		// decimal.Parse doesn't support parsing hexadecimal values  		long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberValue = Convert.ToDecimal (integer);  	} else {  		string number = _stringReference.ToString ();  		numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  	}  	numberType = JsonToken.Float;  } else {  	if (singleDigit) {  		// digit char values start at 48  		numberValue = (long)firstChar - 48;  		numberType = JsonToken.Integer;  	} else if (nonBase10) {  		string number = _stringReference.ToString ();  		numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  		numberType = JsonToken.Integer;  	} else {  		long value;  		ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  		if (parseResult == ParseResult.Success) {  			numberValue = value;  			numberType = JsonToken.Integer;  		} else if (parseResult == ParseResult.Invalid) {  			string number = _stringReference.ToString ();  			if (_floatParseHandling == FloatParseHandling.Decimal)  				numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  			else  				numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Float;  		} else if (parseResult == ParseResult.Overflow) {  			#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  			string number = _stringReference.ToString ();  			numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  			numberType = JsonToken.Integer;  			#else  				// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  		} else {  			throw JsonReaderException.Create (this' "Unknown error parsing integer.");  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = (decimal)firstChar - 48;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberValue = Convert.ToDecimal (integer);  } else {  	string number = _stringReference.ToString ();  	numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = (decimal)firstChar - 48;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberValue = Convert.ToDecimal (integer);  } else {  	string number = _stringReference.ToString ();  	numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = (decimal)firstChar - 48;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberValue = Convert.ToDecimal (integer);  } else {  	string number = _stringReference.ToString ();  	numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: numberValue = (decimal)firstChar - 48;  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberValue = Convert.ToDecimal (integer);  } else {  	string number = _stringReference.ToString ();  	numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (nonBase10) {  	string number = _stringReference.ToString ();  	// decimal.Parse doesn't support parsing hexadecimal values  	long integer = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberValue = Convert.ToDecimal (integer);  } else {  	string number = _stringReference.ToString ();  	numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = (long)firstChar - 48;  	numberType = JsonToken.Integer;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberType = JsonToken.Integer;  } else {  	long value;  	ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  	if (parseResult == ParseResult.Success) {  		numberValue = value;  		numberType = JsonToken.Integer;  	} else if (parseResult == ParseResult.Invalid) {  		string number = _stringReference.ToString ();  		if (_floatParseHandling == FloatParseHandling.Decimal)  			numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  		else  			numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Float;  	} else if (parseResult == ParseResult.Overflow) {  		#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  		string number = _stringReference.ToString ();  		numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Integer;  		#else  			// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  	} else {  		throw JsonReaderException.Create (this' "Unknown error parsing integer.");  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = (long)firstChar - 48;  	numberType = JsonToken.Integer;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberType = JsonToken.Integer;  } else {  	long value;  	ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  	if (parseResult == ParseResult.Success) {  		numberValue = value;  		numberType = JsonToken.Integer;  	} else if (parseResult == ParseResult.Invalid) {  		string number = _stringReference.ToString ();  		if (_floatParseHandling == FloatParseHandling.Decimal)  			numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  		else  			numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Float;  	} else if (parseResult == ParseResult.Overflow) {  		#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  		string number = _stringReference.ToString ();  		numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Integer;  		#else  			// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  	} else {  		throw JsonReaderException.Create (this' "Unknown error parsing integer.");  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (singleDigit) {  	// digit char values start at 48  	numberValue = (long)firstChar - 48;  	numberType = JsonToken.Integer;  } else if (nonBase10) {  	string number = _stringReference.ToString ();  	numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberType = JsonToken.Integer;  } else {  	long value;  	ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  	if (parseResult == ParseResult.Success) {  		numberValue = value;  		numberType = JsonToken.Integer;  	} else if (parseResult == ParseResult.Invalid) {  		string number = _stringReference.ToString ();  		if (_floatParseHandling == FloatParseHandling.Decimal)  			numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  		else  			numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Float;  	} else if (parseResult == ParseResult.Overflow) {  		#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  		string number = _stringReference.ToString ();  		numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Integer;  		#else  			// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  	} else {  		throw JsonReaderException.Create (this' "Unknown error parsing integer.");  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: numberValue = (long)firstChar - 48;  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (nonBase10) {  	string number = _stringReference.ToString ();  	numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberType = JsonToken.Integer;  } else {  	long value;  	ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  	if (parseResult == ParseResult.Success) {  		numberValue = value;  		numberType = JsonToken.Integer;  	} else if (parseResult == ParseResult.Invalid) {  		string number = _stringReference.ToString ();  		if (_floatParseHandling == FloatParseHandling.Decimal)  			numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  		else  			numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Float;  	} else if (parseResult == ParseResult.Overflow) {  		#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  		string number = _stringReference.ToString ();  		numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Integer;  		#else  			// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  	} else {  		throw JsonReaderException.Create (this' "Unknown error parsing integer.");  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (nonBase10) {  	string number = _stringReference.ToString ();  	numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  	numberType = JsonToken.Integer;  } else {  	long value;  	ParseResult parseResult = ConvertUtils.Int64TryParse (_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);  	if (parseResult == ParseResult.Success) {  		numberValue = value;  		numberType = JsonToken.Integer;  	} else if (parseResult == ParseResult.Invalid) {  		string number = _stringReference.ToString ();  		if (_floatParseHandling == FloatParseHandling.Decimal)  			numberValue = decimal.Parse (number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture);  		else  			numberValue = Convert.ToDouble (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Float;  	} else if (parseResult == ParseResult.Overflow) {  		#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  		string number = _stringReference.ToString ();  		numberValue = BigInteger.Parse (number' CultureInfo.InvariantCulture);  		numberType = JsonToken.Integer;  		#else  			// todo - validate number was a valid integer to make sure overflow was the reason for failure             throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); #endif  	} else {  		throw JsonReaderException.Create (this' "Unknown error parsing integer.");  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: numberValue = number.StartsWith ("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64 (number' 16) : Convert.ToInt64 (number' 8);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,JsonTextWriter,The following statement contains a magic number: _indentation = 2;  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIndent,The following statement contains a magic number: while (currentIndentCount > 0) {  	// write up to a max of 10 characters at once to avoid creating too many new strings  	int writeCount = Math.Min (currentIndentCount' 10);  	_writer.Write (new string (_indentChar' writeCount));  	currentIndentCount -= writeCount;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,EnsureWriteBuffer,The following statement contains a magic number: if (_writeBuffer == null)  	_writeBuffer = new char[64];  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,EnsureWriteBuffer,The following statement contains a magic number: _writeBuffer = new char[64];  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (value >= 0 && value <= 9) {  	_writer.Write ((char)('0' + value));  } else {  	ulong uvalue = (value < 0) ? (ulong)-value : (ulong)value;  	if (value < 0)  		_writer.Write ('-');  	WriteIntegerValue (uvalue);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (uvalue <= 9) {  	_writer.Write ((char)('0' + uvalue));  } else {  	int totalLength = MathUtils.IntLength (uvalue);  	int length = 0;  	do {  		_writeBuffer [totalLength - ++length] = (char)('0' + (uvalue % 10));  		uvalue /= 10;  	} while (uvalue != 0);  	_writer.Write (_writeBuffer' 0' length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (uvalue <= 9) {  	_writer.Write ((char)('0' + uvalue));  } else {  	int totalLength = MathUtils.IntLength (uvalue);  	int length = 0;  	do {  		_writeBuffer [totalLength - ++length] = (char)('0' + (uvalue % 10));  		uvalue /= 10;  	} while (uvalue != 0);  	_writer.Write (_writeBuffer' 0' length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (uvalue <= 9) {  	_writer.Write ((char)('0' + uvalue));  } else {  	int totalLength = MathUtils.IntLength (uvalue);  	int length = 0;  	do {  		_writeBuffer [totalLength - ++length] = (char)('0' + (uvalue % 10));  		uvalue /= 10;  	} while (uvalue != 0);  	_writer.Write (_writeBuffer' 0' length);  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: do {  	_writeBuffer [totalLength - ++length] = (char)('0' + (uvalue % 10));  	uvalue /= 10;  } while (uvalue != 0);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: do {  	_writeBuffer [totalLength - ++length] = (char)('0' + (uvalue % 10));  	uvalue /= 10;  } while (uvalue != 0);  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: _writeBuffer [totalLength - ++length] = (char)('0' + (uvalue % 10));  
Magic Number,uWebshop.Newtonsoft.Json,JsonTextWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: uvalue /= 10;  
Magic Number,uWebshop.Newtonsoft.Json,JsonValidatingReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonValidatingReader.cs,IsZero,The following statement contains a magic number: return Math.Abs (value) < 10.0 * epsilon;  
Magic Number,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,JsonWriter,The following statement contains a magic number: _stack = new List<JsonPosition> (4);  
Magic Number,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: if (_currentPosition.Type == type) {  	levelsToComplete = 1;  } else {  	int top = Top - 2;  	for (int i = top; i >= 0; i--) {  		int currentLevel = top - i;  		if (_stack [currentLevel].Type == type) {  			levelsToComplete = i + 2;  			break;  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: if (_currentPosition.Type == type) {  	levelsToComplete = 1;  } else {  	int top = Top - 2;  	for (int i = top; i >= 0; i--) {  		int currentLevel = top - i;  		if (_stack [currentLevel].Type == type) {  			levelsToComplete = i + 2;  			break;  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: for (int i = top; i >= 0; i--) {  	int currentLevel = top - i;  	if (_stack [currentLevel].Type == type) {  		levelsToComplete = i + 2;  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: if (_stack [currentLevel].Type == type) {  	levelsToComplete = i + 2;  	break;  }  
Magic Number,uWebshop.Newtonsoft.Json,JsonWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: levelsToComplete = i + 2;  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The following statement contains a magic number: if (attributeType == typeof(OnErrorAttribute)) {  	if (parameters == null || parameters.Length != 2 || parameters [0].ParameterType != typeof(StreamingContext) || parameters [1].ParameterType != typeof(ErrorContext))  		throw new JsonException ("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (method.DeclaringType)' method' typeof(StreamingContext)' typeof(ErrorContext)));  } else {  	if (parameters == null || parameters.Length != 1 || parameters [0].ParameterType != typeof(StreamingContext))  		throw new JsonException ("Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (method.DeclaringType)' method' typeof(StreamingContext)));  }  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,DefaultContractResolver,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultContractResolver.cs,IsValidCallback,The following statement contains a magic number: if (parameters == null || parameters.Length != 2 || parameters [0].ParameterType != typeof(StreamingContext) || parameters [1].ParameterType != typeof(ErrorContext))  	throw new JsonException ("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith (CultureInfo.InvariantCulture' GetClrTypeFullName (method.DeclaringType)' method' typeof(StreamingContext)' typeof(ErrorContext)));  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The following statement contains a magic number: if (assemblyName != null) {  	Assembly assembly;  	#if !(SILVERLIGHT || NETFX_CORE || PORTABLE40 || PORTABLE)  	// look' I don't like using obsolete methods as much as you do but this is the only way  	// Assembly.Load won't check the GAC for a partial name  	#pragma  	assembly = Assembly.LoadWithPartialName (assemblyName);  	#pragma  	#elif NETFX_CORE || PORTABLE  	        assembly = Assembly.Load(new AssemblyName(assemblyName)); #else  	#        assembly = Assembly.Load(assemblyName); #endif  	#if !(PORTABLE40 || PORTABLE || NETFX_CORE)  	if (assembly == null) {  		// will find assemblies loaded with Assembly.LoadFile outside of the main directory  		Assembly[] loadedAssemblies = AppDomain.CurrentDomain.GetAssemblies ();  		foreach (var a in loadedAssemblies) {  			if (a.FullName == assemblyName) {  				assembly = a;  				break;  			}  		}  	}  	#endif  	if (assembly == null)  		throw new JsonSerializationException ("Could not load assembly '{0}'.".FormatWith (CultureInfo.InvariantCulture' assemblyName));  	Type type = assembly.GetType (typeName);  	if (type == null)  		throw new JsonSerializationException ("Could not find type '{0}' in assembly '{1}'.".FormatWith (CultureInfo.InvariantCulture' typeName' assembly.FullName));  	return type;  } else {  	return Type.GetType (typeName);  }  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The following statement contains a magic number: if (assemblyName != null) {  	Assembly assembly;  	#if !(SILVERLIGHT || NETFX_CORE || PORTABLE40 || PORTABLE)  	// look' I don't like using obsolete methods as much as you do but this is the only way  	// Assembly.Load won't check the GAC for a partial name  	#pragma  	assembly = Assembly.LoadWithPartialName (assemblyName);  	#pragma  	#elif NETFX_CORE || PORTABLE  	        assembly = Assembly.Load(new AssemblyName(assemblyName)); #else  	#        assembly = Assembly.Load(assemblyName); #endif  	#if !(PORTABLE40 || PORTABLE || NETFX_CORE)  	if (assembly == null) {  		// will find assemblies loaded with Assembly.LoadFile outside of the main directory  		Assembly[] loadedAssemblies = AppDomain.CurrentDomain.GetAssemblies ();  		foreach (var a in loadedAssemblies) {  			if (a.FullName == assemblyName) {  				assembly = a;  				break;  			}  		}  	}  	#endif  	if (assembly == null)  		throw new JsonSerializationException ("Could not load assembly '{0}'.".FormatWith (CultureInfo.InvariantCulture' assemblyName));  	Type type = assembly.GetType (typeName);  	if (type == null)  		throw new JsonSerializationException ("Could not find type '{0}' in assembly '{1}'.".FormatWith (CultureInfo.InvariantCulture' typeName' assembly.FullName));  	return type;  } else {  	return Type.GetType (typeName);  }  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The following statement contains a magic number: if (assemblyName != null) {  	Assembly assembly;  	#if !(SILVERLIGHT || NETFX_CORE || PORTABLE40 || PORTABLE)  	// look' I don't like using obsolete methods as much as you do but this is the only way  	// Assembly.Load won't check the GAC for a partial name  	#pragma  	assembly = Assembly.LoadWithPartialName (assemblyName);  	#pragma  	#elif NETFX_CORE || PORTABLE  	        assembly = Assembly.Load(new AssemblyName(assemblyName)); #else  	#        assembly = Assembly.Load(assemblyName); #endif  	#if !(PORTABLE40 || PORTABLE || NETFX_CORE)  	if (assembly == null) {  		// will find assemblies loaded with Assembly.LoadFile outside of the main directory  		Assembly[] loadedAssemblies = AppDomain.CurrentDomain.GetAssemblies ();  		foreach (var a in loadedAssemblies) {  			if (a.FullName == assemblyName) {  				assembly = a;  				break;  			}  		}  	}  	#endif  	if (assembly == null)  		throw new JsonSerializationException ("Could not load assembly '{0}'.".FormatWith (CultureInfo.InvariantCulture' assemblyName));  	Type type = assembly.GetType (typeName);  	if (type == null)  		throw new JsonSerializationException ("Could not find type '{0}' in assembly '{1}'.".FormatWith (CultureInfo.InvariantCulture' typeName' assembly.FullName));  	return type;  } else {  	return Type.GetType (typeName);  }  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,DefaultSerializationBinder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The following statement contains a magic number: if (assemblyName != null) {  	Assembly assembly;  	#if !(SILVERLIGHT || NETFX_CORE || PORTABLE40 || PORTABLE)  	// look' I don't like using obsolete methods as much as you do but this is the only way  	// Assembly.Load won't check the GAC for a partial name  	#pragma  	assembly = Assembly.LoadWithPartialName (assemblyName);  	#pragma  	#elif NETFX_CORE || PORTABLE  	        assembly = Assembly.Load(new AssemblyName(assemblyName)); #else  	#        assembly = Assembly.Load(assemblyName); #endif  	#if !(PORTABLE40 || PORTABLE || NETFX_CORE)  	if (assembly == null) {  		// will find assemblies loaded with Assembly.LoadFile outside of the main directory  		Assembly[] loadedAssemblies = AppDomain.CurrentDomain.GetAssemblies ();  		foreach (var a in loadedAssemblies) {  			if (a.FullName == assemblyName) {  				assembly = a;  				break;  			}  		}  	}  	#endif  	if (assembly == null)  		throw new JsonSerializationException ("Could not load assembly '{0}'.".FormatWith (CultureInfo.InvariantCulture' assemblyName));  	Type type = assembly.GetType (typeName);  	if (type == null)  		throw new JsonSerializationException ("Could not find type '{0}' in assembly '{1}'.".FormatWith (CultureInfo.InvariantCulture' typeName' assembly.FullName));  	return type;  } else {  	return Type.GetType (typeName);  }  
Magic Number,uWebshop.Newtonsoft.Json.Serialization,MemoryTraceWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\MemoryTraceWriter.cs,Trace,The following statement contains a magic number: if (_traceMessages.Count >= 1000)  	_traceMessages.Dequeue ();  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0) {  	int leftOverBytesCount = _leftOverBytesCount;  	while (leftOverBytesCount < 3 && count > 0) {  		_leftOverBytes [leftOverBytesCount++] = buffer [index++];  		count--;  	}  	if (count == 0 && leftOverBytesCount < 3) {  		_leftOverBytesCount = leftOverBytesCount;  		return;  	}  	int num2 = Convert.ToBase64CharArray (_leftOverBytes' 0' 3' _charsLine' 0);  	WriteChars (_charsLine' 0' num2);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0) {  	int leftOverBytesCount = _leftOverBytesCount;  	while (leftOverBytesCount < 3 && count > 0) {  		_leftOverBytes [leftOverBytesCount++] = buffer [index++];  		count--;  	}  	if (count == 0 && leftOverBytesCount < 3) {  		_leftOverBytesCount = leftOverBytesCount;  		return;  	}  	int num2 = Convert.ToBase64CharArray (_leftOverBytes' 0' 3' _charsLine' 0);  	WriteChars (_charsLine' 0' num2);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0) {  	int leftOverBytesCount = _leftOverBytesCount;  	while (leftOverBytesCount < 3 && count > 0) {  		_leftOverBytes [leftOverBytesCount++] = buffer [index++];  		count--;  	}  	if (count == 0 && leftOverBytesCount < 3) {  		_leftOverBytesCount = leftOverBytesCount;  		return;  	}  	int num2 = Convert.ToBase64CharArray (_leftOverBytes' 0' 3' _charsLine' 0);  	WriteChars (_charsLine' 0' num2);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: while (leftOverBytesCount < 3 && count > 0) {  	_leftOverBytes [leftOverBytesCount++] = buffer [index++];  	count--;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (count == 0 && leftOverBytesCount < 3) {  	_leftOverBytesCount = leftOverBytesCount;  	return;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: _leftOverBytesCount = count % 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0) {  	count -= _leftOverBytesCount;  	if (_leftOverBytes == null) {  		_leftOverBytes = new byte[3];  	}  	for (int i = 0; i < _leftOverBytesCount; i++) {  		_leftOverBytes [i] = buffer [(index + count) + i];  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytes == null) {  	_leftOverBytes = new byte[3];  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,Base64Encoder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: _leftOverBytes = new byte[3];  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: for (int i = start; i < end; i++) {  	int c = chars [i] - '0';  	if (c < 0 || c > 9)  		throw new FormatException ("Input string was not in a correct format.");  	int newValue = (10 * result) - c;  	// overflow has caused the number to loop around  	if (newValue > result) {  		i++;  		// double check the rest of the string that there wasn't anything invalid  		// invalid result takes precedence over overflow result  		for (; i < end; i++) {  			c = chars [i] - '0';  			if (c < 0 || c > 9)  				throw new FormatException ("Input string was not in a correct format.");  		}  		throw new OverflowException ();  	}  	result = newValue;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: for (int i = start; i < end; i++) {  	int c = chars [i] - '0';  	if (c < 0 || c > 9)  		throw new FormatException ("Input string was not in a correct format.");  	int newValue = (10 * result) - c;  	// overflow has caused the number to loop around  	if (newValue > result) {  		i++;  		// double check the rest of the string that there wasn't anything invalid  		// invalid result takes precedence over overflow result  		for (; i < end; i++) {  			c = chars [i] - '0';  			if (c < 0 || c > 9)  				throw new FormatException ("Input string was not in a correct format.");  		}  		throw new OverflowException ();  	}  	result = newValue;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: for (int i = start; i < end; i++) {  	int c = chars [i] - '0';  	if (c < 0 || c > 9)  		throw new FormatException ("Input string was not in a correct format.");  	int newValue = (10 * result) - c;  	// overflow has caused the number to loop around  	if (newValue > result) {  		i++;  		// double check the rest of the string that there wasn't anything invalid  		// invalid result takes precedence over overflow result  		for (; i < end; i++) {  			c = chars [i] - '0';  			if (c < 0 || c > 9)  				throw new FormatException ("Input string was not in a correct format.");  		}  		throw new OverflowException ();  	}  	result = newValue;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new FormatException ("Input string was not in a correct format.");  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: if (newValue > result) {  	i++;  	// double check the rest of the string that there wasn't anything invalid  	// invalid result takes precedence over overflow result  	for (; i < end; i++) {  		c = chars [i] - '0';  		if (c < 0 || c > 9)  			throw new FormatException ("Input string was not in a correct format.");  	}  	throw new OverflowException ();  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: for (; i < end; i++) {  	c = chars [i] - '0';  	if (c < 0 || c > 9)  		throw new FormatException ("Input string was not in a correct format.");  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int32Parse,The following statement contains a magic number: if (c < 0 || c > 9)  	throw new FormatException ("Input string was not in a correct format.");  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (int i = start; i < end; i++) {  	int c = chars [i] - '0';  	if (c < 0 || c > 9)  		return ParseResult.Invalid;  	long newValue = (10 * value) - c;  	// overflow has caused the number to loop around  	if (newValue > value) {  		i++;  		// double check the rest of the string that there wasn't anything invalid  		// invalid result takes precedence over overflow result  		for (; i < end; i++) {  			c = chars [i] - '0';  			if (c < 0 || c > 9)  				return ParseResult.Invalid;  		}  		return ParseResult.Overflow;  	}  	value = newValue;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (int i = start; i < end; i++) {  	int c = chars [i] - '0';  	if (c < 0 || c > 9)  		return ParseResult.Invalid;  	long newValue = (10 * value) - c;  	// overflow has caused the number to loop around  	if (newValue > value) {  		i++;  		// double check the rest of the string that there wasn't anything invalid  		// invalid result takes precedence over overflow result  		for (; i < end; i++) {  			c = chars [i] - '0';  			if (c < 0 || c > 9)  				return ParseResult.Invalid;  		}  		return ParseResult.Overflow;  	}  	value = newValue;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (int i = start; i < end; i++) {  	int c = chars [i] - '0';  	if (c < 0 || c > 9)  		return ParseResult.Invalid;  	long newValue = (10 * value) - c;  	// overflow has caused the number to loop around  	if (newValue > value) {  		i++;  		// double check the rest of the string that there wasn't anything invalid  		// invalid result takes precedence over overflow result  		for (; i < end; i++) {  			c = chars [i] - '0';  			if (c < 0 || c > 9)  				return ParseResult.Invalid;  		}  		return ParseResult.Overflow;  	}  	value = newValue;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: if (c < 0 || c > 9)  	return ParseResult.Invalid;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: if (newValue > value) {  	i++;  	// double check the rest of the string that there wasn't anything invalid  	// invalid result takes precedence over overflow result  	for (; i < end; i++) {  		c = chars [i] - '0';  		if (c < 0 || c > 9)  			return ParseResult.Invalid;  	}  	return ParseResult.Overflow;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (; i < end; i++) {  	c = chars [i] - '0';  	if (c < 0 || c > 9)  		return ParseResult.Invalid;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,ConvertUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: if (c < 0 || c > 9)  	return ParseResult.Invalid;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] {  	-1'  	10'  	100'  	1000'  	10000'  	100000'  	1000000  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] {  	-1'  	10'  	100'  	1000'  	10000'  	100000'  	1000000  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] {  	-1'  	10'  	100'  	1000'  	10000'  	100000'  	1000000  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] {  	-1'  	10'  	100'  	1000'  	10000'  	100000'  	1000000  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] {  	-1'  	10'  	100'  	1000'  	10000'  	100000'  	1000000  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] {  	-1'  	10'  	100'  	1000'  	10000'  	100000'  	1000000  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseDate,The following statement contains a magic number: return (Parse4Digit (start' out Year) && 1 <= Year && ParseChar (start + Lzyyyy' '-') && Parse2Digit (start + Lzyyyy_' out Month) && 1 <= Month && Month <= 12 && ParseChar (start + Lzyyyy_MM' '-') && Parse2Digit (start + Lzyyyy_MM_' out Day) && 1 <= Day && Day <= DateTime.DaysInMonth (Year' Month));  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (!(Parse2Digit (start' out Hour) && Hour < 24 && ParseChar (start + LzHH' ':') && Parse2Digit (start + LzHH_' out Minute) && Minute < 60 && ParseChar (start + LzHH_mm' ':') && Parse2Digit (start + LzHH_mm_' out Second) && Second < 60)) {  	return false;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (!(Parse2Digit (start' out Hour) && Hour < 24 && ParseChar (start + LzHH' ':') && Parse2Digit (start + LzHH_' out Minute) && Minute < 60 && ParseChar (start + LzHH_mm' ':') && Parse2Digit (start + LzHH_mm_' out Second) && Second < 60)) {  	return false;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (!(Parse2Digit (start' out Hour) && Hour < 24 && ParseChar (start + LzHH' ':') && Parse2Digit (start + LzHH_' out Minute) && Minute < 60 && ParseChar (start + LzHH_mm' ':') && Parse2Digit (start + LzHH_mm_' out Second) && Second < 60)) {  	return false;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (ParseChar (start' '.')) {  	Fraction = 0;  	int numberOfDigits = 0;  	while (++start < _length && numberOfDigits < MaxFractionDigits) {  		int digit = _text [start] - '0';  		if (digit < 0 || digit > 9)  			break;  		Fraction = (Fraction * 10) + digit;  		numberOfDigits++;  	}  	if (numberOfDigits < MaxFractionDigits) {  		if (numberOfDigits == 0)  			return false;  		Fraction *= Power10 [MaxFractionDigits - numberOfDigits];  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (ParseChar (start' '.')) {  	Fraction = 0;  	int numberOfDigits = 0;  	while (++start < _length && numberOfDigits < MaxFractionDigits) {  		int digit = _text [start] - '0';  		if (digit < 0 || digit > 9)  			break;  		Fraction = (Fraction * 10) + digit;  		numberOfDigits++;  	}  	if (numberOfDigits < MaxFractionDigits) {  		if (numberOfDigits == 0)  			return false;  		Fraction *= Power10 [MaxFractionDigits - numberOfDigits];  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: while (++start < _length && numberOfDigits < MaxFractionDigits) {  	int digit = _text [start] - '0';  	if (digit < 0 || digit > 9)  		break;  	Fraction = (Fraction * 10) + digit;  	numberOfDigits++;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: while (++start < _length && numberOfDigits < MaxFractionDigits) {  	int digit = _text [start] - '0';  	if (digit < 0 || digit > 9)  		break;  	Fraction = (Fraction * 10) + digit;  	numberOfDigits++;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (digit < 0 || digit > 9)  	break;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: Fraction = (Fraction * 10) + digit;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length) {  	char ch = _text [start];  	if (ch == 'Z' || ch == 'z') {  		Zone = ParserTimeZone.Utc;  		start++;  	} else {  		if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  			switch (ch) {  			case '-':  				Zone = ParserTimeZone.LocalWestOfUtc;  				start += Lz_zz_zz;  				break;  			case '+':  				Zone = ParserTimeZone.LocalEastOfUtc;  				start += Lz_zz_zz;  				break;  			}  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length) {  	char ch = _text [start];  	if (ch == 'Z' || ch == 'z') {  		Zone = ParserTimeZone.Utc;  		start++;  	} else {  		if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  			switch (ch) {  			case '-':  				Zone = ParserTimeZone.LocalWestOfUtc;  				start += Lz_zz_zz;  				break;  			case '+':  				Zone = ParserTimeZone.LocalEastOfUtc;  				start += Lz_zz_zz;  				break;  			}  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length) {  	char ch = _text [start];  	if (ch == 'Z' || ch == 'z') {  		Zone = ParserTimeZone.Utc;  		start++;  	} else {  		if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  			switch (ch) {  			case '-':  				Zone = ParserTimeZone.LocalWestOfUtc;  				start += Lz_zz_zz;  				break;  			case '+':  				Zone = ParserTimeZone.LocalEastOfUtc;  				start += Lz_zz_zz;  				break;  			}  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (ch == 'Z' || ch == 'z') {  	Zone = ParserTimeZone.Utc;  	start++;  } else {  	if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  		switch (ch) {  		case '-':  			Zone = ParserTimeZone.LocalWestOfUtc;  			start += Lz_zz_zz;  			break;  		case '+':  			Zone = ParserTimeZone.LocalEastOfUtc;  			start += Lz_zz_zz;  			break;  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (ch == 'Z' || ch == 'z') {  	Zone = ParserTimeZone.Utc;  	start++;  } else {  	if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  		switch (ch) {  		case '-':  			Zone = ParserTimeZone.LocalWestOfUtc;  			start += Lz_zz_zz;  			break;  		case '+':  			Zone = ParserTimeZone.LocalEastOfUtc;  			start += Lz_zz_zz;  			break;  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (ch == 'Z' || ch == 'z') {  	Zone = ParserTimeZone.Utc;  	start++;  } else {  	if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  		switch (ch) {  		case '-':  			Zone = ParserTimeZone.LocalWestOfUtc;  			start += Lz_zz_zz;  			break;  		case '+':  			Zone = ParserTimeZone.LocalEastOfUtc;  			start += Lz_zz_zz;  			break;  		}  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  	switch (ch) {  	case '-':  		Zone = ParserTimeZone.LocalWestOfUtc;  		start += Lz_zz_zz;  		break;  	case '+':  		Zone = ParserTimeZone.LocalEastOfUtc;  		start += Lz_zz_zz;  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  	switch (ch) {  	case '-':  		Zone = ParserTimeZone.LocalWestOfUtc;  		start += Lz_zz_zz;  		break;  	case '+':  		Zone = ParserTimeZone.LocalEastOfUtc;  		start += Lz_zz_zz;  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start + 5 < _length && Parse2Digit (start + Lz_' out ZoneHour) && ZoneHour <= 99 && ParseChar (start + Lz_zz' ':') && Parse2Digit (start + Lz_zz_' out ZoneMinute) && ZoneMinute <= 99) {  	switch (ch) {  	case '-':  		Zone = ParserTimeZone.LocalWestOfUtc;  		start += Lz_zz_zz;  		break;  	case '+':  		Zone = ParserTimeZone.LocalEastOfUtc;  		start += Lz_zz_zz;  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	int digit3 = _text [start + 2] - '0';  	int digit4 = _text [start + 3] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  		num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10 && 0 <= digit3 && digit3 < 10 && 0 <= digit4 && digit4 < 10) {  	num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (start + 1 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10) {  		num = (digit1 * 10) + digit2;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (start + 1 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10) {  		num = (digit1 * 10) + digit2;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (start + 1 < _length) {  	int digit1 = _text [start] - '0';  	int digit2 = _text [start + 1] - '0';  	if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10) {  		num = (digit1 * 10) + digit2;  		return true;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10) {  	num = (digit1 * 10) + digit2;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10) {  	num = (digit1 * 10) + digit2;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (0 <= digit1 && digit1 < 10 && 0 <= digit2 && digit2 < 10) {  	num = (digit1 * 10) + digit2;  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: num = (digit1 * 10) + digit2;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] {  	0'  	31'  	59'  	90'  	120'  	151'  	181'  	212'  	243'  	273'  	304'  	334'  	365  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] {  	0'  	31'  	60'  	91'  	121'  	152'  	182'  	213'  	244'  	274'  	305'  	335'  	366  };  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,The following statement contains a magic number: if (dateParseHandling == DateParseHandling.DateTimeOffset) {  	TimeSpan offset;  	switch (dateTimeParser.Zone) {  	case ParserTimeZone.Utc:  		offset = new TimeSpan (0L);  		break;  	case ParserTimeZone.LocalWestOfUtc:  		offset = new TimeSpan (-dateTimeParser.ZoneHour' -dateTimeParser.ZoneMinute' 0);  		break;  	case ParserTimeZone.LocalEastOfUtc:  		offset = new TimeSpan (dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);  		break;  	default:  		offset = TimeZoneInfo.Local.GetUtcOffset (d);  		break;  	}  	long ticks = d.Ticks - offset.Ticks;  	if (ticks < 0 || ticks > 3155378975999999999) {  		dt = null;  		return false;  	}  	dt = new DateTimeOffset (d' offset);  	return true;  } else  #endif   {  	long ticks;  	switch (dateTimeParser.Zone) {  	case ParserTimeZone.Utc:  		d = new DateTime (d.Ticks' DateTimeKind.Utc);  		break;  	case ParserTimeZone.LocalWestOfUtc: {  		var offset = new TimeSpan (dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);  		ticks = d.Ticks + offset.Ticks;  		if (ticks <= DateTime.MaxValue.Ticks) {  			d = new DateTime (ticks' DateTimeKind.Utc).ToLocalTime ();  		} else {  			ticks += d.GetUtcOffset ().Ticks;  			if (ticks > DateTime.MaxValue.Ticks)  				ticks = DateTime.MaxValue.Ticks;  			d = new DateTime (ticks' DateTimeKind.Local);  		}  		break;  	}  	case ParserTimeZone.LocalEastOfUtc: {  		var offset = new TimeSpan (dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);  		ticks = d.Ticks - offset.Ticks;  		if (ticks >= DateTime.MinValue.Ticks) {  			d = new DateTime (ticks' DateTimeKind.Utc).ToLocalTime ();  		} else {  			ticks += d.GetUtcOffset ().Ticks;  			if (ticks < DateTime.MinValue.Ticks)  				ticks = DateTime.MinValue.Ticks;  			d = new DateTime (ticks' DateTimeKind.Local);  		}  		break;  	}  	}  	dt = EnsureDateTime (d' dateTimeZoneHandling);  	return true;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,The following statement contains a magic number: if (ticks < 0 || ticks > 3155378975999999999) {  	dt = null;  	return false;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length > 0) {  	if (s [0] == '/') {  		if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  			return TryParseDateMicrosoft (s' dateParseHandling' dateTimeZoneHandling' out dt);  		}  	} else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  		return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length > 0) {  	if (s [0] == '/') {  		if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  			return TryParseDateMicrosoft (s' dateParseHandling' dateTimeZoneHandling' out dt);  		}  	} else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  		return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length > 0) {  	if (s [0] == '/') {  		if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  			return TryParseDateMicrosoft (s' dateParseHandling' dateTimeZoneHandling' out dt);  		}  	} else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  		return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s [0] == '/') {  	if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  		return TryParseDateMicrosoft (s' dateParseHandling' dateTimeZoneHandling' out dt);  	}  } else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  	return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s [0] == '/') {  	if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  		return TryParseDateMicrosoft (s' dateParseHandling' dateTimeZoneHandling' out dt);  	}  } else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  	return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s [0] == '/') {  	if (s.StartsWith ("/Date("' StringComparison.Ordinal) && s.EndsWith (")/"' StringComparison.Ordinal)) {  		return TryParseDateMicrosoft (s' dateParseHandling' dateTimeZoneHandling' out dt);  	}  } else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  	return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  	return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  	return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length >= 19 && s.Length <= 40 && char.IsDigit (s [0]) && s [10] == 'T') {  	return TryParseDateIso (s' dateParseHandling' dateTimeZoneHandling' out dt);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: if (offsetText.Length >= 5)  	minutes = int.Parse (offsetText.Substring (3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: if (offsetText.Length >= 5)  	minutes = int.Parse (offsetText.Substring (3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: if (offsetText.Length >= 5)  	minutes = int.Parse (offsetText.Substring (3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: minutes = int.Parse (offsetText.Substring (3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: minutes = int.Parse (offsetText.Substring (3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (string.IsNullOrEmpty (formatString)) {  	var chars = new char[64];  	int pos = WriteDateTimeString (chars' 0' value' null' value.Kind' format);  	writer.Write (chars' 0' pos);  } else {  	writer.Write (value.ToString (formatString' culture));  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat) {  	TimeSpan o = offset ?? value.GetUtcOffset ();  	long javaScriptTicks = ConvertDateTimeToJavaScriptTicks (value' o);  	@"\/Date(".CopyTo (0' chars' pos' 7);  	pos += 7;  	string ticksText = javaScriptTicks.ToString (CultureInfo.InvariantCulture);  	ticksText.CopyTo (0' chars' pos' ticksText.Length);  	pos += ticksText.Length;  	switch (kind) {  	case DateTimeKind.Unspecified:  		if (value != DateTime.MaxValue && value != DateTime.MinValue)  			pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	}  	@")\/".CopyTo (0' chars' pos' 3);  	pos += 3;  } else {  	pos = WriteDefaultIsoDate (chars' pos' value);  	switch (kind) {  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' offset ?? value.GetUtcOffset ()' format);  		break;  	case DateTimeKind.Utc:  		chars [pos++] = 'Z';  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat) {  	TimeSpan o = offset ?? value.GetUtcOffset ();  	long javaScriptTicks = ConvertDateTimeToJavaScriptTicks (value' o);  	@"\/Date(".CopyTo (0' chars' pos' 7);  	pos += 7;  	string ticksText = javaScriptTicks.ToString (CultureInfo.InvariantCulture);  	ticksText.CopyTo (0' chars' pos' ticksText.Length);  	pos += ticksText.Length;  	switch (kind) {  	case DateTimeKind.Unspecified:  		if (value != DateTime.MaxValue && value != DateTime.MinValue)  			pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	}  	@")\/".CopyTo (0' chars' pos' 3);  	pos += 3;  } else {  	pos = WriteDefaultIsoDate (chars' pos' value);  	switch (kind) {  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' offset ?? value.GetUtcOffset ()' format);  		break;  	case DateTimeKind.Utc:  		chars [pos++] = 'Z';  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat) {  	TimeSpan o = offset ?? value.GetUtcOffset ();  	long javaScriptTicks = ConvertDateTimeToJavaScriptTicks (value' o);  	@"\/Date(".CopyTo (0' chars' pos' 7);  	pos += 7;  	string ticksText = javaScriptTicks.ToString (CultureInfo.InvariantCulture);  	ticksText.CopyTo (0' chars' pos' ticksText.Length);  	pos += ticksText.Length;  	switch (kind) {  	case DateTimeKind.Unspecified:  		if (value != DateTime.MaxValue && value != DateTime.MinValue)  			pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	}  	@")\/".CopyTo (0' chars' pos' 3);  	pos += 3;  } else {  	pos = WriteDefaultIsoDate (chars' pos' value);  	switch (kind) {  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' offset ?? value.GetUtcOffset ()' format);  		break;  	case DateTimeKind.Utc:  		chars [pos++] = 'Z';  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat) {  	TimeSpan o = offset ?? value.GetUtcOffset ();  	long javaScriptTicks = ConvertDateTimeToJavaScriptTicks (value' o);  	@"\/Date(".CopyTo (0' chars' pos' 7);  	pos += 7;  	string ticksText = javaScriptTicks.ToString (CultureInfo.InvariantCulture);  	ticksText.CopyTo (0' chars' pos' ticksText.Length);  	pos += ticksText.Length;  	switch (kind) {  	case DateTimeKind.Unspecified:  		if (value != DateTime.MaxValue && value != DateTime.MinValue)  			pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' o' format);  		break;  	}  	@")\/".CopyTo (0' chars' pos' 3);  	pos += 3;  } else {  	pos = WriteDefaultIsoDate (chars' pos' value);  	switch (kind) {  	case DateTimeKind.Local:  		pos = WriteDateTimeOffset (chars' pos' offset ?? value.GetUtcOffset ()' format);  		break;  	case DateTimeKind.Utc:  		chars [pos++] = 'Z';  		break;  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: @"\/Date(".CopyTo (0' chars' pos' 7);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: pos += 7;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: @")\/".CopyTo (0' chars' pos' 3);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: pos += 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start' year' 4);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars [start + 4] = '-';  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 5' month' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 5' month' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars [start + 7] = '-';  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 8' day' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 8' day' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars [start + 10] = 'T';  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 11' dt.Hour' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 11' dt.Hour' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars [start + 13] = ':';  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 14' dt.Minute' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 14' dt.Minute' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars [start + 16] = ':';  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 17' dt.Second' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 17' dt.Second' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0) {  	int digits = 7;  	while ((fraction % 10) == 0) {  		digits--;  		fraction /= 10;  	}  	chars [start + 19] = '.';  	CopyIntToCharArray (chars' start + 20' fraction' digits);  	length += digits + 1;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0) {  	int digits = 7;  	while ((fraction % 10) == 0) {  		digits--;  		fraction /= 10;  	}  	chars [start + 19] = '.';  	CopyIntToCharArray (chars' start + 20' fraction' digits);  	length += digits + 1;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0) {  	int digits = 7;  	while ((fraction % 10) == 0) {  		digits--;  		fraction /= 10;  	}  	chars [start + 19] = '.';  	CopyIntToCharArray (chars' start + 20' fraction' digits);  	length += digits + 1;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0) {  	int digits = 7;  	while ((fraction % 10) == 0) {  		digits--;  		fraction /= 10;  	}  	chars [start + 19] = '.';  	CopyIntToCharArray (chars' start + 20' fraction' digits);  	length += digits + 1;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0) {  	int digits = 7;  	while ((fraction % 10) == 0) {  		digits--;  		fraction /= 10;  	}  	chars [start + 19] = '.';  	CopyIntToCharArray (chars' start + 20' fraction' digits);  	length += digits + 1;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: while ((fraction % 10) == 0) {  	digits--;  	fraction /= 10;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: while ((fraction % 10) == 0) {  	digits--;  	fraction /= 10;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: fraction /= 10;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars [start + 19] = '.';  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray (chars' start + 20' fraction' digits);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: while (digits-- != 0) {  	chars [start + digits] = (char)((value % 10) + 48);  	value /= 10;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: while (digits-- != 0) {  	chars [start + digits] = (char)((value % 10) + 48);  	value /= 10;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: while (digits-- != 0) {  	chars [start + digits] = (char)((value % 10) + 48);  	value /= 10;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: chars [start + digits] = (char)((value % 10) + 48);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: chars [start + digits] = (char)((value % 10) + 48);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: value /= 10;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: CopyIntToCharArray (chars' start' absHours' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: start += 2;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: CopyIntToCharArray (chars' start' absMinutes' 2);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: start += 2;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The following statement contains a magic number: if (string.IsNullOrEmpty (formatString)) {  	var chars = new char[64];  	int pos = WriteDateTimeString (chars' 0' (format == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' format);  	writer.Write (chars' 0' pos);  } else {  	writer.Write (value.ToString (formatString' culture));  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y100 == 4)  	y100 = 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y100 == 4)  	y100 = 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: y100 = 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y1 == 4)  	y1 = 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y1 == 4)  	y1 = 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: y1 = 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null) {  	int lastWritePosition = 0;  	for (int i = 0; i < s.Length; i++) {  		var c = s [i];  		if (c < charEscapeFlags.Length && !charEscapeFlags [c])  			continue;  		string escapedValue;  		switch (c) {  		case '\t':  			escapedValue = @"\t";  			break;  		case '\n':  			escapedValue = @"\n";  			break;  		case '\r':  			escapedValue = @"\r";  			break;  		case '\f':  			escapedValue = @"\f";  			break;  		case '\b':  			escapedValue = @"\b";  			break;  		case '\\':  			escapedValue = @"\\";  			break;  		case '\u0085':  			// Next Line  			escapedValue = @"\u0085";  			break;  		case '\u2028':  			// Line Separator  			escapedValue = @"\u2028";  			break;  		case '\u2029':  			// Paragraph Separator  			escapedValue = @"\u2029";  			break;  		default:  			if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  				if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\'";  				} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\""";  				} else {  					if (writeBuffer == null)  						writeBuffer = new char[6];  					StringUtils.ToCharAsUnicode (c' writeBuffer);  					// slightly hacky but it saves multiple conditions in if test  					escapedValue = EscapedUnicodeText;  				}  			} else {  				escapedValue = null;  			}  			break;  		}  		if (escapedValue == null)  			continue;  		bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  		if (i > lastWritePosition) {  			int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  			int start = (isEscapedUnicodeText) ? 6 : 0;  			if (writeBuffer == null || writeBuffer.Length < length) {  				var newBuffer = new char[length];  				// the unicode text is already in the buffer  				// copy it over when creating new buffer  				if (isEscapedUnicodeText)  					Array.Copy (writeBuffer' newBuffer' 6);  				writeBuffer = newBuffer;  			}  			s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  			// write unchanged chars before writing escaped text  			writer.Write (writeBuffer' start' length - start);  		}  		lastWritePosition = i + 1;  		if (!isEscapedUnicodeText)  			writer.Write (escapedValue);  		else  			writer.Write (writeBuffer' 0' 6);  	}  	if (lastWritePosition == 0) {  		// no escaped text' write entire string  		writer.Write (s);  	} else {  		int length = s.Length - lastWritePosition;  		if (writeBuffer == null || writeBuffer.Length < length)  			writeBuffer = new char[length];  		s.CopyTo (lastWritePosition' writeBuffer' 0' length);  		// write remaining text  		writer.Write (writeBuffer' 0' length);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null) {  	int lastWritePosition = 0;  	for (int i = 0; i < s.Length; i++) {  		var c = s [i];  		if (c < charEscapeFlags.Length && !charEscapeFlags [c])  			continue;  		string escapedValue;  		switch (c) {  		case '\t':  			escapedValue = @"\t";  			break;  		case '\n':  			escapedValue = @"\n";  			break;  		case '\r':  			escapedValue = @"\r";  			break;  		case '\f':  			escapedValue = @"\f";  			break;  		case '\b':  			escapedValue = @"\b";  			break;  		case '\\':  			escapedValue = @"\\";  			break;  		case '\u0085':  			// Next Line  			escapedValue = @"\u0085";  			break;  		case '\u2028':  			// Line Separator  			escapedValue = @"\u2028";  			break;  		case '\u2029':  			// Paragraph Separator  			escapedValue = @"\u2029";  			break;  		default:  			if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  				if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\'";  				} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\""";  				} else {  					if (writeBuffer == null)  						writeBuffer = new char[6];  					StringUtils.ToCharAsUnicode (c' writeBuffer);  					// slightly hacky but it saves multiple conditions in if test  					escapedValue = EscapedUnicodeText;  				}  			} else {  				escapedValue = null;  			}  			break;  		}  		if (escapedValue == null)  			continue;  		bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  		if (i > lastWritePosition) {  			int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  			int start = (isEscapedUnicodeText) ? 6 : 0;  			if (writeBuffer == null || writeBuffer.Length < length) {  				var newBuffer = new char[length];  				// the unicode text is already in the buffer  				// copy it over when creating new buffer  				if (isEscapedUnicodeText)  					Array.Copy (writeBuffer' newBuffer' 6);  				writeBuffer = newBuffer;  			}  			s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  			// write unchanged chars before writing escaped text  			writer.Write (writeBuffer' start' length - start);  		}  		lastWritePosition = i + 1;  		if (!isEscapedUnicodeText)  			writer.Write (escapedValue);  		else  			writer.Write (writeBuffer' 0' 6);  	}  	if (lastWritePosition == 0) {  		// no escaped text' write entire string  		writer.Write (s);  	} else {  		int length = s.Length - lastWritePosition;  		if (writeBuffer == null || writeBuffer.Length < length)  			writeBuffer = new char[length];  		s.CopyTo (lastWritePosition' writeBuffer' 0' length);  		// write remaining text  		writer.Write (writeBuffer' 0' length);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null) {  	int lastWritePosition = 0;  	for (int i = 0; i < s.Length; i++) {  		var c = s [i];  		if (c < charEscapeFlags.Length && !charEscapeFlags [c])  			continue;  		string escapedValue;  		switch (c) {  		case '\t':  			escapedValue = @"\t";  			break;  		case '\n':  			escapedValue = @"\n";  			break;  		case '\r':  			escapedValue = @"\r";  			break;  		case '\f':  			escapedValue = @"\f";  			break;  		case '\b':  			escapedValue = @"\b";  			break;  		case '\\':  			escapedValue = @"\\";  			break;  		case '\u0085':  			// Next Line  			escapedValue = @"\u0085";  			break;  		case '\u2028':  			// Line Separator  			escapedValue = @"\u2028";  			break;  		case '\u2029':  			// Paragraph Separator  			escapedValue = @"\u2029";  			break;  		default:  			if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  				if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\'";  				} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\""";  				} else {  					if (writeBuffer == null)  						writeBuffer = new char[6];  					StringUtils.ToCharAsUnicode (c' writeBuffer);  					// slightly hacky but it saves multiple conditions in if test  					escapedValue = EscapedUnicodeText;  				}  			} else {  				escapedValue = null;  			}  			break;  		}  		if (escapedValue == null)  			continue;  		bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  		if (i > lastWritePosition) {  			int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  			int start = (isEscapedUnicodeText) ? 6 : 0;  			if (writeBuffer == null || writeBuffer.Length < length) {  				var newBuffer = new char[length];  				// the unicode text is already in the buffer  				// copy it over when creating new buffer  				if (isEscapedUnicodeText)  					Array.Copy (writeBuffer' newBuffer' 6);  				writeBuffer = newBuffer;  			}  			s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  			// write unchanged chars before writing escaped text  			writer.Write (writeBuffer' start' length - start);  		}  		lastWritePosition = i + 1;  		if (!isEscapedUnicodeText)  			writer.Write (escapedValue);  		else  			writer.Write (writeBuffer' 0' 6);  	}  	if (lastWritePosition == 0) {  		// no escaped text' write entire string  		writer.Write (s);  	} else {  		int length = s.Length - lastWritePosition;  		if (writeBuffer == null || writeBuffer.Length < length)  			writeBuffer = new char[length];  		s.CopyTo (lastWritePosition' writeBuffer' 0' length);  		// write remaining text  		writer.Write (writeBuffer' 0' length);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null) {  	int lastWritePosition = 0;  	for (int i = 0; i < s.Length; i++) {  		var c = s [i];  		if (c < charEscapeFlags.Length && !charEscapeFlags [c])  			continue;  		string escapedValue;  		switch (c) {  		case '\t':  			escapedValue = @"\t";  			break;  		case '\n':  			escapedValue = @"\n";  			break;  		case '\r':  			escapedValue = @"\r";  			break;  		case '\f':  			escapedValue = @"\f";  			break;  		case '\b':  			escapedValue = @"\b";  			break;  		case '\\':  			escapedValue = @"\\";  			break;  		case '\u0085':  			// Next Line  			escapedValue = @"\u0085";  			break;  		case '\u2028':  			// Line Separator  			escapedValue = @"\u2028";  			break;  		case '\u2029':  			// Paragraph Separator  			escapedValue = @"\u2029";  			break;  		default:  			if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  				if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\'";  				} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\""";  				} else {  					if (writeBuffer == null)  						writeBuffer = new char[6];  					StringUtils.ToCharAsUnicode (c' writeBuffer);  					// slightly hacky but it saves multiple conditions in if test  					escapedValue = EscapedUnicodeText;  				}  			} else {  				escapedValue = null;  			}  			break;  		}  		if (escapedValue == null)  			continue;  		bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  		if (i > lastWritePosition) {  			int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  			int start = (isEscapedUnicodeText) ? 6 : 0;  			if (writeBuffer == null || writeBuffer.Length < length) {  				var newBuffer = new char[length];  				// the unicode text is already in the buffer  				// copy it over when creating new buffer  				if (isEscapedUnicodeText)  					Array.Copy (writeBuffer' newBuffer' 6);  				writeBuffer = newBuffer;  			}  			s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  			// write unchanged chars before writing escaped text  			writer.Write (writeBuffer' start' length - start);  		}  		lastWritePosition = i + 1;  		if (!isEscapedUnicodeText)  			writer.Write (escapedValue);  		else  			writer.Write (writeBuffer' 0' 6);  	}  	if (lastWritePosition == 0) {  		// no escaped text' write entire string  		writer.Write (s);  	} else {  		int length = s.Length - lastWritePosition;  		if (writeBuffer == null || writeBuffer.Length < length)  			writeBuffer = new char[length];  		s.CopyTo (lastWritePosition' writeBuffer' 0' length);  		// write remaining text  		writer.Write (writeBuffer' 0' length);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null) {  	int lastWritePosition = 0;  	for (int i = 0; i < s.Length; i++) {  		var c = s [i];  		if (c < charEscapeFlags.Length && !charEscapeFlags [c])  			continue;  		string escapedValue;  		switch (c) {  		case '\t':  			escapedValue = @"\t";  			break;  		case '\n':  			escapedValue = @"\n";  			break;  		case '\r':  			escapedValue = @"\r";  			break;  		case '\f':  			escapedValue = @"\f";  			break;  		case '\b':  			escapedValue = @"\b";  			break;  		case '\\':  			escapedValue = @"\\";  			break;  		case '\u0085':  			// Next Line  			escapedValue = @"\u0085";  			break;  		case '\u2028':  			// Line Separator  			escapedValue = @"\u2028";  			break;  		case '\u2029':  			// Paragraph Separator  			escapedValue = @"\u2029";  			break;  		default:  			if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  				if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\'";  				} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  					escapedValue = @"\""";  				} else {  					if (writeBuffer == null)  						writeBuffer = new char[6];  					StringUtils.ToCharAsUnicode (c' writeBuffer);  					// slightly hacky but it saves multiple conditions in if test  					escapedValue = EscapedUnicodeText;  				}  			} else {  				escapedValue = null;  			}  			break;  		}  		if (escapedValue == null)  			continue;  		bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  		if (i > lastWritePosition) {  			int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  			int start = (isEscapedUnicodeText) ? 6 : 0;  			if (writeBuffer == null || writeBuffer.Length < length) {  				var newBuffer = new char[length];  				// the unicode text is already in the buffer  				// copy it over when creating new buffer  				if (isEscapedUnicodeText)  					Array.Copy (writeBuffer' newBuffer' 6);  				writeBuffer = newBuffer;  			}  			s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  			// write unchanged chars before writing escaped text  			writer.Write (writeBuffer' start' length - start);  		}  		lastWritePosition = i + 1;  		if (!isEscapedUnicodeText)  			writer.Write (escapedValue);  		else  			writer.Write (writeBuffer' 0' 6);  	}  	if (lastWritePosition == 0) {  		// no escaped text' write entire string  		writer.Write (s);  	} else {  		int length = s.Length - lastWritePosition;  		if (writeBuffer == null || writeBuffer.Length < length)  			writeBuffer = new char[length];  		s.CopyTo (lastWritePosition' writeBuffer' 0' length);  		// write remaining text  		writer.Write (writeBuffer' 0' length);  	}  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	var c = s [i];  	if (c < charEscapeFlags.Length && !charEscapeFlags [c])  		continue;  	string escapedValue;  	switch (c) {  	case '\t':  		escapedValue = @"\t";  		break;  	case '\n':  		escapedValue = @"\n";  		break;  	case '\r':  		escapedValue = @"\r";  		break;  	case '\f':  		escapedValue = @"\f";  		break;  	case '\b':  		escapedValue = @"\b";  		break;  	case '\\':  		escapedValue = @"\\";  		break;  	case '\u0085':  		// Next Line  		escapedValue = @"\u0085";  		break;  	case '\u2028':  		// Line Separator  		escapedValue = @"\u2028";  		break;  	case '\u2029':  		// Paragraph Separator  		escapedValue = @"\u2029";  		break;  	default:  		if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  			if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\'";  			} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\""";  			} else {  				if (writeBuffer == null)  					writeBuffer = new char[6];  				StringUtils.ToCharAsUnicode (c' writeBuffer);  				// slightly hacky but it saves multiple conditions in if test  				escapedValue = EscapedUnicodeText;  			}  		} else {  			escapedValue = null;  		}  		break;  	}  	if (escapedValue == null)  		continue;  	bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  	if (i > lastWritePosition) {  		int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  		int start = (isEscapedUnicodeText) ? 6 : 0;  		if (writeBuffer == null || writeBuffer.Length < length) {  			var newBuffer = new char[length];  			// the unicode text is already in the buffer  			// copy it over when creating new buffer  			if (isEscapedUnicodeText)  				Array.Copy (writeBuffer' newBuffer' 6);  			writeBuffer = newBuffer;  		}  		s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  		// write unchanged chars before writing escaped text  		writer.Write (writeBuffer' start' length - start);  	}  	lastWritePosition = i + 1;  	if (!isEscapedUnicodeText)  		writer.Write (escapedValue);  	else  		writer.Write (writeBuffer' 0' 6);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	var c = s [i];  	if (c < charEscapeFlags.Length && !charEscapeFlags [c])  		continue;  	string escapedValue;  	switch (c) {  	case '\t':  		escapedValue = @"\t";  		break;  	case '\n':  		escapedValue = @"\n";  		break;  	case '\r':  		escapedValue = @"\r";  		break;  	case '\f':  		escapedValue = @"\f";  		break;  	case '\b':  		escapedValue = @"\b";  		break;  	case '\\':  		escapedValue = @"\\";  		break;  	case '\u0085':  		// Next Line  		escapedValue = @"\u0085";  		break;  	case '\u2028':  		// Line Separator  		escapedValue = @"\u2028";  		break;  	case '\u2029':  		// Paragraph Separator  		escapedValue = @"\u2029";  		break;  	default:  		if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  			if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\'";  			} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\""";  			} else {  				if (writeBuffer == null)  					writeBuffer = new char[6];  				StringUtils.ToCharAsUnicode (c' writeBuffer);  				// slightly hacky but it saves multiple conditions in if test  				escapedValue = EscapedUnicodeText;  			}  		} else {  			escapedValue = null;  		}  		break;  	}  	if (escapedValue == null)  		continue;  	bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  	if (i > lastWritePosition) {  		int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  		int start = (isEscapedUnicodeText) ? 6 : 0;  		if (writeBuffer == null || writeBuffer.Length < length) {  			var newBuffer = new char[length];  			// the unicode text is already in the buffer  			// copy it over when creating new buffer  			if (isEscapedUnicodeText)  				Array.Copy (writeBuffer' newBuffer' 6);  			writeBuffer = newBuffer;  		}  		s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  		// write unchanged chars before writing escaped text  		writer.Write (writeBuffer' start' length - start);  	}  	lastWritePosition = i + 1;  	if (!isEscapedUnicodeText)  		writer.Write (escapedValue);  	else  		writer.Write (writeBuffer' 0' 6);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	var c = s [i];  	if (c < charEscapeFlags.Length && !charEscapeFlags [c])  		continue;  	string escapedValue;  	switch (c) {  	case '\t':  		escapedValue = @"\t";  		break;  	case '\n':  		escapedValue = @"\n";  		break;  	case '\r':  		escapedValue = @"\r";  		break;  	case '\f':  		escapedValue = @"\f";  		break;  	case '\b':  		escapedValue = @"\b";  		break;  	case '\\':  		escapedValue = @"\\";  		break;  	case '\u0085':  		// Next Line  		escapedValue = @"\u0085";  		break;  	case '\u2028':  		// Line Separator  		escapedValue = @"\u2028";  		break;  	case '\u2029':  		// Paragraph Separator  		escapedValue = @"\u2029";  		break;  	default:  		if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  			if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\'";  			} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\""";  			} else {  				if (writeBuffer == null)  					writeBuffer = new char[6];  				StringUtils.ToCharAsUnicode (c' writeBuffer);  				// slightly hacky but it saves multiple conditions in if test  				escapedValue = EscapedUnicodeText;  			}  		} else {  			escapedValue = null;  		}  		break;  	}  	if (escapedValue == null)  		continue;  	bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  	if (i > lastWritePosition) {  		int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  		int start = (isEscapedUnicodeText) ? 6 : 0;  		if (writeBuffer == null || writeBuffer.Length < length) {  			var newBuffer = new char[length];  			// the unicode text is already in the buffer  			// copy it over when creating new buffer  			if (isEscapedUnicodeText)  				Array.Copy (writeBuffer' newBuffer' 6);  			writeBuffer = newBuffer;  		}  		s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  		// write unchanged chars before writing escaped text  		writer.Write (writeBuffer' start' length - start);  	}  	lastWritePosition = i + 1;  	if (!isEscapedUnicodeText)  		writer.Write (escapedValue);  	else  		writer.Write (writeBuffer' 0' 6);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	var c = s [i];  	if (c < charEscapeFlags.Length && !charEscapeFlags [c])  		continue;  	string escapedValue;  	switch (c) {  	case '\t':  		escapedValue = @"\t";  		break;  	case '\n':  		escapedValue = @"\n";  		break;  	case '\r':  		escapedValue = @"\r";  		break;  	case '\f':  		escapedValue = @"\f";  		break;  	case '\b':  		escapedValue = @"\b";  		break;  	case '\\':  		escapedValue = @"\\";  		break;  	case '\u0085':  		// Next Line  		escapedValue = @"\u0085";  		break;  	case '\u2028':  		// Line Separator  		escapedValue = @"\u2028";  		break;  	case '\u2029':  		// Paragraph Separator  		escapedValue = @"\u2029";  		break;  	default:  		if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  			if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\'";  			} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\""";  			} else {  				if (writeBuffer == null)  					writeBuffer = new char[6];  				StringUtils.ToCharAsUnicode (c' writeBuffer);  				// slightly hacky but it saves multiple conditions in if test  				escapedValue = EscapedUnicodeText;  			}  		} else {  			escapedValue = null;  		}  		break;  	}  	if (escapedValue == null)  		continue;  	bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  	if (i > lastWritePosition) {  		int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  		int start = (isEscapedUnicodeText) ? 6 : 0;  		if (writeBuffer == null || writeBuffer.Length < length) {  			var newBuffer = new char[length];  			// the unicode text is already in the buffer  			// copy it over when creating new buffer  			if (isEscapedUnicodeText)  				Array.Copy (writeBuffer' newBuffer' 6);  			writeBuffer = newBuffer;  		}  		s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  		// write unchanged chars before writing escaped text  		writer.Write (writeBuffer' start' length - start);  	}  	lastWritePosition = i + 1;  	if (!isEscapedUnicodeText)  		writer.Write (escapedValue);  	else  		writer.Write (writeBuffer' 0' 6);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	var c = s [i];  	if (c < charEscapeFlags.Length && !charEscapeFlags [c])  		continue;  	string escapedValue;  	switch (c) {  	case '\t':  		escapedValue = @"\t";  		break;  	case '\n':  		escapedValue = @"\n";  		break;  	case '\r':  		escapedValue = @"\r";  		break;  	case '\f':  		escapedValue = @"\f";  		break;  	case '\b':  		escapedValue = @"\b";  		break;  	case '\\':  		escapedValue = @"\\";  		break;  	case '\u0085':  		// Next Line  		escapedValue = @"\u0085";  		break;  	case '\u2028':  		// Line Separator  		escapedValue = @"\u2028";  		break;  	case '\u2029':  		// Paragraph Separator  		escapedValue = @"\u2029";  		break;  	default:  		if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  			if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\'";  			} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  				escapedValue = @"\""";  			} else {  				if (writeBuffer == null)  					writeBuffer = new char[6];  				StringUtils.ToCharAsUnicode (c' writeBuffer);  				// slightly hacky but it saves multiple conditions in if test  				escapedValue = EscapedUnicodeText;  			}  		} else {  			escapedValue = null;  		}  		break;  	}  	if (escapedValue == null)  		continue;  	bool isEscapedUnicodeText = string.Equals (escapedValue' EscapedUnicodeText);  	if (i > lastWritePosition) {  		int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  		int start = (isEscapedUnicodeText) ? 6 : 0;  		if (writeBuffer == null || writeBuffer.Length < length) {  			var newBuffer = new char[length];  			// the unicode text is already in the buffer  			// copy it over when creating new buffer  			if (isEscapedUnicodeText)  				Array.Copy (writeBuffer' newBuffer' 6);  			writeBuffer = newBuffer;  		}  		s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  		// write unchanged chars before writing escaped text  		writer.Write (writeBuffer' start' length - start);  	}  	lastWritePosition = i + 1;  	if (!isEscapedUnicodeText)  		writer.Write (escapedValue);  	else  		writer.Write (writeBuffer' 0' 6);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: switch (c) {  case '\t':  	escapedValue = @"\t";  	break;  case '\n':  	escapedValue = @"\n";  	break;  case '\r':  	escapedValue = @"\r";  	break;  case '\f':  	escapedValue = @"\f";  	break;  case '\b':  	escapedValue = @"\b";  	break;  case '\\':  	escapedValue = @"\\";  	break;  case '\u0085':  	// Next Line  	escapedValue = @"\u0085";  	break;  case '\u2028':  	// Line Separator  	escapedValue = @"\u2028";  	break;  case '\u2029':  	// Paragraph Separator  	escapedValue = @"\u2029";  	break;  default:  	if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  		if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  			escapedValue = @"\'";  		} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  			escapedValue = @"\""";  		} else {  			if (writeBuffer == null)  				writeBuffer = new char[6];  			StringUtils.ToCharAsUnicode (c' writeBuffer);  			// slightly hacky but it saves multiple conditions in if test  			escapedValue = EscapedUnicodeText;  		}  	} else {  		escapedValue = null;  	}  	break;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii) {  	if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  		escapedValue = @"\'";  	} else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  		escapedValue = @"\""";  	} else {  		if (writeBuffer == null)  			writeBuffer = new char[6];  		StringUtils.ToCharAsUnicode (c' writeBuffer);  		// slightly hacky but it saves multiple conditions in if test  		escapedValue = EscapedUnicodeText;  	}  } else {  	escapedValue = null;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  	escapedValue = @"\'";  } else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  	escapedValue = @"\""";  } else {  	if (writeBuffer == null)  		writeBuffer = new char[6];  	StringUtils.ToCharAsUnicode (c' writeBuffer);  	// slightly hacky but it saves multiple conditions in if test  	escapedValue = EscapedUnicodeText;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml) {  	escapedValue = @"\""";  } else {  	if (writeBuffer == null)  		writeBuffer = new char[6];  	StringUtils.ToCharAsUnicode (c' writeBuffer);  	// slightly hacky but it saves multiple conditions in if test  	escapedValue = EscapedUnicodeText;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (writeBuffer == null)  	writeBuffer = new char[6];  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: writeBuffer = new char[6];  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (i > lastWritePosition) {  	int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  	int start = (isEscapedUnicodeText) ? 6 : 0;  	if (writeBuffer == null || writeBuffer.Length < length) {  		var newBuffer = new char[length];  		// the unicode text is already in the buffer  		// copy it over when creating new buffer  		if (isEscapedUnicodeText)  			Array.Copy (writeBuffer' newBuffer' 6);  		writeBuffer = newBuffer;  	}  	s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  	// write unchanged chars before writing escaped text  	writer.Write (writeBuffer' start' length - start);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (i > lastWritePosition) {  	int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  	int start = (isEscapedUnicodeText) ? 6 : 0;  	if (writeBuffer == null || writeBuffer.Length < length) {  		var newBuffer = new char[length];  		// the unicode text is already in the buffer  		// copy it over when creating new buffer  		if (isEscapedUnicodeText)  			Array.Copy (writeBuffer' newBuffer' 6);  		writeBuffer = newBuffer;  	}  	s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  	// write unchanged chars before writing escaped text  	writer.Write (writeBuffer' start' length - start);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (i > lastWritePosition) {  	int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);  	int start = (isEscapedUnicodeText) ? 6 : 0;  	if (writeBuffer == null || writeBuffer.Length < length) {  		var newBuffer = new char[length];  		// the unicode text is already in the buffer  		// copy it over when creating new buffer  		if (isEscapedUnicodeText)  			Array.Copy (writeBuffer' newBuffer' 6);  		writeBuffer = newBuffer;  	}  	s.CopyTo (lastWritePosition' writeBuffer' start' length - start);  	// write unchanged chars before writing escaped text  	writer.Write (writeBuffer' start' length - start);  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (writeBuffer == null || writeBuffer.Length < length) {  	var newBuffer = new char[length];  	// the unicode text is already in the buffer  	// copy it over when creating new buffer  	if (isEscapedUnicodeText)  		Array.Copy (writeBuffer' newBuffer' 6);  	writeBuffer = newBuffer;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (isEscapedUnicodeText)  	Array.Copy (writeBuffer' newBuffer' 6);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: Array.Copy (writeBuffer' newBuffer' 6);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (!isEscapedUnicodeText)  	writer.Write (escapedValue);  else  	writer.Write (writeBuffer' 0' 6);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: writer.Write (writeBuffer' 0' 6);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,JavaScriptUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\JavaScriptUtils.cs,ToEscapedJavaScriptString,The following statement contains a magic number: using (StringWriter w = StringUtils.CreateStringWriter (StringUtils.GetLength (value) ?? 16)) {  	char[] buffer = null;  	WriteEscapedJavaScriptString (w' value' delimiter' appendDelimiters' (delimiter == '"') ? DoubleQuoteCharEscapeFlags : SingleQuoteCharEscapeFlags' StringEscapeHandling.Default' ref buffer);  	return w.ToString ();  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000) {  	if (i < 10)  		return 1;  	if (i < 100)  		return 2;  	if (i < 1000)  		return 3;  	if (i < 10000)  		return 4;  	if (i < 100000)  		return 5;  	if (i < 1000000)  		return 6;  	if (i < 10000000)  		return 7;  	if (i < 100000000)  		return 8;  	if (i < 1000000000)  		return 9;  	return 10;  } else {  	if (i < 100000000000)  		return 11;  	if (i < 1000000000000)  		return 12;  	if (i < 10000000000000)  		return 13;  	if (i < 100000000000000)  		return 14;  	if (i < 1000000000000000)  		return 15;  	if (i < 10000000000000000)  		return 16;  	if (i < 100000000000000000)  		return 17;  	if (i < 1000000000000000000)  		return 18;  	if (i < 10000000000000000000)  		return 19;  	return 20;  }  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10)  	return 1;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100)  	return 2;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100)  	return 2;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 2;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000)  	return 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000)  	return 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 3;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000)  	return 4;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000)  	return 4;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 4;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000)  	return 5;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000)  	return 5;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 5;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000)  	return 6;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000)  	return 6;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 6;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000)  	return 7;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000)  	return 7;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 7;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000)  	return 8;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000)  	return 8;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 8;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000)  	return 9;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000)  	return 9;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 9;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 10;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000000)  	return 11;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000000)  	return 11;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 11;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000000)  	return 12;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000000)  	return 12;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 12;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000000)  	return 13;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000000)  	return 13;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 13;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000000000)  	return 14;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000000000)  	return 14;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 14;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000000000)  	return 15;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000000000)  	return 15;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 15;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000000000)  	return 16;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000000000)  	return 16;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 16;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000000000000)  	return 17;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 100000000000000000)  	return 17;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 17;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000000000000)  	return 18;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 1000000000000000000)  	return 18;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 18;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000000000000)  	return 19;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000000000000)  	return 19;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 19;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 20;  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + 48);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + 48);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)(n + 48);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 97);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,MathUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 97);  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [2] = MathUtils.IntToHex ((c >> 12) & '\x000f');  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [2] = MathUtils.IntToHex ((c >> 12) & '\x000f');  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [3] = MathUtils.IntToHex ((c >> 8) & '\x000f');  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [3] = MathUtils.IntToHex ((c >> 8) & '\x000f');  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [4] = MathUtils.IntToHex ((c >> 4) & '\x000f');  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [4] = MathUtils.IntToHex ((c >> 4) & '\x000f');  
Magic Number,uWebshop.Newtonsoft.Json.Utilities,StringUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer [5] = MathUtils.IntToHex (c & '\x000f');  
Magic Number,uWebshop.Domain.Services,ProductInfoSellableUnitPriceSource,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\SellableUnitPriceService.cs,GetPrice,The following statement contains a magic number: return hasSellableUnitSaleDiscount ? (int)((100 - (long)_product.DiscountPercentage) * suBasePrice / 100 - _product.DiscountAmountInCents) : suBasePrice;  
Magic Number,uWebshop.Domain.Services,ProductInfoSellableUnitPriceSource,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\SellableUnitPriceService.cs,GetPrice,The following statement contains a magic number: return hasSellableUnitSaleDiscount ? (int)((100 - (long)_product.DiscountPercentage) * suBasePrice / 100 - _product.DiscountAmountInCents) : suBasePrice;  
Magic Number,uWebshop.Domain.Services,StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService.cs,LocalizeCatalogUrl,The following statement contains a magic number: if (store.CanonicalStoreURL == null || store.StoreURL == null) {  	LogWarningOfDelayMaximumOncePer5Minutes (store);  	Thread.Sleep (300);  }  
Magic Number,uWebshop.Domain.Services,StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService.cs,LocalizeCatalogUrl,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,uWebshop.Domain.Services,StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService.cs,LogWarningOfDelayMaximumOncePer5Minutes,The following statement contains a magic number: if (orders == null) {  	cache.Set ("3d3b71e0-af59-4798-b40f-fcd39f9acfac" + message' string.Empty' new CacheItemPolicy {  		AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (5)  	});  	Log.Instance.LogWarning (message);  }  
Magic Number,uWebshop.Domain.Services,StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\StoreUrlInFrontBasedOnCurrentNodeUrlLocalizationService.cs,LogWarningOfDelayMaximumOncePer5Minutes,The following statement contains a magic number: cache.Set ("3d3b71e0-af59-4798-b40f-fcd39f9acfac" + message' string.Empty' new CacheItemPolicy {  	AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (5)  });  
Magic Number,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The following statement contains a magic number: if (absolutePath.EndsWith (".aspx"))  	absolutePath = absolutePath.Remove (absolutePath.Length - 5);  
Magic Number,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,ResolveUwebshopEntityUrl,The following statement contains a magic number: absolutePath = absolutePath.Remove (absolutePath.Length - 5);  
Magic Number,uWebshop.Domain.Services,UrlRewritingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\UrlRewritingService.cs,FixUrlForRewrite,The following statement contains a magic number: if (url.StartsWith ("http")) {  	var absUrlStart = url.IndexOf ('/'' 8);  	return url.Substring (absUrlStart);  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: foreach (var field in fields) {  	if (field.Key.ToLower () == "customercountry") {  		if (field.Value != "0") {  			order.CustomerInfo.CountryCode = field.Value;  			if (field.Value.Length > 4) {  				Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  			}  		}  	}  	if (field.Key.ToLower () == "shippingcountry") {  		if (field.Value != "0") {  			order.CustomerInfo.ShippingCountryCode = field.Value;  			if (field.Value.Length > 4) {  				Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  			}  		}  	}  	if (field.Key.ToLower () == "customervatnumber") {  		order.SetVATNumber (field.Value);  	}  	if (field.Key.ToLower () == "customerregion") {  		order.CustomerInfo.RegionCode = field.Value;  		order._regionalVatInCents = null;  		if (field.Value.Length > 4) {  			Log.Instance.LogDebug (string.Format ("customerregion Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  		}  	}  	if (field.Key.ToLower () == "acceptsmarketing" || field.Key.ToLower () == "customeracceptsmarketing") {  		if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketing" || field.Value == "customeracceptsmarketing") {  			order.CustomerInfo.AcceptsMarketing = true;  		} else {  			order.CustomerInfo.AcceptsMarketing = false;  		}  	}  	// 'hack' because if you an empty checkbox is not send to the browser' by supporting this option the developer can add a hidden input 'false' field and make it checked using javascript.  	if (field.Key.ToLower () == "acceptsmarketingfalse" || field.Key.ToLower () == "customeracceptsmarketingfalse") {  		if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketingfalse" || field.Value == "customeracceptsmarketingfalse") {  			order.CustomerInfo.AcceptsMarketing = false;  		}  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: foreach (var field in fields) {  	if (field.Key.ToLower () == "customercountry") {  		if (field.Value != "0") {  			order.CustomerInfo.CountryCode = field.Value;  			if (field.Value.Length > 4) {  				Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  			}  		}  	}  	if (field.Key.ToLower () == "shippingcountry") {  		if (field.Value != "0") {  			order.CustomerInfo.ShippingCountryCode = field.Value;  			if (field.Value.Length > 4) {  				Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  			}  		}  	}  	if (field.Key.ToLower () == "customervatnumber") {  		order.SetVATNumber (field.Value);  	}  	if (field.Key.ToLower () == "customerregion") {  		order.CustomerInfo.RegionCode = field.Value;  		order._regionalVatInCents = null;  		if (field.Value.Length > 4) {  			Log.Instance.LogDebug (string.Format ("customerregion Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  		}  	}  	if (field.Key.ToLower () == "acceptsmarketing" || field.Key.ToLower () == "customeracceptsmarketing") {  		if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketing" || field.Value == "customeracceptsmarketing") {  			order.CustomerInfo.AcceptsMarketing = true;  		} else {  			order.CustomerInfo.AcceptsMarketing = false;  		}  	}  	// 'hack' because if you an empty checkbox is not send to the browser' by supporting this option the developer can add a hidden input 'false' field and make it checked using javascript.  	if (field.Key.ToLower () == "acceptsmarketingfalse" || field.Key.ToLower () == "customeracceptsmarketingfalse") {  		if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketingfalse" || field.Value == "customeracceptsmarketingfalse") {  			order.CustomerInfo.AcceptsMarketing = false;  		}  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: foreach (var field in fields) {  	if (field.Key.ToLower () == "customercountry") {  		if (field.Value != "0") {  			order.CustomerInfo.CountryCode = field.Value;  			if (field.Value.Length > 4) {  				Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  			}  		}  	}  	if (field.Key.ToLower () == "shippingcountry") {  		if (field.Value != "0") {  			order.CustomerInfo.ShippingCountryCode = field.Value;  			if (field.Value.Length > 4) {  				Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  			}  		}  	}  	if (field.Key.ToLower () == "customervatnumber") {  		order.SetVATNumber (field.Value);  	}  	if (field.Key.ToLower () == "customerregion") {  		order.CustomerInfo.RegionCode = field.Value;  		order._regionalVatInCents = null;  		if (field.Value.Length > 4) {  			Log.Instance.LogDebug (string.Format ("customerregion Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  		}  	}  	if (field.Key.ToLower () == "acceptsmarketing" || field.Key.ToLower () == "customeracceptsmarketing") {  		if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketing" || field.Value == "customeracceptsmarketing") {  			order.CustomerInfo.AcceptsMarketing = true;  		} else {  			order.CustomerInfo.AcceptsMarketing = false;  		}  	}  	// 'hack' because if you an empty checkbox is not send to the browser' by supporting this option the developer can add a hidden input 'false' field and make it checked using javascript.  	if (field.Key.ToLower () == "acceptsmarketingfalse" || field.Key.ToLower () == "customeracceptsmarketingfalse") {  		if (field.Value == "1" || field.Value == "true" || field.Value == "on" || field.Value == "acceptsmarketingfalse" || field.Value == "customeracceptsmarketingfalse") {  			order.CustomerInfo.AcceptsMarketing = false;  		}  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Key.ToLower () == "customercountry") {  	if (field.Value != "0") {  		order.CustomerInfo.CountryCode = field.Value;  		if (field.Value.Length > 4) {  			Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  		}  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Value != "0") {  	order.CustomerInfo.CountryCode = field.Value;  	if (field.Value.Length > 4) {  		Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Value.Length > 4) {  	Log.Instance.LogDebug (string.Format ("customerCountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Key.ToLower () == "shippingcountry") {  	if (field.Value != "0") {  		order.CustomerInfo.ShippingCountryCode = field.Value;  		if (field.Value.Length > 4) {  			Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  		}  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Value != "0") {  	order.CustomerInfo.ShippingCountryCode = field.Value;  	if (field.Value.Length > 4) {  		Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Value.Length > 4) {  	Log.Instance.LogDebug (string.Format ("shippingcountry Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Key.ToLower () == "customerregion") {  	order.CustomerInfo.RegionCode = field.Value;  	order._regionalVatInCents = null;  	if (field.Value.Length > 4) {  		Log.Instance.LogDebug (string.Format ("customerregion Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  	}  }  
Magic Number,uWebshop.Domain.Services,OrderUpdatingService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Services\OrderUpdatingService.cs,AddCustomerFields,The following statement contains a magic number: if (field.Value.Length > 4) {  	Log.Instance.LogDebug (string.Format ("customerregion Length == {0} Value: {1}' Possible added Country.Name instead of Country.Code?"' field.Key.Length' field.Value));  }  
Magic Number,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetCurrentCulture,The following statement contains a magic number: cultureInfo.NumberFormat.CurrencyPositivePattern = 2;  
Magic Number,uWebshop.Domain.Helpers,StoreHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\StoreHelper.cs,GetCurrentCulture,The following statement contains a magic number: cultureInfo.NumberFormat.CurrencyNegativePattern = 2;  
Magic Number,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,IsCompletedOrderWithinValidLifetime,The following statement contains a magic number: return completedOrderCookie != null && (completedOrderCookie == order.UniqueOrderId.ToString () && order.ConfirmDate.GetValueOrDefault ().AddMinutes (10) >= DateTime.Now);  
Magic Number,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,IsCompletedOrderWithinValidLifetime,The following statement contains a magic number: return completedOrderCookie != null && (completedOrderCookie == order.UniqueId.ToString () && order.ConfirmDate.AddMinutes (10) >= DateTime.Now);  
Magic Number,uWebshop.Domain.Helpers,VatCalculator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\VatCalculator.cs,WithVat,The following statement contains a magic number: return (int)Math.Round (withoutVat * (100 + vat) / 100' MidpointRounding.AwayFromZero);  
Magic Number,uWebshop.Domain.Helpers,VatCalculator,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\VatCalculator.cs,WithVat,The following statement contains a magic number: return (int)Math.Round (withoutVat * (100 + vat) / 100' MidpointRounding.AwayFromZero);  
Magic Number,VATChecker,ViesVatCheckService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\VATChecking\VATchecker.cs,ExtractCountryCodeFromVatNumber,The following statement contains a magic number: if (Regex.IsMatch (number' "^[A-Za-z]{2}")) {  	VATNumber = number.Remove (0' 2);  	CountryCode = number.Remove (2);  } else {  	VATNumber = number;  }  
Magic Number,VATChecker,ViesVatCheckService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\VATChecking\VATchecker.cs,ExtractCountryCodeFromVatNumber,The following statement contains a magic number: if (Regex.IsMatch (number' "^[A-Za-z]{2}")) {  	VATNumber = number.Remove (0' 2);  	CountryCode = number.Remove (2);  } else {  	VATNumber = number;  }  
Magic Number,VATChecker,ViesVatCheckService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\VATChecking\VATchecker.cs,ExtractCountryCodeFromVatNumber,The following statement contains a magic number: VATNumber = number.Remove (0' 2);  
Magic Number,VATChecker,ViesVatCheckService,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Businesslogic\VATChecking\VATchecker.cs,ExtractCountryCodeFromVatNumber,The following statement contains a magic number: CountryCode = number.Remove (2);  
Missing Default,uWebshop.Domain,ShippingProvider,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Model\ShippingProvider.cs,IsApplicableToOrder,The following switch statement is missing a default case: switch (TypeOfRange) {  case ShippingRangeType.Quantity:  	int quantity = orderInfo.OrderLines.Sum (line => line.ProductInfo.ItemCount.GetValueOrDefault (1));  	// orderInfo.OrderLines.Aggregate<OrderLine' decimal>(0' (current' orderLine) => (decimal) (current + orderLine.ProductInfo.ItemCount));  	return (quantity >= RangeFrom && quantity < RangeTo);  case ShippingRangeType.OrderAmount:  	int subTotal = orderInfo.OrderLines.Sum (orderLine => orderLine.AmountInCents);  	return (subTotal >= RangeFrom && subTotal < RangeTo);  case ShippingRangeType.Weight:  	double weight = orderInfo.OrderLines.Sum (orderLine => orderLine.OrderLineWeight);  	return (weight >= Convert.ToDouble (RangeFrom) && weight < Convert.ToDouble (RangeTo));  case ShippingRangeType.None:  	return true;  }  
Missing Default,uWebshop.Newtonsoft.Json.Converters,ExpandoObjectConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\ExpandoObjectConverter.cs,ReadObject,The following switch statement is missing a default case: switch (reader.TokenType) {  case JsonToken.PropertyName:  	string propertyName = reader.Value.ToString ();  	if (!reader.Read ())  		throw JsonSerializationException.Create (reader' "Unexpected end when reading ExpandoObject.");  	object v = ReadValue (reader);  	expandoObject [propertyName] = v;  	break;  case JsonToken.Comment:  	break;  case JsonToken.EndObject:  	return expandoObject;  }  
Missing Default,uWebshop.Newtonsoft.Json.Converters,RegexConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\RegexConverter.cs,ReadRegexString,The following switch statement is missing a default case: switch (c) {  case 'i':  	options |= RegexOptions.IgnoreCase;  	break;  case 'm':  	options |= RegexOptions.Multiline;  	break;  case 's':  	options |= RegexOptions.Singleline;  	break;  case 'x':  	options |= RegexOptions.ExplicitCapture;  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Converters,RegexConverter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Converters\RegexConverter.cs,ReadRegexObject,The following switch statement is missing a default case: switch (reader.TokenType) {  case JsonToken.PropertyName:  	string propertyName = reader.Value.ToString ();  	if (!reader.Read ())  		throw JsonSerializationException.Create (reader' "Unexpected end when reading Regex.");  	if (string.Equals (propertyName' PatternName' StringComparison.OrdinalIgnoreCase))  		pattern = (string)reader.Value;  	else if (string.Equals (propertyName' OptionsName' StringComparison.OrdinalIgnoreCase))  		options = serializer.Deserialize<RegexOptions> (reader);  	else  		reader.Skip ();  	break;  case JsonToken.Comment:  	break;  case JsonToken.EndObject:  	if (pattern == null)  		throw JsonSerializationException.Create (reader' "Error deserializing Regex. No pattern found.");  	return new Regex (pattern' options ?? RegexOptions.None);  }  
Missing Default,uWebshop.Newtonsoft.Json,JsonConvert,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonConvert.cs,ToString,The following switch statement is missing a default case: switch (typeCode) {  case PrimitiveTypeCode.String:  	return ToString ((string)value);  case PrimitiveTypeCode.Char:  	return ToString ((char)value);  case PrimitiveTypeCode.Boolean:  	return ToString ((bool)value);  case PrimitiveTypeCode.SByte:  	return ToString ((sbyte)value);  case PrimitiveTypeCode.Int16:  	return ToString ((short)value);  case PrimitiveTypeCode.UInt16:  	return ToString ((ushort)value);  case PrimitiveTypeCode.Int32:  	return ToString ((int)value);  case PrimitiveTypeCode.Byte:  	return ToString ((byte)value);  case PrimitiveTypeCode.UInt32:  	return ToString ((uint)value);  case PrimitiveTypeCode.Int64:  	return ToString ((long)value);  case PrimitiveTypeCode.UInt64:  	return ToString ((ulong)value);  case PrimitiveTypeCode.Single:  	return ToString ((float)value);  case PrimitiveTypeCode.Double:  	return ToString ((double)value);  case PrimitiveTypeCode.DateTime:  	return ToString ((DateTime)value);  case PrimitiveTypeCode.Decimal:  	return ToString ((decimal)value);  #if !(NETFX_CORE || PORTABLE)  case PrimitiveTypeCode.DBNull:  	return Null;  #endif  #if !NET20  case PrimitiveTypeCode.DateTimeOffset:  	return ToString ((DateTimeOffset)value);  #endif  case PrimitiveTypeCode.Guid:  	return ToString ((Guid)value);  case PrimitiveTypeCode.Uri:  	return ToString ((Uri)value);  case PrimitiveTypeCode.TimeSpan:  	return ToString ((TimeSpan)value);  }  
Missing Default,uWebshop.Newtonsoft.Json,JsonPosition,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonPosition.cs,WriteTo,The following switch statement is missing a default case: switch (Type) {  case JsonContainerType.Object:  	if (sb.Length > 0)  		sb.Append (".");  	sb.Append (PropertyName);  	break;  case JsonContainerType.Array:  case JsonContainerType.Constructor:  	sb.Append ("[");  	sb.Append (Position);  	sb.Append ("]");  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json,JsonReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\JsonNet\JsonReader.cs,SetToken,The following switch statement is missing a default case: switch (newToken) {  case JsonToken.StartObject:  	_currentState = State.ObjectStart;  	Push (JsonContainerType.Object);  	break;  case JsonToken.StartArray:  	_currentState = State.ArrayStart;  	Push (JsonContainerType.Array);  	break;  case JsonToken.StartConstructor:  	_currentState = State.ConstructorStart;  	Push (JsonContainerType.Constructor);  	break;  case JsonToken.EndObject:  	ValidateEnd (JsonToken.EndObject);  	break;  case JsonToken.EndArray:  	ValidateEnd (JsonToken.EndArray);  	break;  case JsonToken.EndConstructor:  	ValidateEnd (JsonToken.EndConstructor);  	break;  case JsonToken.PropertyName:  	_currentState = State.Property;  	_currentPosition.PropertyName = (string)value;  	break;  case JsonToken.Undefined:  case JsonToken.Integer:  case JsonToken.Float:  case JsonToken.Boolean:  case JsonToken.Null:  case JsonToken.Date:  case JsonToken.String:  case JsonToken.Raw:  case JsonToken.Bytes:  	_currentState = (Peek () != JsonContainerType.None) ? State.PostValue : State.Finished;  	UpdateScopeWithFinishedValue ();  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Linq,JToken,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JToken.cs,ToObject,The following switch statement is missing a default case: switch (typeCode) {  case PrimitiveTypeCode.BooleanNullable:  	return (bool?)this;  case PrimitiveTypeCode.Boolean:  	return (bool)this;  case PrimitiveTypeCode.CharNullable:  	return (char?)this;  case PrimitiveTypeCode.Char:  	return (char)this;  case PrimitiveTypeCode.SByte:  	return (sbyte?)this;  case PrimitiveTypeCode.SByteNullable:  	return (sbyte)this;  case PrimitiveTypeCode.ByteNullable:  	return (byte?)this;  case PrimitiveTypeCode.Byte:  	return (byte)this;  case PrimitiveTypeCode.Int16Nullable:  	return (short?)this;  case PrimitiveTypeCode.Int16:  	return (short)this;  case PrimitiveTypeCode.UInt16Nullable:  	return (ushort?)this;  case PrimitiveTypeCode.UInt16:  	return (ushort)this;  case PrimitiveTypeCode.Int32Nullable:  	return (int?)this;  case PrimitiveTypeCode.Int32:  	return (int)this;  case PrimitiveTypeCode.UInt32Nullable:  	return (uint?)this;  case PrimitiveTypeCode.UInt32:  	return (uint)this;  case PrimitiveTypeCode.Int64Nullable:  	return (long?)this;  case PrimitiveTypeCode.Int64:  	return (long)this;  case PrimitiveTypeCode.UInt64Nullable:  	return (ulong?)this;  case PrimitiveTypeCode.UInt64:  	return (ulong)this;  case PrimitiveTypeCode.SingleNullable:  	return (float?)this;  case PrimitiveTypeCode.Single:  	return (float)this;  case PrimitiveTypeCode.DoubleNullable:  	return (double?)this;  case PrimitiveTypeCode.Double:  	return (double)this;  case PrimitiveTypeCode.DecimalNullable:  	return (decimal?)this;  case PrimitiveTypeCode.Decimal:  	return (decimal)this;  case PrimitiveTypeCode.DateTimeNullable:  	return (DateTime?)this;  case PrimitiveTypeCode.DateTime:  	return (DateTime)this;  #if !NET20  case PrimitiveTypeCode.DateTimeOffsetNullable:  	return (DateTimeOffset?)this;  case PrimitiveTypeCode.DateTimeOffset:  	return (DateTimeOffset)this;  #endif  case PrimitiveTypeCode.String:  	return (string)this;  case PrimitiveTypeCode.GuidNullable:  	return (Guid?)this;  case PrimitiveTypeCode.Guid:  	return (Guid)this;  case PrimitiveTypeCode.Uri:  	return (Uri)this;  case PrimitiveTypeCode.TimeSpanNullable:  	return (TimeSpan?)this;  case PrimitiveTypeCode.TimeSpan:  	return (TimeSpan)this;  #if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  case PrimitiveTypeCode.BigIntegerNullable:  	return ToBigIntegerNullable (this);  case PrimitiveTypeCode.BigInteger:  	return ToBigInteger (this);  #endif  }  
Missing Default,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation) {  case ExpressionType.Add:  case ExpressionType.AddAssign:  	result = i1 + i2;  	return true;  case ExpressionType.Subtract:  case ExpressionType.SubtractAssign:  	result = i1 - i2;  	return true;  case ExpressionType.Multiply:  case ExpressionType.MultiplyAssign:  	result = i1 * i2;  	return true;  case ExpressionType.Divide:  case ExpressionType.DivideAssign:  	result = i1 / i2;  	return true;  }  
Missing Default,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation) {  case ExpressionType.Add:  case ExpressionType.AddAssign:  	result = d1 + d2;  	return true;  case ExpressionType.Subtract:  case ExpressionType.SubtractAssign:  	result = d1 - d2;  	return true;  case ExpressionType.Multiply:  case ExpressionType.MultiplyAssign:  	result = d1 * d2;  	return true;  case ExpressionType.Divide:  case ExpressionType.DivideAssign:  	result = d1 / d2;  	return true;  }  
Missing Default,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation) {  case ExpressionType.Add:  case ExpressionType.AddAssign:  	result = d1 + d2;  	return true;  case ExpressionType.Subtract:  case ExpressionType.SubtractAssign:  	result = d1 - d2;  	return true;  case ExpressionType.Multiply:  case ExpressionType.MultiplyAssign:  	result = d1 * d2;  	return true;  case ExpressionType.Divide:  case ExpressionType.DivideAssign:  	result = d1 / d2;  	return true;  }  
Missing Default,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation) {  case ExpressionType.Add:  case ExpressionType.AddAssign:  	result = l1 + l2;  	return true;  case ExpressionType.Subtract:  case ExpressionType.SubtractAssign:  	result = l1 - l2;  	return true;  case ExpressionType.Multiply:  case ExpressionType.MultiplyAssign:  	result = l1 * l2;  	return true;  case ExpressionType.Divide:  case ExpressionType.DivideAssign:  	result = l1 / l2;  	return true;  }  
Missing Default,uWebshop.Newtonsoft.Json.Linq,JValue,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Linq\JValue.cs,WriteTo,The following switch statement is missing a default case: switch (_valueType) {  case JTokenType.Comment:  	writer.WriteComment ((_value != null) ? _value.ToString () : null);  	return;  case JTokenType.Raw:  	writer.WriteRawValue ((_value != null) ? _value.ToString () : null);  	return;  case JTokenType.Null:  	writer.WriteNull ();  	return;  case JTokenType.Undefined:  	writer.WriteUndefined ();  	return;  case JTokenType.Integer:  	#if !(NET20 || NET35 || SILVERLIGHT || PORTABLE40 || PORTABLE)  	if (_value is BigInteger)  		writer.WriteValue ((BigInteger)_value);  	else  		#endif  		writer.WriteValue (Convert.ToInt64 (_value' CultureInfo.InvariantCulture));  	return;  case JTokenType.Float:  	if (_value is decimal)  		writer.WriteValue ((decimal)_value);  	else if (_value is double)  		writer.WriteValue ((double)_value);  	else if (_value is float)  		writer.WriteValue ((float)_value);  	else  		writer.WriteValue (Convert.ToDouble (_value' CultureInfo.InvariantCulture));  	return;  case JTokenType.String:  	writer.WriteValue ((_value != null) ? _value.ToString () : null);  	return;  case JTokenType.Boolean:  	writer.WriteValue (Convert.ToBoolean (_value' CultureInfo.InvariantCulture));  	return;  case JTokenType.Date:  	#if !NET20  	if (_value is DateTimeOffset)  		writer.WriteValue ((DateTimeOffset)_value);  	else  		#endif  		writer.WriteValue (Convert.ToDateTime (_value' CultureInfo.InvariantCulture));  	return;  case JTokenType.Bytes:  	writer.WriteValue ((byte[])_value);  	return;  case JTokenType.Guid:  case JTokenType.Uri:  case JTokenType.TimeSpan:  	writer.WriteValue ((_value != null) ? _value.ToString () : null);  	return;  }  
Missing Default,uWebshop.Newtonsoft.Json.Schema,JsonSchemaBuilder,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Schema\JsonSchemaBuilder.cs,ProcessSchemaProperties,The following switch statement is missing a default case: switch (property.Key) {  case JsonSchemaConstants.TypePropertyName:  	CurrentSchema.Type = ProcessType (property.Value);  	break;  case JsonSchemaConstants.IdPropertyName:  	CurrentSchema.Id = (string)property.Value;  	break;  case JsonSchemaConstants.TitlePropertyName:  	CurrentSchema.Title = (string)property.Value;  	break;  case JsonSchemaConstants.DescriptionPropertyName:  	CurrentSchema.Description = (string)property.Value;  	break;  case JsonSchemaConstants.PropertiesPropertyName:  	CurrentSchema.Properties = ProcessProperties (property.Value);  	break;  case JsonSchemaConstants.ItemsPropertyName:  	ProcessItems (property.Value);  	break;  case JsonSchemaConstants.AdditionalPropertiesPropertyName:  	ProcessAdditionalProperties (property.Value);  	break;  case JsonSchemaConstants.AdditionalItemsPropertyName:  	ProcessAdditionalItems (property.Value);  	break;  case JsonSchemaConstants.PatternPropertiesPropertyName:  	CurrentSchema.PatternProperties = ProcessProperties (property.Value);  	break;  case JsonSchemaConstants.RequiredPropertyName:  	CurrentSchema.Required = (bool)property.Value;  	break;  case JsonSchemaConstants.RequiresPropertyName:  	CurrentSchema.Requires = (string)property.Value;  	break;  case JsonSchemaConstants.MinimumPropertyName:  	CurrentSchema.Minimum = (double)property.Value;  	break;  case JsonSchemaConstants.MaximumPropertyName:  	CurrentSchema.Maximum = (double)property.Value;  	break;  case JsonSchemaConstants.ExclusiveMinimumPropertyName:  	CurrentSchema.ExclusiveMinimum = (bool)property.Value;  	break;  case JsonSchemaConstants.ExclusiveMaximumPropertyName:  	CurrentSchema.ExclusiveMaximum = (bool)property.Value;  	break;  case JsonSchemaConstants.MaximumLengthPropertyName:  	CurrentSchema.MaximumLength = (int)property.Value;  	break;  case JsonSchemaConstants.MinimumLengthPropertyName:  	CurrentSchema.MinimumLength = (int)property.Value;  	break;  case JsonSchemaConstants.MaximumItemsPropertyName:  	CurrentSchema.MaximumItems = (int)property.Value;  	break;  case JsonSchemaConstants.MinimumItemsPropertyName:  	CurrentSchema.MinimumItems = (int)property.Value;  	break;  case JsonSchemaConstants.DivisibleByPropertyName:  	CurrentSchema.DivisibleBy = (double)property.Value;  	break;  case JsonSchemaConstants.DisallowPropertyName:  	CurrentSchema.Disallow = ProcessType (property.Value);  	break;  case JsonSchemaConstants.DefaultPropertyName:  	CurrentSchema.Default = property.Value.DeepClone ();  	break;  case JsonSchemaConstants.HiddenPropertyName:  	CurrentSchema.Hidden = (bool)property.Value;  	break;  case JsonSchemaConstants.ReadOnlyPropertyName:  	CurrentSchema.ReadOnly = (bool)property.Value;  	break;  case JsonSchemaConstants.FormatPropertyName:  	CurrentSchema.Format = (string)property.Value;  	break;  case JsonSchemaConstants.PatternPropertyName:  	CurrentSchema.Pattern = (string)property.Value;  	break;  case JsonSchemaConstants.EnumPropertyName:  	ProcessEnum (property.Value);  	break;  case JsonSchemaConstants.ExtendsPropertyName:  	ProcessExtends (property.Value);  	break;  case JsonSchemaConstants.UniqueItemsPropertyName:  	CurrentSchema.UniqueItems = (bool)property.Value;  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,CreateObject,The following switch statement is missing a default case: switch (contract.ContractType) {  case JsonContractType.Object: {  	bool createdFromNonDefaultConstructor = false;  	var objectContract = (JsonObjectContract)contract;  	object targetObject;  	if (existingValue != null)  		targetObject = existingValue;  	else  		targetObject = CreateNewObject (reader' objectContract' member' containerMember' id' out createdFromNonDefaultConstructor);  	// don't populate if read from non-default constructor because the object has already been read  	if (createdFromNonDefaultConstructor)  		return targetObject;  	return PopulateObject (targetObject' reader' objectContract' member' id);  }  case JsonContractType.Primitive: {  	var primitiveContract = (JsonPrimitiveContract)contract;  	// if the content is inside $value then read past it  	if (reader.TokenType == JsonToken.PropertyName && string.Equals (reader.Value.ToString ()' JsonTypeReflector.ValuePropertyName' StringComparison.Ordinal)) {  		CheckedRead (reader);  		// the token should not be an object because the $type value could have been included in the object  		// without needing the $value property  		if (reader.TokenType == JsonToken.StartObject)  			throw JsonSerializationException.Create (reader' "Unexpected token when deserializing primitive value: " + reader.TokenType);  		object value = CreateValueInternal (reader' objectType' primitiveContract' member' null' null' existingValue);  		CheckedRead (reader);  		return value;  	}  	break;  }  case JsonContractType.Dictionary: {  	var dictionaryContract = (JsonDictionaryContract)contract;  	object targetDictionary;  	if (existingValue == null) {  		bool createdFromNonDefaultConstructor;  		IDictionary dictionary = CreateNewDictionary (reader' dictionaryContract' out createdFromNonDefaultConstructor);  		if (id != null && createdFromNonDefaultConstructor)  			throw JsonSerializationException.Create (reader' "Cannot preserve reference to readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType));  		if (contract.OnSerializingCallbacks.Count > 0 && createdFromNonDefaultConstructor)  			throw JsonSerializationException.Create (reader' "Cannot call OnSerializing on readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType));  		if (contract.OnErrorCallbacks.Count > 0 && createdFromNonDefaultConstructor)  			throw JsonSerializationException.Create (reader' "Cannot call OnError on readonly list' or dictionary created from a non-default constructor: {0}.".FormatWith (CultureInfo.InvariantCulture' contract.UnderlyingType));  		PopulateDictionary (dictionary' reader' dictionaryContract' member' id);  		if (createdFromNonDefaultConstructor) {  			var constructor = dictionaryContract.ParametrizedConstructor as ConstructorInfo;  			if (constructor != null)  				return constructor.Invoke (new object[] {  					dictionary  				});  			return dictionaryContract.ParametrizedConstructor.Invoke (null' new object[] {  				dictionary  			});  		} else if (dictionary is IWrappedDictionary) {  			return ((IWrappedDictionary)dictionary).UnderlyingDictionary;  		}  		targetDictionary = dictionary;  	} else {  		targetDictionary = PopulateDictionary (dictionaryContract.ShouldCreateWrapper ? dictionaryContract.CreateWrapper (existingValue) : (IDictionary)existingValue' reader' dictionaryContract' member' id);  	}  	return targetDictionary;  }  #if !(NET35 || NET20 || PORTABLE40)  case JsonContractType.Dynamic:  	var dynamicContract = (JsonDynamicContract)contract;  	return CreateDynamic (reader' dynamicContract' member' id);  #endif  #if !(SILVERLIGHT || NETFX_CORE || PORTABLE40 || PORTABLE)  case JsonContractType.Serializable:  	var serializableContract = (JsonISerializableContract)contract;  	return CreateISerializable (reader' serializableContract' member' id);  #endif  }  
Missing Default,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalReader,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalReader.cs,EndObject,The following switch statement is missing a default case: switch (presence) {  case PropertyPresence.None:  	if (resolvedRequired == Required.AllowNull || resolvedRequired == Required.Always)  		throw JsonSerializationException.Create (reader' "Required property '{0}' not found in JSON.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName));  	if (property.PropertyContract == null)  		property.PropertyContract = GetContractSafe (property.PropertyType);  	if (HasFlag (property.DefaultValueHandling.GetValueOrDefault (Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && property.Writable)  		property.ValueProvider.SetValue (newObject' EnsureType (reader' property.GetResolvedDefaultValue ()' CultureInfo.InvariantCulture' property.PropertyContract' property.PropertyType));  	break;  case PropertyPresence.Null:  	if (resolvedRequired == Required.Always)  		throw JsonSerializationException.Create (reader' "Required property '{0}' expects a value but got null.".FormatWith (CultureInfo.InvariantCulture' property.PropertyName));  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The following switch statement is missing a default case: switch (valueContract.ContractType) {  case JsonContractType.Object:  	SerializeObject (writer' value' (JsonObjectContract)valueContract' member' containerContract' containerProperty);  	break;  case JsonContractType.Array:  	var arrayContract = (JsonArrayContract)valueContract;  	if (!arrayContract.IsMultidimensionalArray)  		SerializeList (writer' (IEnumerable)value' arrayContract' member' containerContract' containerProperty);  	else  		SerializeMultidimensionalArray (writer' (Array)value' arrayContract' member' containerContract' containerProperty);  	break;  case JsonContractType.Primitive:  	SerializePrimitive (writer' value' (JsonPrimitiveContract)valueContract' member' containerContract' containerProperty);  	break;  case JsonContractType.String:  	SerializeString (writer' value' (JsonStringContract)valueContract);  	break;  case JsonContractType.Dictionary:  	var dictionaryContract = (JsonDictionaryContract)valueContract;  	SerializeDictionary (writer' (value is IDictionary) ? (IDictionary)value : dictionaryContract.CreateWrapper (value)' dictionaryContract' member' containerContract' containerProperty);  	break;  #if !(NET35 || NET20 || PORTABLE40)  case JsonContractType.Dynamic:  	SerializeDynamic (writer' (IDynamicMetaObjectProvider)value' (JsonDynamicContract)valueContract' member' containerContract' containerProperty);  	break;  #endif  #if !(SILVERLIGHT || NETFX_CORE || PORTABLE40 || PORTABLE)  case JsonContractType.Serializable:  	SerializeISerializable (writer' (ISerializable)value' (JsonISerializableContract)valueContract' member' containerContract' containerProperty);  	break;  #endif  case JsonContractType.Linq:  	((JToken)value).WriteTo (writer' Serializer.Converters.ToArray ());  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The following switch statement is missing a default case: switch (referenceLoopHandling.GetValueOrDefault (Serializer._referenceLoopHandling)) {  case ReferenceLoopHandling.Error:  	throw JsonSerializationException.Create (null' writer.ContainerPath' message' null);  case ReferenceLoopHandling.Ignore:  	if (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose)  		TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' message + ". Skipping serializing self referenced value.")' null);  	return false;  case ReferenceLoopHandling.Serialize:  	if (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose)  		TraceWriter.Trace (TraceLevel.Verbose' JsonPosition.FormatMessage (null' writer.Path' message + ". Serializing self referenced value.")' null);  	return true;  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,DateTimeParser,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeParser.cs,ParseZone,The following switch statement is missing a default case: switch (ch) {  case '-':  	Zone = ParserTimeZone.LocalWestOfUtc;  	start += Lz_zz_zz;  	break;  case '+':  	Zone = ParserTimeZone.LocalEastOfUtc;  	start += Lz_zz_zz;  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,SwitchToLocalTime,The following switch statement is missing a default case: switch (value.Kind) {  case DateTimeKind.Unspecified:  	return new DateTime (value.Ticks' DateTimeKind.Local);  case DateTimeKind.Utc:  	return value.ToLocalTime ();  case DateTimeKind.Local:  	return value;  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,SwitchToUtcTime,The following switch statement is missing a default case: switch (value.Kind) {  case DateTimeKind.Unspecified:  	return new DateTime (value.Ticks' DateTimeKind.Utc);  case DateTimeKind.Utc:  	return value;  case DateTimeKind.Local:  	return value.ToUniversalTime ();  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,TryParseDateIso,The following switch statement is missing a default case: switch (dateTimeParser.Zone) {  case ParserTimeZone.Utc:  	d = new DateTime (d.Ticks' DateTimeKind.Utc);  	break;  case ParserTimeZone.LocalWestOfUtc: {  	var offset = new TimeSpan (dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);  	ticks = d.Ticks + offset.Ticks;  	if (ticks <= DateTime.MaxValue.Ticks) {  		d = new DateTime (ticks' DateTimeKind.Utc).ToLocalTime ();  	} else {  		ticks += d.GetUtcOffset ().Ticks;  		if (ticks > DateTime.MaxValue.Ticks)  			ticks = DateTime.MaxValue.Ticks;  		d = new DateTime (ticks' DateTimeKind.Local);  	}  	break;  }  case ParserTimeZone.LocalEastOfUtc: {  	var offset = new TimeSpan (dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);  	ticks = d.Ticks - offset.Ticks;  	if (ticks >= DateTime.MinValue.Ticks) {  		d = new DateTime (ticks' DateTimeKind.Utc).ToLocalTime ();  	} else {  		ticks += d.GetUtcOffset ().Ticks;  		if (ticks < DateTime.MinValue.Ticks)  			ticks = DateTime.MinValue.Ticks;  		d = new DateTime (ticks' DateTimeKind.Local);  	}  	break;  }  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following switch statement is missing a default case: switch (kind) {  case DateTimeKind.Unspecified:  	if (value != DateTime.MaxValue && value != DateTime.MinValue)  		pos = WriteDateTimeOffset (chars' pos' o' format);  	break;  case DateTimeKind.Local:  	pos = WriteDateTimeOffset (chars' pos' o' format);  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,DateTimeUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following switch statement is missing a default case: switch (kind) {  case DateTimeKind.Local:  	pos = WriteDateTimeOffset (chars' pos' offset ?? value.GetUtcOffset ()' format);  	break;  case DateTimeKind.Utc:  	chars [pos++] = 'Z';  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,The following switch statement is missing a default case: switch (current) {  case '[':  	scope++;  	break;  case ']':  	scope--;  	break;  case ''':  	if (scope == 0)  		return i;  	break;  }  
Missing Default,uWebshop.Newtonsoft.Json.Utilities,ReflectionUtils,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\NewtonsoftJsonNet\Utilities\ReflectionUtils.cs,GetDefaultValue,The following switch statement is missing a default case: switch (ConvertUtils.GetTypeCode (type)) {  case PrimitiveTypeCode.Boolean:  	return false;  case PrimitiveTypeCode.Char:  case PrimitiveTypeCode.SByte:  case PrimitiveTypeCode.Byte:  case PrimitiveTypeCode.Int16:  case PrimitiveTypeCode.UInt16:  case PrimitiveTypeCode.Int32:  case PrimitiveTypeCode.UInt32:  	return 0;  case PrimitiveTypeCode.Int64:  case PrimitiveTypeCode.UInt64:  	return 0L;  case PrimitiveTypeCode.Single:  	return 0f;  case PrimitiveTypeCode.Double:  	return 0.0;  case PrimitiveTypeCode.Decimal:  	return 0m;  case PrimitiveTypeCode.DateTime:  	return new DateTime ();  #if !(PORTABLE || PORTABLE40 || NET35 || NET20 || WINDOWS_PHONE || SILVERLIGHT)  case PrimitiveTypeCode.BigInteger:  	return new BigInteger ();  #endif  case PrimitiveTypeCode.Guid:  	return new Guid ();  #if !NET20  case PrimitiveTypeCode.DateTimeOffset:  	return new DateTimeOffset ();  #endif  }  
Missing Default,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The following switch statement is missing a default case: switch (paymentProvider.Type) {  case PaymentProviderType.OfflinePaymentAtCustomer:  case PaymentProviderType.OfflinePaymentInStore:  	if (!string.IsNullOrEmpty (paymentProvider.SuccesNodeId)) {  		int succesNodeId;  		int.TryParse (paymentProvider.SuccesNodeId' out succesNodeId);  		if (succesNodeId != 0) {  			var urlToReturn = IO.Container.Resolve<ICMSApplication> ().GetUrlForContentWithId (succesNodeId);  			if (!urlToReturn.ToString ().ToLower ().StartsWith ("http")) {  				urlToReturn = string.Format ("//{0}{1}"' currentDomain' urlToReturn);  			}  			Log.Instance.LogDebug ("HandlePaymentRequest SuccesNodeId: " + urlToReturn);  			return urlToReturn;  		}  	}  	break;  case PaymentProviderType.OnlinePayment:  	var iPaymentProvider = PaymentProviderHelper.GetAllIPaymentProviders ().FirstOrDefault (x => x.GetName ().ToLowerInvariant () == paymentProvider.Name.ToLowerInvariant ());  	if (iPaymentProvider != null) {  		var handler = PaymentProviderHelper.GetAllPaymentRequestHandlers ().FirstOrDefault (x => x.GetName ().ToLowerInvariant () == paymentProvider.Name.ToLowerInvariant ());  		if (handler != null) {  			try {  				orderInfo.PaymentInfo.TransactionMethod = iPaymentProvider.GetParameterRenderMethod ();  				var handlerResult = handler.CreatePaymentRequest (orderInfo);  				orderInfo.Save ();  				if (handlerResult == null) {  					Log.Instance.LogError ("HandlePaymentRequest handler.CreatePaymentRequest(orderInfo) == null");  					return "failed";  				}  			} catch (Exception ex) {  				Log.Instance.LogError ("HandlePaymentRequest handler.CreatePaymentRequest(orderInfo) FAILED " + ex);  				return "failed";  			}  		}  		switch (iPaymentProvider.GetParameterRenderMethod ()) {  		case PaymentTransactionMethod.Form:  		case PaymentTransactionMethod.Custom:  			if (!string.IsNullOrEmpty (paymentProvider.ControlNodeId)) {  				int controlNodeId;  				int.TryParse (paymentProvider.ControlNodeId' out controlNodeId);  				if (controlNodeId != 0) {  					string urlToReturn = IO.Container.Resolve<ICMSApplication> ().GetUrlForContentWithId (controlNodeId);  					urlToReturn = string.Format ("//{0}{1}"' currentDomain' urlToReturn);  					Log.Instance.LogDebug ("HandlePaymentRequest ControlNodeId: " + urlToReturn);  					return urlToReturn;  				}  			}  			Log.Instance.LogWarning ("HandlePaymentRequest PaymentTransactionMethod.Form/Custom FAILED - paymentProvider.ControlNodeId not found: try fallback to orderInfo.PaymentInfo.Url");  			if (!string.IsNullOrWhiteSpace (orderInfo.PaymentInfo.Url)) {  				string value = string.Format ("{0}{1}"' orderInfo.PaymentInfo.Url' "?" + orderInfo.PaymentInfo.Parameters);  				if (string.IsNullOrEmpty (orderInfo.PaymentInfo.Parameters)) {  					value = orderInfo.PaymentInfo.Url;  				}  				Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.QueryString: " + value);  				return value;  			}  			Log.Instance.LogWarning ("HandlePaymentRequest PaymentTransactionMethod.Form/Custom FAILED");  			return "failed";  		case PaymentTransactionMethod.QueryString:  			if (!string.IsNullOrWhiteSpace (orderInfo.PaymentInfo.Url)) {  				string value = string.Format ("{0}{1}"' orderInfo.PaymentInfo.Url' "?" + orderInfo.PaymentInfo.Parameters);  				if (string.IsNullOrEmpty (orderInfo.PaymentInfo.Parameters)) {  					value = orderInfo.PaymentInfo.Url;  				}  				Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.QueryString: " + value);  				return value;  			}  			Log.Instance.LogError ("HandlePaymentRequest PaymentTransactionMethod.QueryString FAILED");  			return "failed";  		case PaymentTransactionMethod.ServerPost:  			if (handler != null) {  				Log.Instance.LogDebug ("HandlePaymentRequest paymentRequestHandlers.GetName(): " + handler.GetName ());  				string nextURL = handler.GetPaymentUrl (orderInfo);  				Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost nextURL: " + nextURL);  				if (!string.IsNullOrEmpty (nextURL)) {  					Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost nextURL: " + nextURL);  					return nextURL;  				}  				Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost OrderInfo.PaymentInfo.Url: " + orderInfo.PaymentInfo.Url);  				if (!string.IsNullOrEmpty (orderInfo.PaymentInfo.Url)) {  					Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost OrderInfo.PaymentInfo.Url: " + orderInfo.PaymentInfo.Url);  					return orderInfo.PaymentInfo.Url;  				}  			}  			Log.Instance.LogError ("HandlePaymentRequest PaymentTransactionMethod.ServerPost FAILED: " + paymentProvider.Name);  			return "failed";  		case PaymentTransactionMethod.WebClient:  			return "webclient";  		case PaymentTransactionMethod.Inline:  			if (handler != null) {  				return handler.GetPaymentUrl (orderInfo);  			}  			return "inline";  		}  	}  	Log.Instance.LogError ("HandlePaymentRequest With Online Payment FAILED");  	return "failed";  }  
Missing Default,uWebshop.Domain.Helpers,OrderHelper,D:\newReposJune17\uWebshop_uWebshop-Releases\Core\uWebshop.Domain\Helpers\OrderHelper.cs,HandlePaymentRequest,The following switch statement is missing a default case: switch (iPaymentProvider.GetParameterRenderMethod ()) {  case PaymentTransactionMethod.Form:  case PaymentTransactionMethod.Custom:  	if (!string.IsNullOrEmpty (paymentProvider.ControlNodeId)) {  		int controlNodeId;  		int.TryParse (paymentProvider.ControlNodeId' out controlNodeId);  		if (controlNodeId != 0) {  			string urlToReturn = IO.Container.Resolve<ICMSApplication> ().GetUrlForContentWithId (controlNodeId);  			urlToReturn = string.Format ("//{0}{1}"' currentDomain' urlToReturn);  			Log.Instance.LogDebug ("HandlePaymentRequest ControlNodeId: " + urlToReturn);  			return urlToReturn;  		}  	}  	Log.Instance.LogWarning ("HandlePaymentRequest PaymentTransactionMethod.Form/Custom FAILED - paymentProvider.ControlNodeId not found: try fallback to orderInfo.PaymentInfo.Url");  	if (!string.IsNullOrWhiteSpace (orderInfo.PaymentInfo.Url)) {  		string value = string.Format ("{0}{1}"' orderInfo.PaymentInfo.Url' "?" + orderInfo.PaymentInfo.Parameters);  		if (string.IsNullOrEmpty (orderInfo.PaymentInfo.Parameters)) {  			value = orderInfo.PaymentInfo.Url;  		}  		Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.QueryString: " + value);  		return value;  	}  	Log.Instance.LogWarning ("HandlePaymentRequest PaymentTransactionMethod.Form/Custom FAILED");  	return "failed";  case PaymentTransactionMethod.QueryString:  	if (!string.IsNullOrWhiteSpace (orderInfo.PaymentInfo.Url)) {  		string value = string.Format ("{0}{1}"' orderInfo.PaymentInfo.Url' "?" + orderInfo.PaymentInfo.Parameters);  		if (string.IsNullOrEmpty (orderInfo.PaymentInfo.Parameters)) {  			value = orderInfo.PaymentInfo.Url;  		}  		Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.QueryString: " + value);  		return value;  	}  	Log.Instance.LogError ("HandlePaymentRequest PaymentTransactionMethod.QueryString FAILED");  	return "failed";  case PaymentTransactionMethod.ServerPost:  	if (handler != null) {  		Log.Instance.LogDebug ("HandlePaymentRequest paymentRequestHandlers.GetName(): " + handler.GetName ());  		string nextURL = handler.GetPaymentUrl (orderInfo);  		Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost nextURL: " + nextURL);  		if (!string.IsNullOrEmpty (nextURL)) {  			Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost nextURL: " + nextURL);  			return nextURL;  		}  		Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost OrderInfo.PaymentInfo.Url: " + orderInfo.PaymentInfo.Url);  		if (!string.IsNullOrEmpty (orderInfo.PaymentInfo.Url)) {  			Log.Instance.LogDebug ("HandlePaymentRequest PaymentTransactionMethod.ServerPost OrderInfo.PaymentInfo.Url: " + orderInfo.PaymentInfo.Url);  			return orderInfo.PaymentInfo.Url;  		}  	}  	Log.Instance.LogError ("HandlePaymentRequest PaymentTransactionMethod.ServerPost FAILED: " + paymentProvider.Name);  	return "failed";  case PaymentTransactionMethod.WebClient:  	return "webclient";  case PaymentTransactionMethod.Inline:  	if (handler != null) {  		return handler.GetPaymentUrl (orderInfo);  	}  	return "inline";  }  
