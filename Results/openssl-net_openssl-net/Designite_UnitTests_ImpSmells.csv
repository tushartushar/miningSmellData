Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,Cyclomatic complexity of the method is 12
Long Parameter List,UnitTests,TestRSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRSA.cs,SetKey,The method has 9 parameters. Parameters: key' n' e' d' p' q' dmp1' dmq1' iqmp
Long Parameter List,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,ValidateRemoteCert,The method has 5 parameters. Parameters: obj' cert' chain' depth' result
Long Parameter List,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,SelectClientCertificate,The method has 5 parameters. Parameters: sender' targetHost' localCerts' remoteCert' acceptableIssuers
Magic Number,UnitTests,SourceForgeBugs,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\SourceForgeBugs.cs,Bug3018093_2,The following statement contains a magic number: Assert.AreEqual(2' fsn1.Next());
Magic Number,UnitTests,SourceForgeBugs,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\SourceForgeBugs.cs,Bug3018093_2,The following statement contains a magic number: Assert.AreEqual(2' fsn2.Next());
Magic Number,UnitTests,SourceForgeBugs,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\SourceForgeBugs.cs,Bug3524222,The following statement contains a magic number: byte[] pattern = { 1' 2' 3 };
Magic Number,UnitTests,SourceForgeBugs,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\SourceForgeBugs.cs,Bug3524222,The following statement contains a magic number: byte[] pattern = { 1' 2' 3 };
Magic Number,UnitTests,SourceForgeBugs,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\SourceForgeBugs.cs,Bug3524222,The following statement contains a magic number: Assert.AreEqual(pattern' bio.ReadBytes(3).Array);
Magic Number,UnitTests,TestAES,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestAES.cs,TestCase,The following statement contains a magic number: const int PKCS5_SALT_LEN = 8;
Magic Number,UnitTests,TestDH,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDH.cs,TestCase,The following statement contains a magic number: DH a = new DH(64' DH.Generator5' cb' Console.Out);
Magic Number,UnitTests,TestDH,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDH.cs,TestCase,The following statement contains a magic number: aout.Length < 4 || astr != bstr
Magic Number,UnitTests,TestDH,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDH.cs,OnStatus,The following statement contains a magic number: switch (p) { 				case 0: cout.Write('.'); break; 				case 1: cout.Write('+'); break; 				case 2: cout.Write('*'); break; 				case 3: cout.WriteLine(); break; 			}
Magic Number,UnitTests,TestDH,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDH.cs,OnStatus,The following statement contains a magic number: switch (p) { 				case 0: cout.Write('.'); break; 				case 1: cout.Write('+'); break; 				case 2: cout.Write('*'); break; 				case 3: cout.WriteLine(); break; 			}
Magic Number,UnitTests,TestDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDSA.cs,DoTest,The following statement contains a magic number: Assert.AreEqual(105' dsa.Counter);
Magic Number,UnitTests,TestDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDSA.cs,DoTest,The following statement contains a magic number: Assert.AreEqual(2' dsa.H.ToInt32());
Magic Number,UnitTests,TestDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDSA.cs,OnStatus,The following statement contains a magic number: switch (p) { 				case 0: cout.Write('.'); num++; break; 				case 1: cout.Write('+'); break; 				case 2: cout.Write('*'); ok++; break; 				case 3: cout.WriteLine(); break; 			}
Magic Number,UnitTests,TestDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDSA.cs,OnStatus,The following statement contains a magic number: switch (p) { 				case 0: cout.Write('.'); num++; break; 				case 1: cout.Write('+'); break; 				case 2: cout.Write('*'); ok++; break; 				case 3: cout.WriteLine(); break; 			}
Magic Number,UnitTests,TestRSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRSA.cs,TestKey,The following statement contains a magic number: switch (v % 3) 			{ 				case 0: ctext_ex = Key1(key); break; 				case 1: ctext_ex = Key2(key); break; 				case 2: ctext_ex = Key3(key); break; 			}
Magic Number,UnitTests,TestRSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRSA.cs,TestKey,The following statement contains a magic number: switch (v % 3) 			{ 				case 0: ctext_ex = Key1(key); break; 				case 1: ctext_ex = Key2(key); break; 				case 2: ctext_ex = Key3(key); break; 			}
Magic Number,UnitTests,TestRSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRSA.cs,TestKey,The following statement contains a magic number: v / 3 >= 1
Magic Number,UnitTests,TestECDH,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestECDH.cs,test_ecdh_curve,The following statement contains a magic number: Assert.Greater(aout' 4);
Magic Number,UnitTests,TestECDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestECDSA.cs,test_builtin,The following statement contains a magic number: byte[] digest = Random.PseudoBytes(20);
Magic Number,UnitTests,TestECDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestECDSA.cs,test_builtin,The following statement contains a magic number: byte[] wrong_digest = Random.PseudoBytes(20);
Magic Number,UnitTests,TestECDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestECDSA.cs,test_builtin,The following statement contains a magic number: eckey.Group.Degree < 160
Magic Number,UnitTests,TestCryptoKey,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestCryptoKey.cs,CanCompareRSA,The following statement contains a magic number: rsa.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestCryptoKey,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestCryptoKey.cs,CanCompareRSA,The following statement contains a magic number: rsa2.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestCryptoKey,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestCryptoKey.cs,CanCreateFromRSA,The following statement contains a magic number: rsa.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanLoadFromPEM,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanLoadFromDER,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanLoadFromPKCS7_PEM,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanLoadFromPKCS7_DER,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanLoadFromPCKS12,The following statement contains a magic number: TestCert(cert' "CN=localhost"' "CN=Root"' 1235);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanCreatePKCS12,The following statement contains a magic number: TestCert(new_pfx.Certificate' "CN=localhost"' "CN=Root"' 1235);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanCreateWithArgs,The following statement contains a magic number: var serial = 101;
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanCreateWithArgs,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanGetAndSetProperties,The following statement contains a magic number: var serial = 101;
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanGetAndSetProperties,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CannotSetUnmatchedPrivateKey,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanCompare,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanSign,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanCheckPrivateKey,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanVerify,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanCreateRequest,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509Certificate.cs,CanAddExtensions,The following statement contains a magic number: var end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestHMAC,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestHMAC.cs,VerifyHMAC,The following statement contains a magic number: byte[] buf = Encoding.ASCII.GetBytes(new string('a'' 1000));
Magic Number,UnitTests,TestHMAC,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestHMAC.cs,VerifyHMAC,The following statement contains a magic number: i < 1000
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: byte[] buf = OpenSSL.Core.Random.PseudoBytes(2500);
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: uint[] n2 = new uint[16];
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: uint['] runs = new uint[2' 34];
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: uint['] runs = new uint[2' 34];
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: n2[(j >> 4) & 0x0f]++;
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: k < 8
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: nsign = 34;
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: nsign > 34
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((9654 < n1) && (n1 < 10346));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((9654 < n1) && (n1 < 10346));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: i < 16
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: d = (d * 8) / 25 - 500000;
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: d = (d * 8) / 25 - 500000;
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: d = (d * 8) / 25 - 500000;
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((103 < d) && (d < 5740));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((103 < d) && (d < 5740));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((2267 < runs[i' 0]) && (runs[i' 0] < 2733));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((2267 < runs[i' 0]) && (runs[i' 0] < 2733));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((1079 < runs[i' 1]) && (runs[i' 1] < 1421));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((1079 < runs[i' 1]) && (runs[i' 1] < 1421));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: i < 2
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.AreEqual(0' runs[0' 33]);
Magic Number,UnitTests,TestRandom,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.AreEqual(0' runs[1' 33]);
Magic Number,UnitTests,TestSHA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA.cs,TestCase,The following statement contains a magic number: byte[] buf = Encoding.ASCII.GetBytes(new string('a'' 1000));
Magic Number,UnitTests,TestSHA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA.cs,TestCase,The following statement contains a magic number: i < 1000
Magic Number,UnitTests,TestSHA1,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA1.cs,TestCase,The following statement contains a magic number: byte[] buf = Encoding.ASCII.GetBytes(new string('a'' 1000));
Magic Number,UnitTests,TestSHA1,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA1.cs,TestCase,The following statement contains a magic number: i < 1000
Magic Number,UnitTests,TestSHA256,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: i < 1000000
Magic Number,UnitTests,TestSHA256,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: str2 = BitConverter.ToString(results[2]);
Magic Number,UnitTests,TestSHA512,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA512.cs,TestCase,The following statement contains a magic number: this.GenericTest("SHA-512"' ctx' this.app' 288);
Magic Number,UnitTests,TestSHA512,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA512.cs,TestCase,The following statement contains a magic number: this.GenericTest("SHA-384"' ctx' this.addenum' 64);
Magic Number,UnitTests,TestSHA512,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < alen ? 1000000 - i : alen;
Magic Number,UnitTests,TestSHA512,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < alen ? 1000000 - i : alen;
Magic Number,UnitTests,TestSHA512,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: i < 1000000
Magic Number,UnitTests,TestSHA512,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: str2 = BitConverter.ToString(results[2]);
Magic Number,UnitTests,TestX509,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509.cs,TestRsaSha1,The following statement contains a magic number: rsa.GenerateKeys(2048' bn' OnGenerator' null);
Magic Number,UnitTests,TestX509,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509.cs,TestWithoutCfg,The following statement contains a magic number: rsa.GenerateKeys(2048' bn' OnGenerator' null);
Magic Number,UnitTests,TestX509,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509.cs,OnGenerator,The following statement contains a magic number: switch (p) 			{ 			case 0: 				cout.Write('.'); 				break; 			case 1: 				cout.Write('+'); 				break; 			case 2: 				cout.Write('*'); 				break; 			case 3: 				cout.WriteLine(); 				break; 			}
Magic Number,UnitTests,TestX509,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509.cs,OnGenerator,The following statement contains a magic number: switch (p) 			{ 			case 0: 				cout.Write('.'); 				break; 			case 1: 				cout.Write('+'); 				break; 			case 2: 				cout.Write('*'); 				break; 			case 3: 				cout.WriteLine(); 				break; 			}
Magic Number,UnitTests,TestCipher,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestCipher.cs,TestCipher,The following statement contains a magic number: const int numKeys = 10;
Magic Number,UnitTests,TestCipher,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestCipher.cs,TestCipher,The following statement contains a magic number: rsa.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestVersion,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestVersion.cs,Basic1,The following statement contains a magic number: Assert.AreEqual(2' version.Minor);
Magic Number,UnitTests,TestVersion,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestVersion.cs,Basic1,The following statement contains a magic number: Assert.AreEqual(3' version.Fix);
Magic Number,UnitTests,TestVersion,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestVersion.cs,Basic2,The following statement contains a magic number: Assert.AreEqual(2' version.Fix);
Magic Number,UnitTests,TestVersion,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestVersion.cs,Basic3,The following statement contains a magic number: Assert.AreEqual(2' version.Fix);
Magic Number,UnitTests,SslTestContext,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,CreateCertificate,The following statement contains a magic number: var future = now + TimeSpan.FromDays(365);
Magic Number,UnitTests,SslTestContext,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,CreateCertificate,The following statement contains a magic number: rsa.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncBasic,The following statement contains a magic number: var serverTask = Task.Factory.StartNew(() => 			{ 				var listener = new TcpListener(IPAddress.Loopback' 0); 				listener.Start(5); 				ep = (IPEndPoint)listener.LocalEndpoint;  				evtReady.Set();  				Console.WriteLine("Server> waiting for accept");  				using (var tcp = listener.AcceptTcpClient()) 				using (var sslStream = new SslStream(tcp.GetStream())) 				{ 					Console.WriteLine("Server> authenticate"); 					sslStream.AuthenticateAsServer(_ctx.ServerCertificate);  					Console.WriteLine("Server> ALPN: {0}"' sslStream.Ssl.AlpnSelectedProtocol); 					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name);  					Console.WriteLine("Server> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					Console.WriteLine("Server> tx msg"); 					sslStream.Write(serverMessage' 0' serverMessage.Length);  					Console.WriteLine("Server> done"); 				}  				listener.Stop(); 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncBasic,The following statement contains a magic number: var serverTask = Task.Factory.StartNew(() => 			{ 				var listener = new TcpListener(IPAddress.Loopback' 0); 				listener.Start(5); 				ep = (IPEndPoint)listener.LocalEndpoint;  				evtReady.Set();  				Console.WriteLine("Server> waiting for accept");  				using (var tcp = listener.AcceptTcpClient()) 				using (var sslStream = new SslStream(tcp.GetStream())) 				{ 					Console.WriteLine("Server> authenticate"); 					sslStream.AuthenticateAsServer(_ctx.ServerCertificate);  					Console.WriteLine("Server> ALPN: {0}"' sslStream.Ssl.AlpnSelectedProtocol); 					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name);  					Console.WriteLine("Server> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					Console.WriteLine("Server> tx msg"); 					sslStream.Write(serverMessage' 0' serverMessage.Length);  					Console.WriteLine("Server> done"); 				}  				listener.Stop(); 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncBasic,The following statement contains a magic number: var clientTask = Task.Factory.StartNew(() => 			{ 				evtReady.WaitOne();  				Console.WriteLine("Client> Connecting to: {0}:{1}"' ep.Address' ep.Port);  				using (var tcp = new TcpClient(ep.Address.ToString()' ep.Port)) 				using (var sslStream = new SslStream(tcp.GetStream())) 				{ 					Console.WriteLine("Client> authenticate"); 					sslStream.AuthenticateAsClient("localhost");  					Console.WriteLine("Client> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name);  					Console.WriteLine("Client> tx msg"); 					sslStream.Write(clientMessage' 0' clientMessage.Length);  					Console.WriteLine("Client> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(serverMessage.ToString()' buf.ToString());  					Console.WriteLine("Client> done"); 				} 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncIntermediate,The following statement contains a magic number: var serverTask = Task.Factory.StartNew(() => 			{ 				var listener = new TcpListener(IPAddress.Loopback' 0); 				listener.Start(5); 				ep = (IPEndPoint)listener.LocalEndpoint;  				evtReady.Set();  				Console.WriteLine("Server> waiting for accept");  				using (var tcp = listener.AcceptTcpClient()) 				using (var sslStream = new SslStream(tcp.GetStream())) 				{ 					Console.WriteLine("Server> authenticate"); 					sslStream.AuthenticateAsServer( 						_ctx.ServerCertificate' 						false' 						null' 						SslProtocols.Default' 						SslStrength.Low' 						false 					);  					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("DES-CBC-SHA"' sslStream.Ssl.CurrentCipher.Name);  					Console.WriteLine("Server> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					Console.WriteLine("Server> tx msg"); 					sslStream.Write(serverMessage' 0' serverMessage.Length);  					Console.WriteLine("Server> done"); 				}  				listener.Stop(); 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncIntermediate,The following statement contains a magic number: var serverTask = Task.Factory.StartNew(() => 			{ 				var listener = new TcpListener(IPAddress.Loopback' 0); 				listener.Start(5); 				ep = (IPEndPoint)listener.LocalEndpoint;  				evtReady.Set();  				Console.WriteLine("Server> waiting for accept");  				using (var tcp = listener.AcceptTcpClient()) 				using (var sslStream = new SslStream(tcp.GetStream())) 				{ 					Console.WriteLine("Server> authenticate"); 					sslStream.AuthenticateAsServer( 						_ctx.ServerCertificate' 						false' 						null' 						SslProtocols.Default' 						SslStrength.Low' 						false 					);  					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("DES-CBC-SHA"' sslStream.Ssl.CurrentCipher.Name);  					Console.WriteLine("Server> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					Console.WriteLine("Server> tx msg"); 					sslStream.Write(serverMessage' 0' serverMessage.Length);  					Console.WriteLine("Server> done"); 				}  				listener.Stop(); 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncIntermediate,The following statement contains a magic number: var clientTask = Task.Factory.StartNew(() => 			{ 				evtReady.WaitOne();  				Console.WriteLine("Client> Connecting to: {0}:{1}"' ep.Address' ep.Port);  				using (var tcp = new TcpClient(ep.Address.ToString()' ep.Port)) 				using (var sslStream = new SslStream(tcp.GetStream())) 				{ 					Console.WriteLine("Client> authenticate"); 					sslStream.AuthenticateAsClient( 						"localhost"' 						null' 						null' 						SslProtocols.Default' 						SslStrength.Low' 						false 					);  					Console.WriteLine("Client> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("DES-CBC-SHA"' sslStream.Ssl.CurrentCipher.Name);  					Console.WriteLine("Client> tx msg"); 					sslStream.Write(clientMessage' 0' clientMessage.Length);  					Console.WriteLine("Client> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(serverMessage.ToString()' buf.ToString());  					Console.WriteLine("Client> done"); 				} 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncAdvanced,The following statement contains a magic number: var serverTask = Task.Factory.StartNew(() => 			{ 				var listener = new TcpListener(IPAddress.Loopback' 0); 				listener.Start(5); 				ep = (IPEndPoint)listener.LocalEndpoint;  				evtReady.Set();  				Console.WriteLine("Server> waiting for accept");  				using (var tcp = listener.AcceptTcpClient()) 				using (var sslStream = new SslStream(tcp.GetStream()' false' ValidateRemoteCert)) 				{ 					Console.WriteLine("Server> authenticate"); 					sslStream.AuthenticateAsServer( 						_ctx.ServerCertificate' 						true' 						_ctx.CAChain' 						SslProtocols.Tls' 						SslStrength.All' 						true 					);  					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name); 					Assert.IsTrue(sslStream.IsMutuallyAuthenticated);  					Console.WriteLine("Server> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					Console.WriteLine("Server> tx msg"); 					sslStream.Write(serverMessage' 0' serverMessage.Length);  					Console.WriteLine("Server> done"); 				}  				listener.Stop(); 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncAdvanced,The following statement contains a magic number: var serverTask = Task.Factory.StartNew(() => 			{ 				var listener = new TcpListener(IPAddress.Loopback' 0); 				listener.Start(5); 				ep = (IPEndPoint)listener.LocalEndpoint;  				evtReady.Set();  				Console.WriteLine("Server> waiting for accept");  				using (var tcp = listener.AcceptTcpClient()) 				using (var sslStream = new SslStream(tcp.GetStream()' false' ValidateRemoteCert)) 				{ 					Console.WriteLine("Server> authenticate"); 					sslStream.AuthenticateAsServer( 						_ctx.ServerCertificate' 						true' 						_ctx.CAChain' 						SslProtocols.Tls' 						SslStrength.All' 						true 					);  					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name); 					Assert.IsTrue(sslStream.IsMutuallyAuthenticated);  					Console.WriteLine("Server> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					Console.WriteLine("Server> tx msg"); 					sslStream.Write(serverMessage' 0' serverMessage.Length);  					Console.WriteLine("Server> done"); 				}  				listener.Stop(); 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestSyncAdvanced,The following statement contains a magic number: var clientTask = Task.Factory.StartNew(() => 			{ 				evtReady.WaitOne();  				Console.WriteLine("Client> Connecting to: {0}:{1}"' ep.Address' ep.Port);  				using (var tcp = new TcpClient(ep.Address.ToString()' ep.Port)) 				using (var sslStream = new SslStream( 										   tcp.GetStream()' 										   false' 										   ValidateRemoteCert' 										   SelectClientCertificate)) 				{ 					Console.WriteLine("Client> authenticate"); 					sslStream.AuthenticateAsClient( 						"localhost"' 						_ctx.ClientCertificateList' 						_ctx.CAChain' 						SslProtocols.Tls' 						SslStrength.All' 						true 					);  					Console.WriteLine("Client> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name); 					Assert.IsTrue(sslStream.IsMutuallyAuthenticated);  					Console.WriteLine("Client> tx msg"); 					sslStream.Write(clientMessage' 0' clientMessage.Length);  					Console.WriteLine("Client> rx msg"); 					var buf = new byte[256]; 					sslStream.Read(buf' 0' buf.Length); 					Assert.AreEqual(serverMessage.ToString()' buf.ToString());  					Console.WriteLine("Client> done"); 				} 			});
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestAsyncBasic,The following statement contains a magic number: listener.Start(5);
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestAsyncBasic,The following statement contains a magic number: listener.BeginAcceptTcpClient((IAsyncResult ar) => 			{ 				var client = listener.EndAcceptTcpClient(ar);  				var sslStream = new SslStream(client.GetStream()' false); 				Console.WriteLine("Server> authenticate");  				sslStream.BeginAuthenticateAsServer(_ctx.ServerCertificate' async (ar2) => 				{ 					sslStream.EndAuthenticateAsServer(ar2);  					Console.WriteLine("Server> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name);  					var buf = new byte[256]; 					await sslStream.ReadAsync(buf' 0' buf.Length); 					Assert.AreEqual(clientMessage.ToString()' buf.ToString());  					await sslStream.WriteAsync(serverMessage' 0' serverMessage.Length);  					sslStream.Close(); 					client.Close();  					Console.WriteLine("Server> done"); 				}' null); 			}' null);
Magic Number,UnitTests,TestSSL,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestSSL.cs,TestAsyncBasic,The following statement contains a magic number: tcp.BeginConnect(ep.Address.ToString()' ep.Port' (IAsyncResult ar) => 			{ 				tcp.EndConnect(ar);  				var sslStream = new SslStream(tcp.GetStream()); 				Console.WriteLine("Client> authenticate");  				sslStream.BeginAuthenticateAsClient("localhost"' async (ar2) => 				{ 					sslStream.EndAuthenticateAsClient(ar2);  					Console.WriteLine("Client> CurrentCipher: {0}"' sslStream.Ssl.CurrentCipher.Name); 					Assert.AreEqual("AES256-GCM-SHA384"' sslStream.Ssl.CurrentCipher.Name);  					await sslStream.WriteAsync(clientMessage' 0' clientMessage.Length);  					var buf = new byte[256]; 					await sslStream.ReadAsync(buf' 0' buf.Length); 					Assert.AreEqual(serverMessage.ToString()' buf.ToString());  					sslStream.Close(); 					tcp.Close();  					Console.WriteLine("Client> done");  					evtDone.Set(); 				}' null); 			}' null);
Missing Default,UnitTests,TestDH,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDH.cs,OnStatus,The following switch statement is missing a default case: switch (p) { 				case 0: cout.Write('.'); break; 				case 1: cout.Write('+'); break; 				case 2: cout.Write('*'); break; 				case 3: cout.WriteLine(); break; 			}
Missing Default,UnitTests,TestDSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestDSA.cs,OnStatus,The following switch statement is missing a default case: switch (p) { 				case 0: cout.Write('.'); num++; break; 				case 1: cout.Write('+'); break; 				case 2: cout.Write('*'); ok++; break; 				case 3: cout.WriteLine(); break; 			}
Missing Default,UnitTests,TestRSA,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestRSA.cs,TestKey,The following switch statement is missing a default case: switch (v % 3) 			{ 				case 0: ctext_ex = Key1(key); break; 				case 1: ctext_ex = Key2(key); break; 				case 2: ctext_ex = Key3(key); break; 			}
Missing Default,UnitTests,TestX509,C:\research\architectureSmells\repos\openssl-net_openssl-net\test\TestX509.cs,OnGenerator,The following switch statement is missing a default case: switch (p) 			{ 			case 0: 				cout.Write('.'); 				break; 			case 1: 				cout.Write('+'); 				break; 			case 2: 				cout.Write('*'); 				break; 			case 3: 				cout.WriteLine(); 				break; 			}
