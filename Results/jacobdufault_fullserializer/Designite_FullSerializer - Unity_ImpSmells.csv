Implementation smell,Namespace,Class,File,Method,Description
Long Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The method has 67 lines of code.
Long Method,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The method has 77 lines of code.
Long Method,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildPrettyString,The method has 69 lines of code.
Long Method,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,fsSerializer,The method has 65 lines of code.
Long Method,FullSerializer.Internal.DirectConverters,GUIStyle_DirectConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\Unity\GUIStyle_DirectConverter.cs,DoDeserialize,The method has 82 lines of code.
Complex Method,FullSerializer,fsConverterRegistrar,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,fsConverterRegistrar,Cyclomatic complexity of the method is 9
Complex Method,FullSerializer,fsData,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsData.cs,Equals,Cyclomatic complexity of the method is 21
Complex Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,SkipSpace,Cyclomatic complexity of the method is 9
Complex Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,Cyclomatic complexity of the method is 38
Complex Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseString,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseArray,Cyclomatic complexity of the method is 8
Complex Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseObject,Cyclomatic complexity of the method is 10
Complex Method,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,RunParse,Cyclomatic complexity of the method is 26
Complex Method,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,Cyclomatic complexity of the method is 43
Complex Method,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildCompressedString,Cyclomatic complexity of the method is 26
Complex Method,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildPrettyString,Cyclomatic complexity of the method is 28
Complex Method,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,GetConverter,Cyclomatic complexity of the method is 12
Complex Method,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_3_Inheritance,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer,fsTypeExtensions,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsTypeExtensions.cs,CSharpName,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CollectProperties,Cyclomatic complexity of the method is 13
Complex Method,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,Cyclomatic complexity of the method is 8
Complex Method,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeField,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CreateInstance,Cyclomatic complexity of the method is 9
Complex Method,FullSerializer.Internal,fsDateConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsDateConverter.cs,TryDeserialize,Cyclomatic complexity of the method is 10
Complex Method,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TrySerialize,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TryDeserialize,Cyclomatic complexity of the method is 9
Complex Method,FullSerializer.Internal,fsReflectedConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsReflectedConverter.cs,TryDeserialize,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer.Internal,fsVersionManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionedType,Cyclomatic complexity of the method is 7
Complex Method,FullSerializer.Internal,fsReflectionUtility,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsReflectionUtility.cs,GetInterface,Cyclomatic complexity of the method is 7
Long Parameter List,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,EmitVersionInfo,The method has 4 parameters.
Long Parameter List,FullSerializer,fsBaseConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsBaseConverter.cs,SerializeMember,The method has 4 parameters.
Long Parameter List,FullSerializer,fsBaseConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsBaseConverter.cs,DeserializeMember,The method has 4 parameters.
Long Parameter List,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseUnicode,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,Invoke_OnAfterSerialize,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,Invoke_OnBeforeDeserializeAfterInstanceCreation,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,TrySerialize,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalSerialize_1_ProcessCycles,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalSerialize_2_Inheritance,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,TryDeserialize,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_1_CycleReference,The method has 5 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_2_Version,The method has 5 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_3_Inheritance,The method has 5 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_4_Cycles,The method has 4 parameters.
Long Parameter List,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_5_Converter,The method has 4 parameters.
Long Parameter List,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,The method has 4 parameters.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,EmitVersionInfo,The length of the statement  "			sb.AppendLine (prefix + "            OverrideConverterType = \"" + member.OverrideConverterType.CSharpName (true) + "\"'"); " is 123.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "	sb.AppendLine ("        public static Speedup." + typeNameSafeDecl + "_DirectConverter " + "Register_" + typeNameSafeDecl + ";"); " is 129.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "	sb.AppendLine ("    public class " + typeNameSafeDecl + "_DirectConverter : fsDirectConverter<" + typeName + ">' fsIAotConverter {"); " is 133.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "	sb.AppendLine ("        private fsAotVersionInfo _versionInfo = " + EmitVersionInfo ("        "' type' members' isConstructorPublic) + ";"); " is 140.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "	sb.AppendLine ("        protected override fsResult DoSerialize(" + typeName + " model' Dictionary<string' fsData> serialized) {"); " is 131.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "		sb.AppendLine ("            result += SerializeMember(serialized' " + GetConverterString (member) + "' \"" + member.JsonName + "\"' model." + member.MemberName + ");"); " is 168.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "	sb.AppendLine ("        protected override fsResult DoDeserialize(Dictionary<string' fsData> data' ref " + typeName + " model) {"); " is 131.
Long Statement,FullSerializer,fsAotCompilationManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "		sb.AppendLine ("            result += DeserializeMember(data' " + GetConverterString (member) + "' \"" + member.JsonName + "\"' out t" + i + ");"); " is 147.
Long Statement,FullSerializer,fsBaseConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsBaseConverter.cs,CreateInstance,The length of the statement  "		throw new InvalidOperationException ("Please override CreateInstance for " + GetType ().FullName + "; the object graph for " + storageType + " can contain potentially contain cycles' so separated instance creation " + "is needed"); " is 231.
Long Statement,FullSerializer,fsBaseConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsBaseConverter.cs,FailExpectedType,The length of the statement  "	return fsResult.Fail (GetType ().Name + " expected one of " + string.Join ("' "' types.Select (t => t.ToString ()).ToArray ()) + " but got " + data.Type + " in " + data); " is 170.
Long Statement,FullSerializer,fsData,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsData.cs,CreateDictionary,The length of the statement  "	return new fsData (new Dictionary<string' fsData> (fsGlobalConfig.IsCaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase)); " is 144.
Long Statement,FullSerializer,fsData,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsData.cs,Cast,The length of the statement  "	throw new InvalidCastException ("Unable to cast <" + this + "> (with type = " + _value.GetType () + ") to type " + typeof(T)); " is 126.
Long Statement,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The length of the statement  "		return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3))); " is 143.
Long Statement,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseNumber,The length of the statement  "	if (numberString.Contains (".") || numberString.Contains ("e") || numberString.Contains ("E") || numberString == "Infinity" || numberString == "-Infinity" || numberString == "NaN") { " is 182.
Long Statement,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseObject,The length of the statement  "	var result = new Dictionary<string' fsData> (fsGlobalConfig.IsCaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase); " is 137.
Long Statement,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,ConvertDoubleToString,The length of the statement  "	if (doubledString.Contains (".") == false && doubledString.Contains ("e") == false && doubledString.Contains ("E") == false) { " is 126.
Long Statement,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,AddConverter,The length of the statement  "		throw new InvalidOperationException ("Cannot add a single converter instance to " + "multiple fsConverters -- please construct a new instance for " + converter); " is 161.
Long Statement,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,AddConverter,The length of the statement  "		throw new InvalidOperationException ("Unable to add converter " + converter + "; the type association strategy is unknown. Please use either " + "fsDirectConverter or fsConverter as your base type."); " is 200.
Long Statement,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalSerialize_2_Inheritance,The length of the statement  "	if (storageType != instance.GetType () && GetConverter (storageType' overrideConverterType).RequestInheritanceSupport (storageType)) { " is 134.
Long Statement,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_2_Version,The length of the statement  "			deserializeResult += InternalDeserialize_3_Inheritance (overrideConverterType' data' path [0].ModelType' ref result' out processors); " is 133.
Long Statement,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_3_Inheritance,The length of the statement  "				deserializeResult.AddMessage ("Ignoring type specifier; a field/property of type " + storageType + " cannot hold an instance of " + type); " is 138.
Long Statement,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,IsAutoProperty,The length of the statement  "	return property.CanWrite && property.CanRead && fsPortableReflection.HasAttribute (property.GetGetMethod ()' typeof(CompilerGeneratedAttribute)' /*shouldCache:*/false); " is 168.
Long Statement,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,The length of the statement  "	if ((publicGetMethod != null && (config.SerializeNonPublicSetProperties || publicSetMethod != null)) && (config.SerializeNonAutoProperties || IsAutoProperty (property' members))) { " is 180.
Long Statement,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CreateInstance,The length of the statement  "		throw new InvalidOperationException ("Unable to create instance of " + ReflectedType + "; there is no default constructor"' e); " is 127.
Long Statement,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CreateInstance,The length of the statement  "		throw new InvalidOperationException ("Constructor of " + ReflectedType + " threw an exception when creating an instance"' e); " is 125.
Long Statement,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,UseInt64,The length of the statement  "	return type == typeof(sbyte) || type == typeof(byte) || type == typeof(Int16) || type == typeof(UInt16) || type == typeof(Int32) || type == typeof(UInt32) || type == typeof(Int64) || type == typeof(UInt64); " is 206.
Long Statement,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TrySerialize,The length of the statement  "	if (Serializer.Config.Serialize64BitIntegerAsString && (instanceType == typeof(Int64) || instanceType == typeof(UInt64))) { " is 123.
Long Statement,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TrySerialize,The length of the statement  "		(float)instance != float.MinValue && (float)instance != float.MaxValue && !float.IsInfinity ((float)instance) && !float.IsNaN ((float)instance)) { " is 146.
Long Statement,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TryDeserialize,The length of the statement  "		} else if (Serializer.Config.Serialize64BitIntegerAsString && storage.IsString && (storageType == typeof(Int64) || storageType == typeof(UInt64))) { " is 148.
Long Statement,FullSerializer.Internal,fsReflectedConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsReflectedConverter.cs,TrySerialize,The length of the statement  "		var itemResult = Serializer.TrySerialize (property.StorageType' property.OverrideConverterType' property.Read (instance)' out serializedData); " is 142.
Long Statement,FullSerializer.Internal,fsReflectedConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsReflectedConverter.cs,TryDeserialize,The length of the statement  "			var itemResult = Serializer.TryDeserialize (propertyData' property.StorageType' property.OverrideConverterType' ref deserializedValue); " is 135.
Long Statement,FullSerializer.Internal,fsSerializationCallbackProcessor,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsISerializationCallbacks.cs,OnBeforeDeserializeAfterInstanceCreation,The length of the statement  "		throw new InvalidCastException ("Please ensure the converter for " + storageType + " actually returns an instance of it' not an instance of " + instance.GetType ()); " is 165.
Long Statement,FullSerializer.Internal,fsCyclicReferenceManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsCyclicReferenceManager.cs,Exit,The length of the statement  "		throw new InvalidOperationException ("Internal Error - Mismatched Enter/Exit. Please report a bug at https://github.com/jacobdufault/fullserializer/issues with the serialization data."); " is 186.
Long Statement,FullSerializer.Internal,fsCyclicReferenceManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsCyclicReferenceManager.cs,GetReferenceObject,The length of the statement  "		throw new InvalidOperationException ("Internal Deserialization Error - Object " + "definition has not been encountered for object with id=" + id + "; have you reordered or modified the serialized data? If this is an issue " + "with an unmodified Full Serializer implementation and unmodified serialization " + "data' please report an issue with an included test case."); " is 370.
Long Statement,FullSerializer.Internal,fsVersionedType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsVersionedType.cs,ToString,The length of the statement  "	return "fsVersionedType [ModelType=" + ModelType + "' VersionString=" + VersionString + "' Ancestors.Length=" + Ancestors.Length + "]"; " is 135.
Long Statement,FullSerializer.Internal,fsVersionManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionImportPath,The length of the statement  "		return fsResult.Fail ("There is no migration path from \"" + currentVersion + "\" to \"" + targetVersion.VersionString + "\""); " is 127.
Long Statement,FullSerializer.Internal,fsVersionManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionedType,The length of the statement  "					throw new Exception ("fsObject attribute on " + type + " contains a PreviousModels specifier - it must also include a VersionString modifier"); " is 143.
Long Statement,FullSerializer.Internal,fsVersionManager,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionedType,The length of the statement  "						throw new Exception ("Unable to create versioned type for ancestor " + ancestorType + "; please add an [fsObject(VersionString=\"...\")] attribute"); " is 149.
Long Statement,FullSerializer.Internal,fsReflectionUtility,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsReflectionUtility.cs,GetInterface,The length of the statement  "		throw new ArgumentException ("GetInterface requires that if the interface " + "type is generic' then it must be the generic type definition' not a " + "specific generic type instantiation"); " is 190.
Complex Conditional,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The conditional expression  "IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))"  is complex.
Complex Conditional,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseNumber,The conditional expression  "numberString.Contains (".") || numberString.Contains ("e") || numberString.Contains ("E") || numberString == "Infinity" || numberString == "-Infinity" || numberString == "NaN""  is complex.
Complex Conditional,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,The conditional expression  "(publicGetMethod != null && publicGetMethod.IsStatic) || (publicSetMethod != null && publicSetMethod.IsStatic)"  is complex.
Complex Conditional,FullSerializer,fsMetaType,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,The conditional expression  "(publicGetMethod != null && (config.SerializeNonPublicSetProperties || publicSetMethod != null)) && (config.SerializeNonAutoProperties || IsAutoProperty (property' members))"  is complex.
Complex Conditional,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TrySerialize,The conditional expression  "instance.GetType () == typeof(float) && // Decimal can't store  // float.MinValue/float.MaxValue/float.PositiveInfinity/float.NegativeInfinity/float.NaN  // - an exception gets thrown in that scenario.  (float)instance != float.MinValue && (float)instance != float.MaxValue && !float.IsInfinity ((float)instance) && !float.IsNaN ((float)instance)"  is complex.
Complex Conditional,FullSerializer.Internal,fsPrimitiveConverter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TryDeserialize,The conditional expression  "Serializer.Config.Serialize64BitIntegerAsString && storage.IsString && (storageType == typeof(Int64) || storageType == typeof(UInt64))"  is complex.
Empty Catch Block,FullSerializer,fsConverterRegistrar,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,fsConverterRegistrar,The method has an empty catch block.
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')  	p1 = (uint)(c1 - '0') * multipliyer;  else if (c1 >= 'A' && c1 <= 'F')  	p1 = (uint)((c1 - 'A') + 10) * multipliyer;  else if (c1 >= 'a' && c1 <= 'f')  	p1 = (uint)((c1 - 'a') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')  	p1 = (uint)(c1 - '0') * multipliyer;  else if (c1 >= 'A' && c1 <= 'F')  	p1 = (uint)((c1 - 'A') + 10) * multipliyer;  else if (c1 >= 'a' && c1 <= 'f')  	p1 = (uint)((c1 - 'a') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= 'A' && c1 <= 'F')  	p1 = (uint)((c1 - 'A') + 10) * multipliyer;  else if (c1 >= 'a' && c1 <= 'f')  	p1 = (uint)((c1 - 'a') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= 'A' && c1 <= 'F')  	p1 = (uint)((c1 - 'A') + 10) * multipliyer;  else if (c1 >= 'a' && c1 <= 'f')  	p1 = (uint)((c1 - 'a') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: p1 = (uint)((c1 - 'A') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= 'a' && c1 <= 'f')  	p1 = (uint)((c1 - 'a') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: p1 = (uint)((c1 - 'a') + 10) * multipliyer;  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character ()) {  case '\\':  	TryMoveNext ();  	escaped = '\\';  	return fsResult.Success;  case '/':  	TryMoveNext ();  	escaped = '/';  	return fsResult.Success;  case '"':  	TryMoveNext ();  	escaped = '\"';  	return fsResult.Success;  case 'a':  	TryMoveNext ();  	escaped = '\a';  	return fsResult.Success;  case 'b':  	TryMoveNext ();  	escaped = '\b';  	return fsResult.Success;  case 'f':  	TryMoveNext ();  	escaped = '\f';  	return fsResult.Success;  case 'n':  	TryMoveNext ();  	escaped = '\n';  	return fsResult.Success;  case 'r':  	TryMoveNext ();  	escaped = '\r';  	return fsResult.Success;  case 't':  	TryMoveNext ();  	escaped = '\t';  	return fsResult.Success;  case '0':  	TryMoveNext ();  	escaped = '\0';  	return fsResult.Success;  case 'u':  	TryMoveNext ();  	if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  		uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		escaped = (char)codePoint;  		return fsResult.Success;  	}  	// invalid escape sequence  	escaped = (char)0;  	return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  default:  	escaped = (char)0;  	return MakeFailure (string.Format ("Invalid escape sequence \\{0}"' Character ()));  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character ()) {  case '\\':  	TryMoveNext ();  	escaped = '\\';  	return fsResult.Success;  case '/':  	TryMoveNext ();  	escaped = '/';  	return fsResult.Success;  case '"':  	TryMoveNext ();  	escaped = '\"';  	return fsResult.Success;  case 'a':  	TryMoveNext ();  	escaped = '\a';  	return fsResult.Success;  case 'b':  	TryMoveNext ();  	escaped = '\b';  	return fsResult.Success;  case 'f':  	TryMoveNext ();  	escaped = '\f';  	return fsResult.Success;  case 'n':  	TryMoveNext ();  	escaped = '\n';  	return fsResult.Success;  case 'r':  	TryMoveNext ();  	escaped = '\r';  	return fsResult.Success;  case 't':  	TryMoveNext ();  	escaped = '\t';  	return fsResult.Success;  case '0':  	TryMoveNext ();  	escaped = '\0';  	return fsResult.Success;  case 'u':  	TryMoveNext ();  	if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  		uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		escaped = (char)codePoint;  		return fsResult.Success;  	}  	// invalid escape sequence  	escaped = (char)0;  	return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  default:  	escaped = (char)0;  	return MakeFailure (string.Format ("Invalid escape sequence \\{0}"' Character ()));  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character ()) {  case '\\':  	TryMoveNext ();  	escaped = '\\';  	return fsResult.Success;  case '/':  	TryMoveNext ();  	escaped = '/';  	return fsResult.Success;  case '"':  	TryMoveNext ();  	escaped = '\"';  	return fsResult.Success;  case 'a':  	TryMoveNext ();  	escaped = '\a';  	return fsResult.Success;  case 'b':  	TryMoveNext ();  	escaped = '\b';  	return fsResult.Success;  case 'f':  	TryMoveNext ();  	escaped = '\f';  	return fsResult.Success;  case 'n':  	TryMoveNext ();  	escaped = '\n';  	return fsResult.Success;  case 'r':  	TryMoveNext ();  	escaped = '\r';  	return fsResult.Success;  case 't':  	TryMoveNext ();  	escaped = '\t';  	return fsResult.Success;  case '0':  	TryMoveNext ();  	escaped = '\0';  	return fsResult.Success;  case 'u':  	TryMoveNext ();  	if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  		uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		escaped = (char)codePoint;  		return fsResult.Success;  	}  	// invalid escape sequence  	escaped = (char)0;  	return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  default:  	escaped = (char)0;  	return MakeFailure (string.Format ("Invalid escape sequence \\{0}"' Character ()));  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character ()) {  case '\\':  	TryMoveNext ();  	escaped = '\\';  	return fsResult.Success;  case '/':  	TryMoveNext ();  	escaped = '/';  	return fsResult.Success;  case '"':  	TryMoveNext ();  	escaped = '\"';  	return fsResult.Success;  case 'a':  	TryMoveNext ();  	escaped = '\a';  	return fsResult.Success;  case 'b':  	TryMoveNext ();  	escaped = '\b';  	return fsResult.Success;  case 'f':  	TryMoveNext ();  	escaped = '\f';  	return fsResult.Success;  case 'n':  	TryMoveNext ();  	escaped = '\n';  	return fsResult.Success;  case 'r':  	TryMoveNext ();  	escaped = '\r';  	return fsResult.Success;  case 't':  	TryMoveNext ();  	escaped = '\t';  	return fsResult.Success;  case '0':  	TryMoveNext ();  	escaped = '\0';  	return fsResult.Success;  case 'u':  	TryMoveNext ();  	if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  		uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		escaped = (char)codePoint;  		return fsResult.Success;  	}  	// invalid escape sequence  	escaped = (char)0;  	return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  default:  	escaped = (char)0;  	return MakeFailure (string.Format ("Invalid escape sequence \\{0}"' Character ()));  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character ()) {  case '\\':  	TryMoveNext ();  	escaped = '\\';  	return fsResult.Success;  case '/':  	TryMoveNext ();  	escaped = '/';  	return fsResult.Success;  case '"':  	TryMoveNext ();  	escaped = '\"';  	return fsResult.Success;  case 'a':  	TryMoveNext ();  	escaped = '\a';  	return fsResult.Success;  case 'b':  	TryMoveNext ();  	escaped = '\b';  	return fsResult.Success;  case 'f':  	TryMoveNext ();  	escaped = '\f';  	return fsResult.Success;  case 'n':  	TryMoveNext ();  	escaped = '\n';  	return fsResult.Success;  case 'r':  	TryMoveNext ();  	escaped = '\r';  	return fsResult.Success;  case 't':  	TryMoveNext ();  	escaped = '\t';  	return fsResult.Success;  case '0':  	TryMoveNext ();  	escaped = '\0';  	return fsResult.Success;  case 'u':  	TryMoveNext ();  	if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  		uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		escaped = (char)codePoint;  		return fsResult.Success;  	}  	// invalid escape sequence  	escaped = (char)0;  	return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  default:  	escaped = (char)0;  	return MakeFailure (string.Format ("Invalid escape sequence \\{0}"' Character ()));  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character ()) {  case '\\':  	TryMoveNext ();  	escaped = '\\';  	return fsResult.Success;  case '/':  	TryMoveNext ();  	escaped = '/';  	return fsResult.Success;  case '"':  	TryMoveNext ();  	escaped = '\"';  	return fsResult.Success;  case 'a':  	TryMoveNext ();  	escaped = '\a';  	return fsResult.Success;  case 'b':  	TryMoveNext ();  	escaped = '\b';  	return fsResult.Success;  case 'f':  	TryMoveNext ();  	escaped = '\f';  	return fsResult.Success;  case 'n':  	TryMoveNext ();  	escaped = '\n';  	return fsResult.Success;  case 'r':  	TryMoveNext ();  	escaped = '\r';  	return fsResult.Success;  case 't':  	TryMoveNext ();  	escaped = '\t';  	return fsResult.Success;  case '0':  	TryMoveNext ();  	escaped = '\0';  	return fsResult.Success;  case 'u':  	TryMoveNext ();  	if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  		uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		TryMoveNext ();  		escaped = (char)codePoint;  		return fsResult.Success;  	}  	// invalid escape sequence  	escaped = (char)0;  	return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  default:  	escaped = (char)0;  	return MakeFailure (string.Format ("Invalid escape sequence \\{0}"' Character ()));  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  	uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	escaped = (char)codePoint;  	return fsResult.Success;  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  	uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	escaped = (char)codePoint;  	return fsResult.Success;  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  	uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	escaped = (char)codePoint;  	return fsResult.Success;  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: if (IsHex (Character (0)) && IsHex (Character (1)) && IsHex (Character (2)) && IsHex (Character (3))) {  	uint codePoint = ParseUnicode (Character (0)' Character (1)' Character (2)' Character (3));  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	TryMoveNext ();  	escaped = (char)codePoint;  	return fsResult.Success;  }  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  
Magic Number,FullSerializer,fsJsonParser,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: return MakeFailure (string.Format ("invalid escape sequence '\\u{0}{1}{2}{3}'\n"' Character (0)' Character (1)' Character (2)' Character (3)));  
Magic Number,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i) {  	char c = str [i];  	// unicode code point  	int intChar = Convert.ToInt32 (c);  	if (intChar < 0 || intChar > 127) {  		needsEscape = true;  		break;  	}  	// standard escape character  	switch (c) {  	case '"':  	case '\\':  	case '\a':  	case '\b':  	case '\f':  	case '\n':  	case '\r':  	case '\t':  	case '\0':  		needsEscape = true;  		break;  	}  	if (needsEscape) {  		break;  	}  }  
Magic Number,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following statement contains a magic number: if (intChar < 0 || intChar > 127) {  	needsEscape = true;  	break;  }  
Magic Number,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i) {  	char c = str [i];  	// unicode code point  	int intChar = Convert.ToInt32 (c);  	if (intChar < 0 || intChar > 127) {  		result.Append (string.Format ("\\u{0:x4} "' intChar).Trim ());  		continue;  	}  	// standard escape character  	switch (c) {  	case '"':  		result.Append ("\\\"");  		continue;  	case '\\':  		result.Append (@"\\");  		continue;  	case '\a':  		result.Append (@"\a");  		continue;  	case '\b':  		result.Append (@"\b");  		continue;  	case '\f':  		result.Append (@"\f");  		continue;  	case '\n':  		result.Append (@"\n");  		continue;  	case '\r':  		result.Append (@"\r");  		continue;  	case '\t':  		result.Append (@"\t");  		continue;  	case '\0':  		result.Append (@"\0");  		continue;  	}  	// no escaping needed  	result.Append (c);  }  
Magic Number,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following statement contains a magic number: if (intChar < 0 || intChar > 127) {  	result.Append (string.Format ("\\u{0:x4} "' intChar).Trim ());  	continue;  }  
Magic Number,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count > 2)  	return;  
Magic Number,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count == 2 && dict.ContainsKey (typeString) && dict.ContainsKey (typeDataString)) {  	data = dict [typeDataString];  	EnsureDictionary (data);  	ConvertLegacyData (ref data);  	data.AsDictionary [Key_InstanceType] = dict [typeString];  } // object definition  else if (dict.Count == 2 && dict.ContainsKey (sourceIdString) && dict.ContainsKey (sourceDataString)) {  	data = dict [sourceDataString];  	EnsureDictionary (data);  	ConvertLegacyData (ref data);  	data.AsDictionary [Key_ObjectDefinition] = dict [sourceIdString];  } // object reference  else if (dict.Count == 1 && dict.ContainsKey (referenceIdString)) {  	data = fsData.CreateDictionary ();  	data.AsDictionary [Key_ObjectReference] = dict [referenceIdString];  }  
Magic Number,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count == 2 && dict.ContainsKey (typeString) && dict.ContainsKey (typeDataString)) {  	data = dict [typeDataString];  	EnsureDictionary (data);  	ConvertLegacyData (ref data);  	data.AsDictionary [Key_InstanceType] = dict [typeString];  } // object definition  else if (dict.Count == 2 && dict.ContainsKey (sourceIdString) && dict.ContainsKey (sourceDataString)) {  	data = dict [sourceDataString];  	EnsureDictionary (data);  	ConvertLegacyData (ref data);  	data.AsDictionary [Key_ObjectDefinition] = dict [sourceIdString];  } // object reference  else if (dict.Count == 1 && dict.ContainsKey (referenceIdString)) {  	data = fsData.CreateDictionary ();  	data.AsDictionary [Key_ObjectReference] = dict [referenceIdString];  }  
Magic Number,FullSerializer,fsSerializer,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count == 2 && dict.ContainsKey (sourceIdString) && dict.ContainsKey (sourceDataString)) {  	data = dict [sourceDataString];  	EnsureDictionary (data);  	ConvertLegacyData (ref data);  	data.AsDictionary [Key_ObjectDefinition] = dict [sourceIdString];  } // object reference  else if (dict.Count == 1 && dict.ContainsKey (referenceIdString)) {  	data = fsData.CreateDictionary ();  	data.AsDictionary [Key_ObjectReference] = dict [referenceIdString];  }  
Missing Default,FullSerializer,fsData,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsData.cs,Equals,The following switch statement is missing a default case: switch (Type) {  case fsDataType.Null:  	return true;  case fsDataType.Double:  	return AsDouble == other.AsDouble || Math.Abs (AsDouble - other.AsDouble) < double.Epsilon;  case fsDataType.Int64:  	return AsInt64 == other.AsInt64;  case fsDataType.Boolean:  	return AsBool == other.AsBool;  case fsDataType.String:  	return AsString == other.AsString;  case fsDataType.Array:  	var thisList = AsList;  	var otherList = other.AsList;  	if (thisList.Count != otherList.Count)  		return false;  	for (int i = 0; i < thisList.Count; ++i) {  		if (thisList [i].Equals (otherList [i]) == false) {  			return false;  		}  	}  	return true;  case fsDataType.Object:  	var thisDict = AsDictionary;  	var otherDict = other.AsDictionary;  	if (thisDict.Count != otherDict.Count)  		return false;  	foreach (string key in thisDict.Keys) {  		if (otherDict.ContainsKey (key) == false) {  			return false;  		}  		if (thisDict [key].Equals (otherDict [key]) == false) {  			return false;  		}  	}  	return true;  }  
Missing Default,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following switch statement is missing a default case: switch (c) {  case '"':  case '\\':  case '\a':  case '\b':  case '\f':  case '\n':  case '\r':  case '\t':  case '\0':  	needsEscape = true;  	break;  }  
Missing Default,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following switch statement is missing a default case: switch (c) {  case '"':  	result.Append ("\\\"");  	continue;  case '\\':  	result.Append (@"\\");  	continue;  case '\a':  	result.Append (@"\a");  	continue;  case '\b':  	result.Append (@"\b");  	continue;  case '\f':  	result.Append (@"\f");  	continue;  case '\n':  	result.Append (@"\n");  	continue;  case '\r':  	result.Append (@"\r");  	continue;  case '\t':  	result.Append (@"\t");  	continue;  case '\0':  	result.Append (@"\0");  	continue;  }  
Missing Default,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildCompressedString,The following switch statement is missing a default case: switch (data.Type) {  case fsDataType.Null:  	stream.Write ("null");  	break;  case fsDataType.Boolean:  	if (data.AsBool)  		stream.Write ("true");  	else  		stream.Write ("false");  	break;  case fsDataType.Double:  	// doubles must *always* include a decimal  	stream.Write (ConvertDoubleToString (data.AsDouble));  	break;  case fsDataType.Int64:  	stream.Write (data.AsInt64);  	break;  case fsDataType.String:  	stream.Write ('"');  	stream.Write (EscapeString (data.AsString));  	stream.Write ('"');  	break;  case fsDataType.Object: {  	stream.Write ('{');  	bool comma = false;  	foreach (var entry in data.AsDictionary) {  		if (comma)  			stream.Write (''');  		comma = true;  		stream.Write ('"');  		stream.Write (entry.Key);  		stream.Write ('"');  		stream.Write (":");  		BuildCompressedString (entry.Value' stream);  	}  	stream.Write ('}');  	break;  }  case fsDataType.Array: {  	stream.Write ('[');  	bool comma = false;  	foreach (var entry in data.AsList) {  		if (comma)  			stream.Write (''');  		comma = true;  		BuildCompressedString (entry' stream);  	}  	stream.Write (']');  	break;  }  }  
Missing Default,FullSerializer,fsJsonPrinter,D:\newReposJune17\jacobdufault_fullserializer\BuildFiles\ProjectFiles\..\..\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildPrettyString,The following switch statement is missing a default case: switch (data.Type) {  case fsDataType.Null:  	stream.Write ("null");  	break;  case fsDataType.Boolean:  	if (data.AsBool)  		stream.Write ("true");  	else  		stream.Write ("false");  	break;  case fsDataType.Double:  	stream.Write (ConvertDoubleToString (data.AsDouble));  	break;  case fsDataType.Int64:  	stream.Write (data.AsInt64);  	break;  case fsDataType.String:  	stream.Write ('"');  	stream.Write (EscapeString (data.AsString));  	stream.Write ('"');  	break;  case fsDataType.Object: {  	stream.Write ('{');  	stream.WriteLine ();  	bool comma = false;  	foreach (var entry in data.AsDictionary) {  		if (comma) {  			stream.Write (''');  			stream.WriteLine ();  		}  		comma = true;  		InsertSpacing (stream' depth + 1);  		stream.Write ('"');  		stream.Write (entry.Key);  		stream.Write ('"');  		stream.Write (": ");  		BuildPrettyString (entry.Value' stream' depth + 1);  	}  	stream.WriteLine ();  	InsertSpacing (stream' depth);  	stream.Write ('}');  	break;  }  case fsDataType.Array:  	// special case for empty lists; we don't put an empty line  	// between the brackets  	if (data.AsList.Count == 0) {  		stream.Write ("[]");  	} else {  		bool comma = false;  		stream.Write ('[');  		stream.WriteLine ();  		foreach (var entry in data.AsList) {  			if (comma) {  				stream.Write (''');  				stream.WriteLine ();  			}  			comma = true;  			InsertSpacing (stream' depth + 1);  			BuildPrettyString (entry' stream' depth + 1);  		}  		stream.WriteLine ();  		InsertSpacing (stream' depth);  		stream.Write (']');  	}  	break;  }  
