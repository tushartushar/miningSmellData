Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,fsConverterRegistrar,Cyclomatic complexity of the method is 8
Complex Method,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseArray,Cyclomatic complexity of the method is 8
Complex Method,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseObject,Cyclomatic complexity of the method is 10
Complex Method,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,Cyclomatic complexity of the method is 9
Complex Method,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,GetConverter,Cyclomatic complexity of the method is 8
Complex Method,FullSerializer,fsTypeExtensions,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsTypeExtensions.cs,CSharpName,Cyclomatic complexity of the method is 12
Complex Method,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CollectProperties,Cyclomatic complexity of the method is 11
Complex Method,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,Cyclomatic complexity of the method is 8
Complex Method,FullSerializer.Internal,fsDateConverter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\fsDateConverter.cs,TryDeserialize,Cyclomatic complexity of the method is 9
Complex Method,FullSerializer.Internal,fsDictionaryConverter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\fsDictionaryConverter.cs,TryDeserialize,Cyclomatic complexity of the method is 8
Long Parameter List,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_1_CycleReference,The method has 5 parameters. Parameters: overrideConverterType' data' storageType' result' processors
Long Parameter List,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_2_Version,The method has 5 parameters. Parameters: overrideConverterType' data' storageType' result' processors
Long Parameter List,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_3_Inheritance,The method has 5 parameters. Parameters: overrideConverterType' data' storageType' result' processors
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_AnimationCurve_DirectConverter is 39.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_Bounds_DirectConverter is 31.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_Gradient_DirectConverter is 33.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_GUIStyleState_DirectConverter is 38.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_GUIStyle_DirectConverter is 33.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_Keyframe_DirectConverter is 33.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_LayerMask_DirectConverter is 34.
Long Identifier,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_RectOffset_DirectConverter is 35.
Long Identifier,FullSerializer,fsConfig,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsConfig.cs,,The length of the parameter SerializeNonPublicSetProperties is 31.
Long Identifier,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,,The length of the parameter _isDefaultConstructorPublicCache is 32.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_AnimationCurve_DirectConverter is 39.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_Bounds_DirectConverter is 31.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_Gradient_DirectConverter is 33.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_GUIStyleState_DirectConverter is 38.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_GUIStyle_DirectConverter is 33.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_Keyframe_DirectConverter is 33.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_LayerMask_DirectConverter is 34.
Long Identifier,FullSerializer.Internal.DirectConverters,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,,The length of the parameter Register_RectOffset_DirectConverter is 35.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,EmitVersionInfo,The length of the statement  "                    sb.AppendLine(prefix + "            OverrideConverterType = \"" + member.OverrideConverterType.CSharpName(true) + "\"'"); " is 121.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "            sb.AppendLine("        public static Speedup." + typeNameSafeDecl + "_DirectConverter " + "Register_" + typeNameSafeDecl + ";"); " is 128.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "            sb.AppendLine("    public class " + typeNameSafeDecl + "_DirectConverter : fsDirectConverter<" + typeName + ">' fsIAotConverter {"); " is 132.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "            sb.AppendLine("        private fsAotVersionInfo _versionInfo = " + EmitVersionInfo("        "' type' members' isConstructorPublic) + ";"); " is 138.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "            sb.AppendLine("        protected override fsResult DoSerialize(" + typeName + " model' Dictionary<string' fsData> serialized) {"); " is 130.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "                sb.AppendLine("            result += SerializeMember(serialized' " + GetConverterString(member) + "' \"" + member.JsonName + "\"' model." + member.MemberName + ");"); " is 166.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "            sb.AppendLine("        protected override fsResult DoDeserialize(Dictionary<string' fsData> data' ref " + typeName + " model) {"); " is 130.
Long Statement,FullSerializer,fsAotCompilationManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotCompilationManager.cs,GenerateDirectConverterForTypeInCSharp,The length of the statement  "                sb.AppendLine("            result += DeserializeMember(data' " + GetConverterString(member) + "' \"" + member.JsonName + "\"' out t" + i + ");"); " is 145.
Long Statement,FullSerializer,fsSerializationCallbackProcessor,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsISerializationCallbacks.cs,OnBeforeDeserializeAfterInstanceCreation,The length of the statement  "                throw new InvalidCastException("Please ensure the converter for " + storageType + " actually returns an instance of it' not an instance of " + instance.GetType()); " is 163.
Long Statement,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_2_Version,The length of the statement  "                    deserializeResult += InternalDeserialize_3_Inheritance(overrideConverterType' data' path[0].ModelType' ref result' out processors); " is 131.
Long Statement,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,InternalDeserialize_3_Inheritance,The length of the statement  "                        deserializeResult.AddMessage("Ignoring type specifier; a field/property of type " + storageType + " cannot hold an instance of " + type); " is 137.
Long Statement,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CreateInstance,The length of the statement  "                throw new InvalidOperationException("Unable to create instance of " + ReflectedType + "; there is no default constructor"' e); " is 126.
Long Statement,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CreateInstance,The length of the statement  "                throw new InvalidOperationException("Constructor of " + ReflectedType + " threw an exception when creating an instance"' e); " is 124.
Long Statement,FullSerializer.Internal,fsPrimitiveConverter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TrySerialize,The length of the statement  "            if (Serializer.Config.Serialize64BitIntegerAsString && (instanceType == typeof(Int64) || instanceType == typeof(UInt64))) { " is 123.
Long Statement,FullSerializer.Internal,fsSerializationCallbackProcessor,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsISerializationCallbacks.cs,OnBeforeDeserializeAfterInstanceCreation,The length of the statement  "                throw new InvalidCastException("Please ensure the converter for " + storageType + " actually returns an instance of it' not an instance of " + instance.GetType()); " is 163.
Long Statement,FullSerializer.Internal,fsCyclicReferenceManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsCyclicReferenceManager.cs,Exit,The length of the statement  "                throw new InvalidOperationException("Internal Error - Mismatched Enter/Exit. Please report a bug at https://github.com/jacobdufault/fullserializer/issues with the serialization data."); " is 185.
Long Statement,FullSerializer.Internal,fsVersionedType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsVersionedType.cs,ToString,The length of the statement  "            return "fsVersionedType [ModelType=" + ModelType + "' VersionString=" + VersionString + "' Ancestors.Length=" + Ancestors.Length + "]"; " is 135.
Long Statement,FullSerializer.Internal,fsVersionManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionImportPath,The length of the statement  "                return fsResult.Fail("There is no migration path from \"" + currentVersion + "\" to \"" + targetVersion.VersionString + "\""); " is 126.
Long Statement,FullSerializer.Internal,fsVersionManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionedType,The length of the statement  "                            throw new Exception("fsObject attribute on " + type + " contains a PreviousModels specifier - it must also include a VersionString modifier"); " is 142.
Long Statement,FullSerializer.Internal,fsVersionManager,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsVersionManager.cs,GetVersionedType,The length of the statement  "                                throw new Exception("Unable to create versioned type for ancestor " + ancestorType + "; please add an [fsObject(VersionString=\"...\")] attribute"); " is 148.
Complex Conditional,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The conditional expression  "IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))"  is complex.
Complex Conditional,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryParseNumber,The conditional expression  "numberString.Contains(".") || numberString.Contains("e") || numberString.Contains("E") ||                  numberString == "Infinity" || numberString == "-Infinity" || numberString == "NaN""  is complex.
Complex Conditional,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,The conditional expression  "(publicGetMethod != null && publicGetMethod.IsStatic) ||                  (publicSetMethod != null && publicSetMethod.IsStatic)"  is complex.
Complex Conditional,FullSerializer,fsMetaType,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Reflection\fsMetaType.cs,CanSerializeProperty,The conditional expression  "(publicGetMethod != null && (config.SerializeNonPublicSetProperties || publicSetMethod != null)) &&                  (config.SerializeNonAutoProperties || IsAutoProperty(property' members))"  is complex.
Complex Conditional,FullSerializer.Internal,fsPrimitiveConverter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TrySerialize,The conditional expression  "instance.GetType() == typeof(float) &&                      // Decimal can't store                      // float.MinValue/float.MaxValue/float.PositiveInfinity/float.NegativeInfinity/float.NaN                      // - an exception gets thrown in that scenario.                      (float)instance != float.MinValue &&                      (float)instance != float.MaxValue &&                      !float.IsInfinity((float)instance) &&                      !float.IsNaN((float)instance)"  is complex.
Complex Conditional,FullSerializer.Internal,fsPrimitiveConverter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\fsPrimitiveConverter.cs,TryDeserialize,The conditional expression  "Serializer.Config.Serialize64BitIntegerAsString && storage.IsString &&                      (storageType == typeof(Int64) || storageType == typeof(UInt64))"  is complex.
Empty Catch Block,FullSerializer,fsConverterRegistrar,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Converters\Unity\AnimationCurve_DirectConverter.cs,fsConverterRegistrar,The method has an empty catch block.
Magic Number,FullSerializer,Member,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotVersionInfo.cs,GetHashCode,The following statement contains a magic number: return                      MemberName.GetHashCode() +                      (17 * JsonName.GetHashCode()) +                      (17 * StorageType.GetHashCode()) +                      (string.IsNullOrEmpty(OverrideConverterType) ? 0 : 17 * OverrideConverterType.GetHashCode());
Magic Number,FullSerializer,Member,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotVersionInfo.cs,GetHashCode,The following statement contains a magic number: return                      MemberName.GetHashCode() +                      (17 * JsonName.GetHashCode()) +                      (17 * StorageType.GetHashCode()) +                      (string.IsNullOrEmpty(OverrideConverterType) ? 0 : 17 * OverrideConverterType.GetHashCode());
Magic Number,FullSerializer,Member,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Aot\fsAotVersionInfo.cs,GetHashCode,The following statement contains a magic number: return                      MemberName.GetHashCode() +                      (17 * JsonName.GetHashCode()) +                      (17 * StorageType.GetHashCode()) +                      (string.IsNullOrEmpty(OverrideConverterType) ? 0 : 17 * OverrideConverterType.GetHashCode());
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,MakeFailure,The following statement contains a magic number: int start = Math.Max(0' _start - 20);
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,MakeFailure,The following statement contains a magic number: int length = Math.Min(50' _input.Length - start);
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character()) {                  case '\\': TryMoveNext(); escaped = '\\'; return fsResult.Success;                  case '/': TryMoveNext(); escaped = '/'; return fsResult.Success;                  case '"': TryMoveNext(); escaped = '\"'; return fsResult.Success;                  case 'a': TryMoveNext(); escaped = '\a'; return fsResult.Success;                  case 'b': TryMoveNext(); escaped = '\b'; return fsResult.Success;                  case 'f': TryMoveNext(); escaped = '\f'; return fsResult.Success;                  case 'n': TryMoveNext(); escaped = '\n'; return fsResult.Success;                  case 'r': TryMoveNext(); escaped = '\r'; return fsResult.Success;                  case 't': TryMoveNext(); escaped = '\t'; return fsResult.Success;                  case '0': TryMoveNext(); escaped = '\0'; return fsResult.Success;                  case 'u':                      TryMoveNext();                      if (IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))) {                          uint codePoint = ParseUnicode(Character(0)' Character(1)' Character(2)' Character(3));                            TryMoveNext();                          TryMoveNext();                          TryMoveNext();                          TryMoveNext();                            escaped = (char)codePoint;                          return fsResult.Success;                      }                        // invalid escape sequence                      escaped = (char)0;                      return MakeFailure(                          string.Format("invalid escape sequence '\\u{0}{1}{2}{3}'\n"'                              Character(0)'                              Character(1)'                              Character(2)'                              Character(3)));                  default:                      escaped = (char)0;                      return MakeFailure(string.Format("Invalid escape sequence \\{0}"' Character()));              }
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character()) {                  case '\\': TryMoveNext(); escaped = '\\'; return fsResult.Success;                  case '/': TryMoveNext(); escaped = '/'; return fsResult.Success;                  case '"': TryMoveNext(); escaped = '\"'; return fsResult.Success;                  case 'a': TryMoveNext(); escaped = '\a'; return fsResult.Success;                  case 'b': TryMoveNext(); escaped = '\b'; return fsResult.Success;                  case 'f': TryMoveNext(); escaped = '\f'; return fsResult.Success;                  case 'n': TryMoveNext(); escaped = '\n'; return fsResult.Success;                  case 'r': TryMoveNext(); escaped = '\r'; return fsResult.Success;                  case 't': TryMoveNext(); escaped = '\t'; return fsResult.Success;                  case '0': TryMoveNext(); escaped = '\0'; return fsResult.Success;                  case 'u':                      TryMoveNext();                      if (IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))) {                          uint codePoint = ParseUnicode(Character(0)' Character(1)' Character(2)' Character(3));                            TryMoveNext();                          TryMoveNext();                          TryMoveNext();                          TryMoveNext();                            escaped = (char)codePoint;                          return fsResult.Success;                      }                        // invalid escape sequence                      escaped = (char)0;                      return MakeFailure(                          string.Format("invalid escape sequence '\\u{0}{1}{2}{3}'\n"'                              Character(0)'                              Character(1)'                              Character(2)'                              Character(3)));                  default:                      escaped = (char)0;                      return MakeFailure(string.Format("Invalid escape sequence \\{0}"' Character()));              }
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character()) {                  case '\\': TryMoveNext(); escaped = '\\'; return fsResult.Success;                  case '/': TryMoveNext(); escaped = '/'; return fsResult.Success;                  case '"': TryMoveNext(); escaped = '\"'; return fsResult.Success;                  case 'a': TryMoveNext(); escaped = '\a'; return fsResult.Success;                  case 'b': TryMoveNext(); escaped = '\b'; return fsResult.Success;                  case 'f': TryMoveNext(); escaped = '\f'; return fsResult.Success;                  case 'n': TryMoveNext(); escaped = '\n'; return fsResult.Success;                  case 'r': TryMoveNext(); escaped = '\r'; return fsResult.Success;                  case 't': TryMoveNext(); escaped = '\t'; return fsResult.Success;                  case '0': TryMoveNext(); escaped = '\0'; return fsResult.Success;                  case 'u':                      TryMoveNext();                      if (IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))) {                          uint codePoint = ParseUnicode(Character(0)' Character(1)' Character(2)' Character(3));                            TryMoveNext();                          TryMoveNext();                          TryMoveNext();                          TryMoveNext();                            escaped = (char)codePoint;                          return fsResult.Success;                      }                        // invalid escape sequence                      escaped = (char)0;                      return MakeFailure(                          string.Format("invalid escape sequence '\\u{0}{1}{2}{3}'\n"'                              Character(0)'                              Character(1)'                              Character(2)'                              Character(3)));                  default:                      escaped = (char)0;                      return MakeFailure(string.Format("Invalid escape sequence \\{0}"' Character()));              }
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character()) {                  case '\\': TryMoveNext(); escaped = '\\'; return fsResult.Success;                  case '/': TryMoveNext(); escaped = '/'; return fsResult.Success;                  case '"': TryMoveNext(); escaped = '\"'; return fsResult.Success;                  case 'a': TryMoveNext(); escaped = '\a'; return fsResult.Success;                  case 'b': TryMoveNext(); escaped = '\b'; return fsResult.Success;                  case 'f': TryMoveNext(); escaped = '\f'; return fsResult.Success;                  case 'n': TryMoveNext(); escaped = '\n'; return fsResult.Success;                  case 'r': TryMoveNext(); escaped = '\r'; return fsResult.Success;                  case 't': TryMoveNext(); escaped = '\t'; return fsResult.Success;                  case '0': TryMoveNext(); escaped = '\0'; return fsResult.Success;                  case 'u':                      TryMoveNext();                      if (IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))) {                          uint codePoint = ParseUnicode(Character(0)' Character(1)' Character(2)' Character(3));                            TryMoveNext();                          TryMoveNext();                          TryMoveNext();                          TryMoveNext();                            escaped = (char)codePoint;                          return fsResult.Success;                      }                        // invalid escape sequence                      escaped = (char)0;                      return MakeFailure(                          string.Format("invalid escape sequence '\\u{0}{1}{2}{3}'\n"'                              Character(0)'                              Character(1)'                              Character(2)'                              Character(3)));                  default:                      escaped = (char)0;                      return MakeFailure(string.Format("Invalid escape sequence \\{0}"' Character()));              }
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character()) {                  case '\\': TryMoveNext(); escaped = '\\'; return fsResult.Success;                  case '/': TryMoveNext(); escaped = '/'; return fsResult.Success;                  case '"': TryMoveNext(); escaped = '\"'; return fsResult.Success;                  case 'a': TryMoveNext(); escaped = '\a'; return fsResult.Success;                  case 'b': TryMoveNext(); escaped = '\b'; return fsResult.Success;                  case 'f': TryMoveNext(); escaped = '\f'; return fsResult.Success;                  case 'n': TryMoveNext(); escaped = '\n'; return fsResult.Success;                  case 'r': TryMoveNext(); escaped = '\r'; return fsResult.Success;                  case 't': TryMoveNext(); escaped = '\t'; return fsResult.Success;                  case '0': TryMoveNext(); escaped = '\0'; return fsResult.Success;                  case 'u':                      TryMoveNext();                      if (IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))) {                          uint codePoint = ParseUnicode(Character(0)' Character(1)' Character(2)' Character(3));                            TryMoveNext();                          TryMoveNext();                          TryMoveNext();                          TryMoveNext();                            escaped = (char)codePoint;                          return fsResult.Success;                      }                        // invalid escape sequence                      escaped = (char)0;                      return MakeFailure(                          string.Format("invalid escape sequence '\\u{0}{1}{2}{3}'\n"'                              Character(0)'                              Character(1)'                              Character(2)'                              Character(3)));                  default:                      escaped = (char)0;                      return MakeFailure(string.Format("Invalid escape sequence \\{0}"' Character()));              }
Magic Number,FullSerializer,fsJsonParser,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonParser.cs,TryUnescapeChar,The following statement contains a magic number: switch (Character()) {                  case '\\': TryMoveNext(); escaped = '\\'; return fsResult.Success;                  case '/': TryMoveNext(); escaped = '/'; return fsResult.Success;                  case '"': TryMoveNext(); escaped = '\"'; return fsResult.Success;                  case 'a': TryMoveNext(); escaped = '\a'; return fsResult.Success;                  case 'b': TryMoveNext(); escaped = '\b'; return fsResult.Success;                  case 'f': TryMoveNext(); escaped = '\f'; return fsResult.Success;                  case 'n': TryMoveNext(); escaped = '\n'; return fsResult.Success;                  case 'r': TryMoveNext(); escaped = '\r'; return fsResult.Success;                  case 't': TryMoveNext(); escaped = '\t'; return fsResult.Success;                  case '0': TryMoveNext(); escaped = '\0'; return fsResult.Success;                  case 'u':                      TryMoveNext();                      if (IsHex(Character(0))                       && IsHex(Character(1))                       && IsHex(Character(2))                       && IsHex(Character(3))) {                          uint codePoint = ParseUnicode(Character(0)' Character(1)' Character(2)' Character(3));                            TryMoveNext();                          TryMoveNext();                          TryMoveNext();                          TryMoveNext();                            escaped = (char)codePoint;                          return fsResult.Success;                      }                        // invalid escape sequence                      escaped = (char)0;                      return MakeFailure(                          string.Format("invalid escape sequence '\\u{0}{1}{2}{3}'\n"'                              Character(0)'                              Character(1)'                              Character(2)'                              Character(3)));                  default:                      escaped = (char)0;                      return MakeFailure(string.Format("Invalid escape sequence \\{0}"' Character()));              }
Magic Number,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i) {                  char c = str[i];                    // unicode code point                  int intChar = Convert.ToInt32(c);                  if (intChar < 0 || intChar > 127) {                      needsEscape = true;                      break;                  }                    // standard escape character                  switch (c) {                      case '"':                      case '\\':                      case '\a':                      case '\b':                      case '\f':                      case '\n':                      case '\r':                      case '\t':                      case '\0':                          needsEscape = true;                          break;                  }                    if (needsEscape) {                      break;                  }              }
Magic Number,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i) {                  char c = str[i];                    // unicode code point                  int intChar = Convert.ToInt32(c);                  if (intChar < 0 || intChar > 127) {                      result.Append(string.Format("\\u{0:x4} "' intChar).Trim());                      continue;                  }                    // standard escape character                  switch (c) {                      case '"': result.Append("\\\""); continue;                      case '\\': result.Append(@"\\"); continue;                      case '\a': result.Append(@"\a"); continue;                      case '\b': result.Append(@"\b"); continue;                      case '\f': result.Append(@"\f"); continue;                      case '\n': result.Append(@"\n"); continue;                      case '\r': result.Append(@"\r"); continue;                      case '\t': result.Append(@"\t"); continue;                      case '\0': result.Append(@"\0"); continue;                  }                    // no escaping needed                  result.Append(c);              }
Magic Number,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count > 2) return;
Magic Number,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count == 2 && dict.ContainsKey(typeString) && dict.ContainsKey(typeDataString)) {                  data = dict[typeDataString];                  EnsureDictionary(data);                  ConvertLegacyData(ref data);                    data.AsDictionary[Key_InstanceType] = dict[typeString];              }                // object definition              else if (dict.Count == 2 && dict.ContainsKey(sourceIdString) && dict.ContainsKey(sourceDataString)) {                  data = dict[sourceDataString];                  EnsureDictionary(data);                  ConvertLegacyData(ref data);                    data.AsDictionary[Key_ObjectDefinition] = dict[sourceIdString];              }                // object reference              else if (dict.Count == 1 && dict.ContainsKey(referenceIdString)) {                  data = fsData.CreateDictionary();                  data.AsDictionary[Key_ObjectReference] = dict[referenceIdString];              }
Magic Number,FullSerializer,fsSerializer,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsSerializer.cs,ConvertLegacyData,The following statement contains a magic number: if (dict.Count == 2 && dict.ContainsKey(typeString) && dict.ContainsKey(typeDataString)) {                  data = dict[typeDataString];                  EnsureDictionary(data);                  ConvertLegacyData(ref data);                    data.AsDictionary[Key_InstanceType] = dict[typeString];              }                // object definition              else if (dict.Count == 2 && dict.ContainsKey(sourceIdString) && dict.ContainsKey(sourceDataString)) {                  data = dict[sourceDataString];                  EnsureDictionary(data);                  ConvertLegacyData(ref data);                    data.AsDictionary[Key_ObjectDefinition] = dict[sourceIdString];              }                // object reference              else if (dict.Count == 1 && dict.ContainsKey(referenceIdString)) {                  data = fsData.CreateDictionary();                  data.AsDictionary[Key_ObjectReference] = dict[referenceIdString];              }
Magic Number,FullSerializer.Internal,AttributeQueryComparator,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\Internal\fsPortableReflection.cs,GetHashCode,The following statement contains a magic number: return                      obj.MemberInfo.GetHashCode() +                      (17 * obj.AttributeType.GetHashCode());
Missing Default,FullSerializer,fsData,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsData.cs,Equals,The following switch statement is missing a default case: switch (Type) {                  case fsDataType.Null:                      return true;                    case fsDataType.Double:                      return AsDouble == other.AsDouble || Math.Abs(AsDouble - other.AsDouble) < double.Epsilon;                    case fsDataType.Int64:                      return AsInt64 == other.AsInt64;                    case fsDataType.Boolean:                      return AsBool == other.AsBool;                    case fsDataType.String:                      return AsString == other.AsString;                    case fsDataType.Array:                      var thisList = AsList;                      var otherList = other.AsList;                        if (thisList.Count != otherList.Count) return false;                        for (int i = 0; i < thisList.Count; ++i) {                          if (thisList[i].Equals(otherList[i]) == false) {                              return false;                          }                      }                        return true;                    case fsDataType.Object:                      var thisDict = AsDictionary;                      var otherDict = other.AsDictionary;                        if (thisDict.Count != otherDict.Count) return false;                        foreach (string key in thisDict.Keys) {                          if (otherDict.ContainsKey(key) == false) {                              return false;                          }                            if (thisDict[key].Equals(otherDict[key]) == false) {                              return false;                          }                      }                        return true;              }
Missing Default,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following switch statement is missing a default case: switch (c) {                      case '"':                      case '\\':                      case '\a':                      case '\b':                      case '\f':                      case '\n':                      case '\r':                      case '\t':                      case '\0':                          needsEscape = true;                          break;                  }
Missing Default,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,EscapeString,The following switch statement is missing a default case: switch (c) {                      case '"': result.Append("\\\""); continue;                      case '\\': result.Append(@"\\"); continue;                      case '\a': result.Append(@"\a"); continue;                      case '\b': result.Append(@"\b"); continue;                      case '\f': result.Append(@"\f"); continue;                      case '\n': result.Append(@"\n"); continue;                      case '\r': result.Append(@"\r"); continue;                      case '\t': result.Append(@"\t"); continue;                      case '\0': result.Append(@"\0"); continue;                  }
Missing Default,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildCompressedString,The following switch statement is missing a default case: switch (data.Type) {                  case fsDataType.Null:                      stream.Write("null");                      break;                    case fsDataType.Boolean:                      if (data.AsBool) stream.Write("true");                      else stream.Write("false");                      break;                    case fsDataType.Double:                      // doubles must *always* include a decimal                      stream.Write(ConvertDoubleToString(data.AsDouble));                      break;                    case fsDataType.Int64:                      stream.Write(data.AsInt64);                      break;                    case fsDataType.String:                      stream.Write('"');                      stream.Write(EscapeString(data.AsString));                      stream.Write('"');                      break;                    case fsDataType.Object: {                          stream.Write('{');                          bool comma = false;                          foreach (var entry in data.AsDictionary) {                              if (comma) stream.Write(''');                              comma = true;                              stream.Write('"');                              stream.Write(entry.Key);                              stream.Write('"');                              stream.Write(":");                              BuildCompressedString(entry.Value' stream);                          }                          stream.Write('}');                          break;                      }                    case fsDataType.Array: {                          stream.Write('[');                          bool comma = false;                          foreach (var entry in data.AsList) {                              if (comma) stream.Write(''');                              comma = true;                              BuildCompressedString(entry' stream);                          }                          stream.Write(']');                          break;                      }              }
Missing Default,FullSerializer,fsJsonPrinter,C:\repos\jacobdufault_fullserializer\Assets\FullSerializer\Source\fsJsonPrinter.cs,BuildPrettyString,The following switch statement is missing a default case: switch (data.Type) {                  case fsDataType.Null:                      stream.Write("null");                      break;                    case fsDataType.Boolean:                      if (data.AsBool) stream.Write("true");                      else stream.Write("false");                      break;                    case fsDataType.Double:                      stream.Write(ConvertDoubleToString(data.AsDouble));                      break;                    case fsDataType.Int64:                      stream.Write(data.AsInt64);                      break;                    case fsDataType.String:                      stream.Write('"');                      stream.Write(EscapeString(data.AsString));                      stream.Write('"');                      break;                    case fsDataType.Object: {                          stream.Write('{');                          stream.WriteLine();                          bool comma = false;                          foreach (var entry in data.AsDictionary) {                              if (comma) {                                  stream.Write(''');                                  stream.WriteLine();                              }                              comma = true;                              InsertSpacing(stream' depth + 1);                              stream.Write('"');                              stream.Write(entry.Key);                              stream.Write('"');                              stream.Write(": ");                              BuildPrettyString(entry.Value' stream' depth + 1);                          }                          stream.WriteLine();                          InsertSpacing(stream' depth);                          stream.Write('}');                          break;                      }                    case fsDataType.Array:                      // special case for empty lists; we don't put an empty line                      // between the brackets                      if (data.AsList.Count == 0) {                          stream.Write("[]");                      }                      else {                          bool comma = false;                            stream.Write('[');                          stream.WriteLine();                          foreach (var entry in data.AsList) {                              if (comma) {                                  stream.Write(''');                                  stream.WriteLine();                              }                              comma = true;                              InsertSpacing(stream' depth + 1);                              BuildPrettyString(entry' stream' depth + 1);                          }                          stream.WriteLine();                          InsertSpacing(stream' depth);                          stream.Write(']');                      }                      break;              }
