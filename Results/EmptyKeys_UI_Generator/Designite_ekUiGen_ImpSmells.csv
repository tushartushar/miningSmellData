Implementation smell,Namespace,Class,File,Method,Description
Long Method,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The method has 106 lines of code.
Complex Method,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,Cyclomatic complexity of the method is 22
Long Parameter List,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Generate,The method has 6 parameters.
Long Statement,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The length of the statement  "	Console.WriteLine ("Empty Keys (c) 2016 User Interface Generator Console v" + Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()); " is 143.
Long Statement,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The length of the statement  "	var optionSet = new OptionSet ().Add ("?|help|h"' "Command line help"' o => showHelp = o != null).Add<string> ("i|input="' "Input directory with XAML files"' o => inputDirectory = o).Add<string> ("o|output="' "Output directory for .cs files"' o => outputDirectory = o).Add ("no-copy-images"' "Do not copy generated image assets (ignores input asset directory)"' o => ignoreImageAssets = o != null).Add ("no-fonts"' "Do not generate font assets (may lead to broken output)"' o => ignoreFontAssets = o != null).Add ("ignore-assets"' "Ignore all asset files and just generate .xaml.cs files"' o => ignoreImageAssets = ignoreFontAssets = o != null).Add<string> ("ia="' "Input asset directory to copy images from"' o => assetInputDirectory = o).Add<string> ("oa="' "Output Asset directory for generated sprite fonts and images"' o => assetOutputDirectory = o).Add<RenderMode> ("rm="' String.Format ("Render mode ({0})"' String.Join ("' "' Enum.GetNames (typeof(RenderMode))))' o => renderMode = o).Add<string> ("ns|namespace="' "The namespace to generate the code under"' o => desiredNamespace = o).Add<string> ("bd|buildDir="' "Directory for additional assemblies"' o => buildDir = o).Add ("generate-bindings"' "Generate data bindings"' o => generateBindings = o != null).Add<string> ("da|defaultAssembly="' "Assembly name to use for clr-namespaces without an assembly"' o => defaultAssembly = o).Add<string> ("header="' "Header file for generated .cs files"' o => headerFile = o); " is 1477.
Long Statement,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The length of the statement  "		Console.WriteLine ("WARNING: No asset output directory specified. No image or font files will be created (specify --ignore-assets if this was intentional)."); " is 158.
Long Statement,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The length of the statement  "	if (!(ignoreFontAssets && ignoreImageAssets) && !string.IsNullOrEmpty (assetOutputDirectory) && !Directory.Exists (assetOutputDirectory)) { " is 139.
Long Statement,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The length of the statement  "			BindingGenerator.Instance.GenerateNamespace (desiredNamespace + "." + Path.GetFileNameWithoutExtension (file) + "_Bindings"); " is 125.
Long Statement,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Generate,The length of the statement  "		xaml = Regex.Replace (xaml' @"xmlns(:\w+)?=\""clr-namespace:([.\w]+)(;assembly=)?\"""' @"xmlns$1=""clr-namespace:$2;assembly=" + defaultAssembly + '"'); " is 152.
Complex Conditional,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The conditional expression  "!(ignoreFontAssets && ignoreImageAssets) && !string.IsNullOrEmpty (assetOutputDirectory) && !Directory.Exists (assetOutputDirectory)"  is complex.
Magic Number,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The following statement contains a magic number: foreach (var file in Directory.EnumerateFiles (inputDirectory' "*.xaml"' SearchOption.AllDirectories)) {  	if (BindingGenerator.Instance.IsEnabled) {  		BindingGenerator.Instance.GenerateNamespace (desiredNamespace + "." + Path.GetFileNameWithoutExtension (file) + "_Bindings");  	}  	string relativeDirectory = file.Remove (0' inputDirectory.Length).TrimStart (Path.DirectorySeparatorChar);  	string outputFile = Path.Combine (outputDirectory' relativeDirectory) + ".cs";  	try {  		Generate (file' outputFile' renderMode' desiredNamespace' defaultAssembly' header);  	} catch (Exception ex) {  		Console.WriteLine (ex);  		return -2;  	}  	if (generateBindings) {  		outputFile = Path.Combine (outputDirectory' relativeDirectory) + "_bindings.cs";  		BindingGenerator.Instance.GenerateFile (outputFile);  	}  }  
Magic Number,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The following statement contains a magic number: try {  	Generate (file' outputFile' renderMode' desiredNamespace' defaultAssembly' header);  } catch (Exception ex) {  	Console.WriteLine (ex);  	return -2;  }  
Magic Number,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The following statement contains a magic number: return -2;  
Magic Number,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The following statement contains a magic number: if (!ignoreImageAssets) {  	bool result;  	if (!string.IsNullOrWhiteSpace (assetInputDirectory)) {  		result = ImageAssets.Instance.CopyImagesToAssetDirectory (assetOutputDirectory' assetInputDirectory);  	} else {  		result = ImageAssets.Instance.CopyImagesToAssetDirectory (assetOutputDirectory);  	}  	if (!result) {  		return -3;  	}  }  
Magic Number,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The following statement contains a magic number: if (!result) {  	return -3;  }  
Magic Number,ekUiGen,Program,F:\newReposMay17\EmptyKeys_UI_Generator\ekUiGen\Program.cs,Main,The following statement contains a magic number: return -3;  
