Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,Cyclomatic complexity of the method is 11
Complex Method,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,Cyclomatic complexity of the method is 8
Long Statement,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The length of the statement  "		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36"; " is 131.
Long Statement,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The length of the statement  "			var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5); " is 135.
Long Statement,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The length of the statement  "			request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36"; " is 131.
Long Statement,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The length of the statement  "	var postData = @"st.redirect=&st.asr=&st.posted=set&st.originalaction=http%3A%2F%2Fwww.odnoklassniki.ru%2Fdk%3Fcmd%3DAnonymLogin%26st.cmd%3DanonymLogin&st.fJS=enabled&st.st.screenSize=1920+x+1080&st.st.browserSize=266&st.st.flashVer=12.0.0&st.email={0}&st.password={1}&st.remember=on&st.iscode=false"; " is 301.
Long Statement,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The length of the statement  "		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36"; " is 131.
Long Statement,AppCore.Loaders,TrackListWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\TrackListWorker.cs,trackListBG_DoWork,The length of the statement  "		var request = WebRequest.Create (String.Format (musicUrl' LoginWorker.Instance.CookiesDict ["JSESSIONID"])) as HttpWebRequest; " is 126.
Long Statement,AppCore.Loaders,TrackListWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\TrackListWorker.cs,trackListBG_DoWork,The length of the statement  "		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36"; " is 131.
Long Statement,AppCore.Loaders,FriendWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\FriendWorker.cs,friendsBG_DoWork,The length of the statement  "		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36"; " is 131.
Long Statement,AppCore.Tools,Log,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Log.cs,WriteLog,The length of the statement  "				message = String.Format ("[{0}]\r\n     Code - 0x{2}\r\n     Message - {1}\r\n"' DateTime.UtcNow.AddHours (2).ToString ()' message' ((Int32)errorCode).ToString ("X4")); " is 168.
Long Statement,AppCore,RequestsMonitor,C:\repos\Alexx-G_musicDownloader\AppCore\RequestsMonitor.cs,BeginLoadTracksList,The length of the statement  "		trackListWorker.BeginLoadTracksList (loginWorker.CookiesStr' loginWorker.CookiesDict ["JSESSIONID"]' loginWorker.cookiesContainer' friendId); " is 141.
Empty Catch Block,AppCore.Tools,Log,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Log.cs,WriteLog,The method has an empty catch block.
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: if (track != null) {  	var request = WebRequest.Create (String.Format (Links.trackDetailsUrl' jsSessionId' track.TrackId)) as HttpWebRequest;  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	request.Headers ["Cookie"] = cookiesStr;  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			using (var str = new StreamReader (response.GetResponseStream ())) {  				var jObj = Newtonsoft.Json.Linq.JObject.Parse (str.ReadToEnd ());  				track.PlayStr = jObj ["play"].ToString ();  			}  		}  		var indexOfMd5 = track.PlayStr.IndexOf ("md5=") + 4;  		var endOfMd5 = indexOfMd5 + 32;  		var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5);  		md5Hash = Utils.GetMd5Hash (md5Hash + "secret");  		md5Hash = Utils.GetHash (md5Hash);  		request = WebRequest.Create (track.PlayStr + "&clientHash=" + md5Hash) as HttpWebRequest;  		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  		try {  			using (var response = request.GetResponse () as HttpWebResponse) {  				var inputStream = response.GetResponseStream ();  				var fileName = r.Replace (track.Name' " ");  				var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  				var buffer = new byte[10240];  				Int32 bytesRead = 0;  				do {  					bytesRead = inputStream.Read (buffer' 0' buffer.Length);  					outputStream.Write (buffer' 0' bytesRead);  				}  				while (bytesRead > 0);  				inputStream.Close ();  				outputStream.Close ();  			}  		}  		catch (Exception ex) {  			failedTracks++;  			Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  			track.State = false;  		}  	}  	catch (Exception ex1) {  		failedTracks++;  		Log.WriteLog (ex1.Message' ErrorCodes.TrackDownloadRequest' ex1.StackTrace);  		track.State = false;  	}  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: if (track != null) {  	var request = WebRequest.Create (String.Format (Links.trackDetailsUrl' jsSessionId' track.TrackId)) as HttpWebRequest;  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	request.Headers ["Cookie"] = cookiesStr;  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			using (var str = new StreamReader (response.GetResponseStream ())) {  				var jObj = Newtonsoft.Json.Linq.JObject.Parse (str.ReadToEnd ());  				track.PlayStr = jObj ["play"].ToString ();  			}  		}  		var indexOfMd5 = track.PlayStr.IndexOf ("md5=") + 4;  		var endOfMd5 = indexOfMd5 + 32;  		var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5);  		md5Hash = Utils.GetMd5Hash (md5Hash + "secret");  		md5Hash = Utils.GetHash (md5Hash);  		request = WebRequest.Create (track.PlayStr + "&clientHash=" + md5Hash) as HttpWebRequest;  		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  		try {  			using (var response = request.GetResponse () as HttpWebResponse) {  				var inputStream = response.GetResponseStream ();  				var fileName = r.Replace (track.Name' " ");  				var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  				var buffer = new byte[10240];  				Int32 bytesRead = 0;  				do {  					bytesRead = inputStream.Read (buffer' 0' buffer.Length);  					outputStream.Write (buffer' 0' bytesRead);  				}  				while (bytesRead > 0);  				inputStream.Close ();  				outputStream.Close ();  			}  		}  		catch (Exception ex) {  			failedTracks++;  			Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  			track.State = false;  		}  	}  	catch (Exception ex1) {  		failedTracks++;  		Log.WriteLog (ex1.Message' ErrorCodes.TrackDownloadRequest' ex1.StackTrace);  		track.State = false;  	}  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: if (track != null) {  	var request = WebRequest.Create (String.Format (Links.trackDetailsUrl' jsSessionId' track.TrackId)) as HttpWebRequest;  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	request.Headers ["Cookie"] = cookiesStr;  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			using (var str = new StreamReader (response.GetResponseStream ())) {  				var jObj = Newtonsoft.Json.Linq.JObject.Parse (str.ReadToEnd ());  				track.PlayStr = jObj ["play"].ToString ();  			}  		}  		var indexOfMd5 = track.PlayStr.IndexOf ("md5=") + 4;  		var endOfMd5 = indexOfMd5 + 32;  		var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5);  		md5Hash = Utils.GetMd5Hash (md5Hash + "secret");  		md5Hash = Utils.GetHash (md5Hash);  		request = WebRequest.Create (track.PlayStr + "&clientHash=" + md5Hash) as HttpWebRequest;  		request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  		try {  			using (var response = request.GetResponse () as HttpWebResponse) {  				var inputStream = response.GetResponseStream ();  				var fileName = r.Replace (track.Name' " ");  				var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  				var buffer = new byte[10240];  				Int32 bytesRead = 0;  				do {  					bytesRead = inputStream.Read (buffer' 0' buffer.Length);  					outputStream.Write (buffer' 0' bytesRead);  				}  				while (bytesRead > 0);  				inputStream.Close ();  				outputStream.Close ();  			}  		}  		catch (Exception ex) {  			failedTracks++;  			Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  			track.State = false;  		}  	}  	catch (Exception ex1) {  		failedTracks++;  		Log.WriteLog (ex1.Message' ErrorCodes.TrackDownloadRequest' ex1.StackTrace);  		track.State = false;  	}  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: try {  	using (var response = request.GetResponse () as HttpWebResponse) {  		using (var str = new StreamReader (response.GetResponseStream ())) {  			var jObj = Newtonsoft.Json.Linq.JObject.Parse (str.ReadToEnd ());  			track.PlayStr = jObj ["play"].ToString ();  		}  	}  	var indexOfMd5 = track.PlayStr.IndexOf ("md5=") + 4;  	var endOfMd5 = indexOfMd5 + 32;  	var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5);  	md5Hash = Utils.GetMd5Hash (md5Hash + "secret");  	md5Hash = Utils.GetHash (md5Hash);  	request = WebRequest.Create (track.PlayStr + "&clientHash=" + md5Hash) as HttpWebRequest;  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			var inputStream = response.GetResponseStream ();  			var fileName = r.Replace (track.Name' " ");  			var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  			var buffer = new byte[10240];  			Int32 bytesRead = 0;  			do {  				bytesRead = inputStream.Read (buffer' 0' buffer.Length);  				outputStream.Write (buffer' 0' bytesRead);  			}  			while (bytesRead > 0);  			inputStream.Close ();  			outputStream.Close ();  		}  	}  	catch (Exception ex) {  		failedTracks++;  		Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  		track.State = false;  	}  }  catch (Exception ex1) {  	failedTracks++;  	Log.WriteLog (ex1.Message' ErrorCodes.TrackDownloadRequest' ex1.StackTrace);  	track.State = false;  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: try {  	using (var response = request.GetResponse () as HttpWebResponse) {  		using (var str = new StreamReader (response.GetResponseStream ())) {  			var jObj = Newtonsoft.Json.Linq.JObject.Parse (str.ReadToEnd ());  			track.PlayStr = jObj ["play"].ToString ();  		}  	}  	var indexOfMd5 = track.PlayStr.IndexOf ("md5=") + 4;  	var endOfMd5 = indexOfMd5 + 32;  	var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5);  	md5Hash = Utils.GetMd5Hash (md5Hash + "secret");  	md5Hash = Utils.GetHash (md5Hash);  	request = WebRequest.Create (track.PlayStr + "&clientHash=" + md5Hash) as HttpWebRequest;  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			var inputStream = response.GetResponseStream ();  			var fileName = r.Replace (track.Name' " ");  			var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  			var buffer = new byte[10240];  			Int32 bytesRead = 0;  			do {  				bytesRead = inputStream.Read (buffer' 0' buffer.Length);  				outputStream.Write (buffer' 0' bytesRead);  			}  			while (bytesRead > 0);  			inputStream.Close ();  			outputStream.Close ();  		}  	}  	catch (Exception ex) {  		failedTracks++;  		Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  		track.State = false;  	}  }  catch (Exception ex1) {  	failedTracks++;  	Log.WriteLog (ex1.Message' ErrorCodes.TrackDownloadRequest' ex1.StackTrace);  	track.State = false;  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: try {  	using (var response = request.GetResponse () as HttpWebResponse) {  		using (var str = new StreamReader (response.GetResponseStream ())) {  			var jObj = Newtonsoft.Json.Linq.JObject.Parse (str.ReadToEnd ());  			track.PlayStr = jObj ["play"].ToString ();  		}  	}  	var indexOfMd5 = track.PlayStr.IndexOf ("md5=") + 4;  	var endOfMd5 = indexOfMd5 + 32;  	var md5Hash = endOfMd5 == track.PlayStr.Length ? track.PlayStr.Substring (indexOfMd5) : track.PlayStr.Substring (indexOfMd5' endOfMd5);  	md5Hash = Utils.GetMd5Hash (md5Hash + "secret");  	md5Hash = Utils.GetHash (md5Hash);  	request = WebRequest.Create (track.PlayStr + "&clientHash=" + md5Hash) as HttpWebRequest;  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			var inputStream = response.GetResponseStream ();  			var fileName = r.Replace (track.Name' " ");  			var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  			var buffer = new byte[10240];  			Int32 bytesRead = 0;  			do {  				bytesRead = inputStream.Read (buffer' 0' buffer.Length);  				outputStream.Write (buffer' 0' bytesRead);  			}  			while (bytesRead > 0);  			inputStream.Close ();  			outputStream.Close ();  		}  	}  	catch (Exception ex) {  		failedTracks++;  		Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  		track.State = false;  	}  }  catch (Exception ex1) {  	failedTracks++;  	Log.WriteLog (ex1.Message' ErrorCodes.TrackDownloadRequest' ex1.StackTrace);  	track.State = false;  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: try {  	using (var response = request.GetResponse () as HttpWebResponse) {  		var inputStream = response.GetResponseStream ();  		var fileName = r.Replace (track.Name' " ");  		var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  		var buffer = new byte[10240];  		Int32 bytesRead = 0;  		do {  			bytesRead = inputStream.Read (buffer' 0' buffer.Length);  			outputStream.Write (buffer' 0' bytesRead);  		}  		while (bytesRead > 0);  		inputStream.Close ();  		outputStream.Close ();  	}  }  catch (Exception ex) {  	failedTracks++;  	Log.WriteLog (ex.Message' ErrorCodes.TrackDownloadReadWrite' ex.StackTrace);  	track.State = false;  }  
Magic Number,AppCore.Loaders,DownloadsStack,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\DownloadsStack.cs,tracksDownloadBG_DoWork,The following statement contains a magic number: using (var response = request.GetResponse () as HttpWebResponse) {  	var inputStream = response.GetResponseStream ();  	var fileName = r.Replace (track.Name' " ");  	var outputStream = File.Create (track.SavePath + "\\" + fileName + ".mp3");  	var buffer = new byte[10240];  	Int32 bytesRead = 0;  	do {  		bytesRead = inputStream.Read (buffer' 0' buffer.Length);  		outputStream.Write (buffer' 0' bytesRead);  	}  	while (bytesRead > 0);  	inputStream.Close ();  	outputStream.Close ();  }  
Magic Number,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The following statement contains a magic number: try {  	var request = WebRequest.Create (Links.loginUrl) as HttpWebRequest;  	request.Method = "POST";  	request.AllowAutoRedirect = true;  	request.ContentType = "application/x-www-form-urlencoded";  	request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/32.0.1700.76 Safari/537.36";  	var bytes = Encoding.UTF8.GetBytes (postData);  	var stream = request.GetRequestStream ();  	stream.Write (bytes' 0' bytes.Length);  	stream.Close ();  	request.CookieContainer = cookiesContainer;  	try {  		using (var response = request.GetResponse () as HttpWebResponse) {  			CookiesStr = request.Headers ["Cookie"];  			var cookies = request.Headers ["Cookie"].Replace (" "' "").Split (';');  			foreach (var cookie in cookies) {  				var kvp = cookie.Split ('=');  				if (kvp.Length == 2) {  					if (CookiesDict.Keys.Contains (kvp [0])) {  						CookiesDict [kvp [0]] = kvp [1];  					}  					else {  						CookiesDict.Add (kvp [0]' kvp [1]);  					}  				}  			}  		}  	}  	catch (Exception e1) {  		Log.WriteLog (e1.Message' ErrorCodes.CheckCredentialsParse' e1.StackTrace);  	}  }  catch (Exception e2) {  	Log.WriteLog (e2.Message' ErrorCodes.CheckCredentialsRequest' e2.StackTrace);  }  
Magic Number,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The following statement contains a magic number: try {  	using (var response = request.GetResponse () as HttpWebResponse) {  		CookiesStr = request.Headers ["Cookie"];  		var cookies = request.Headers ["Cookie"].Replace (" "' "").Split (';');  		foreach (var cookie in cookies) {  			var kvp = cookie.Split ('=');  			if (kvp.Length == 2) {  				if (CookiesDict.Keys.Contains (kvp [0])) {  					CookiesDict [kvp [0]] = kvp [1];  				}  				else {  					CookiesDict.Add (kvp [0]' kvp [1]);  				}  			}  		}  	}  }  catch (Exception e1) {  	Log.WriteLog (e1.Message' ErrorCodes.CheckCredentialsParse' e1.StackTrace);  }  
Magic Number,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The following statement contains a magic number: using (var response = request.GetResponse () as HttpWebResponse) {  	CookiesStr = request.Headers ["Cookie"];  	var cookies = request.Headers ["Cookie"].Replace (" "' "").Split (';');  	foreach (var cookie in cookies) {  		var kvp = cookie.Split ('=');  		if (kvp.Length == 2) {  			if (CookiesDict.Keys.Contains (kvp [0])) {  				CookiesDict [kvp [0]] = kvp [1];  			}  			else {  				CookiesDict.Add (kvp [0]' kvp [1]);  			}  		}  	}  }  
Magic Number,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The following statement contains a magic number: foreach (var cookie in cookies) {  	var kvp = cookie.Split ('=');  	if (kvp.Length == 2) {  		if (CookiesDict.Keys.Contains (kvp [0])) {  			CookiesDict [kvp [0]] = kvp [1];  		}  		else {  			CookiesDict.Add (kvp [0]' kvp [1]);  		}  	}  }  
Magic Number,AppCore.Loaders,LoginWorker,C:\repos\Alexx-G_musicDownloader\AppCore\Loaders\LoginWorker.cs,loginBG_DoWork,The following statement contains a magic number: if (kvp.Length == 2) {  	if (CookiesDict.Keys.Contains (kvp [0])) {  		CookiesDict [kvp [0]] = kvp [1];  	}  	else {  		CookiesDict.Add (kvp [0]' kvp [1]);  	}  }  
Magic Number,AppCore.Tools,Log,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Log.cs,WriteLog,The following statement contains a magic number: lock (logAccesSync) {  	try {  		using (var file = File.Open ("log.txt"' FileMode.OpenOrCreate' FileAccess.ReadWrite)) {  			file.Seek (0' SeekOrigin.End);  			message = String.Format ("[{0}]\r\n     Code - 0x{2}\r\n     Message - {1}\r\n"' DateTime.UtcNow.AddHours (2).ToString ()' message' ((Int32)errorCode).ToString ("X4"));  			if (!String.IsNullOrEmpty (stackTrace)) {  				message += String.Format ("     Stacktrace - {0}\r\n"' stackTrace);  			}  			var bytes = System.Text.Encoding.UTF8.GetBytes (message);  			file.Write (bytes' 0' bytes.Length);  		}  	}  	catch {  	}  }  
Magic Number,AppCore.Tools,Log,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Log.cs,WriteLog,The following statement contains a magic number: try {  	using (var file = File.Open ("log.txt"' FileMode.OpenOrCreate' FileAccess.ReadWrite)) {  		file.Seek (0' SeekOrigin.End);  		message = String.Format ("[{0}]\r\n     Code - 0x{2}\r\n     Message - {1}\r\n"' DateTime.UtcNow.AddHours (2).ToString ()' message' ((Int32)errorCode).ToString ("X4"));  		if (!String.IsNullOrEmpty (stackTrace)) {  			message += String.Format ("     Stacktrace - {0}\r\n"' stackTrace);  		}  		var bytes = System.Text.Encoding.UTF8.GetBytes (message);  		file.Write (bytes' 0' bytes.Length);  	}  }  catch {  }  
Magic Number,AppCore.Tools,Log,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Log.cs,WriteLog,The following statement contains a magic number: using (var file = File.Open ("log.txt"' FileMode.OpenOrCreate' FileAccess.ReadWrite)) {  	file.Seek (0' SeekOrigin.End);  	message = String.Format ("[{0}]\r\n     Code - 0x{2}\r\n     Message - {1}\r\n"' DateTime.UtcNow.AddHours (2).ToString ()' message' ((Int32)errorCode).ToString ("X4"));  	if (!String.IsNullOrEmpty (stackTrace)) {  		message += String.Format ("     Stacktrace - {0}\r\n"' stackTrace);  	}  	var bytes = System.Text.Encoding.UTF8.GetBytes (message);  	file.Write (bytes' 0' bytes.Length);  }  
Magic Number,AppCore.Tools,Log,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Log.cs,WriteLog,The following statement contains a magic number: message = String.Format ("[{0}]\r\n     Code - 0x{2}\r\n     Message - {1}\r\n"' DateTime.UtcNow.AddHours (2).ToString ()' message' ((Int32)errorCode).ToString ("X4"));  
Magic Number,AppCore.Tools,Utils,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Utils.cs,GetHash,The following statement contains a magic number: a.Add (a [31]);  
Magic Number,AppCore.Tools,Utils,C:\repos\Alexx-G_musicDownloader\AppCore\Tools\Utils.cs,GetHash,The following statement contains a magic number: for (var i = a.Count - 2; i >= 0; i--) {  	Sum += a [i];  }  
