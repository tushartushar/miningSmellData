Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NetworkModule,AFK,C:\repos\Reddit-Mud_RMUD\NetworkModule\Afk.cs,Create,The length of the statement  "                .Manual("Sets your afk message. This message is displayed after 5 minutes of inactivity on the WHO list' and to any player who attempts to whisper to you.") " is 156.
Long Statement,NetworkModule,Clients,C:\repos\Reddit-Mud_RMUD\NetworkModule\Clients.cs,ClientConnected,The length of the statement  "                Core.LogError("Rejected connection from " + Client.IPString + ". Matched ban " + ban.SourceBan.Glob + " Reason: " + ban.SourceBan.Reason); " is 138.
Long Statement,NetworkModule,ConnectedPlayersObjectSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\ConnectedPlayersObjectSource.cs,GetObjects,The length of the statement  "            return new List<MudObject>(Clients.ConnectedClients.Where(c => c is NetworkClient && (c as NetworkClient).IsLoggedOn).Select(c => c.Player)); " is 141.
Long Statement,NetworkModule,Kick,C:\repos\Reddit-Mud_RMUD\NetworkModule\Kick.cs,Create,The length of the statement  "                        var maskRegex = new System.Text.RegularExpressions.Regex(ProscriptionList.ConvertGlobToRegex(mask)' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 156.
Long Statement,NetworkModule,LoginCommandHandler,C:\repos\Reddit-Mud_RMUD\NetworkModule\LoginCommandHandler.cs,LogPlayerIn,The length of the statement  "                    Account.LoggedInCharacter.ConnectedClient.Send("You are being disconnected because you have logged into this account from another connection.\r\n"); " is 148.
Long Statement,NetworkModule,Stats,C:\repos\Reddit-Mud_RMUD\NetworkModule\Stats.cs,AtStartup,The length of the statement  "                            MudObject.SendMessage(actor' (client as NetworkClient).ConnectionDescription + (client.Player == null ? "" : (" - " + client.Player.Short))); " is 141.
Long Statement,NetworkModule,Whisper,C:\repos\Reddit-Mud_RMUD\NetworkModule\Whisper.cs,Create,The length of the statement  "                    MudObject.SendMessage(player' "[privately " + DateTime.Now + "] ^<the0> : \"" + match["SPEECH"].ToString() + "\""' actor); " is 122.
Long Statement,NetworkModule,Whisper,C:\repos\Reddit-Mud_RMUD\NetworkModule\Whisper.cs,Create,The length of the statement  "                        MudObject.SendMessage(actor' "^<the0> is afk : " + player.ConnectedClient.Player.GetProperty<Account>("account").AFKMessage' player); " is 133.
Virtual Method Call from Constructor,NetworkModule,LoginCommandHandler,C:\repos\Reddit-Mud_RMUD\NetworkModule\LoginCommandHandler.cs,LoginCommandHandler,The constructor "LoginCommandHandler" calls a virtual method "Create".
Virtual Method Call from Constructor,NetworkModule,LoginCommandHandler,C:\repos\Reddit-Mud_RMUD\NetworkModule\LoginCommandHandler.cs,LoginCommandHandler,The constructor "LoginCommandHandler" calls a virtual method "Create".
Virtual Method Call from Constructor,NetworkModule,LoginCommandHandler,C:\repos\Reddit-Mud_RMUD\NetworkModule\LoginCommandHandler.cs,LoginCommandHandler,The constructor "LoginCommandHandler" calls a virtual method "Create".
Magic Number,NetworkModule,Accounts,C:\repos\Reddit-Mud_RMUD\NetworkModule\Accounts.cs,GenerateRandomSalt,The following statement contains a magic number: var bytes = new Byte[64];
Magic Number,NetworkModule,Ban,C:\repos\Reddit-Mud_RMUD\NetworkModule\Ban.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("BAN")'                      MustMatch("You must supply an ip mask."' SingleWord("GLOB"))'                      MustMatch("You must supply a reason."' Rest("REASON"))))                  .Manual("Ban every player who's ip matches the mask.")                  .ProceduralRule((match' actor) =>                  {                      Clients.ProscriptionList.Ban(match["GLOB"].ToString()' match["REASON"].ToString());                      Clients.SendGlobalMessage("^<the0> has banned " + match["GLOB"].ToString()' actor);                      return PerformResult.Continue;                  });
Magic Number,NetworkModule,Ban,C:\repos\Reddit-Mud_RMUD\NetworkModule\Ban.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("UNBAN")'                      MustMatch("You must supply an ip mask."' SingleWord("GLOB"))))                  .Manual("Remove an existing ban.")                  .ProceduralRule((match' actor) =>                  {                      Clients.ProscriptionList.RemoveBan(match["GLOB"].ToString());                      Clients.SendGlobalMessage("^<the0> removes the ban on " + match["GLOB"].ToString()' actor);                      return PerformResult.Continue;                  });
Magic Number,NetworkModule,Kick,C:\repos\Reddit-Mud_RMUD\NetworkModule\Kick.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("KICK")'                      Or(                          Object("PLAYER"' new ConnectedPlayersObjectSource()' ObjectMatcherSettings.None)'                          SingleWord("MASK"))))                  .Manual("Makes bad people go away.")                  .ProceduralRule((match' actor) =>                  {                      if (match.ContainsKey("PLAYER"))                          KickPlayer(match["PLAYER"] as Actor' actor);                      else                      {                          var mask = match["MASK"].ToString();                          var maskRegex = new System.Text.RegularExpressions.Regex(ProscriptionList.ConvertGlobToRegex(mask)' System.Text.RegularExpressions.RegexOptions.IgnoreCase);                            //Iterate over local copy because kicking modifies ConnectedClients.                          foreach (var client in new List<Client>(Clients.ConnectedClients))                          {                              var netClient = client as NetworkClient;                              if (netClient != null && netClient.IsLoggedOn && maskRegex.Matches(netClient.IPString).Count > 0)                              {                                  Core.MarkLocaleForUpdate(client.Player);                                  KickPlayer(client.Player' actor);                              }                          }                      }                        return PerformResult.Continue;                  });
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,Listen,The following statement contains a magic number: ListenSocket.Listen(16);
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[] {                      (time == 0 || interval == 0) ? 0UL : 1UL' // on or off                      time'                      interval                  };                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);              }              catch (SocketException e)              {                  RMUD.Core.LogCriticalError(e);                  RMUD.Core.LogError("Failed to set keep-alive: " + e.ErrorCode);                  return false;              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[] {                      (time == 0 || interval == 0) ? 0UL : 1UL' // on or off                      time'                      interval                  };                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);              }              catch (SocketException e)              {                  RMUD.Core.LogCriticalError(e);                  RMUD.Core.LogError("Failed to set keep-alive: " + e.ErrorCode);                  return false;              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[] {                      (time == 0 || interval == 0) ? 0UL : 1UL' // on or off                      time'                      interval                  };                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);              }              catch (SocketException e)              {                  RMUD.Core.LogCriticalError(e);                  RMUD.Core.LogError("Failed to set keep-alive: " + e.ErrorCode);                  return false;              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[] {                      (time == 0 || interval == 0) ? 0UL : 1UL' // on or off                      time'                      interval                  };                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);              }              catch (SocketException e)              {                  RMUD.Core.LogCriticalError(e);                  RMUD.Core.LogError("Failed to set keep-alive: " + e.ErrorCode);                  return false;              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[] {                      (time == 0 || interval == 0) ? 0UL : 1UL' // on or off                      time'                      interval                  };                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);              }              catch (SocketException e)              {                  RMUD.Core.LogCriticalError(e);                  RMUD.Core.LogError("Failed to set keep-alive: " + e.ErrorCode);                  return false;              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[] {                      (time == 0 || interval == 0) ? 0UL : 1UL' // on or off                      time'                      interval                  };                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);              }              catch (SocketException e)              {                  RMUD.Core.LogCriticalError(e);                  RMUD.Core.LogError("Failed to set keep-alive: " + e.ErrorCode);                  return false;              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,OnNewClient,The following statement contains a magic number: SetKeepAlive(ClientSocket' 1000 * 60' 1000);
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,OnNewClient,The following statement contains a magic number: SetKeepAlive(ClientSocket' 1000 * 60' 1000);
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,OnNewClient,The following statement contains a magic number: SetKeepAlive(ClientSocket' 1000 * 60' 1000);
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,OnNewClient,The following statement contains a magic number: if (Clients.ClientConnected(NewClient) == ClientAcceptanceStatus.Rejected)              {                  NewClient.WasRejected = true;                  ClientSocket.Close();              }              else              {                  // We will handle all the echoing echoing echoing                  //var echoCommand = new byte[]                  //{                   //    (byte)TelnetControlCodes.IAC'                   //    (byte)TelnetControlCodes.Will' // TODO: Handle client response denying this request                  //    (byte)TelnetControlCodes.Echo'                  //    (byte)TelnetControlCodes.IAC'                  //    (byte)TelnetControlCodes.Dont'                  //    (byte)TelnetControlCodes.Echo'                  //};                  //ClientSocket.Send(echoCommand);                    ClientSocket.BeginReceive(NewClient.Storage' 0' 1024' System.Net.Sockets.SocketFlags.Partial' OnData' NewClient);                  Console.WriteLine("New telnet client: " + ClientSocket.RemoteEndPoint.ToString());              }
Magic Number,NetworkModule.Telnet,TelnetClientSource,C:\repos\Reddit-Mud_RMUD\NetworkModule\Telnet\TelnetClientSource.cs,OnData,The following statement contains a magic number: try              {                  System.Net.Sockets.SocketError Error;                  int DataSize = Client.Socket.EndReceive(_asyncResult' out Error);                    if (DataSize == 0 || Error != System.Net.Sockets.SocketError.Success)                  {                      if (remoteEndPoint != null)                          Console.WriteLine("Lost telnet client: " + remoteEndPoint.ToString());                      else                          Console.WriteLine("Lost telnet client: Unknown remote endpoint.");                        if (!Client.WasRejected) Clients.ClientDisconnected(Client);                  }                  else                  {                      for (int i = 0; i < DataSize; ++i)                      {                          var character = (char)Client.Storage[i];                                                    if (character == '\n' || character == '\r')                          {                              //if (Client.Echo == Echo.All || Client.Echo == Echo.Mask)                              //{                              //    Client.Send(new byte[] { (byte)character });                              //}                                if (!String.IsNullOrEmpty(Client.CommandQueue))                              {                                  String Command = Client.CommandQueue;                                  Client.CommandQueue = "";                                  RMUD.Core.EnqueuActorCommand(Client.Player' Command);                              }                          }                          else if (character == '\b')                          {                              if (Client.CommandQueue.Length > 0)                              {                                  Client.CommandQueue = Client.CommandQueue.Remove(Client.CommandQueue.Length - 1);                                  //if (Client.Echo == Echo.All || Client.Echo == Echo.Mask)                                  //{                                  //    Client.Send(new byte[] { (byte)character });                                  //}                              }                          }                          else if (ValidCharacters.Contains(character))                          {                              Client.CommandQueue += character;                              //switch (Client.Echo)                              //{                              //    case Echo.All: Client.Send(new byte[] { (byte)character }); break;                              //    case Echo.Mask: Client.Send(new byte[] { (byte)'*' }); break;                              //    case Echo.None: break;                              //}                          }                        }                        Client.Socket.BeginReceive(Client.Storage' 0' 1024' System.Net.Sockets.SocketFlags.Partial' OnData' Client);                  }              }              catch (Exception e)              {                  if (remoteEndPoint != null)                      Console.WriteLine("Lost telnet client: " + remoteEndPoint.ToString());                  else                      Console.WriteLine("Lost telnet client: Unknown remote endpoint.");  				Console.WriteLine(e.Message);                  Console.WriteLine(e.StackTrace);                  if (!Client.WasRejected) Clients.ClientDisconnected(Client);              }
