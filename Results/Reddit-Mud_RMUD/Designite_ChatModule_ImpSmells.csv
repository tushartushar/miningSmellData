Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ChatModule,ChatChannelRules,C:\research\architectureSmells\repos\Reddit-Mud_RMUD\ChatModule\ChatChannelRules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclareCheckRuleBook<MudObject' MudObject>("can access channel?"' "[Client' Channel] : Can the client access the chat channel?"' "actor"' "channel");" is 161.
Long Statement,ChatModule,Commands,C:\research\architectureSmells\repos\Reddit-Mud_RMUD\ChatModule\Commands.cs,Create,The length of the statement  "                .Manual("Recalls past conversation on a chat channel. An optional line count parameter allows you to peek further into the past.")" is 130.
Magic Number,ChatModule,ChatChannelRules,C:\research\architectureSmells\repos\Reddit-Mud_RMUD\ChatModule\ChatChannelRules.cs,AtStartup,The following statement contains a magic number: senate.Check<MudObject' MudObject>("can access channel?")                 .When((actor' channel) => !(actor is Actor) || (actor as Actor).Rank < 100)                 .Do((actor' channel) =>                 {                     MudObject.SendMessage(actor' "You must have a rank of 100 or greater to access this channel.");                     return CheckResult.Disallow;                 });
Magic Number,ChatModule,Commands,C:\research\architectureSmells\repos\Reddit-Mud_RMUD\ChatModule\Commands.cs,Create,The following statement contains a magic number: Parser.AddCommand(                 Sequence(                     KeyWord("RECALL")'                     MustMatch("I don't recognize that channel."'                         Object("CHANNEL"' new ChatChannelObjectSource()))'                     Optional(Number("COUNT"))))                 .Manual("Recalls past conversation on a chat channel. An optional line count parameter allows you to peek further into the past.")                 .Check("can access channel?"' "ACTOR"' "CHANNEL")                 .ProceduralRule((match' actor) =>                 {                     if (actor.ConnectedClient == null) return PerformResult.Stop;                     var channel = match.ValueOrDefault("CHANNEL") as ChatChannel;                                          int count = 20;                     if (match.ContainsKey("COUNT")) count = (match["COUNT"] as int?).Value;                      var logFilename = ChatChannel.ChatLogsPath + channel.Short + ".txt";                     if (System.IO.File.Exists(logFilename))                         foreach (var line in (new RMUD.ReverseLineReader(logFilename)).Take(count).Reverse())                             MudObject.SendMessage(actor' line);                     return PerformResult.Continue;                 });
