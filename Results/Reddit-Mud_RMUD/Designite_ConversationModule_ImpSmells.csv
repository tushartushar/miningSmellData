Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ConversationModule,ConversationCommandFactory,C:\repos\Reddit-Mud_RMUD\ConversationModule\Commands.cs,Create,The length of the statement  "                                    if (actor is Player && System.Object.ReferenceEquals(thing' actor.GetProperty<NPC>("interlocutor"))) return MatchPreference.VeryLikely; " is 135.
Long Statement,ConversationModule,ConversationCommandFactory,C:\repos\Reddit-Mud_RMUD\ConversationModule\Commands.cs,Create,The length of the statement  "                        if (Core.GlobalRules.ConsiderCheckRule("can converse?"' actor' newLocutor) == CheckResult.Disallow) return PerformResult.Stop; " is 126.
Long Statement,ConversationModule,ResponseExtensionMethods,C:\repos\Reddit-Mud_RMUD\ConversationModule\NPCExtension.cs,DefaultResponse,The length of the statement  "            To.Perform<MudObject' MudObject' MudObject>("topic response").When((actor' npc' topic) => topic == null).Do(FuncResponse); " is 122.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclareCheckRuleBook<MudObject' MudObject>("can converse?"' "[Actor' Item] : Can the actor converse with the item?"' "actor"' "item"); " is 146.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclarePerformRuleBook<MudObject' MudObject>("greet"' "[Actor' NPC] : Handle an actor greeting an NPC."' "actor"' "npc"); " is 133.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclarePerformRuleBook<MudObject>("list topics"' "[Actor] : List conversation topics available to the actor."' "actor"); " is 132.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "                    var suggestedTopics = npc.GetPropertyOrDefault<List<MudObject>>("conversation-topics"' new List<MudObject>()).AsEnumerable(); " is 125.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "                    suggestedTopics = suggestedTopics.Where(topic => GlobalRules.ConsiderCheckRule("topic available?"' actor' npc' topic) == CheckResult.Allow); " is 140.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclarePerformRuleBook<MudObject' MudObject' MudObject>("discuss topic"' "[Actor' NPC' Topic] : Handle the actor discussing the topic with the npc."); " is 162.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclareCheckRuleBook<MudObject' MudObject' MudObject>("topic available?"' "[Actor' NPC' Topic -> bool] : Is the topic available for discussion with the NPC to the actor?"' "actor"' "npc"' "topic"); " is 209.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "            GlobalRules.DeclarePerformRuleBook<MudObject' MudObject' MudObject>("topic response"' "[Actor' NPC' Topic] : Display the response of the topic."' "actor"' "npc"' "topic"); " is 171.
Long Statement,ConversationModule,ConversationRules,C:\repos\Reddit-Mud_RMUD\ConversationModule\Rules.cs,AtStartup,The length of the statement  "                .When((actor' npc' topic) => (topic != null) && (Settings.AllowRepeats == false) && topic.GetBooleanProperty("topic-discussed")) " is 128.
Long Statement,ConversationModule,TopicSource,C:\repos\Reddit-Mud_RMUD\ConversationModule\TopicObjectSource.cs,GetObjects,The length of the statement  "                    return new List<MudObject>(source.GetProperty<List<MudObject>>("conversation-topics").Where(t => Core.GlobalRules.ConsiderCheckRuleSilently("topic available?"' Context.ExecutingActor' source' t) == CheckResult.Allow)); " is 218.
