Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The method has 6 parameters. Parameters: MapGrid' RoomLegend' X' Y' Location' Symbol
Long Statement,AdminModule,Force,C:\repos\Reddit-Mud_RMUD\AdminModule\Force.cs,Create,The length of the statement  "                .Manual("An administrative command that allows you to execute a command as if you were another actor or player. The other entity will see all output from the command' and rules restricting their access to the command are considered.") " is 234.
Long Statement,AdminModule,Force,C:\repos\Reddit-Mud_RMUD\AdminModule\Force.cs,Create,The length of the statement  "                        MudObject.SendMessage(actor' "You can order inanimate objects about as much as you like' they aren't going to listen."); " is 120.
Long Statement,AdminModule,Inspect,C:\repos\Reddit-Mud_RMUD\AdminModule\Inspect.cs,Create,The length of the statement  "                        MudObject.SendMessage(actor' "field " + field.FieldType.Name + " " + field.Name + " = " + WriteValue(field.GetValue(target))); " is 126.
Long Statement,AdminModule,Move,C:\repos\Reddit-Mud_RMUD\AdminModule\Move.cs,Create,The length of the statement  "                .Manual("An administrative command to move objects from one place to another. This command entirely ignores all rules that might prevent moving an object.") " is 156.
Long Statement,AdminModule,Reload,C:\repos\Reddit-Mud_RMUD\AdminModule\Reload.cs,Create,The length of the statement  "                 .Manual("Given a path' it attempts to reset that object without reloading or recompiling. The object will be replaced in-place if possible.") " is 141.
Long Statement,AdminModule,Rules,C:\repos\Reddit-Mud_RMUD\AdminModule\Rules.cs,Create,The length of the statement  "                .Manual("Lists rules and rulebooks. Both arguments are optional. If no object is supplied' it will list global rules. If no book name is supplied' it will list books rather than listing rules.") " is 194.
Long Statement,AdminModule,Stats,C:\repos\Reddit-Mud_RMUD\AdminModule\Stats.cs,Create,The length of the statement  "                .Manual("Displays various stats about the server. Type the command with no argument to get a list of available options.") " is 121.
Complex Conditional,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,PlaceSymbol,The conditional expression  "X < 1 || X >= MapWidth - 1 || Y < 1 || Y >= MapHeight - 1"  is complex.
Complex Conditional,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The conditional expression  "X < 1 || X >= MapWidth - 1 || Y < 1 || Y >= MapHeight - 1"  is complex.
Complex Conditional,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,PlaceEdge,The conditional expression  "X < 1 || X >= MapWidth - 1 || Y < 1 || Y >= MapHeight - 1"  is complex.
Magic Number,AdminModule,Dump,C:\repos\Reddit-Mud_RMUD\AdminModule\Dump.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!DUMP")'                      MustMatch("It helps if you supply a path."'                          Path("TARGET"))))                  .Manual("Display the source of a database object.")                  .ProceduralRule((match' actor) =>                  {                      var target = match["TARGET"].ToString();                          var source = Core.Database.LoadSourceFile(target);                          if (!source.Item1)                              MudObject.SendMessage(actor' "Could not display source: " + source.Item2);                          else                              MudObject.SendMessage(actor' "Source of " + target + "\n" + source.Item2);                      return PerformResult.Continue;                  });
Magic Number,AdminModule,Force,C:\repos\Reddit-Mud_RMUD\AdminModule\Force.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!FORCE")'                      MustMatch("Whom do you wish to command?"'                          FirstOf(                              Object("OBJECT"' InScope)'                              Path("PATH")))'                      Rest("RAW-COMMAND")))                  .Manual("An administrative command that allows you to execute a command as if you were another actor or player. The other entity will see all output from the command' and rules restricting their access to the command are considered.")                  .ProceduralRule((match' actor) =>                      {                          if (match.ContainsKey("PATH"))                          {                              var target = MudObject.GetObject(match["PATH"].ToString());                              if (target == null)                              {                                  MudObject.SendMessage(actor' "I can't find whomever it is you want to submit to your foolish whims.");                                  return PerformResult.Stop;                              }                              match.Upsert("OBJECT"' target);                          }                          return PerformResult.Continue;                      }' "Convert path to object rule.")                  .ProceduralRule((match' actor) =>                  {                      MudObject target = match["OBJECT"] as MudObject;                                            var targetActor = target as Actor;                      if (targetActor == null)                      {                          MudObject.SendMessage(actor' "You can order inanimate objects about as much as you like' they aren't going to listen.");                          return PerformResult.Stop;                      }                        var command = match["RAW-COMMAND"].ToString();                      var matchedCommand = Core.DefaultParser.ParseCommand(new PendingCommand { RawCommand = command' Actor = targetActor });                        if (matchedCommand != null)                      {                          if (matchedCommand.Matches.Count > 1)                              MudObject.SendMessage(actor' "The command was ambigious.");                          else                          {                              MudObject.SendMessage(actor' "Enacting your will.");                              Core.ProcessPlayerCommand(matchedCommand.Command' matchedCommand.Matches[0]' targetActor);                          }                      }                      else                          MudObject.SendMessage(actor' "The command did not match.");                        return PerformResult.Continue;                  });
Magic Number,AdminModule,Scope,C:\repos\Reddit-Mud_RMUD\AdminModule\Scope.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!SCOPE")))                  .Manual("List all of the objects in scope")                  .ProceduralRule((match' actor) =>                  {                      foreach (var thing in MudObject.EnumerateVisibleTree(MudObject.FindLocale(actor)))                          MudObject.SendMessage(actor' thing.Short + " - " + thing.GetType().Name);                      return PerformResult.Continue;                  }' "List all the damn things in scope rule.");
Magic Number,AdminModule,Inspect,C:\repos\Reddit-Mud_RMUD\AdminModule\Inspect.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!INSPECT")'                      MustMatch("I don't see that here."'                          Or(                              Object("OBJECT"' InScope)'                              KeyWord("HERE")))))                  .Manual("Take a peek at the internal workings of any mud object.")                  .ProceduralRule((match' actor) =>                      {                          if (!match.ContainsKey("OBJECT"))                              match.Upsert("OBJECT"' actor.Location);                          return PerformResult.Continue;                      }' "Convert locale option to standard form rule.")                  .ProceduralRule((match' actor) =>                  {                      var target = match["OBJECT"] as MudObject;                      MudObject.SendMessage(actor' target.GetType().Name);                        foreach (var @interface in target.GetType().GetInterfaces())                          MudObject.SendMessage(actor' "Implements " + @interface.Name);                        foreach (var field in target.GetType().GetFields())                          MudObject.SendMessage(actor' "field " + field.FieldType.Name + " " + field.Name + " = " + WriteValue(field.GetValue(target)));                        foreach (var property in target.GetType().GetProperties())                      {                          var s = (property.CanWrite ? "property " : "readonly ") + property.PropertyType.Name + " " + property.Name;                          if (property.CanRead)                          {                              s += " = ";                              try                              {                                  s += WriteValue(property.GetValue(target' null));                              }                              catch (Exception) { s += "[Error reading value]"; }                          }                          MudObject.SendMessage(actor' s);                      }                        return PerformResult.Continue;                  }' "List all the damn things rule.");
Magic Number,AdminModule,Inspect,C:\repos\Reddit-Mud_RMUD\AdminModule\Inspect.cs,WriteValue,The following statement contains a magic number: if (Value == null)                  return "NULL";              else if (Value is String)                  return "\"" + Value + "\"";              else if (Value is MudObject)              {                  return (Value as MudObject).GetFullName();              }              else if (Value is KeyValuePair<String' Object>)              {                  var v = (Value as KeyValuePair<String' Object>?).Value;                  return v.Key + ": " + WriteValue(v.Value' indent + 1);              }              else if (Value is KeyValuePair<RelativeLocations' List<MudObject>>) //Containers..              {                  var v = (Value as KeyValuePair<RelativeLocations' List<MudObject>>?).Value;                  return v.Key + ": " + WriteValue(v.Value' indent + 1);              }              else if (Value is System.Collections.IEnumerable)              {                  var r = "[ ";                  bool first = true;                  foreach (var sub in (Value as System.Collections.IEnumerable))                  {                      if (!first) r += "\n" + new String(' '' indent * 2);                      first = false;                      r += WriteValue(sub' indent + 1);                  }                  r += " ] ";                  return r;              }              else return Value.ToString();
Magic Number,AdminModule,Instance,C:\repos\Reddit-Mud_RMUD\AdminModule\Instance.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!INSTANCE")'                      MustMatch("It helps if you give me a path."'                          Path("PATH"))))                  .Manual("Given a path' create a new instance of an object.")                  .ProceduralRule((match' actor) =>                  {                      var path = match["PATH"].ToString();                      var newObject = MudObject.GetObject(path + "@" + Guid.NewGuid().ToString());                      if (newObject == null) MudObject.SendMessage(actor' "Failed to instance " + path + ".");                      else                      {                          MudObject.Move(newObject' actor);                          MudObject.SendMessage(actor' "Instanced " + path + ".");                      }                      return PerformResult.Continue;                  });
Magic Number,AdminModule,Move,C:\repos\Reddit-Mud_RMUD\AdminModule\Move.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!MOVE")'                      MustMatch("I don't see that here."'                          Object("OBJECT"' InScope))'                      OptionalKeyWord("TO")'                      MustMatch("You have to specify the path of the destination."'                          Path("DESTINATION"))))                  .Manual("An administrative command to move objects from one place to another. This command entirely ignores all rules that might prevent moving an object.")                  .ProceduralRule((match' actor) =>                  {                      var destination = MudObject.GetObject(match["DESTINATION"].ToString());                      if (destination != null)                      {                          var target = match["OBJECT"] as MudObject;                          Core.MarkLocaleForUpdate(target);                          MudObject.Move(target' destination);                          Core.MarkLocaleForUpdate(destination);                            MudObject.SendMessage(actor' "Success.");                      }                      else                          MudObject.SendMessage(actor' "I could not find the destination.");                      return PerformResult.Continue;                  });
Magic Number,AdminModule,ReadLog,C:\repos\Reddit-Mud_RMUD\AdminModule\ReadLog.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      KeyWord("!LOG")'                      Path("FILENAME")'                      Optional(Number("COUNT"))))                  .Manual("Displays the last COUNT lines of a log file. If no count is provided' 20 lines are displayed.")                  .ProceduralRule((match' actor) =>                  {                      int count = 20;                      if (match.ContainsKey("COUNT")) count = (match["COUNT"] as int?).Value;                      var filename = match["FILENAME"].ToString() + ".log";                      if (System.IO.File.Exists(filename))                      {                          foreach (var line in new ReverseLineReader(filename).Take(count).Reverse())                              MudObject.SendMessage(actor' line);                      }                      else                          MudObject.SendMessage(actor' "I could not find that log file.");                      return PerformResult.Continue;                  });
Magic Number,AdminModule,Reload,C:\repos\Reddit-Mud_RMUD\AdminModule\Reload.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!RELOAD")'                      MustMatch("It helps if you give me a path."'                          Path("TARGET"))))                  .Manual("Given a path' it attempts to recompile that object. The object will be replaced in-place if possible.")                  .ProceduralRule((match' actor) =>                  {                      var target = match["TARGET"].ToString();                      var newObject = Core.Database.ReloadObject(target);                      if (newObject == null) MudObject.SendMessage(actor' "Failed to reload " + target);                      else MudObject.SendMessage(actor' "Reloaded " + target);                      return PerformResult.Continue;                  });
Magic Number,AdminModule,Reload,C:\repos\Reddit-Mud_RMUD\AdminModule\Reload.cs,Create,The following statement contains a magic number: Parser.AddCommand(                   Sequence(                       RequiredRank(500)'                       KeyWord("!RESET")'                       MustMatch("It helps if you give me a path."'                           Path("TARGET"))))                   .Manual("Given a path' it attempts to reset that object without reloading or recompiling. The object will be replaced in-place if possible.")                   .ProceduralRule((match' actor) =>                   {                       var target = match["TARGET"].ToString();                       if (Core.Database.ResetObject(target) == null)                            MudObject.SendMessage(actor' "Failed to reset " + target);                       else MudObject.SendMessage(actor' "Reset " + target);                       return PerformResult.Continue;                   });
Magic Number,AdminModule,Rules,C:\repos\Reddit-Mud_RMUD\AdminModule\Rules.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!RULES")'                      Optional(Object("OBJECT"' InScope))'                      Optional(Rest("BOOK-NAME"))))                  .Manual("Lists rules and rulebooks. Both arguments are optional. If no object is supplied' it will list global rules. If no book name is supplied' it will list books rather than listing rules.")                  .ProceduralRule((match' actor) =>                  {                      if (match.ContainsKey("OBJECT"))                      {                          if (match.ContainsKey("BOOK-NAME"))                              DisplaySingleBook(actor' (match["OBJECT"] as MudObject).Rules' match["BOOK-NAME"].ToString());                          else                              DisplayBookList(actor' (match["OBJECT"] as MudObject).Rules);                      }                      else if (match.ContainsKey("BOOK-NAME"))                          DisplaySingleBook(actor' Core.GlobalRules.Rules' match["BOOK-NAME"].ToString());                      else                          DisplayBookList(actor' Core.GlobalRules.Rules);                      return PerformResult.Continue;                  });
Magic Number,AdminModule,Save,C:\repos\Reddit-Mud_RMUD\AdminModule\Save.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!SAVE")))                  .Manual("Saves all persistent objects to disc.")                  .ProceduralRule((match' actor) =>                  {                      Core.CommandTimeoutEnabled = false;                        //TODO MudObject.SendGlobalMessage("The database is being saved. There may be a brief delay.");                      Core.SendPendingMessages();                        var saved = Core.Database.Save();                        //TODO MudObject.SendGlobalMessage("The database has been saved.");                      MudObject.SendMessage(actor' String.Format("I saved {0} persistent objects."' saved));                      return PerformResult.Continue;                  });
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,Create,The following statement contains a magic number: Parser.AddCommand(KeyWord("SONAR"))                  .ProceduralRule((match' actor) =>                  {                        var builder = new System.Text.StringBuilder();                        var mapGrid = new int[MapWidth' MapHeight];                      for (int y = 0; y < MapHeight; ++y)                          for (int x = 0; x < MapWidth; ++x)                              mapGrid[x' y] = ' ';                        for (int y = 1; y < MapHeight - 1; ++y)                      {                          mapGrid[0' y] = '|';                          mapGrid[MapWidth - 1' y] = '|';                      }                        for (int x = 1; x < MapWidth - 1; ++x)                      {                          mapGrid[x' 0] = '-';                          mapGrid[x' MapHeight - 1] = '-';                      }                        mapGrid[0' 0] = '+';                      mapGrid[0' MapHeight - 1] = '+';                      mapGrid[MapWidth - 1' 0] = '+';                      mapGrid[MapWidth - 1' MapHeight - 1] = '+';                        var roomLegend = new Dictionary<int' String>();                        if (actor.Location is RMUD.Room)                          MapLocation(mapGrid' roomLegend' (MapWidth / 2)' (MapHeight / 2)' actor.Location as RMUD.Room' '@');                        for (int y = 0; y < MapHeight; ++y)                      {                          for (int x = 0; x < MapWidth; ++x)                              builder.Append((char)mapGrid[x' y]);                          builder.Append("\r\n");                      }                        foreach (var entry in roomLegend)                          builder.Append((char)entry.Key + " - " + entry.Value + "\r\n");                        MudObject.SendMessage(actor' builder.ToString());                      return RMUD.PerformResult.Continue;                  }' "Implement sonar device rule.");
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,Create,The following statement contains a magic number: Parser.AddCommand(KeyWord("SONAR"))                  .ProceduralRule((match' actor) =>                  {                        var builder = new System.Text.StringBuilder();                        var mapGrid = new int[MapWidth' MapHeight];                      for (int y = 0; y < MapHeight; ++y)                          for (int x = 0; x < MapWidth; ++x)                              mapGrid[x' y] = ' ';                        for (int y = 1; y < MapHeight - 1; ++y)                      {                          mapGrid[0' y] = '|';                          mapGrid[MapWidth - 1' y] = '|';                      }                        for (int x = 1; x < MapWidth - 1; ++x)                      {                          mapGrid[x' 0] = '-';                          mapGrid[x' MapHeight - 1] = '-';                      }                        mapGrid[0' 0] = '+';                      mapGrid[0' MapHeight - 1] = '+';                      mapGrid[MapWidth - 1' 0] = '+';                      mapGrid[MapWidth - 1' MapHeight - 1] = '+';                        var roomLegend = new Dictionary<int' String>();                        if (actor.Location is RMUD.Room)                          MapLocation(mapGrid' roomLegend' (MapWidth / 2)' (MapHeight / 2)' actor.Location as RMUD.Room' '@');                        for (int y = 0; y < MapHeight; ++y)                      {                          for (int x = 0; x < MapWidth; ++x)                              builder.Append((char)mapGrid[x' y]);                          builder.Append("\r\n");                      }                        foreach (var entry in roomLegend)                          builder.Append((char)entry.Key + " - " + entry.Value + "\r\n");                        MudObject.SendMessage(actor' builder.ToString());                      return RMUD.PerformResult.Continue;                  }' "Implement sonar device rule.");
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,FindSymbol,The following statement contains a magic number: if (spacer > 0 && spacer < Location.Short.Length - 2)                  return Location.Short.ToUpper()[spacer + 2];              else                  return Location.Short.ToUpper()[0];
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,FindSymbol,The following statement contains a magic number: if (spacer > 0 && spacer < Location.Short.Length - 2)                  return Location.Short.ToUpper()[spacer + 2];              else                  return Location.Short.ToUpper()[0];
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: PlaceSymbol(MapGrid' X - 2' Y - 1' '+');
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: PlaceSymbol(MapGrid' X + 2' Y - 1' '+');
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: PlaceSymbol(MapGrid' X + 2' Y' '|');
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: PlaceSymbol(MapGrid' X - 2' Y' '|');
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: PlaceSymbol(MapGrid' X - 2' Y + 1' '+');
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: PlaceSymbol(MapGrid' X + 2' Y + 1' '+');
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Sonar,C:\repos\Reddit-Mud_RMUD\AdminModule\Sonar.cs,MapLocation,The following statement contains a magic number: foreach (var link in Location.EnumerateObjects().Where(t => t.HasProperty("link direction")))              {                  var destinationName = link.GetProperty<string>("link destination");                  var destination = MudObject.GetObject(destinationName) as RMUD.Room;                  var direction = link.GetPropertyOrDefault<RMUD.Direction>("link direction"' RMUD.Direction.NORTH);                    if (direction == Direction.UP)                  {                      PlaceSymbol(MapGrid' X + 1' Y - 2' ':');                      PlaceSymbol(MapGrid' X + 1' Y - 3' FindSymbol(destination));                  }                  else if (direction == Direction.DOWN)                  {                      PlaceSymbol(MapGrid' X - 1' Y + 2' ':');                      PlaceSymbol(MapGrid' X - 1' Y + 3' FindSymbol(destination));                  }                  else                  {                      var directionVector = RMUD.Link.GetAsVector(direction);                      PlaceEdge(MapGrid' X + directionVector.X * 3' Y + directionVector.Y * 2' direction);                        //if (destination.RoomType == Location.RoomType)                      MapLocation(MapGrid' RoomLegend' X + (directionVector.X * 7)' Y + (directionVector.Y * 5)' destination' ' ');                  }              }
Magic Number,AdminModule,Stats,C:\repos\Reddit-Mud_RMUD\AdminModule\Stats.cs,Create,The following statement contains a magic number: Parser.AddCommand(                  Sequence(                      RequiredRank(500)'                      KeyWord("!STATS")'                      Optional(SingleWord("TYPE"))))                  .Manual("Displays various stats about the server. Type the command with no argument to get a list of available options.")                  .ProceduralRule((match' actor) =>                  {                      if (!match.ContainsKey("TYPE"))                      {                          MudObject.SendMessage(actor' "Try one of these stats options");                          Core.GlobalRules.ConsiderPerformRule("enumerate-stats"' actor);                      }                      else                          Core.GlobalRules.ConsiderPerformRule("stats"' actor' match["TYPE"].ToString().ToUpper());                      return PerformResult.Continue;                  });
