Implementation smell,Namespace,Class,File,Method,Description
Long Method,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The method has 150 lines of code.
Long Method,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,Convert,The method has 108 lines of code.
Long Method,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,HandleMediaPlayerOutputDataReceived,The method has 124 lines of code.
Complex Method,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,Convert,Cyclomatic complexity of the method is 9
Long Parameter List,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,MPlayer,The method has 6 parameters. Parameters: wid' backend' mplayerPath' loadMplayer' positionUpdateInterval' consoleArguments
Long Statement,LibMPlayerCommon,BackendPrograms,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\BackendPrograms.cs,OSPlatform,The length of the statement  "            if (System.Environment.OSVersion.Platform == System.PlatformID.Unix || System.Environment.OSVersion.Platform == System.PlatformID.MacOSX) " is 137.
Long Statement,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The length of the statement  "            handle.StartInfo.Arguments = string.Format("-loop 1 -identify -ao null -vo null -frames 0 {0} \"{1}\""' nframes.ToString()' filePath); " is 134.
Long Statement,LibMPlayerCommon,Globals,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Globals.cs,FloatParse,The length of the statement  "            if (input.Equals("nan"' StringComparison.OrdinalIgnoreCase) || input.Equals("-nan"' StringComparison.OrdinalIgnoreCase)) { return float.NaN; } " is 142.
Long Statement,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,Convert,The length of the statement  "            MencoderInstance.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(MencoderInstance_OutputDataReceived); " is 124.
Long Statement,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,Convert,The length of the statement  "            MencoderInstance.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(MencoderInstance_ErrorDataReceived); " is 122.
Long Statement,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,Convert2DvdMpeg,The length of the statement  "                cmd.Append("vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=15:vstrict=0:acodec=ac3:abitrate=192:aspect=16/9"); " is 137.
Long Statement,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,Convert2DvdMpeg,The length of the statement  "                cmd.Append("vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=18:vstrict=0:acodec=ac3:abitrate=192:aspect=16/9"); " is 137.
Long Statement,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,InitializeMplayer,The length of the statement  "                MediaPlayer.StartInfo.Arguments = string.Format("-slave -quiet -idle -priority abovenormal -nodr -double -nokeepaspect -cache 8192 -nofs -autosync 100 -mc 2.0 -nomouseinput -framedrop -osdlevel 0 -lavdopts threads=4 -ao dsound -v -monitorpixelaspect 1 -ontop -font \"{0}\" -subfont-autoscale {1} -subfont-text-scale {2} -subcp {3} -subpos {4} -volume {5} -vo {6} -wid {7} \"{8}\""' this._font' this._fontautoscale' this._textscale' this._subcp' this._subpos' this.volumemain' backend' this._wid' filePath); " is 506.
Long Statement,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,PrepareFilePath,The length of the statement  "            string preparedPath = filePath.Replace("" + System.IO.Path.DirectorySeparatorChar' "" + System.IO.Path.DirectorySeparatorChar + System.IO.Path.DirectorySeparatorChar); " is 167.
Long Statement,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,HandleMediaPlayerOutputDataReceived,The length of the statement  "                else if (line.StartsWith("Exiting"' StringComparison.Ordinal) || line.ToLower().StartsWith("eof code"' StringComparison.Ordinal)) " is 129.
Long Statement,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,AddAudio,The length of the statement  "            // -vf harddup is needed to keep duplicates of the video when adding the audio.  Else you are going to have a huge audio/video sync problem. " is 140.
Long Statement,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,AddAudio,The length of the statement  "            mencod.Convert("\"" + System.IO.Path.Combine(_workingDirectory' "output.avi") + "\" -o \"" + this._outputFilePath + "\" -vf harddup -ovc copy -oac mp3lame -audiofile \"" + this._audioFile + '"'); " is 195.
Long Statement,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The length of the statement  "                throw new Exception("Invalid time.  Seconds must be greated then >= 0.  Seconds passed in was: " + timeInSeconds.ToString()); " is 125.
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: int minimum_audio = 10000;
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: while ((line = strReader.ReadLine()) != null)              //while (handle.HasExited == false)              {                    if (line.Trim() == "")                  {                      continue;                  }                  int position = line.IndexOf("ID_");                  if (position == -1)                  {                      continue;                  }                  line = line.Substring(position);                  if (line.StartsWith("ID_VIDEO_BITRATE"))                  {                      _VideoBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_VIDEO_WIDTH"))                  {                      _Width = Globals.IntParse(line.Substring(15));                  }                  else if (line.StartsWith("ID_VIDEO_HEIGHT"))                  {                      _Height = Globals.IntParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_ASPECT"))                  {                      _AspectRatio = Globals.FloatParse(line.Substring(16));                  }                  else if (line.StartsWith("ID_VIDEO_FPS"))                  {                      _fps = (int)Globals.FloatParse(line.Substring(13));                  }                  else if (line.StartsWith("ID_AUDIO_BITRATE"))                  {                      _AudioBitrate = Globals.IntParse(line.Substring(17)) / 1000; // kilobits per second                  }                  else if (line.StartsWith("ID_AUDIO_RATE"))                  {                      _AudioRate = Globals.IntParse(line.Substring(14));                  }                  else if (line.StartsWith("ID_LENGTH"))                  {                      _Length = (int)Globals.FloatParse(line.Substring(10));                  }                  else if (line.StartsWith("ID_VIDEO_ID"))                  {                      video += 1;                      _Video = true;                  }                  else if (line.StartsWith("ID_AUDIO_ID"))                  {                      audio += 1;                      _Audio = true;                      int audio_track = Globals.IntParse(line.Substring(12));                      if (minimum_audio > audio_track)                      {                          minimum_audio = audio_track;                      }                      _AudioList.Add(audio_track);                        AudioTrackInfo info = new AudioTrackInfo();                      info.ID = audio_track;                      _AudioTracks.Add(info);                                           }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "LANG")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Language = value;                      }                         }                  else if (line.StartsWith("ID_AID_") && line.Substring(9' 4) == "NAME")                  {                      if (_AudioTracks.Count > 0)                      {                          string value = line.Substring(14);                            _AudioTracks[_AudioTracks.Count - 1].Name = value;                      }                  }                  else if (line.StartsWith("ID_SUBTITLE_ID"))                  {                      int value = Globals.IntParse(line.Substring(15));                        SubtitlesInfo info = new SubtitlesInfo();                      info.ID = value;                      _SubtitleList.Add(info);                                           }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "LANG")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Language = value;                      }                  }                  else if (line.StartsWith("ID_SID_") && line.Substring(9' 4) == "NAME")                  {                      if (_SubtitleList.Count > 0)                      {                          string value = line.Substring(14);                            _SubtitleList[_SubtitleList.Count - 1].Name = value;                      }                  }              }
Magic Number,LibMPlayerCommon,Discover,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Discover.cs,Execute,The following statement contains a magic number: if (_AspectRatio == 0.0)              {                  _AspectRatio = ((float)_Width / (float)_Height);                  if (_AspectRatio <= 1.5)                  {                      _AspectRatio = (ScreenAspectRatio.FourThree);                  }              }
Magic Number,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,MencoderInstance_OutputDataReceived,The following statement contains a magic number: if (e.Data != null)              {                  string line = e.Data.ToString();                  try                  {                        if (line.StartsWith("Pos:"))                      {                          int percent = Globals.IntParse(line.Substring(21' 3).Replace("%"' "").Trim());                          if (percent != _currentPercent)                          {                              // Only riase this event once the percent has changed                              if (this.PercentCompleted != null)                              {                                  this.PercentCompleted(this' new MplayerEvent(percent));                              }                          }                        }                      else if (line.Contains("Exiting") || line.ToLower().StartsWith("eof code"))                      {                          if (this.ConversionComplete != null)                          {                              this.ConversionComplete(this' new MplayerEvent("Exiting File"));                          }                      }                      }                  catch (Exception ex)                  {                      LibMPlayerCommon.Logging.Instance.WriteLine(ex);                  }                  //System.Console.WriteLine(line);              }
Magic Number,LibMPlayerCommon,Mencoder,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\Mencoder.cs,MencoderInstance_OutputDataReceived,The following statement contains a magic number: if (e.Data != null)              {                  string line = e.Data.ToString();                  try                  {                        if (line.StartsWith("Pos:"))                      {                          int percent = Globals.IntParse(line.Substring(21' 3).Replace("%"' "").Trim());                          if (percent != _currentPercent)                          {                              // Only riase this event once the percent has changed                              if (this.PercentCompleted != null)                              {                                  this.PercentCompleted(this' new MplayerEvent(percent));                              }                          }                        }                      else if (line.Contains("Exiting") || line.ToLower().StartsWith("eof code"))                      {                          if (this.ConversionComplete != null)                          {                              this.ConversionComplete(this' new MplayerEvent("Exiting File"));                          }                      }                      }                  catch (Exception ex)                  {                      LibMPlayerCommon.Logging.Instance.WriteLine(ex);                  }                  //System.Console.WriteLine(line);              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetCurrentPosition,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_time_pos");                  MediaPlayer.StandardInput.Flush();                    // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._currentPosition;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,Volume,The following statement contains a magic number: Debug.Assert(volume >= 0 && volume <= 100);
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetAudioBitrate,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_audio_bitrate");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetAudioCodec,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_audio_codec");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetAudioSamples,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_audio_samples");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);              return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetfileName,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_file_name");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,getalbum,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_album");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetArtist,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_artist");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetComment,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_comment");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetGenre,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_genre");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetTitle,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_title");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getinfotitle;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetTrack,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_track");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetYear,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_meta_year");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);              return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetVideoBitrate,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_video_bitrate");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,MPlayer,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\MPlayer.cs,GetVideoResolution,The following statement contains a magic number: if (this.CurrentStatus != MediaStatus.Stopped)              {                  MediaPlayer.StandardInput.WriteLine("get_video_resolution");                  MediaPlayer.StandardInput.Flush();                  // This is to give the HandleMediaPlayerOutputDataReceived enought time to process and set the currentPosition.                  System.Threading.Thread.Sleep(100);                  return this._getfileinfofilename;              }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,CreateSlideShow,The following statement contains a magic number: foreach (SlideShowInfo x in files)              {                  SetupImageDirectory();                                      this._fileCounter++;                  string firstPart = this._fileCounter.ToString().PadLeft(6' '0');                    string firstFilename = System.IO.Path.Combine(_imageDirectory' firstPart + ".jpg");                          System.Drawing.Image picOriginal = System.Drawing.Image.FromFile(x.FilePath);                  picOriginal = LibImages.ImageResize.ResizeBlackBar(picOriginal' 720' 480); // NTSC - PAL would be 720x576;                    picOriginal.Save(firstFilename' System.Drawing.Imaging.ImageFormat.Jpeg);                  picOriginal.Dispose();                    // Create 30 (FPS) images for every second for each image                  int imageCountPerImage = this._secondsBetweenImages * (int)SlideShow.FPS;                  for (int i = 0; i < imageCountPerImage; i++)                  {                        System.Drawing.Bitmap pic = (Bitmap)System.Drawing.Image.FromFile(firstFilename);                                                     string secondPart = i.ToString().PadLeft(6' '0');                        pic = SetImageEffect(x.Effect' pic' imageCountPerImage' i);                        string filename = System.IO.Path.Combine(_imageDirectory' firstPart + "-a-" + secondPart + ".jpg");                        pic.Save(filename' System.Drawing.Imaging.ImageFormat.Jpeg);                      pic.Dispose();                    }                    // Create video of current images                                    System.Environment.CurrentDirectory = _imageDirectory;                    // output-temp.avi                  string videoName = string.Format("output-temp{0}.avi"' _fileCounter.ToString().PadLeft(6' '0'));                  CreateVideo(videoName);                         System.Environment.CurrentDirectory = currentDirectory;                      // delete temporary images                  DeleteImageDirectory();                                        // delete temporary video                }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,CreateSlideShow,The following statement contains a magic number: foreach (SlideShowInfo x in files)              {                  SetupImageDirectory();                                      this._fileCounter++;                  string firstPart = this._fileCounter.ToString().PadLeft(6' '0');                    string firstFilename = System.IO.Path.Combine(_imageDirectory' firstPart + ".jpg");                          System.Drawing.Image picOriginal = System.Drawing.Image.FromFile(x.FilePath);                  picOriginal = LibImages.ImageResize.ResizeBlackBar(picOriginal' 720' 480); // NTSC - PAL would be 720x576;                    picOriginal.Save(firstFilename' System.Drawing.Imaging.ImageFormat.Jpeg);                  picOriginal.Dispose();                    // Create 30 (FPS) images for every second for each image                  int imageCountPerImage = this._secondsBetweenImages * (int)SlideShow.FPS;                  for (int i = 0; i < imageCountPerImage; i++)                  {                        System.Drawing.Bitmap pic = (Bitmap)System.Drawing.Image.FromFile(firstFilename);                                                     string secondPart = i.ToString().PadLeft(6' '0');                        pic = SetImageEffect(x.Effect' pic' imageCountPerImage' i);                        string filename = System.IO.Path.Combine(_imageDirectory' firstPart + "-a-" + secondPart + ".jpg");                        pic.Save(filename' System.Drawing.Imaging.ImageFormat.Jpeg);                      pic.Dispose();                    }                    // Create video of current images                                    System.Environment.CurrentDirectory = _imageDirectory;                    // output-temp.avi                  string videoName = string.Format("output-temp{0}.avi"' _fileCounter.ToString().PadLeft(6' '0'));                  CreateVideo(videoName);                         System.Environment.CurrentDirectory = currentDirectory;                      // delete temporary images                  DeleteImageDirectory();                                        // delete temporary video                }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,CreateSlideShow,The following statement contains a magic number: foreach (SlideShowInfo x in files)              {                  SetupImageDirectory();                                      this._fileCounter++;                  string firstPart = this._fileCounter.ToString().PadLeft(6' '0');                    string firstFilename = System.IO.Path.Combine(_imageDirectory' firstPart + ".jpg");                          System.Drawing.Image picOriginal = System.Drawing.Image.FromFile(x.FilePath);                  picOriginal = LibImages.ImageResize.ResizeBlackBar(picOriginal' 720' 480); // NTSC - PAL would be 720x576;                    picOriginal.Save(firstFilename' System.Drawing.Imaging.ImageFormat.Jpeg);                  picOriginal.Dispose();                    // Create 30 (FPS) images for every second for each image                  int imageCountPerImage = this._secondsBetweenImages * (int)SlideShow.FPS;                  for (int i = 0; i < imageCountPerImage; i++)                  {                        System.Drawing.Bitmap pic = (Bitmap)System.Drawing.Image.FromFile(firstFilename);                                                     string secondPart = i.ToString().PadLeft(6' '0');                        pic = SetImageEffect(x.Effect' pic' imageCountPerImage' i);                        string filename = System.IO.Path.Combine(_imageDirectory' firstPart + "-a-" + secondPart + ".jpg");                        pic.Save(filename' System.Drawing.Imaging.ImageFormat.Jpeg);                      pic.Dispose();                    }                    // Create video of current images                                    System.Environment.CurrentDirectory = _imageDirectory;                    // output-temp.avi                  string videoName = string.Format("output-temp{0}.avi"' _fileCounter.ToString().PadLeft(6' '0'));                  CreateVideo(videoName);                         System.Environment.CurrentDirectory = currentDirectory;                      // delete temporary images                  DeleteImageDirectory();                                        // delete temporary video                }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,CreateSlideShow,The following statement contains a magic number: foreach (SlideShowInfo x in files)              {                  SetupImageDirectory();                                      this._fileCounter++;                  string firstPart = this._fileCounter.ToString().PadLeft(6' '0');                    string firstFilename = System.IO.Path.Combine(_imageDirectory' firstPart + ".jpg");                          System.Drawing.Image picOriginal = System.Drawing.Image.FromFile(x.FilePath);                  picOriginal = LibImages.ImageResize.ResizeBlackBar(picOriginal' 720' 480); // NTSC - PAL would be 720x576;                    picOriginal.Save(firstFilename' System.Drawing.Imaging.ImageFormat.Jpeg);                  picOriginal.Dispose();                    // Create 30 (FPS) images for every second for each image                  int imageCountPerImage = this._secondsBetweenImages * (int)SlideShow.FPS;                  for (int i = 0; i < imageCountPerImage; i++)                  {                        System.Drawing.Bitmap pic = (Bitmap)System.Drawing.Image.FromFile(firstFilename);                                                     string secondPart = i.ToString().PadLeft(6' '0');                        pic = SetImageEffect(x.Effect' pic' imageCountPerImage' i);                        string filename = System.IO.Path.Combine(_imageDirectory' firstPart + "-a-" + secondPart + ".jpg");                        pic.Save(filename' System.Drawing.Imaging.ImageFormat.Jpeg);                      pic.Dispose();                    }                    // Create video of current images                                    System.Environment.CurrentDirectory = _imageDirectory;                    // output-temp.avi                  string videoName = string.Format("output-temp{0}.avi"' _fileCounter.ToString().PadLeft(6' '0'));                  CreateVideo(videoName);                         System.Environment.CurrentDirectory = currentDirectory;                      // delete temporary images                  DeleteImageDirectory();                                        // delete temporary video                }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,CreateSlideShow,The following statement contains a magic number: foreach (SlideShowInfo x in files)              {                  SetupImageDirectory();                                      this._fileCounter++;                  string firstPart = this._fileCounter.ToString().PadLeft(6' '0');                    string firstFilename = System.IO.Path.Combine(_imageDirectory' firstPart + ".jpg");                          System.Drawing.Image picOriginal = System.Drawing.Image.FromFile(x.FilePath);                  picOriginal = LibImages.ImageResize.ResizeBlackBar(picOriginal' 720' 480); // NTSC - PAL would be 720x576;                    picOriginal.Save(firstFilename' System.Drawing.Imaging.ImageFormat.Jpeg);                  picOriginal.Dispose();                    // Create 30 (FPS) images for every second for each image                  int imageCountPerImage = this._secondsBetweenImages * (int)SlideShow.FPS;                  for (int i = 0; i < imageCountPerImage; i++)                  {                        System.Drawing.Bitmap pic = (Bitmap)System.Drawing.Image.FromFile(firstFilename);                                                     string secondPart = i.ToString().PadLeft(6' '0');                        pic = SetImageEffect(x.Effect' pic' imageCountPerImage' i);                        string filename = System.IO.Path.Combine(_imageDirectory' firstPart + "-a-" + secondPart + ".jpg");                        pic.Save(filename' System.Drawing.Imaging.ImageFormat.Jpeg);                      pic.Dispose();                    }                    // Create video of current images                                    System.Environment.CurrentDirectory = _imageDirectory;                    // output-temp.avi                  string videoName = string.Format("output-temp{0}.avi"' _fileCounter.ToString().PadLeft(6' '0'));                  CreateVideo(videoName);                         System.Environment.CurrentDirectory = currentDirectory;                      // delete temporary images                  DeleteImageDirectory();                                        // delete temporary video                }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,EffectValue,The following statement contains a magic number: return (short)((imageCountPerImage / 2) - loopCountPosition);
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,EffectImage,The following statement contains a magic number: if ((imageCountPerImage - loopCountPosition) > (imageCountPerImage / 2))              {                  return true;              }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,CreateVideo,The following statement contains a magic number: while (!finished)              {                  System.Threading.Thread.Sleep(200);              }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,AppendVideo,The following statement contains a magic number: while (!finished)              {                  System.Threading.Thread.Sleep(200);              }
Magic Number,LibMPlayerCommon,SlideShow,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\SlideShow.cs,AddAudio,The following statement contains a magic number: while (!finished)              {                  System.Threading.Thread.Sleep(200);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: if (timeInSeconds >= 3600)              {                  hours = timeInSeconds / 3600;                  timeInSeconds = timeInSeconds - (hours * 3600);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: if (timeInSeconds >= 3600)              {                  hours = timeInSeconds / 3600;                  timeInSeconds = timeInSeconds - (hours * 3600);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: if (timeInSeconds >= 3600)              {                  hours = timeInSeconds / 3600;                  timeInSeconds = timeInSeconds - (hours * 3600);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: if (timeInSeconds >= 60)              {                  minutes = timeInSeconds / 60;                  timeInSeconds = timeInSeconds - (minutes * 60);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: if (timeInSeconds >= 60)              {                  minutes = timeInSeconds / 60;                  timeInSeconds = timeInSeconds - (minutes * 60);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: if (timeInSeconds >= 60)              {                  minutes = timeInSeconds / 60;                  timeInSeconds = timeInSeconds - (minutes * 60);              }
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: time_string = time_string + hours.ToString().PadLeft(2' '0') + ":" +                   minutes.ToString().PadLeft(2' '0') + ":" + seconds.ToString().PadLeft(2' '0');
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: time_string = time_string + hours.ToString().PadLeft(2' '0') + ":" +                   minutes.ToString().PadLeft(2' '0') + ":" + seconds.ToString().PadLeft(2' '0');
Magic Number,LibMPlayerCommon,TimeConversion,C:\repos\majorsilence_MPlayerControl\LibMPlayerCommon\TimeConversion.cs,ConvertTimeHHMMSS,The following statement contains a magic number: time_string = time_string + hours.ToString().PadLeft(2' '0') + ":" +                   minutes.ToString().PadLeft(2' '0') + ":" + seconds.ToString().PadLeft(2' '0');
