Implementation smell,Namespace,Class,File,Method,Description
Long Method,ScriptCs.Command,CommandFactory,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\CommandFactory.cs,CreateCommand,The method has 125 lines of code.
Complex Method,ScriptCs.Command,CommandFactory,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\CommandFactory.cs,CreateCommand,Cyclomatic complexity of the method is 12
Long Parameter List,ScriptCs,ExecuteScriptCommandBase,C:\repos\scriptcs_scriptcs\src\ScriptCs\ExecuteScriptCommandBase.cs,ExecuteScriptCommandBase,The method has 9 parameters. Parameters: script' scriptArgs' fileSystem' scriptExecutor' scriptPackResolver' logProvider' assemblyResolver' fileSystemMigrator' composer
Long Parameter List,ScriptCs.Command,ExecuteLooseScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteLooseScriptCommand.cs,ExecuteLooseScriptCommand,The method has 9 parameters. Parameters: script' scriptArgs' fileSystem' scriptExecutor' scriptPackResolver' logProvider' assemblyResolver' fileSystemMigrator' composer
Long Parameter List,ScriptCs.Command,WatchScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\WatchScriptCommand.cs,WatchScriptCommand,The method has 6 parameters. Parameters: config' scriptArgs' console' fileSystem' logProvider' fileSystemMigrator
Long Parameter List,ScriptCs.Command,ExecuteReplCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteReplCommand.cs,ExecuteReplCommand,The method has 10 parameters. Parameters: scriptName' scriptArgs' fileSystem' scriptPackResolver' repl' logProvider' console' assemblyResolver' fileSystemMigrator' composer
Long Parameter List,ScriptCs.Command,InstallCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\InstallCommand.cs,InstallCommand,The method has 8 parameters. Parameters: name' version' allowPre' fileSystem' packageAssemblyResolver' packageInstaller' composer' logger
Long Parameter List,ScriptCs.Command,ExecuteScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteScriptCommand.cs,ExecuteScriptCommand,The method has 9 parameters. Parameters: script' scriptArgs' fileSystem' scriptExecutor' scriptPackResolver' logProvider' assemblyResolver' fileSystemMigrator' composer
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgument,The length of the statement  "                throw new ArgumentNullException(parameterName' string.Format(CultureInfo.InvariantCulture' "{0} is null."' parameterName)); " is 123.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentIfNullable,The length of the statement  "                throw new ArgumentNullException(parameterName' string.Format(CultureInfo.InvariantCulture' "{0} is null."' parameterName)); " is 123.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentProperty,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0}.{1} is null."' parameterName' propertyName)' parameterName); " is 137.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentPropertyIfNullable,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0}.{1} is null."' parameterName' propertyName)' parameterName); " is 137.
Long Statement,ScriptCs.Command,ExecuteLooseScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteLooseScriptCommand.cs,Execute,The length of the statement  "                // HACK: This is a (dirty) fix for #1086. This might be a temporary solution until some further refactoring can be done.  " is 120.
Long Statement,ScriptCs.Command,ExecuteLooseScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteLooseScriptCommand.cs,Execute,The length of the statement  "                ScriptExecutor.ScriptEngine.CacheDirectory = Path.Combine(workingDirectory ?? FileSystem.CurrentDirectory' FileSystem.DllCacheFolder); " is 134.
Long Statement,ScriptCs.Command,ExecuteScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteScriptCommand.cs,Execute,The length of the statement  "                // HACK: This is a (dirty) fix for #1086. This might be a temporary solution until some further refactoring can be done.  " is 120.
Long Statement,ScriptCs.Command,ExecuteScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\ExecuteScriptCommand.cs,Execute,The length of the statement  "                ScriptExecutor.ScriptEngine.CacheDirectory = Path.Combine(workingDirectory ?? FileSystem.CurrentDirectory' FileSystem.DllCacheFolder); " is 134.
Complex Conditional,ScriptCs,ScriptCsArgs,C:\repos\scriptcs_scriptcs\src\ScriptCs\ScriptCsArgs.cs,Parse,The conditional expression  "index < args.Length - 2 &&                      (string.Equals(args[index]' "-install"' StringComparison.OrdinalIgnoreCase) ||                          string.Equals(args[index]' "-i"' StringComparison.OrdinalIgnoreCase)) &&                      !args[index + 1].StartsWith("-"' StringComparison.Ordinal) &&                      !args[index + 2].StartsWith("-"' StringComparison.Ordinal)"  is complex.
Magic Number,ScriptCs,ScriptCsArgs,C:\repos\scriptcs_scriptcs\src\ScriptCs\ScriptCsArgs.cs,Parse,The following statement contains a magic number: for (var index = 0; index < args.Length; ++index)              {                  if (index < args.Length - 2 &&                      (string.Equals(args[index]' "-install"' StringComparison.OrdinalIgnoreCase) ||                          string.Equals(args[index]' "-i"' StringComparison.OrdinalIgnoreCase)) &&                      !args[index + 1].StartsWith("-"' StringComparison.Ordinal) &&                      !args[index + 2].StartsWith("-"' StringComparison.Ordinal))                  {                      curatedArgs.Add(args[index]);                      curatedArgs.Add(args[index + 1]);                      implicitPackageVersion = args[index + 2];                      index += 2;                  }                  else                  {                      curatedArgs.Add(args[index]);                  }              }
Magic Number,ScriptCs,ScriptCsArgs,C:\repos\scriptcs_scriptcs\src\ScriptCs\ScriptCsArgs.cs,Parse,The following statement contains a magic number: for (var index = 0; index < args.Length; ++index)              {                  if (index < args.Length - 2 &&                      (string.Equals(args[index]' "-install"' StringComparison.OrdinalIgnoreCase) ||                          string.Equals(args[index]' "-i"' StringComparison.OrdinalIgnoreCase)) &&                      !args[index + 1].StartsWith("-"' StringComparison.Ordinal) &&                      !args[index + 2].StartsWith("-"' StringComparison.Ordinal))                  {                      curatedArgs.Add(args[index]);                      curatedArgs.Add(args[index + 1]);                      implicitPackageVersion = args[index + 2];                      index += 2;                  }                  else                  {                      curatedArgs.Add(args[index]);                  }              }
Magic Number,ScriptCs,ScriptCsArgs,C:\repos\scriptcs_scriptcs\src\ScriptCs\ScriptCsArgs.cs,Parse,The following statement contains a magic number: for (var index = 0; index < args.Length; ++index)              {                  if (index < args.Length - 2 &&                      (string.Equals(args[index]' "-install"' StringComparison.OrdinalIgnoreCase) ||                          string.Equals(args[index]' "-i"' StringComparison.OrdinalIgnoreCase)) &&                      !args[index + 1].StartsWith("-"' StringComparison.Ordinal) &&                      !args[index + 2].StartsWith("-"' StringComparison.Ordinal))                  {                      curatedArgs.Add(args[index]);                      curatedArgs.Add(args[index + 1]);                      implicitPackageVersion = args[index + 2];                      index += 2;                  }                  else                  {                      curatedArgs.Add(args[index]);                  }              }
Magic Number,ScriptCs,ScriptCsArgs,C:\repos\scriptcs_scriptcs\src\ScriptCs\ScriptCsArgs.cs,Parse,The following statement contains a magic number: for (var index = 0; index < args.Length; ++index)              {                  if (index < args.Length - 2 &&                      (string.Equals(args[index]' "-install"' StringComparison.OrdinalIgnoreCase) ||                          string.Equals(args[index]' "-i"' StringComparison.OrdinalIgnoreCase)) &&                      !args[index + 1].StartsWith("-"' StringComparison.Ordinal) &&                      !args[index + 2].StartsWith("-"' StringComparison.Ordinal))                  {                      curatedArgs.Add(args[index]);                      curatedArgs.Add(args[index + 1]);                      implicitPackageVersion = args[index + 2];                      index += 2;                  }                  else                  {                      curatedArgs.Add(args[index]);                  }              }
Magic Number,ScriptCs.Command,WatchScriptCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs\Command\WatchScriptCommand.cs,Execute,The following statement contains a magic number: while (true)              {                  using (var fileChanged = new ManualResetEventSlim())                  using (var watcher = new FileWatcher(_config.ScriptName' 500' _fileSystem))                  {                      _logger.DebugFormat("Creating app domain '{0}'..."' _config.ScriptName);                      var appDomain = AppDomain.CreateDomain(_config.ScriptName' null' _setup);                      try                      {                          watcher.Changed += (sender' e) =>                          {                              _logger.DebugFormat("Script '{0}' changed."' _config.ScriptName);                              EnsureUnloaded(appDomain);                              fileChanged.Set();                          };                            watcher.Start();                          _logger.DebugFormat("Executing script '{0}' and watching for changes..."' _config.ScriptName);                          fileChanged.Reset();                          try                          {                              appDomain.DoCallBack(_executeScriptCommand.Execute);                          }                          catch (AppDomainUnloadedException ex)                          {                              _logger.DebugFormat("App domain '{0}' has been unloaded."' ex' _config.ScriptName);                          }                      }                      finally                      {                          EnsureUnloaded(appDomain);                      }                        fileChanged.Wait();                      _logger.InfoFormat("Script changed. Reloading..."' _config.ScriptName);                  }              }
