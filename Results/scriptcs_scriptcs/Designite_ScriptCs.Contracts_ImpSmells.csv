Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ScriptCs.Contracts,IScriptEngine,C:\repos\scriptcs_scriptcs\src\ScriptCs.Contracts\IScriptEngine.cs,Execute,The method has 5 parameters. Parameters: code' scriptArgs' references' namespaces' scriptPackSession
Long Statement,ScriptCs.Contracts,DirectiveLineProcessor,C:\repos\scriptcs_scriptcs\src\ScriptCs.Contracts\DirectiveLineProcessor.cs,ProcessLine,The length of the statement  "                    throw new InvalidDirectiveUseException(string.Format("Encountered directive '{0}' after the start of code. Please move this directive to the beginning of the file."' DirectiveString)); " is 184.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgument,The length of the statement  "                throw new ArgumentNullException(parameterName' string.Format(CultureInfo.InvariantCulture' "{0} is null."' parameterName)); " is 123.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentIfNullable,The length of the statement  "                throw new ArgumentNullException(parameterName' string.Format(CultureInfo.InvariantCulture' "{0} is null."' parameterName)); " is 123.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentProperty,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0}.{1} is null."' parameterName' propertyName)' parameterName); " is 137.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentPropertyIfNullable,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0}.{1} is null."' parameterName' propertyName)' parameterName); " is 137.
Magic Number,ScriptCs.Contracts.LibLog,LoupeLogger,C:\repos\scriptcs_scriptcs\src\ScriptCs.Contracts\App_Packages\LibLog.4.2\LibLog.cs,LoupeLogger,The following statement contains a magic number: _skipLevel = 2;
Magic Number,ScriptCs.Contracts.LibLog,LogMessageFormatter,C:\repos\scriptcs_scriptcs\src\ScriptCs.Contracts\App_Packages\LibLog.4.2\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length -2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return string.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
Magic Number,ScriptCs.Contracts.LibLog.LogProviders,LoupeLogger,C:\repos\scriptcs_scriptcs\src\ScriptCs.Contracts\App_Packages\LibLog.4.2\LibLog.cs,LoupeLogger,The following statement contains a magic number: _skipLevel = 2;
Magic Number,ScriptCs.Contracts.LibLog.LogProviders,LogMessageFormatter,C:\repos\scriptcs_scriptcs\src\ScriptCs.Contracts\App_Packages\LibLog.4.2\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length -2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return string.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
