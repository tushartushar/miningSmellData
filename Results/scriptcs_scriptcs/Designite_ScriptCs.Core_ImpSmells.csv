Implementation smell,Namespace,Class,File,Method,Description
Long Method,ScriptCs,Repl,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Repl.cs,Execute,The method has 100 lines of code.
Complex Method,ScriptCs,Repl,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Repl.cs,Execute,Cyclomatic complexity of the method is 15
Long Parameter List,ScriptCs,AppDomainAssemblyResolver,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\AppDomainAssemblyResolver.cs,AppDomainAssemblyResolver,The method has 6 parameters. Parameters: logProvider' fileSystem' resolver' assemblyUtility' assemblyInfoMap' resolveHandler
Long Parameter List,ScriptCs,ScriptLibraryComposer,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptLibraryComposer.cs,ScriptLibraryComposer,The method has 5 parameters. Parameters: fileSystem' preProcessor' packageContainer' packageAssemblyResolver' logProvider
Long Parameter List,ScriptCs,ScriptLibraryComposer,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptLibraryComposer.cs,ProcessPackage,The method has 5 parameters. Parameters: packagesPath' reference' builder' references' namespaces
Long Parameter List,ScriptCs,DebugScriptExecutor,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\DebugScriptExecutor.cs,DebugScriptExecutor,The method has 6 parameters. Parameters: fileSystem' filePreProcessor' scriptEngine' logProvider' composer' scriptInfo
Long Parameter List,ScriptCs,Repl,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Repl.cs,Repl,The method has 11 parameters. Parameters: scriptArgs' fileSystem' scriptEngine' serializer' logProvider' composer' console' filePreProcessor' replCommands' printers' scriptInfo
Long Parameter List,ScriptCs,ScriptExecutor,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptExecutor.cs,ScriptExecutor,The method has 5 parameters. Parameters: fileSystem' filePreProcessor' scriptEngine' logProvider' scriptInfo
Long Parameter List,ScriptCs,ScriptExecutor,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptExecutor.cs,ScriptExecutor,The method has 6 parameters. Parameters: fileSystem' filePreProcessor' scriptEngine' logProvider' composer' scriptInfo
Long Parameter List,ScriptCs,ScriptServices,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptServices.cs,ScriptServices,The method has 16 parameters. Parameters: fileSystem' packageAssemblyResolver' executor' repl' engine' filePreProcessor' scriptPackResolver' packageInstaller' objectSerializer' logProvider' assemblyResolver' replCommands' fileSystemMigrator' console' installationProvider' scriptLibraryComposer
Long Identifier,ScriptCs,ScriptExecutor,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptExecutor.cs,InjectScriptLibraries,The length of the parameter scriptLibrariesPreProcessorResult is 33.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgument,The length of the statement  "                throw new ArgumentNullException(parameterName' string.Format(CultureInfo.InvariantCulture' "{0} is null."' parameterName)); " is 123.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentIfNullable,The length of the statement  "                throw new ArgumentNullException(parameterName' string.Format(CultureInfo.InvariantCulture' "{0} is null."' parameterName)); " is 123.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentProperty,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0}.{1} is null."' parameterName' propertyName)' parameterName); " is 137.
Long Statement,ScriptCs,Guard,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\Guard.cs,AgainstNullArgumentPropertyIfNullable,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0}.{1} is null."' parameterName' propertyName)' parameterName); " is 137.
Long Statement,ScriptCs,ScriptPackManager,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptPackManager.cs,Get,The length of the statement  "                throw new ScriptPackException(string.Format("Tried to resolve a script pack '{0}'' but such script pack is not available in the current execution context."' key)); " is 163.
Long Statement,ScriptCs.ReplCommands,ScriptPacksCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\ScriptPacksCommand.cs,Execute,The length of the statement  "            var importedNamespaces = repl.ScriptPackSession.Namespaces.IsNullOrEmpty() ? repl.Namespaces.ToArray() : repl.Namespaces.Union(repl.ScriptPackSession.Namespaces).ToArray(); " is 172.
Long Statement,ScriptCs.ReplCommands,ScriptPacksCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\ScriptPacksCommand.cs,PrintMethods,The length of the statement  "                    var methodSignature = string.Format(" - {0} {1}({2})"' GetPrintableType(method.ReturnType' importedNamespaces)' method.Name' " is 124.
Long Statement,ScriptCs.ReplCommands,ScriptPacksCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\ScriptPacksCommand.cs,PrintProperties,The length of the statement  "                    var propertyBuilder = new StringBuilder(string.Format(" - {0} {1}"' GetPrintableType(property.PropertyType' importedNamespaces)' property.Name)); " is 145.
Long Statement,ScriptCs.ReplCommands,HelpCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\HelpCommand.cs,Execute,The length of the statement  "                    _console.WriteLine(string.Format("{0}{1'10}"' key' WrapTextToColumn(command.Value.Description' descWidth' indentWidth: key.Length))); " is 133.
Long Statement,ScriptCs.ReplCommands,UsingsCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\UsingsCommand.cs,Execute,The length of the statement  "            if (repl.ScriptPackSession == null || repl.ScriptPackSession.Namespaces == null || !repl.ScriptPackSession.Namespaces.Any()) " is 124.
Magic Number,ScriptCs,ScriptLibraryComposer,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ScriptLibraryComposer.cs,ProcessPackage,The following statement contains a magic number: if (script != null)              {                  script = Path.Combine(packagesPath' string.Format("{0}.{1}"' package.Id' package.TextVersion)' script);                  _logger.Debug("Pre-processing script");                  var result = _preProcessor.ProcessFile(script);                  var fileWithoutExtension = Path.GetFileNameWithoutExtension(script);                  var classname = fileWithoutExtension.Substring(0' fileWithoutExtension.Length - 4);                  _logger.DebugFormat("Created Script Libary class: {0}"' classname);                  var classBuilder = new StringBuilder();                  classBuilder.AppendFormat("public class {0} : ScriptCs.ScriptLibraryWrapper {{{1}"' classname' Environment.NewLine);                  classBuilder.AppendLine(result.Code);                  classBuilder.AppendLine("}");                  var classDefinition = classBuilder.ToString();                  _logger.TraceFormat("Class definition:{0}{0}{1}"' Environment.NewLine' classDefinition);                  builder.Append(classDefinition);                  references.AddRange(result.References);                  namespaces.AddRange(result.Namespaces);              }
Magic Number,ScriptCs,PackageReference,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\PackageReference.cs,SetVersionFromString,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(stringVersion))              {                  Version = new Version();              }              else              {                  if (stringVersion.Contains("-"))                  {                      var splitVersion = stringVersion.Split(new[] { '-' }' 2);                      if (splitVersion.Length == 2)                      {                          Version = new Version(splitVersion[0]);                          SpecialVersion = splitVersion[1];                          return;                      }                  }                    Version = new Version(stringVersion);              }
Magic Number,ScriptCs,PackageReference,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\PackageReference.cs,SetVersionFromString,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(stringVersion))              {                  Version = new Version();              }              else              {                  if (stringVersion.Contains("-"))                  {                      var splitVersion = stringVersion.Split(new[] { '-' }' 2);                      if (splitVersion.Length == 2)                      {                          Version = new Version(splitVersion[0]);                          SpecialVersion = splitVersion[1];                          return;                      }                  }                    Version = new Version(stringVersion);              }
Magic Number,ScriptCs,StringExtensions,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\StringExtensions.cs,SplitQuoted,The following statement contains a magic number: if ((quotes % 2) != 0)              {                  throw new ArgumentException("String is missing a closing quote");              }
Magic Number,ScriptCs,StringExtensions,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\StringExtensions.cs,SplitQuoted,The following statement contains a magic number: if (quotes > 0 && list.Count > 0)              {                  Predicate<string> findQuoteFunc = delegate (string s) { return s.Contains("\""); };                  // create function to find string item with odd number of quotes                  Func<int' int> findOddQuotedItemFunc = delegate (int startingIndex) {                      if (startingIndex < list.Count)                      {                          do                          {                              int quickFind = list.FindIndex(startingIndex' findQuoteFunc);                              int quickCount = quoteCounterFunc(list[quickFind]);                              if ((quickCount % 2) != 0)                              {                                  return quickFind;                              }                              // we didn't find the quoted line we are looking for                              startingIndex = quickFind + 1;                          } while (startingIndex < list.Count);                      }                      return -1;                  };                    int index = 0;                  do                  {                      int start = findOddQuotedItemFunc(index);                      if (start > 0)                      {                          // we have to locate the next string with odd number of quotes                          int end = findOddQuotedItemFunc(start + 1);                            string combined = string.Empty;                          for (int x = start; x <= end; x++)                          {                              // because we split on whitespace' we have to put it back when combining                              combined += list[x] + ' ';                          }                          list[start] = combined.TrimEnd(); // remove the extra whitespace that was added                            // removed the other parts of the combined string from the list                          do                          {                              list.RemoveAt(end--); // from the bottom up                          } while (start < end);                            // advance to next item in the adjusted list                          index = start + 1;                      }                      else                      {                          break;                        }                    } while (index < list.Count);              }
Magic Number,ScriptCs.ReplCommands,AliasCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\AliasCommand.cs,Execute,The following statement contains a magic number: if (args == null || args.Length != 2)              {                  _console.WriteLine("You must specifiy the command name and alias' e.g. :alias \"clear\" \"cls\"");                  return null;              }
Magic Number,ScriptCs.ReplCommands,HelpCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\HelpCommand.cs,Execute,The following statement contains a magic number: foreach (var command in repl.Commands.OrderBy(x => x.Key))              {                  string key = string.Format(" :{0'-15} - "' command.Key);                    // make sure we have a good width for formatting purposes                  int descWidth = _console.Width - key.Length - 1;                  if (descWidth > 25)                   {                      _console.WriteLine(string.Format("{0}{1'10}"' key' WrapTextToColumn(command.Value.Description' descWidth' indentWidth: key.Length)));                  }                  else                  {                      // safe-guard: just in the case we have a really long Repl Command "key"                      // and a really narrow console width don't wrap the description                      // note: the extra newline if to at least make somewhat readable                      _console.WriteLine(string.Format("{0}{1'10}\n"' key' command.Value.Description));                  }              }
Magic Number,ScriptCs.ReplCommands,InstallCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\InstallCommand.cs,Execute,The following statement contains a magic number: if (args.Length >= 2)              {                  version = args[1].ToString();              }
Magic Number,ScriptCs.ReplCommands,InstallCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\InstallCommand.cs,Execute,The following statement contains a magic number: var allowPre = args.Length >= 3 && args[2].ToString().ToUpperInvariant() == "PRE";
Magic Number,ScriptCs.ReplCommands,InstallCommand,C:\repos\scriptcs_scriptcs\src\ScriptCs.Core\ReplCommands\InstallCommand.cs,Execute,The following statement contains a magic number: var allowPre = args.Length >= 3 && args[2].ToString().ToUpperInvariant() == "PRE";
