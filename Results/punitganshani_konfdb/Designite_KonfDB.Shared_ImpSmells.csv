Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,KonfDB.Infrastructure.DataResolvers,SharedTypeResolver,C:\repos\punitganshani_konfdb\Shared\KonfDBC\DataResolvers\SharedTypeResolver.cs,TryResolveType,The method has 5 parameters. Parameters: dataContractType' declaredType' knownTypeResolver' typeName' typeNamespace
Long Parameter List,KonfDB.Infrastructure.WCF,AddressInfo,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\AddressInfo.cs,AddressInfo,The method has 6 parameters. Parameters: type' serverName' port' serviceName' folder' mode
Long Parameter List,KonfDB.Infrastructure.WCF,WcfClient<T>,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\WcfClient.cs,Create,The method has 6 parameters. Parameters: type' serverName' port' serviceName' folder' mode
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,HttpEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\HttpEndpoint.cs,Host,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "http"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 128.
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,HttpEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\HttpEndpoint.cs,HostSecured,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "https"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 129.
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,WsHttpEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\WsHttpEndpoint.cs,Host,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "http"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 128.
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,WsHttpEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\WsHttpEndpoint.cs,HostSecured,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "https"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 129.
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,NetTcpEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\NetTcpEndpoint.cs,Host,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "net.tcp"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 131.
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,RestEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\RestEndpoint.cs,Host,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "http"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 128.
Long Statement,KonfDB.Infrastructure.WCF.Endpoints,RestEndpoint,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Endpoints\RestEndpoint.cs,HostSecured,The length of the statement  "            string endpointAddress = string.Format(addressUriFormat' "https"' serviceInfo.ServerName' serviceInfo.Binding.Configuration.Port' " is 129.
Complex Conditional,KonfDB.Infrastructure.WCF,AddressInfo,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\AddressInfo.cs,AddressInfo,The conditional expression  "string.IsNullOrEmpty(serverName) || string.IsNullOrEmpty(port) || string.IsNullOrEmpty(serverName)                  || string.IsNullOrEmpty(folder)"  is complex.
Virtual Method Call from Constructor,KonfDB.Infrastructure.Caching,InMemoryCacheStore,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Caching\InMemoryCacheStore.cs,InMemoryCacheStore,The constructor "InMemoryCacheStore" calls a virtual method "OnItemRemoved".
Virtual Method Call from Constructor,KonfDB.Infrastructure.WCF.Bindings,TcpBinding,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\TcpBinding.cs,TcpBinding,The constructor "TcpBinding" calls a virtual method "SvcInfo".
Magic Number,KonfDB.Infrastructure.Caching,InMemoryCacheStore,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Caching\InMemoryCacheStore.cs,GetPolicyTillMidnight,The following statement contains a magic number: DateTime midnight = new DateTime(now.Year' now.Month' now.Day' 11' 59' 59' DateTimeKind.Utc);
Magic Number,KonfDB.Infrastructure.Caching,InMemoryCacheStore,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Caching\InMemoryCacheStore.cs,GetPolicyTillMidnight,The following statement contains a magic number: DateTime midnight = new DateTime(now.Year' now.Month' now.Day' 11' 59' 59' DateTimeKind.Utc);
Magic Number,KonfDB.Infrastructure.Caching,InMemoryCacheStore,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Caching\InMemoryCacheStore.cs,GetPolicyTillMidnight,The following statement contains a magic number: DateTime midnight = new DateTime(now.Year' now.Month' now.Day' 11' 59' 59' DateTimeKind.Utc);
Magic Number,KonfDB.Infrastructure.Caching,InMemoryCacheStore,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Caching\InMemoryCacheStore.cs,CreatePolicy,The following statement contains a magic number: TimeSpan validUntil = _durationInSeconds <= 0                  ? TimeSpan.FromMinutes(10)                  : TimeSpan.FromSeconds(_durationInSeconds);
Magic Number,KonfDB.Infrastructure.Extensions,StringExtensions,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Extensions\StringExtensions.cs,GetRandom,The following statement contains a magic number: int numOfCharacters = 10;
Magic Number,KonfDB.Infrastructure.Utilities,CommandArgs,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Utilities\CommandArgs.cs,Parse,The following statement contains a magic number: args.ToList().ForEach(x =>              {                  var parts = spliter.Split(x' 3).Where(s => !string.IsNullOrEmpty(s)).ToArray();                  switch (parts.Length)                  {                      case 1:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[0]);                          else                              _parameters[parts[0]] = parts[0];                          break;                      case 2:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[1]);                          else                              _parameters[parts[0]] = parts[1];                          break;                      case 3:                          // should ideally not reach here                          break;                  }              });
Magic Number,KonfDB.Infrastructure.Utilities,CommandArgs,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Utilities\CommandArgs.cs,Parse,The following statement contains a magic number: args.ToList().ForEach(x =>              {                  var parts = spliter.Split(x' 3).Where(s => !string.IsNullOrEmpty(s)).ToArray();                  switch (parts.Length)                  {                      case 1:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[0]);                          else                              _parameters[parts[0]] = parts[0];                          break;                      case 2:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[1]);                          else                              _parameters[parts[0]] = parts[1];                          break;                      case 3:                          // should ideally not reach here                          break;                  }              });
Magic Number,KonfDB.Infrastructure.Utilities,CommandArgs,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Utilities\CommandArgs.cs,Parse,The following statement contains a magic number: args.ToList().ForEach(x =>              {                  var parts = spliter.Split(x' 3).Where(s => !string.IsNullOrEmpty(s)).ToArray();                  switch (parts.Length)                  {                      case 1:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[0]);                          else                              _parameters[parts[0]] = parts[0];                          break;                      case 2:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[1]);                          else                              _parameters[parts[0]] = parts[1];                          break;                      case 3:                          // should ideally not reach here                          break;                  }              });
Magic Number,KonfDB.Infrastructure.WCF.Bindings,HttpBinding,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\HttpBinding.cs,HttpBinding,The following statement contains a magic number: MaxReceivedMessageSize = 5242880;
Magic Number,KonfDB.Infrastructure.WCF.Bindings,HttpBinding,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\HttpBinding.cs,HttpBinding,The following statement contains a magic number: MaxBufferPoolSize = 5242880;
Magic Number,KonfDB.Infrastructure.WCF.Bindings,HttpBinding,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\HttpBinding.cs,HttpBinding,The following statement contains a magic number: MaxBufferSize = 5242880;
Magic Number,KonfDB.Infrastructure.WCF.Bindings,TcpBinding,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\TcpBinding.cs,TcpBinding,The following statement contains a magic number: MaxReceivedMessageSize = 6553600;
Magic Number,KonfDB.Infrastructure.WCF.Bindings,TcpBinding,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\TcpBinding.cs,TcpBinding,The following statement contains a magic number: MaxBufferPoolSize = 5242880;
Missing Default,KonfDB.Infrastructure.Utilities,CommandArgs,C:\repos\punitganshani_konfdb\Shared\KonfDBC\Utilities\CommandArgs.cs,Parse,The following switch statement is missing a default case: switch (parts.Length)                  {                      case 1:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[0]);                          else                              _parameters[parts[0]] = parts[0];                          break;                      case 2:                          if (_parameters.ContainsKey(parts[0]) == false)                              _parameters.Add(parts[0]' parts[1]);                          else                              _parameters[parts[0]] = parts[1];                          break;                      case 3:                          // should ideally not reach here                          break;                  }
Missing Default,KonfDB.Infrastructure.WCF,AddressInfo,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\AddressInfo.cs,ToString,The following switch statement is missing a default case: switch (Type)                  {                      case ServiceType.HTTP:                      case ServiceType.REST:                      case ServiceType.WSHTTP:                          prefix = SecurityMode == ServiceSecurityMode.BasicSSL ? "https" : "http";                          break;                      case ServiceType.TCP:                          prefix = "net.tcp";                          break;                  }
Missing Default,KonfDB.Infrastructure.WCF,AddressInfo,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\AddressInfo.cs,CreateChannel,The following switch statement is missing a default case: switch (Type)              {                  case ServiceType.HTTP:                      prefix = useSSL ? "https" : "http";                      if (useSSL)                      {                          binding = new HttpBinding                          {                              Security =                              {                                  Mode = BasicHttpSecurityMode.Transport'                                  Transport =                                  {                                      ClientCredentialType = HttpClientCredentialType.None'                                      Realm = string.Empty'                                      ProxyCredentialType = HttpProxyCredentialType.None                                  }                              }                          };                      }                      else                      {                          binding = new HttpBinding();                      }                      break;                  case ServiceType.WSHTTP:                      prefix = useSSL ? "https" : "http";                      if (useSSL)                      {                          binding = new WsHttpBinding                          {                              Security =                              {                                  Mode = System.ServiceModel.SecurityMode.Transport'                                  Transport =                                  {                                      ClientCredentialType = HttpClientCredentialType.None'                                      Realm = string.Empty'                                      ProxyCredentialType = HttpProxyCredentialType.None                                  }                              }                          };                      }                      else                      {                          binding = new WsHttpBinding();                      }                      break;                  case ServiceType.TCP:                      binding = new TcpBinding();                      prefix = "net.tcp";                      break;                  case ServiceType.REST:                      if (useSSL)                      {                          binding = new RestBinding                          {                              Security =                              {                                  Mode = WebHttpSecurityMode.Transport'                                  Transport =                                  {                                      ClientCredentialType = HttpClientCredentialType.None'                                      Realm = string.Empty'                                      ProxyCredentialType = HttpProxyCredentialType.None                                  }                              }                          };                      }                      else                      {                          binding = new RestBinding();                      }                      prefix = useSSL ? "https" : "http";                      break;              }
Missing Default,KonfDB.Infrastructure.WCF.Bindings,BindingFactory,C:\repos\punitganshani_konfdb\Shared\KonfDBC\WCF\Bindings\BindingFactory.cs,Create,The following switch statement is missing a default case: switch (config.ServiceType)              {                  case ServiceType.HTTP:                      return Binding.Create(config' new HttpBinding()' typeof (HttpEndpoint)' DataTypeSupport.Native);                  case ServiceType.TCP:                      return Binding.Create(config' new TcpBinding()' typeof (NetTcpEndpoint)' DataTypeSupport.Native);                  case ServiceType.REST:                      return Binding.Create(config' new RestBinding()' typeof (RestEndpoint)' DataTypeSupport.Json);                  case ServiceType.WSHTTP:                      return Binding.Create(config' new WsHttpBinding()' typeof (WsHttpEndpoint)' DataTypeSupport.Native);              }
