Implementation smell,Namespace,Class,File,Method,Description
Long Method,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,InitEntities,The method has 257 lines of code.
Long Method,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The method has 125 lines of code.
Complex Method,KonfDB.Infrastructure.Database.StateActions,DatabaseObjectsCheckAction,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Database\StateActions\DatabaseObjectsCheckAction.cs,ExecuteState,Cyclomatic complexity of the method is 8
Complex Method,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,Cyclomatic complexity of the method is 12
Complex Method,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 11
Complex Method,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 8
Complex Method,KonfDB.Infrastructure.Workflow,StateWorkflow<TStates>,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Workflow\StateWorkflow.cs,ExecuteState,Cyclomatic complexity of the method is 8
Long Parameter List,KonfDB.Infrastructure.Database.Abstracts,IConfigurationDataStore,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Database\Abstracts\IConfigurationDataStore.cs,GetConfigurations,The method has 6 parameters. Parameters: userId' appId' serverId' envId' regionId' publicKey
Complex Conditional,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Virtual Method Call from Constructor,KonfDB.Infrastructure.Database.Providers,BaseProvider,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Database\Providers\BaseProvider.cs,BaseProvider,The constructor "BaseProvider" calls a virtual method "OnInitialized".
Magic Number,KonfDB.Infrastructure.Encryption,RSAEncryptionEngine,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Encryption\RSAEncryptionEngine.cs,Decrypt,The following statement contains a magic number: string newInput = input.Substring(2' input.Length - 2);
Magic Number,KonfDB.Infrastructure.Encryption,RSAEncryptionEngine,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Encryption\RSAEncryptionEngine.cs,Decrypt,The following statement contains a magic number: string newInput = input.Substring(2' input.Length - 2);
Magic Number,KonfDB.Infrastructure.Encryption,ParamEncryptionEngine,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Encryption\ParamEncryptionEngine.cs,CreateKeys,The following statement contains a magic number: RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(1024' cspParams);
Magic Number,KonfDB.Infrastructure.Common,ConfigReader,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\ConfigReader.cs,GetConfigInfo,The following statement contains a magic number: if (File.Exists(parentDirectory))              {                  CurrentContext.Default.Log.Debug("Will read file from : " + parentDirectory + FileName);                  // read in the Xml from the config file                  StringBuilder configFileContents;                  using (StreamReader reader = new StreamReader(parentDirectory + FileName))                  {                      string xmlSnippet;                      configFileContents = new StringBuilder(512);                      while ((xmlSnippet = reader.ReadLine()) != null)                      {                          configFileContents.Append(xmlSnippet);                      }                  }                    return configFileContents.ToString();              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append(GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte) xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append(GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  int current = GetInt(bytes[i]);                  if (current == -1)                      return -1;                  value = (value << 4) + current;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte) c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte) c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte) 'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char) xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte) xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char) bytes[i]);                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char) bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char) xchar;                          i += 2;                      }                  }                  result.WriteByte((byte) c);              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char) bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char) xchar;                          i += 2;                      }                  }                  result.WriteByte((byte) c);              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char) bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char) xchar;                          i += 2;                      }                  }                  result.WriteByte((byte) c);              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = c;                    result.WriteByte((byte) '%');                  result.WriteByte((byte) 'u');                  idx = i >> 12;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  return;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = c;                    result.WriteByte((byte) '%');                  result.WriteByte((byte) 'u');                  idx = i >> 12;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  return;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = c;                    result.WriteByte((byte) '%');                  result.WriteByte((byte) 'u');                  idx = i >> 12;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  return;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = c;                    result.WriteByte((byte) '%');                  result.WriteByte((byte) 'u');                  idx = i >> 12;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte) hexChars[idx]);                  return;              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte) '%');                      result.WriteByte((byte) 'u');                      result.WriteByte((byte) '0');                      result.WriteByte((byte) '0');                  }                  else                      result.WriteByte((byte) '%');                    int idx = c >> 4;                  result.WriteByte((byte) hexChars[idx]);                  idx = c & 0x0F;                  result.WriteByte((byte) hexChars[idx]);              }              else                  result.WriteByte((byte) c);
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte) '%');                      result.WriteByte((byte) 'u');                      result.WriteByte((byte) '0');                      result.WriteByte((byte) '0');                  }                  else                      result.WriteByte((byte) '%');                    int idx = c >> 4;                  result.WriteByte((byte) hexChars[idx]);                  idx = c & 0x0F;                  result.WriteByte((byte) hexChars[idx]);              }              else                  result.WriteByte((byte) c);
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity);                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity);                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char) number);                          }                          state = 0;                          entity.Length = 0;                          have_trailing_digits = false;                      }                      else if (Char.IsDigit(c))                      {                          number = number*10 + (c - '0');                          have_trailing_digits = true;                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,KonfDB.Infrastructure.Common,EncodingUtility,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Common\EncodingUtility.cs,HtmlEncode,The following statement contains a magic number: foreach (char c in s)                  switch (c)                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;                      default:                          // MS starts encoding with &# from 160 and stops at 255.                          // We don't do that. One reason is the 65308/65310 unicode                          // characters that look like '<' and '>'.                          if (c > 159)                          {                              output.Append("&#");                              output.Append(((int) c).ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append(c);                          }                          break;                  }
Magic Number,KonfDB.Engine.Shell,ServiceHost,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Shell\ServiceHost.cs,ShowOnConsoleIfRequested,The following statement contains a magic number: while (!shutdownEvent.WaitOne(0))              {                  Thread.Sleep(1000);              }
Magic Number,KonfDB.Infrastructure.Utilities,Converter,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Utilities\Converter.cs,StringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                  .Where(x => x%2 == 0)                  .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                  .ToArray();
Magic Number,KonfDB.Infrastructure.Utilities,Converter,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Utilities\Converter.cs,StringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                  .Where(x => x%2 == 0)                  .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                  .ToArray();
Magic Number,KonfDB.Infrastructure.Utilities,Converter,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\Utilities\Converter.cs,StringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                  .Where(x => x%2 == 0)                  .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                  .ToArray();
Magic Number,KonfDB.Infrastructure.WCF,WcfService<TInterface;TService>,C:\repos\punitganshani_konfdb\Server\KonfDB.Infrastructure\WCF\WcfService.cs,ConfigureEndPoints,The following statement contains a magic number: behavior.MaxItemsInObjectGraph = 5242880;
