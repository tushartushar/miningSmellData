Implementation smell,Namespace,Class,File,Method,Description
Long Statement,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestFile_ResponsePacketInvalidExtraByte_ThrowsMalformedPacketException,The length of the statement  "            Mock.Get(_packetSendService).SetupReceivedPacketHasHeader(PacketFamily.Init' PacketAction.Init' (byte)InitReply.ItemFile' 33); " is 126.
Long Statement,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestFile_CorrectResponse_ExecutesWithoutFault,The length of the statement  "                Mock.Get(_packetSendService).SetupReceivedPacketHasHeader(PacketFamily.Init' PacketAction.Init' CreateFilePacket(type)); " is 120.
Long Statement,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestMapFile_ResponsePacketHasIncorrectFileType_ThrowsMalformedPacketException,The length of the statement  "            Mock.Get(_packetSendService).SetupReceivedPacketHasHeader(PacketFamily.Init' PacketAction.Init' (byte) InitReply.SpellFile' 33); " is 128.
Long Statement,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestMapFile_SendsPacket_BasedOnSpecifiedMap,The length of the statement  "            Mock.Get(_packetSendService).Setup(x => x.SendEncodedPacketAndWaitAsync(It.IsAny<IPacket>())).Callback((IPacket packet) => packetIsCorrect = IsCorrectFileRequestPacket(packet' InitFileType.Map)); " is 195.
Long Statement,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,IsCorrectFileRequestPacket,The length of the statement  "            return packet.Family == PacketFamily.Welcome && packet.Action == PacketAction.Agree && packet.ReadChar() == (byte) type; " is 120.
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestFile_ResponsePacketInvalidExtraByte_ThrowsMalformedPacketException,The following statement contains a magic number: Mock.Get(_packetSendService).SetupReceivedPacketHasHeader(PacketFamily.Init' PacketAction.Init' (byte)InitReply.ItemFile' 33);
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestMapFile_ResponsePacketHasIncorrectFileType_ThrowsMalformedPacketException,The following statement contains a magic number: Mock.Get(_packetSendService).SetupReceivedPacketHasHeader(PacketFamily.Init' PacketAction.Init' (byte) InitReply.SpellFile' 33);
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Magic Number,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following statement contains a magic number: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
Missing Default,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,RequestFile_CorrectResponse_ExecutesWithoutFault,The following switch statement is missing a default case: switch (type)                  {                      case InitFileType.Item: aggEx = _fileRequestService.RequestFile(type).Exception; break;                      case InitFileType.Npc: aggEx = _fileRequestService.RequestFile(type).Exception; break;                      case InitFileType.Spell: aggEx = _fileRequestService.RequestFile(type).Exception; break;                      case InitFileType.Class: aggEx = _fileRequestService.RequestFile(type).Exception; break;                  }
Missing Default,EOLib.Test.Net.FileTransfer,FileRequestServiceTest,D:\research\architectureSmells\repos\ethanmoffat_EndlessClient\EOLib.Test\Net\FileTransfer\FileRequestServiceTest.cs,CreateFilePacket,The following switch statement is missing a default case: switch (type)              {                  case InitFileType.Item:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ItemFile).AddChar(1) //spacer                          .AddString("EIF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new EIFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new EIFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Npc:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.NpcFile).AddChar(1) //spacer                          .AddString("ENF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ENFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ENFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Spell:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.SpellFile).AddChar(1) //spacer                          .AddString("ESF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ESFRecord { ID = 1' Name = "Test1"' Shout = "" }.SerializeToByteArray(nes))                          .AddBytes(new ESFRecord { ID = 2' Name = "eof"' Shout = "" }.SerializeToByteArray(nes));                      break;                  case InitFileType.Class:                      packetBuilder = packetBuilder                          .AddChar((byte) InitReply.ClassFile).AddChar(1) //spacer                          .AddString("ECF").AddInt(1) //RID                          .AddShort(2) //Len                          .AddByte(1) //filler byte                          .AddBytes(new ECFRecord { ID = 1' Name = "Test1" }.SerializeToByteArray(nes))                          .AddBytes(new ECFRecord { ID = 2' Name = "eof" }.SerializeToByteArray(nes));                      break;              }
