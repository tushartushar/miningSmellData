Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EOLib.IO.Extensions,EIFRecordExtensions,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Extensions\EIFRecordExtensions.cs,GetEquipLocation,Cyclomatic complexity of the method is 13
Long Parameter List,EOLib.IO.Actions,PubFileLoadActions,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Actions\PubFileLoadActions.cs,PubFileLoadActions,The method has 5 parameters.
Long Parameter List,EOLib.IO.Map,MapFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\MapFile.cs,MapFile,The method has 8 parameters.
Long Parameter List,EOLib.IO.Map,ChestSpawnMapEntity,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\ChestSpawnMapEntity.cs,ChestSpawnMapEntity,The method has 7 parameters.
Long Parameter List,EOLib.IO.Map,NPCSpawnMapEntity,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\NPCSpawnMapEntity.cs,NPCSpawnMapEntity,The method has 6 parameters.
Long Parameter List,EOLib.IO.Map,WarpMapEntity,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\WarpMapEntity.cs,WarpMapEntity,The method has 7 parameters.
Long Parameter List,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,MapFileSerializer,The method has 7 parameters.
Long Statement,EOLib.IO,IODependencyContainer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\IODependencyContainer.cs,RegisterDependencies,The length of the statement  "	container.RegisterType<INumberEncoderService' NumberEncoderService> ().RegisterType<IMapStringEncoderService' MapStringEncoderService> ().RegisterType<IMapFileLoadService' MapFileLoadService> (); " is 195.
Long Statement,EOLib.IO,IODependencyContainer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\IODependencyContainer.cs,RegisterDependencies,The length of the statement  "	container.RegisterType<IPubLoadService<EIFRecord>' ItemFileLoadService> ().RegisterType<IPubLoadService<ENFRecord>' NPCFileLoadService> ().RegisterType<IPubLoadService<ESFRecord>' SpellFileLoadService> ().RegisterType<IPubLoadService<ECFRecord>' ClassFileLoadService> ().RegisterType<IPubFileSaveService' PubFileSaveService> ().RegisterType<IMapFileSaveService' MapFileSaveService> (); " is 385.
Long Statement,EOLib.IO,IODependencyContainer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\IODependencyContainer.cs,RegisterDependencies,The length of the statement  "	container.RegisterType<ISerializer<IMapFile>' MapFileSerializer> ().RegisterType<ISerializer<IMapFileProperties>' MapPropertiesSerializer> ().RegisterType<ISerializer<ChestSpawnMapEntity>' ChestSpawnMapEntitySerializer> ().RegisterType<ISerializer<NPCSpawnMapEntity>' NPCSpawnMapEntitySerializer> ().RegisterType<ISerializer<WarpMapEntity>' WarpMapEntitySerializer> ().RegisterType<ISerializer<SignMapEntity>' SignMapEntitySerializer> ().RegisterType<ISerializer<UnknownMapEntity>' UnknownMapEntitySerializer> (); " is 513.
Long Statement,EOLib.IO,IODependencyContainer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\IODependencyContainer.cs,RegisterDependencies,The length of the statement  "	container.RegisterInstance<IPubFileRepository' PubFileRepository> ().RegisterInstance<IPubFileProvider' PubFileRepository> ().RegisterInstance<IEIFFileRepository' PubFileRepository> ().RegisterInstance<IEIFFileProvider' PubFileRepository> ().RegisterInstance<IENFFileRepository' PubFileRepository> ().RegisterInstance<IENFFileProvider' PubFileRepository> ().RegisterInstance<IESFFileRepository' PubFileRepository> ().RegisterInstance<IESFFileProvider' PubFileRepository> ().RegisterInstance<IECFFileRepository' PubFileRepository> ().RegisterInstance<IECFFileProvider' PubFileRepository> ().RegisterInstance<IMapFileRepository' MapFileRepository> ().RegisterInstance<IMapFileProvider' MapFileRepository> (); " is 706.
Long Statement,EOLib.IO,IODependencyContainer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\IODependencyContainer.cs,RegisterDependencies,The length of the statement  "	container.RegisterType<IPubFileLoadActions' PubFileLoadActions> ().RegisterType<IMapFileLoadActions' MapFileLoadActions> (); " is 124.
Long Statement,EOLib.IO.Map,MapFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\MapFile.cs,MakeCopy,The length of the statement  "	return new MapFile (source.Properties' source._mutableTiles' source._mutableWarps' source._mutableGFX' source._mutableNPCSpawns' source._mutableUnknowns' source._mutableChestSpawns' source._mutableSigns); " is 204.
Long Statement,EOLib.IO.Map,WarpMapEntity,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\WarpMapEntity.cs,MakeCopy,The length of the statement  "	return new WarpMapEntity (src.X' src.Y' src.DestinationMapID' src.DestinationMapX' src.DestinationMapY' src.LevelRequirement' src.DoorType); " is 140.
Long Statement,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The length of the statement  "	return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11])); " is 519.
Long Statement,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,DeserializeFromByteArray,The length of the statement  "		return new MapFile ().WithMapProperties (properties).WithNPCSpawns (npcSpawns).WithUnknowns (unknowns).WithChests (mapChests).WithTiles (tileSpecs).WithWarps (warpTiles).WithGFX (gfxLayers).WithSigns (mapSigns); " is 211.
Long Statement,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The length of the statement  "	properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45])); " is 1046.
Long Statement,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The length of the statement  "	return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7])); " is 426.
Long Statement,EOLib.IO.Services.Serializers,SignMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\SignMapEntitySerializer.cs,DeserializeFromByteArray,The length of the statement  "	var sign = new SignMapEntity ().WithX (numberEncoderService.DecodeNumber (data [0])).WithY (numberEncoderService.DecodeNumber (data [1])); " is 138.
Long Statement,EOLib.IO.Services.Serializers,SignMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\SignMapEntitySerializer.cs,DeserializeFromByteArray,The length of the statement  "	sign = sign.WithTitle (titleAndMessage.Substring (0' titleLength)).WithMessage (titleAndMessage.Substring (titleLength)); " is 121.
Long Statement,EOLib.IO.Services.Serializers,UnknownMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\UnknownMapEntitySerializer.cs,DeserializeFromByteArray,The length of the statement  "	return new UnknownMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithRawData (data); " is 158.
Long Statement,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The length of the statement  "	return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7])); " is 472.
Long Statement,EOLib.IO.Services,MapFileSaveService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\MapFileSaveService.cs,SaveFileToDefaultDirectory,The length of the statement  "	File.WriteAllBytes (string.Format (MapFile.MapFileFormatString' mapFile.Properties.MapID)' _mapFileSerializer.SerializeToByteArray (mapFile)); " is 142.
Magic Number,EOLib.IO.Map,MapFileProperties,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Map\MapFileProperties.cs,MapFileProperties,The following statement contains a magic number: Checksum = new byte[4];  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber ((short)mapEntity.Key' 2));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber (mapEntity.ItemID' 2));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber (mapEntity.RespawnTime' 2));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber (mapEntity.Amount' 3));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,ChestSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\ChestSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new ChestSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithKey ((ChestKey)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSlot ((byte)_numberEncoderService.DecodeNumber (data [4])).WithItemID ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [7]' data [8])).WithAmount (_numberEncoderService.DecodeNumber (data [9]' data [10]' data [11]));  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,GetVariableSignLength,The following statement contains a magic number: ms.Seek (2' SeekOrigin.Current);  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,GetVariableSignLength,The following statement contains a magic number: ms.Read (messageLengthRaw' 0' 2);  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,GetVariableSignLength,The following statement contains a magic number: ms.Seek (-4' SeekOrigin.Current);  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,WriteGFXLayers,The following statement contains a magic number: foreach (var layer in mapFile.GFX.Keys) {  	var gfxRowsForLayer = mapFile.GFX [layer].Select ((row' i) => new {  		EntityItems = row'  		Y = i  	}).Where (rowList => rowList.EntityItems.Any (item => item != DEFAULT_GFX)).ToList ();  	ret.AddRange (_numberEncoderService.EncodeNumber (gfxRowsForLayer.Count' 1));  	foreach (var row in gfxRowsForLayer) {  		var entityItems = row.EntityItems.Select ((item' i) => new {  			Value = item'  			X = i  		}).Where (item => item.Value != DEFAULT_GFX).ToList ();  		ret.AddRange (_numberEncoderService.EncodeNumber (row.Y' 1));  		ret.AddRange (_numberEncoderService.EncodeNumber (entityItems.Count' 1));  		foreach (var item in entityItems) {  			ret.AddRange (_numberEncoderService.EncodeNumber (item.X' 1));  			ret.AddRange (_numberEncoderService.EncodeNumber (item.Value' 2));  		}  	}  }  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,WriteGFXLayers,The following statement contains a magic number: foreach (var row in gfxRowsForLayer) {  	var entityItems = row.EntityItems.Select ((item' i) => new {  		Value = item'  		X = i  	}).Where (item => item.Value != DEFAULT_GFX).ToList ();  	ret.AddRange (_numberEncoderService.EncodeNumber (row.Y' 1));  	ret.AddRange (_numberEncoderService.EncodeNumber (entityItems.Count' 1));  	foreach (var item in entityItems) {  		ret.AddRange (_numberEncoderService.EncodeNumber (item.X' 1));  		ret.AddRange (_numberEncoderService.EncodeNumber (item.Value' 2));  	}  }  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,WriteGFXLayers,The following statement contains a magic number: foreach (var item in entityItems) {  	ret.AddRange (_numberEncoderService.EncodeNumber (item.X' 1));  	ret.AddRange (_numberEncoderService.EncodeNumber (item.Value' 2));  }  
Magic Number,EOLib.IO.Services.Serializers,MapFileSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapFileSerializer.cs,WriteGFXLayers,The following statement contains a magic number: ret.AddRange (_numberEncoderService.EncodeNumber (item.Value' 2));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,SerializeToByteArray,The following statement contains a magic number: ret.AddRange (_numberEncoderService.EncodeNumber (mapEntity.PKAvailable ? 3 : 0' 1));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,SerializeToByteArray,The following statement contains a magic number: ret.AddRange (_numberEncoderService.EncodeNumber (mapEntity.AmbientNoise' 2));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,SerializeToByteArray,The following statement contains a magic number: ret.AddRange (_numberEncoderService.EncodeNumber (mapEntity.FillTile' 2));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,MapPropertiesSerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\MapPropertiesSerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: properties = properties.WithChecksum (checksumArray).WithName (mapName).WithPKAvailable (_numberEncoderService.DecodeNumber (data [31]) == 3 || (mapNameArray [0] == 0xFF && mapNameArray [1] == 0x01)).WithEffect ((MapEffect)_numberEncoderService.DecodeNumber (data [32])).WithMusic ((byte)_numberEncoderService.DecodeNumber (data [33])).WithMusicExtra ((byte)_numberEncoderService.DecodeNumber (data [34])).WithAmbientNoise ((short)_numberEncoderService.DecodeNumber (data [35]' data [36])).WithWidth ((byte)_numberEncoderService.DecodeNumber (data [37])).WithHeight ((byte)_numberEncoderService.DecodeNumber (data [38])).WithFillTile ((short)_numberEncoderService.DecodeNumber (data [39]' data [40])).WithMapAvailable (_numberEncoderService.DecodeNumber (data [41]) == 1).WithScrollAvailable (_numberEncoderService.DecodeNumber (data [42]) == 1).WithRelogX ((byte)_numberEncoderService.DecodeNumber (data [43])).WithRelogY ((byte)_numberEncoderService.DecodeNumber (data [44])).WithUnknown2 ((byte)_numberEncoderService.DecodeNumber (data [45]));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber (mapEntity.ID' 2));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber (mapEntity.RespawnTime' 2));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7]));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7]));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7]));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7]));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7]));  
Magic Number,EOLib.IO.Services.Serializers,NPCSpawnMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\NPCSpawnMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new NPCSpawnMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithY (_numberEncoderService.DecodeNumber (data [1])).WithID ((short)_numberEncoderService.DecodeNumber (data [2]' data [3])).WithSpawnType ((byte)_numberEncoderService.DecodeNumber (data [4])).WithRespawnTime ((short)_numberEncoderService.DecodeNumber (data [5]' data [6])).WithAmount ((byte)_numberEncoderService.DecodeNumber (data [7]));  
Magic Number,EOLib.IO.Services.Serializers,SignMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\SignMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (numberEncoderService.EncodeNumber (mapEntity.Title.Length + mapEntity.Message.Length + 1' 2));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber (mapEntity.DestinationMapID' 2));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,SerializeToByteArray,The following statement contains a magic number: retBytes.AddRange (_numberEncoderService.EncodeNumber ((short)mapEntity.DoorType' 2));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7]));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7]));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7]));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7]));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7]));  
Magic Number,EOLib.IO.Services.Serializers,WarpMapEntitySerializer,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\Serializers\WarpMapEntitySerializer.cs,DeserializeFromByteArray,The following statement contains a magic number: return new WarpMapEntity ().WithX (_numberEncoderService.DecodeNumber (data [0])).WithDestinationMapID ((short)_numberEncoderService.DecodeNumber (data [1]' data [2])).WithDestinationMapX ((byte)_numberEncoderService.DecodeNumber (data [3])).WithDestinationMapY ((byte)_numberEncoderService.DecodeNumber (data [4])).WithLevelRequirement ((byte)_numberEncoderService.DecodeNumber (data [5])).WithDoorType ((DoorSpec)_numberEncoderService.DecodeNumber (data [6]' data [7]));  
Magic Number,EOLib.IO.Pub,ECFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Seek (3' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ECFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (checksum' 0' 4);  
Magic Number,EOLib.IO.Pub,ECFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (lenBytes' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("Class"))  	name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("Class"))  	name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (6);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Class"))  	name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.WriteByte (numberEncoderService.EncodeNumber (Base' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Type' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Str' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Int' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Wis' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Agi' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Con' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Cha' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Str = (short)numberEncoderService.DecodeNumber (recordBytes [2]' recordBytes [3]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Str = (short)numberEncoderService.DecodeNumber (recordBytes [2]' recordBytes [3]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Int = (short)numberEncoderService.DecodeNumber (recordBytes [4]' recordBytes [5]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Int = (short)numberEncoderService.DecodeNumber (recordBytes [4]' recordBytes [5]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Wis = (short)numberEncoderService.DecodeNumber (recordBytes [6]' recordBytes [7]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Wis = (short)numberEncoderService.DecodeNumber (recordBytes [6]' recordBytes [7]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Agi = (short)numberEncoderService.DecodeNumber (recordBytes [8]' recordBytes [9]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Agi = (short)numberEncoderService.DecodeNumber (recordBytes [8]' recordBytes [9]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Con = (short)numberEncoderService.DecodeNumber (recordBytes [10]' recordBytes [11]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Con = (short)numberEncoderService.DecodeNumber (recordBytes [10]' recordBytes [11]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Cha = (short)numberEncoderService.DecodeNumber (recordBytes [12]' recordBytes [13]);  
Magic Number,EOLib.IO.Pub,ECFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ECFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Cha = (short)numberEncoderService.DecodeNumber (recordBytes [12]' recordBytes [13]);  
Magic Number,EOLib.IO.Pub,EIFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Seek (3' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,EIFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (checksum' 0' 4);  
Magic Number,EOLib.IO.Pub,EIFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (lenBytes' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Seek (3' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ENFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (checksum' 0' 4);  
Magic Number,EOLib.IO.Pub,ENFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (lenBytes' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("NPC"))  	name = name.Substring (3);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("NPC"))  	name = name.Substring (3);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (6);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("NPC"))  	name = name.Substring (3);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (3);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Seek (4 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  	mem.Seek (17 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (37 + Name.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (4 + Name.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Boss' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Child' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber ((short)Type' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (VendorID' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (HP' 3)' 0' 3);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (17 + Name.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (37 + Name.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Exp' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Boss = (short)numberEncoderService.DecodeNumber (recordBytes [3]' recordBytes [4]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Boss = (short)numberEncoderService.DecodeNumber (recordBytes [3]' recordBytes [4]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Child = (short)numberEncoderService.DecodeNumber (recordBytes [5]' recordBytes [6]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Child = (short)numberEncoderService.DecodeNumber (recordBytes [5]' recordBytes [6]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Type = (NPCType)numberEncoderService.DecodeNumber (recordBytes [7]' recordBytes [8]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Type = (NPCType)numberEncoderService.DecodeNumber (recordBytes [7]' recordBytes [8]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: VendorID = (short)numberEncoderService.DecodeNumber (recordBytes [9]' recordBytes [10]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: VendorID = (short)numberEncoderService.DecodeNumber (recordBytes [9]' recordBytes [10]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = numberEncoderService.DecodeNumber (recordBytes [11]' recordBytes [12]' recordBytes [13]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = numberEncoderService.DecodeNumber (recordBytes [11]' recordBytes [12]' recordBytes [13]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = numberEncoderService.DecodeNumber (recordBytes [11]' recordBytes [12]' recordBytes [13]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MinDam = (short)numberEncoderService.DecodeNumber (recordBytes [16]' recordBytes [17]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MinDam = (short)numberEncoderService.DecodeNumber (recordBytes [16]' recordBytes [17]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MaxDam = (short)numberEncoderService.DecodeNumber (recordBytes [18]' recordBytes [19]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MaxDam = (short)numberEncoderService.DecodeNumber (recordBytes [18]' recordBytes [19]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Accuracy = (short)numberEncoderService.DecodeNumber (recordBytes [20]' recordBytes [21]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Accuracy = (short)numberEncoderService.DecodeNumber (recordBytes [20]' recordBytes [21]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Evade = (short)numberEncoderService.DecodeNumber (recordBytes [22]' recordBytes [23]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Evade = (short)numberEncoderService.DecodeNumber (recordBytes [22]' recordBytes [23]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Armor = (short)numberEncoderService.DecodeNumber (recordBytes [24]' recordBytes [25]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Armor = (short)numberEncoderService.DecodeNumber (recordBytes [24]' recordBytes [25]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Exp = (ushort)numberEncoderService.DecodeNumber (recordBytes [36]' recordBytes [37]);  
Magic Number,EOLib.IO.Pub,ENFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ENFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Exp = (ushort)numberEncoderService.DecodeNumber (recordBytes [36]' recordBytes [37]);  
Magic Number,EOLib.IO.Pub,ESFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Seek (3' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ESFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (checksum' 0' 4);  
Magic Number,EOLib.IO.Pub,ESFFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFFile.cs,ReadFromStream,The following statement contains a magic number: mem.Read (lenBytes' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("Spell"))  	name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("Spell"))  	name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (6);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Spell"))  	name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (5);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Shout.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	var shout = Encoding.ASCII.GetBytes (Shout);  	mem.Write (name' 0' name.Length);  	mem.Write (shout' 0' shout.Length);  	mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (CastTime' 1) [0]);  	mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)TargetRestrict' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Target' 1) [0]);  	mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  }  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Icon' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (SP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (13 + Name.Length + Shout.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (19 + Name.Length + Shout.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (25 + Name.Length + Shout.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (36 + Name.Length + Shout.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Graphic = (short)numberEncoderService.DecodeNumber (recordBytes [2]' recordBytes [3]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Graphic = (short)numberEncoderService.DecodeNumber (recordBytes [2]' recordBytes [3]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: TP = (short)numberEncoderService.DecodeNumber (recordBytes [4]' recordBytes [5]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: TP = (short)numberEncoderService.DecodeNumber (recordBytes [4]' recordBytes [5]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: SP = (short)numberEncoderService.DecodeNumber (recordBytes [6]' recordBytes [7]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: SP = (short)numberEncoderService.DecodeNumber (recordBytes [6]' recordBytes [7]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: CastTime = (byte)numberEncoderService.DecodeNumber (recordBytes [8]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Type = (SpellType)numberEncoderService.DecodeNumber (recordBytes [11]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: TargetRestrict = (SpellTargetRestrict)numberEncoderService.DecodeNumber (recordBytes [17]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Target = (SpellTarget)numberEncoderService.DecodeNumber (recordBytes [18]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MinDam = (short)numberEncoderService.DecodeNumber (recordBytes [23]' recordBytes [24]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MinDam = (short)numberEncoderService.DecodeNumber (recordBytes [23]' recordBytes [24]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MaxDam = (short)numberEncoderService.DecodeNumber (recordBytes [25]' recordBytes [26]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MaxDam = (short)numberEncoderService.DecodeNumber (recordBytes [25]' recordBytes [26]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Accuracy = (short)numberEncoderService.DecodeNumber (recordBytes [27]' recordBytes [28]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Accuracy = (short)numberEncoderService.DecodeNumber (recordBytes [27]' recordBytes [28]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = (short)numberEncoderService.DecodeNumber (recordBytes [34]' recordBytes [35]);  
Magic Number,EOLib.IO.Pub,ESFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\ESFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = (short)numberEncoderService.DecodeNumber (recordBytes [34]' recordBytes [35]);  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	mem.Write (Encoding.ASCII.GetBytes (FileType)' 0' 3);  	mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  	mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (1' 1) [0]);  	foreach (var dataRecord in _data) {  		var toWrite = dataRecord.SerializeToByteArray (numberEncoderService);  		mem.Write (toWrite' 0' toWrite.Length);  	}  	return mem.ToArray ();  }  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	mem.Write (Encoding.ASCII.GetBytes (FileType)' 0' 3);  	mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  	mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (1' 1) [0]);  	foreach (var dataRecord in _data) {  		var toWrite = dataRecord.SerializeToByteArray (numberEncoderService);  		mem.Write (toWrite' 0' toWrite.Length);  	}  	return mem.ToArray ();  }  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	mem.Write (Encoding.ASCII.GetBytes (FileType)' 0' 3);  	mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  	mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (1' 1) [0]);  	foreach (var dataRecord in _data) {  		var toWrite = dataRecord.SerializeToByteArray (numberEncoderService);  		mem.Write (toWrite' 0' toWrite.Length);  	}  	return mem.ToArray ();  }  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	mem.Write (Encoding.ASCII.GetBytes (FileType)' 0' 3);  	mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  	mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (1' 1) [0]);  	foreach (var dataRecord in _data) {  		var toWrite = dataRecord.SerializeToByteArray (numberEncoderService);  		mem.Write (toWrite' 0' toWrite.Length);  	}  	return mem.ToArray ();  }  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream ()) {  	mem.Write (Encoding.ASCII.GetBytes (FileType)' 0' 3);  	mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  	mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber (1' 1) [0]);  	foreach (var dataRecord in _data) {  		var toWrite = dataRecord.SerializeToByteArray (numberEncoderService);  		mem.Write (toWrite' 0' toWrite.Length);  	}  	return mem.ToArray ();  }  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (Encoding.ASCII.GetBytes (FileType)' 0' 3);  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (CheckSum' 4)' 0' 4);  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,BasePubFile,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\BasePubFile.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Length' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("Item"))  	name = name.Substring (4);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Global"))  	name = name.Substring (6);  else if (name.StartsWith ("Item"))  	name = name.Substring (4);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (6);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,Get,The following statement contains a magic number: if (name.StartsWith ("Item"))  	name = name.Substring (4);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,Get,The following statement contains a magic number: name = name.Substring (4);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: using (var mem = new MemoryStream (ret)) {  	mem.WriteByte (numberEncoderService.EncodeNumber (Name.Length' 1) [0]);  	var name = Encoding.ASCII.GetBytes (Name);  	mem.Write (name' 0' name.Length);  	mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Type' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)SubType' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Special' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  	mem.Seek (21 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Str' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Int' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Wis' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Agi' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Con' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Cha' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Light' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Dark' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Earth' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Air' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Water' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (Fire' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollX' 1) [0]);  	mem.WriteByte (numberEncoderService.EncodeNumber (ScrollY' 1) [0]);  	mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  	mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  	mem.Seek (56 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber (Weight' 1) [0]);  	mem.Seek (58 + Name.Length' SeekOrigin.Begin);  	mem.WriteByte (numberEncoderService.EncodeNumber ((byte)Size' 1) [0]);  }  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Graphic' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (HP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (TP' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MinDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (MaxDam' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Accuracy' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Evade' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (Armor' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (21 + Name.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ScrollMap' 3)' 0' 3);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (LevelReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ClassReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (StrReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (IntReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (WisReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (AgiReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ConReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Write (numberEncoderService.EncodeNumber (ChaReq' 2)' 0' 2);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (56 + Name.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,SerializeToByteArray,The following statement contains a magic number: mem.Seek (58 + Name.Length' SeekOrigin.Begin);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Type = (ItemType)numberEncoderService.DecodeNumber (recordBytes [2]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: SubType = (ItemSubType)numberEncoderService.DecodeNumber (recordBytes [3]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Special = (ItemSpecial)numberEncoderService.DecodeNumber (recordBytes [4]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = (short)numberEncoderService.DecodeNumber (recordBytes [5]' recordBytes [6]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: HP = (short)numberEncoderService.DecodeNumber (recordBytes [5]' recordBytes [6]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: TP = (short)numberEncoderService.DecodeNumber (recordBytes [7]' recordBytes [8]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: TP = (short)numberEncoderService.DecodeNumber (recordBytes [7]' recordBytes [8]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MinDam = (short)numberEncoderService.DecodeNumber (recordBytes [9]' recordBytes [10]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MinDam = (short)numberEncoderService.DecodeNumber (recordBytes [9]' recordBytes [10]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MaxDam = (short)numberEncoderService.DecodeNumber (recordBytes [11]' recordBytes [12]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: MaxDam = (short)numberEncoderService.DecodeNumber (recordBytes [11]' recordBytes [12]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Accuracy = (short)numberEncoderService.DecodeNumber (recordBytes [13]' recordBytes [14]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Accuracy = (short)numberEncoderService.DecodeNumber (recordBytes [13]' recordBytes [14]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Evade = (short)numberEncoderService.DecodeNumber (recordBytes [15]' recordBytes [16]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Evade = (short)numberEncoderService.DecodeNumber (recordBytes [15]' recordBytes [16]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Armor = (short)numberEncoderService.DecodeNumber (recordBytes [17]' recordBytes [18]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Armor = (short)numberEncoderService.DecodeNumber (recordBytes [17]' recordBytes [18]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Str = (byte)numberEncoderService.DecodeNumber (recordBytes [20]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Int = (byte)numberEncoderService.DecodeNumber (recordBytes [21]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Wis = (byte)numberEncoderService.DecodeNumber (recordBytes [22]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Agi = (byte)numberEncoderService.DecodeNumber (recordBytes [23]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Con = (byte)numberEncoderService.DecodeNumber (recordBytes [24]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Cha = (byte)numberEncoderService.DecodeNumber (recordBytes [25]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Light = (byte)numberEncoderService.DecodeNumber (recordBytes [26]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Dark = (byte)numberEncoderService.DecodeNumber (recordBytes [27]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Earth = (byte)numberEncoderService.DecodeNumber (recordBytes [28]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Air = (byte)numberEncoderService.DecodeNumber (recordBytes [29]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Water = (byte)numberEncoderService.DecodeNumber (recordBytes [30]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Fire = (byte)numberEncoderService.DecodeNumber (recordBytes [31]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ScrollMap = numberEncoderService.DecodeNumber (recordBytes [32]' recordBytes [33]' recordBytes [34]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ScrollMap = numberEncoderService.DecodeNumber (recordBytes [32]' recordBytes [33]' recordBytes [34]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ScrollMap = numberEncoderService.DecodeNumber (recordBytes [32]' recordBytes [33]' recordBytes [34]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ScrollX = (byte)numberEncoderService.DecodeNumber (recordBytes [35]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ScrollY = (byte)numberEncoderService.DecodeNumber (recordBytes [36]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: LevelReq = (short)numberEncoderService.DecodeNumber (recordBytes [37]' recordBytes [38]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: LevelReq = (short)numberEncoderService.DecodeNumber (recordBytes [37]' recordBytes [38]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ClassReq = (short)numberEncoderService.DecodeNumber (recordBytes [39]' recordBytes [40]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ClassReq = (short)numberEncoderService.DecodeNumber (recordBytes [39]' recordBytes [40]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: StrReq = (short)numberEncoderService.DecodeNumber (recordBytes [41]' recordBytes [42]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: StrReq = (short)numberEncoderService.DecodeNumber (recordBytes [41]' recordBytes [42]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: IntReq = (short)numberEncoderService.DecodeNumber (recordBytes [43]' recordBytes [44]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: IntReq = (short)numberEncoderService.DecodeNumber (recordBytes [43]' recordBytes [44]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: WisReq = (short)numberEncoderService.DecodeNumber (recordBytes [45]' recordBytes [46]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: WisReq = (short)numberEncoderService.DecodeNumber (recordBytes [45]' recordBytes [46]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: AgiReq = (short)numberEncoderService.DecodeNumber (recordBytes [47]' recordBytes [48]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: AgiReq = (short)numberEncoderService.DecodeNumber (recordBytes [47]' recordBytes [48]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ConReq = (short)numberEncoderService.DecodeNumber (recordBytes [49]' recordBytes [50]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ConReq = (short)numberEncoderService.DecodeNumber (recordBytes [49]' recordBytes [50]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ChaReq = (short)numberEncoderService.DecodeNumber (recordBytes [51]' recordBytes [52]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: ChaReq = (short)numberEncoderService.DecodeNumber (recordBytes [51]' recordBytes [52]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Weight = (byte)numberEncoderService.DecodeNumber (recordBytes [55]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: Size = (ItemSize)numberEncoderService.DecodeNumber (recordBytes [57]);  
Magic Number,EOLib.IO.Pub,EIFRecord,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Pub\EIFRecord.cs,DeserializeFromByteArray,The following statement contains a magic number: if (ID == 365 && Name == "Gun")  	SubType = ItemSubType.Ranged;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,EncodeNumber,The following statement contains a magic number: if (original >= NumericConstants.THREE_BYTE_MAX) {  	numArray [3] = unsigned / NumericConstants.THREE_BYTE_MAX + 1;  	unsigned = unsigned % NumericConstants.THREE_BYTE_MAX;  }  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,EncodeNumber,The following statement contains a magic number: numArray [3] = unsigned / NumericConstants.THREE_BYTE_MAX + 1;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,EncodeNumber,The following statement contains a magic number: if (original >= NumericConstants.TWO_BYTE_MAX) {  	numArray [2] = unsigned / NumericConstants.TWO_BYTE_MAX + 1;  	unsigned = unsigned % NumericConstants.TWO_BYTE_MAX;  }  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,EncodeNumber,The following statement contains a magic number: numArray [2] = unsigned / NumericConstants.TWO_BYTE_MAX + 1;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: for (int index = 0; index < b.Length; ++index) {  	if (b [index] == 254)  		b [index] = 1;  	else if (b [index] == 0)  		b [index] = 128;  	--b [index];  }  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: for (int index = 0; index < b.Length; ++index) {  	if (b [index] == 254)  		b [index] = 1;  	else if (b [index] == 0)  		b [index] = 128;  	--b [index];  }  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b [index] == 254)  	b [index] = 1;  else if (b [index] == 0)  	b [index] = 128;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b [index] == 254)  	b [index] = 1;  else if (b [index] == 0)  	b [index] = 128;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b [index] == 0)  	b [index] = 128;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: b [index] = 128;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b.Length > 3)  	retNum += b [3] * NumericConstants.THREE_BYTE_MAX;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b.Length > 3)  	retNum += b [3] * NumericConstants.THREE_BYTE_MAX;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: retNum += b [3] * NumericConstants.THREE_BYTE_MAX;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b.Length > 2)  	retNum += b [2] * NumericConstants.TWO_BYTE_MAX;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: if (b.Length > 2)  	retNum += b [2] * NumericConstants.TWO_BYTE_MAX;  
Magic Number,EOLib.IO.Services,NumberEncoderService,F:\newReposMay17\ethanmoffat_EndlessClient\EOLib.IO\Services\NumberEncoderService.cs,DecodeNumber,The following statement contains a magic number: retNum += b [2] * NumericConstants.TWO_BYTE_MAX;  
