Implementation smell,Namespace,Class,File,Method,Description
Long Method,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The method has 65 lines of code.
Long Method,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,StaticEquals,The method has 62 lines of code.
Long Method,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The method has 69 lines of code.
Long Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The method has 62 lines of code.
Long Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Sort,The method has 82 lines of code.
Long Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,mergeRuns,The method has 62 lines of code.
Long Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The method has 153 lines of code.
Long Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,mergeRuns,The method has 62 lines of code.
Long Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,addIterative,The method has 152 lines of code.
Long Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The method has 216 lines of code.
Long Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,addIterative,The method has 148 lines of code.
Long Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The method has 216 lines of code.
Complex Method,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,fixViewsBeforeRemove,Cyclomatic complexity of the method is 7
Complex Method,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,Cyclomatic complexity of the method is 13
Complex Method,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,Check,Cyclomatic complexity of the method is 12
Complex Method,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,Dispose,Cyclomatic complexity of the method is 7
Complex Method,C5,CircularQueue,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\CircularQueue.cs,GetEnumerator,Cyclomatic complexity of the method is 12
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,fixViewsBeforeRemove,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,Cyclomatic complexity of the method is 13
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,RetainAll,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,Check,Cyclomatic complexity of the method is 16
Complex Method,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,Dispose,Cyclomatic complexity of the method is 7
Complex Method,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,Cyclomatic complexity of the method is 13
Complex Method,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,AddSorted,Cyclomatic complexity of the method is 7
Complex Method,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,Cyclomatic complexity of the method is 9
Complex Method,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,Cyclomatic complexity of the method is 9
Complex Method,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,AddAll,Cyclomatic complexity of the method is 10
Complex Method,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,StaticEquals,Cyclomatic complexity of the method is 18
Complex Method,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,Cyclomatic complexity of the method is 15
Complex Method,C5,HashBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashBag.cs,RetainAll,Cyclomatic complexity of the method is 12
Complex Method,C5,HashBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashBag.cs,AddAll,Cyclomatic complexity of the method is 7
Complex Method,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,searchoradd,Cyclomatic complexity of the method is 11
Complex Method,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,RetainAll,Cyclomatic complexity of the method is 10
Complex Method,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,AddAll,Cyclomatic complexity of the method is 8
Complex Method,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,Check,Cyclomatic complexity of the method is 9
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,Cyclomatic complexity of the method is 9
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,Cyclomatic complexity of the method is 9
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,Cyclomatic complexity of the method is 7
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,AddAll,Cyclomatic complexity of the method is 7
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,Cyclomatic complexity of the method is 12
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,Cyclomatic complexity of the method is 9
Complex Method,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,get,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,fixViewsAfterInsert,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,fixViewsBeforeSingleRemove,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,disposeOverlappingViews,Cyclomatic complexity of the method is 13
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,removefromtaggroup,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Dispose,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Reverse,Cyclomatic complexity of the method is 17
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Sort,Cyclomatic complexity of the method is 16
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,mergeRuns,Cyclomatic complexity of the method is 10
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,clear,Cyclomatic complexity of the method is 7
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,Cyclomatic complexity of the method is 9
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,Cyclomatic complexity of the method is 12
Complex Method,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,Cyclomatic complexity of the method is 37
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,get,Cyclomatic complexity of the method is 7
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,fixViewsAfterInsert,Cyclomatic complexity of the method is 8
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,fixViewsBeforeSingleRemove,Cyclomatic complexity of the method is 8
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,fixViewsBeforeRemove,Cyclomatic complexity of the method is 9
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,disposeOverlappingViews,Cyclomatic complexity of the method is 13
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Dispose,Cyclomatic complexity of the method is 7
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Reverse,Cyclomatic complexity of the method is 17
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Sort,Cyclomatic complexity of the method is 8
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,mergeRuns,Cyclomatic complexity of the method is 10
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,Cyclomatic complexity of the method is 12
Complex Method,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Check,Cyclomatic complexity of the method is 12
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,getEnumerator,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,addIterative,Cyclomatic complexity of the method is 18
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,AddAll,Cyclomatic complexity of the method is 10
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,addSorted,Cyclomatic complexity of the method is 13
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,Cyclomatic complexity of the method is 26
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,RetainAll,Cyclomatic complexity of the method is 16
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,FindAll,Cyclomatic complexity of the method is 8
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,Map,Cyclomatic complexity of the method is 8
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeAt,Cyclomatic complexity of the method is 9
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,RemoveInterval,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,TryPredecessor,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,TrySuccessor,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,Cut,Cyclomatic complexity of the method is 17
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,addIterative,Cyclomatic complexity of the method is 18
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,AddAll,Cyclomatic complexity of the method is 10
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,addSorted,Cyclomatic complexity of the method is 13
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeIterativePhase2,Cyclomatic complexity of the method is 26
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,RetainAll,Cyclomatic complexity of the method is 15
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeAt,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,RemoveInterval,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,TryPredecessor,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,TrySuccessor,Cyclomatic complexity of the method is 7
Complex Method,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,Cut,Cyclomatic complexity of the method is 17
Complex Method,Burrow.Extras,RabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\RabbitSetup.cs,CreateRoute,Cyclomatic complexity of the method is 7
Complex Method,Burrow.Extras,RabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\RabbitSetup.cs,DestroyRoute,Cyclomatic complexity of the method is 7
Complex Method,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,Publish,Cyclomatic complexity of the method is 7
Long Parameter List,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,SortedDictionaryBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Dictionaries.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,EventBlock,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Events.cs,raiseCollectionCleared,The method has 4 parameters.
Long Parameter List,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,Show,The method has 4 parameters.
Long Parameter List,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The method has 4 parameters.
Long Parameter List,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The method has 4 parameters.
Long Parameter List,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,searchoradd,The method has 4 parameters.
Long Parameter List,C5,ISorted,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Interfaces.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,ISortedDictionary,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Interfaces.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,getPair,The method has 6 parameters.
Long Parameter List,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,fixViewsAfterInsert,The method has 4 parameters.
Long Parameter List,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,gettaggroup,The method has 4 parameters.
Long Parameter List,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,raiseForInsertAll,The method has 4 parameters.
Long Parameter List,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,mirrorViewSentinelsForReverse,The method has 6 parameters.
Long Parameter List,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,getPair,The method has 6 parameters.
Long Parameter List,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,fixViewsAfterInsert,The method has 4 parameters.
Long Parameter List,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,fixViewsBeforeRemove,The method has 4 parameters.
Long Parameter List,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,raiseForInsertAll,The method has 4 parameters.
Long Parameter List,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,mirrorViewSentinelsForReverse,The method has 6 parameters.
Long Parameter List,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Rec,The method has 4 parameters.
Long Parameter List,C5,Sorting,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Sorting.cs,IntroSort,The method has 4 parameters.
Long Parameter List,C5,Sorting,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Sorting.cs,InsertionSort,The method has 4 parameters.
Long Parameter List,C5,Sorting,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Sorting.cs,HeapSort,The method has 4 parameters.
Long Parameter List,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,addIterative,The method has 4 parameters.
Long Parameter List,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,maketreer,The method has 4 parameters.
Long Parameter List,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,rbminicheck,The method has 5 parameters.
Long Parameter List,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,rbminisnapcheck,The method has 4 parameters.
Long Parameter List,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,addIterative,The method has 4 parameters.
Long Parameter List,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,maketreer,The method has 4 parameters.
Long Parameter List,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,rbminicheck,The method has 5 parameters.
Long Parameter List,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,rbminisnapcheck,The method has 4 parameters.
Long Parameter List,C5,GuardedSorted,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Wrappers.cs,Cut,The method has 5 parameters.
Long Parameter List,C5,GuardedSortedDictionary,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Wrappers.cs,Cut,The method has 5 parameters.
Long Parameter List,Burrow.Extras,ITunnelWithPrioritySupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\ITunnelWithPrioritySupport.cs,Subscribe,The method has 4 parameters.
Long Parameter List,Burrow.Extras,ITunnelWithPrioritySupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\ITunnelWithPrioritySupport.cs,Subscribe,The method has 4 parameters.
Long Parameter List,Burrow.Extras,ITunnelWithPrioritySupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\ITunnelWithPrioritySupport.cs,SubscribeAsync,The method has 5 parameters.
Long Parameter List,Burrow.Extras,ITunnelWithPrioritySupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\ITunnelWithPrioritySupport.cs,SubscribeAsync,The method has 5 parameters.
Long Parameter List,Burrow.Extras,DependencyInjectionTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\DependencyInjectionTunnelFactory.cs,Create,The method has 6 parameters.
Long Parameter List,Burrow.Extras,PriorityQueuesRabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\PriorityQueuesRabbitSetup.cs,BindQueue,The method has 6 parameters.
Long Parameter List,Burrow.Extras,RabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\RabbitSetup.cs,BindQueue,The method has 6 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityMessageHandler,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityMessageHandler.cs,PriorityMessageHandler,The method has 5 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityConsumerManager,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityConsumerManager.cs,CreateConsumer,The method has 4 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityConsumerManager,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityConsumerManager.cs,CreateAsyncConsumer,The method has 4 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityBurrowConsumer,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityBurrowConsumer.cs,PriorityBurrowConsumer,The method has 5 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityBurrowConsumer,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityBurrowConsumer.cs,HandleBasicDeliver,The method has 7 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityBurrowConsumer,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityBurrowConsumer.cs,Init,The method has 4 parameters.
Long Parameter List,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,RabbitTunnelWithPriorityQueuesSupport,The method has 7 parameters.
Long Parameter List,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,Subscribe,The method has 4 parameters.
Long Parameter List,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,Subscribe,The method has 4 parameters.
Long Parameter List,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,SubscribeAsync,The method has 5 parameters.
Long Parameter List,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,SubscribeAsync,The method has 5 parameters.
Long Parameter List,Burrow.Extras.Internal,PriorityTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityTunnelFactory.cs,Create,The method has 6 parameters.
Long Statement,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,Check,The length of the statement  "					Logger.Log (string.Format ("View from {0} of length has different base array than the underlying list"' v.offset' v.size)); " is 123.
Long Statement,C5,CircularQueue,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\CircularQueue.cs,Check,The length of the statement  "	if (front < 0 || front >= array.Length || back < 0 || back >= array.Length || (front <= back && size != back - front) || (front > back && size != array.Length + back - front)) { " is 177.
Long Statement,C5,CircularQueue,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\CircularQueue.cs,Check,The length of the statement  "		Logger.Log (string.Format ("Bad combination of (front'back'size'array.Length): ({0}'{1}'{2}'{3})"' front' back' size' array.Length)); " is 133.
Long Statement,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,Check,The length of the statement  "					Logger.Log (string.Format ("View from {0} of length has different base array than the underlying list"' v.offset' v.size)); " is 123.
Long Statement,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The length of the statement  "                          Logger.Log(string.Format("Code {5}' Pair ({1}'{2}) number {0} matched other pair ({3}'{4})"' set.Count' a[0]' a[1]' b[0]' b[1]' h));" is 132.
Long Statement,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,StaticEquals,The length of the statement  "		if ((stit = collection1 as ISorted<T>) != null && (stat = collection2 as ISorted<T>) != null && stit.Comparer == stat.Comparer) { " is 129.
Long Statement,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,StaticEquals,The length of the statement  "	if (!collection1.AllowsDuplicates && (collection2.AllowsDuplicates || collection2.ContainsSpeed >= collection1.ContainsSpeed)) { " is 128.
Long Statement,C5,SortedDictionaryBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Dictionaries.cs,Cut,The length of the statement  "	return sortedpairs.Cut (new KeyValuePairComparable (cutter)' out lowEntry' out lowIsValid' out highEntry' out highIsValid); " is 123.
Long Statement,C5,EqualityComparer,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Hashers.cs,CreateAndCache,The length of the statement  "	return _default = (SCG.IEqualityComparer<T>)(equalityComparertype.GetProperty ("Default"' BindingFlags.Static | BindingFlags.Public).GetValue (null' null)); " is 156.
Long Statement,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,Check,The length of the statement  "		Logger.Log (string.Format ("resizethreshhold != (int)(table.Length * fillfactor) ({0}' {1}' {2})"' resizethreshhold' table.Length' fillfactor)); " is 144.
Long Statement,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The length of the statement  "			Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size)); " is 135.
Long Statement,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The length of the statement  "			Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size)); " is 135.
Long Statement,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The length of the statement  "			Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size)); " is 139.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,viewPosition,The length of the statement  "	Node otherstartsentinel = otherView.startsentinel' otherendsentinel = otherView.endsentinel' first = startsentinel.next' last = endsentinel.prev' otherfirst = otherstartsentinel.next' otherlast = otherendsentinel.prev; " is 218.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Invalid view(hash {0}' offset {1}' size {2})"' view.GetHashCode ()' view.offset' view.size)); " is 121.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' Offset > underlying.size ({2})"' view.GetHashCode ()' view.offset' view.size' size)); " is 155.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' startsentinel {3} should be {4}"' view.GetHashCode ()' view.offset' view.size' view.startsentinel + " " + view.startsentinel.GetHashCode ()' nodes [view.Offset] + " " + nodes [view.Offset].GetHashCode ())); " is 276.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' end index > underlying.size ({3})"' view.GetHashCode ()' view.offset' view.size' size)); " is 158.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' endsentinel {3} should be {4}"' view.GetHashCode ()' view.offset' view.size' view.endsentinel + " " + view.endsentinel.GetHashCode ()' nodes [view.Offset + view.size + 1] + " " + nodes [view.Offset + view.size + 1].GetHashCode ())); " is 302.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' wrong views list {3} <> {4}"' view.GetHashCode ()' view.offset' view.size' view.views.GetHashCode ()' views.GetHashCode ())); " is 195.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' wrong underlying {3} <> this {4}"' view.GetHashCode ()' view.offset' view.size' view.underlying.GetHashCode ()' GetHashCode ())); " is 199.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "			//Logger.Log(string.Format("Bad view(hash {0}' offset {1}' size {2})' wrong stamp view:{2} underlying: {3}"' view.GetHashCode()'view.offset' view.size' view.stamp' stamp)); " is 172.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "				Logger.Log (string.Format ("node.prev.tag ({0}' {1}) >= node.tag ({2}' {3}) at index={4} item={5} "' node.prev.taggroup.tag' node.prev.tag' node.taggroup.tag' node.tag' count' node.item)); " is 188.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "					Logger.Log (string.Format ("Bad first pointer in taggroup: node.taggroup.first.item ({0})' node.item ({1}) at index={2} item={3}"' ntfi' node.item' count' node.item)); " is 167.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "						Logger.Log (string.Format ("Bad taggroupsize: oldtg.count ({0}) != taggroupsize ({1}) at index={2} item={3}"' oldtg.count' taggroupsize' count' node.item)); " is 156.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "						Logger.Log (string.Format ("Two small taggroups in a row: oldtaggroupsize ({0})' taggroupsize ({1}) at index={2} item={3}"' oldtaggroupsize' taggroupsize' count' node.item)); " is 174.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "						Logger.Log (string.Format ("Taggroup tags not strictly increasing: oldtaggrouptag ({0})' taggrouptag ({1}) at index={2} item={3}"' oldtg.tag' node.taggroup.tag' count' node.item)); " is 180.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "						Logger.Log (string.Format ("Bad last pointer in taggroup: oldtg.last.item ({0})' node.prev.item ({1}) at index={2} item={3}"' oldtg.last.item' node.prev.item' count' node.item)); " is 178.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "				Logger.Log (string.Format ("Bad taggroupsize: oldtg.count ({0}) != taggroupsize ({1}) at index={2} item={3}"' oldtg.count' taggroupsize' count' node.item)); " is 156.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "				Logger.Log (string.Format ("Two small taggroups in a row: oldtaggroupsize ({0})' taggroupsize ({1}) at index={2} item={3}"' oldtaggroupsize' taggroupsize' count' node.item)); " is 174.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "				Logger.Log (string.Format ("Taggroup tags not strictly increasing: oldtaggrouptag ({0})' taggrouptag ({1}) at index={2} item={3}"' oldtg.tag' node.taggroup.tag' count' node.item)); " is 180.
Long Statement,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "				Logger.Log (string.Format ("Bad last pointer in taggroup: oldtg.last.item ({0})' node.prev.item ({1}) at index={2} item={3}"' zeitem (oldtg.last)' zeitem (node.prev)' count' node.item)); " is 186.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,viewPosition,The length of the statement  "	int end = offset + size' otherOffset = otherView.offset' otherSize = otherView.size' otherEnd = otherOffset + otherSize; " is 120.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Invalid view(hash {0}' offset {1}' size {2})"' view.GetHashCode ()' view.offset' view.size)); " is 121.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' Offset > underlying.size ({2})"' view.GetHashCode ()' view.offset' view.size' size)); " is 155.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' startsentinel {3} should be {4}"' view.GetHashCode ()' view.offset' view.size' view.startsentinel + " " + view.startsentinel.GetHashCode ()' nodes [view.Offset] + " " + nodes [view.Offset].GetHashCode ())); " is 276.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' end index > underlying.size ({3})"' view.GetHashCode ()' view.offset' view.size' size)); " is 158.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' endsentinel {3} should be {4}"' view.GetHashCode ()' view.offset' view.size' view.endsentinel + " " + view.endsentinel.GetHashCode ()' nodes [view.Offset + view.size + 1] + " " + nodes [view.Offset + view.size + 1].GetHashCode ())); " is 302.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' wrong views list {3} <> {4}"' view.GetHashCode ()' view.offset' view.size' view.views.GetHashCode ()' views.GetHashCode ())); " is 195.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			Logger.Log (string.Format ("Bad view(hash {0}' offset {1}' size {2})' wrong underlying {3} <> this {4}"' view.GetHashCode ()' view.offset' view.size' view.underlying.GetHashCode ()' GetHashCode ())); " is 199.
Long Statement,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "			//Logger.Log(string.Format("Bad view(hash {0}' offset {1}' size {2})' wrong stamp view:{2} underlying: {3}"' view.GetHashCode()'view.offset' view.size' view.stamp' stamp)); " is 172.
Long Statement,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Equals,The length of the statement  "	return (X1 == null ? other.X1 == null : X1.Equals (other.X1)) && (X2 == null ? other.X2 == null : X2.Equals (other.X2)); " is 120.
Long Statement,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Equals,The length of the statement  "	return (X1 == null ? other.X1 == null : X1.Equals (other.X1)) && (X2 == null ? other.X2 == null : X2.Equals (other.X2)) && (X3 == null ? other.X3 == null : X3.Equals (other.X3)); " is 178.
Long Statement,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Equals,The length of the statement  "	return (X1 == null ? other.X1 == null : X1.Equals (other.X1)) && (X2 == null ? other.X2 == null : X2.Equals (other.X2)) && (X3 == null ? other.X3 == null : X3.Equals (other.X3)) && (X4 == null ? other.X4 == null : X4.Equals (other.X4)); " is 236.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "				parent.size = parent.items + (parent.left == null ? 0 : parent.left.size) + (parent.right == null ? 0 : parent.right.size); " is 123.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "				nearnephew.size = nearnephew.items + (nearnephew.left == null ? 0 : nearnephew.left.size) + (nearnephew.right == null ? 0 : nearnephew.right.size); " is 147.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "			parent.size = parent.items + (parent.left == null ? 0 : parent.left.size) + (parent.right == null ? 0 : parent.right.size); " is 123.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "			childsibling.size = childsibling.items + (childsibling.left == null ? 0 : childsibling.left.size) + (childsibling.right == null ? 0 : childsibling.right.size); " is 159.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "			cursor.size = cursor.items + (cursor.right == null ? 0 : cursor.right.size) + (cursor.left == null ? 0 : cursor.left.size); " is 123.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "		cursor.size = cursor.items + (cursor.right == null ? 0 : cursor.right.size) + (cursor.left == null ? 0 : cursor.left.size); " is 123.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,minidump,The length of the statement  "		Logger.Log (string.Format ("{0} {4} (size={1}' items={8}' h={2}' gen={3}' id={6}){7}"' space + n.item' n.size' 0' n.generation' n.red ? "RED" : "BLACK"' 0' 0' n.lastgeneration == -1 ? "" : string.Format (" [extra: lg={0}' c={1}' i={2}]"' n.lastgeneration' n.leftnode ? "L" : "R"' n.oldref == null ? "()" : "" + n.oldref.item)' n.items)); " is 337.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,dump,The length of the statement  "	Logger.Log (string.Format (">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' 0' generation)); " is 146.
Long Statement,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,dump,The length of the statement  "	Logger.Log (string.Format (">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' 0' generation)); " is 146.
Long Statement,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "				nearnephew.size = 1 + (nearnephew.left == null ? 0 : nearnephew.left.size) + (nearnephew.right == null ? 0 : nearnephew.right.size); " is 132.
Long Statement,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "			childsibling.size = 1 + (childsibling.left == null ? 0 : childsibling.left.size) + (childsibling.right == null ? 0 : childsibling.right.size); " is 142.
Long Statement,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,minidump,The length of the statement  "		Logger.Log (string.Format ("{0} {4} (size={1}' items={8}' h={2}' gen={3}' id={6}){7}"' space + n.item' n.size' 0' n.generation' n.red ? "RED" : "BLACK"' 0' 0' n.lastgeneration == -1 ? "" : string.Format (" [extra: lg={0}' c={1}' i={2}]"' n.lastgeneration' n.leftnode ? "L" : "R"' n.oldref == null ? "()" : "" + n.oldref.item)' 1)); " is 331.
Long Statement,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,dump,The length of the statement  "	Logger.Log (string.Format (">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' 0' generation)); " is 146.
Long Statement,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,dump,The length of the statement  "	Logger.Log (string.Format (">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' 0' generation)); " is 146.
Long Statement,Burrow.Extras,DependencyInjectionTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\DependencyInjectionTunnelFactory.cs,Create,The length of the statement  "	var durableConnection = new DurableConnection (_burrowResolver.Resolve<IRetryPolicy> () ?? new DefaultRetryPolicy ()' rabbitWatcher' connectionFactory); " is 152.
Long Statement,Burrow.Extras,DependencyInjectionTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\DependencyInjectionTunnelFactory.cs,Create,The length of the statement  "		var factory = new DefaultMessageHandlerFactory (_burrowResolver.Resolve<IConsumerErrorHandler> () ?? errorHandler ()' serializer' rabbitWatcher); " is 145.
Long Statement,Burrow.Extras,DependencyInjectionTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\DependencyInjectionTunnelFactory.cs,Create,The length of the statement  "		var manager = new ConsumerManager (rabbitWatcher' _burrowResolver.Resolve<IMessageHandlerFactory> () ?? handlerFactory ()' serializer); " is 135.
Long Statement,Burrow.Extras,DependencyInjectionTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\DependencyInjectionTunnelFactory.cs,Create,The length of the statement  "	var tunnel = new RabbitTunnel (_burrowResolver.Resolve<IConsumerManager> () ?? consumerManager ()' rabbitWatcher' _burrowResolver.Resolve<IRouteFinder> () ?? new DefaultRouteFinder ()' durableConnection' serializer' _burrowResolver.Resolve<ICorrelationIdGenerator> () ?? Global.DefaultCorrelationIdGenerator' Global.DefaultPersistentMode); " is 339.
Long Statement,Burrow.Extras,PriorityQueuesRabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\PriorityQueuesRabbitSetup.cs,BindQueue,The length of the statement  "				model.QueueBind (GetPriorityQueueName<T> ((PriorityQueueSetupData)queue' queueName' i)' exchangeName' routingKey/*It'll be ignored as AMQP spec*/' arguments); " is 158.
Long Statement,Burrow.Extras,PriorityQueuesRabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\PriorityQueuesRabbitSetup.cs,GetPriorityQueueName,The length of the statement  "	return string.Format ("{0}{1}"' originalQueueName' (priorityQueueSetupData.QueueSuffixConvention ?? GlobalPriorityQueueSuffix).Get (typeof(T)' priority)); " is 154.
Long Statement,Burrow.Extras,PriorityQueuesRabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\PriorityQueuesRabbitSetup.cs,DeclareQueue,The length of the statement  "				model.QueueDeclare (GetPriorityQueueName<T> ((PriorityQueueSetupData)queue' queueName' i)' queue.Durable' false' queue.AutoDelete' queue.Arguments); " is 148.
Long Statement,Burrow.Extras,RabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\RabbitSetup.cs,CreateRoute,The length of the statement  "		BindQueue<T> (model' routeSetupData.QueueSetupData' exchangeName' queueName' routingKey' routeSetupData.OptionalBindingData); " is 125.
Long Statement,Burrow.Extras,RabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\RabbitSetup.cs,BindQueue,The length of the statement  "		_watcher.WarnFormat ("Attempt to bind queue {0} to a empty name Exchange' that's the default built-in exchange so the action will be ignored"' queueName); " is 154.
Long Statement,Burrow.Extras,RabbitSetup,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\RabbitSetup.cs,DeclareExchange,The length of the statement  "		_watcher.WarnFormat ("Attempt to declare a Exchange with empty string' that's the default built-in exchange so the action will be ignored"); " is 140.
Long Statement,Burrow.Extras.Internal,PriorityMessageHandler,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityMessageHandler.cs,HandleMessage,The length of the statement  "	_watcher.DebugFormat ("4. A task to execute the provided callback with DTag: {0} by CTag: {1}' Priority {2} has been started using {3}."' eventArgs.DeliveryTag' eventArgs.ConsumerTag' Math.Max (priority' 0)' Thread.CurrentThread.IsThreadPoolThread ? "ThreadPool" : "dedicated Thread"); " is 285.
Long Statement,Burrow.Extras.Internal,PriorityMessageHandler,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityMessageHandler.cs,HandleMessage,The length of the statement  "	_watcher.DebugFormat ("5. A task to execute the provided callback with DTag: {0} by CTag: {1}' Priority {2} has been finished successfully."' eventArgs.DeliveryTag' eventArgs.ConsumerTag' Math.Max (priority' 0)); " is 212.
Long Statement,Burrow.Extras.Internal,PriorityMessageHandlerFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityMessageHandlerFactory.cs,Create,The length of the statement  "	return new PriorityMessageHandler<T> (subscriptionName' msgHandlingAction' _consumerErrorHandler' _messageSerializer' _watcher); " is 128.
Long Statement,Burrow.Extras.Internal,PriorityConsumerManager,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityConsumerManager.cs,CreateConsumer,The length of the statement  "	var consumer = new PriorityBurrowConsumer (channel' messageHandler' _watcher' true' (consumerThreadCount > 0 ? consumerThreadCount.Value : Global.DefaultConsumerBatchSize)); " is 173.
Long Statement,Burrow.Extras.Internal,PriorityConsumerManager,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityConsumerManager.cs,CreateAsyncConsumer,The length of the statement  "	var consumer = new PriorityBurrowConsumer (channel' messageHandler' _watcher' false' (consumerThreadCount > 0 ? consumerThreadCount.Value : Global.DefaultConsumerBatchSize)); " is 174.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,Subscribe,The length of the statement  "	Func<IModel' IBasicConsumer> createConsumer = channel => _priorityConsumerManager.CreateConsumer (channel' subscriptionOption.SubscriptionName' subscriptionOption.MessageHandler' subscriptionOption.BatchSize <= 0 ? (ushort)1 : subscriptionOption.BatchSize); " is 257.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,SubscribeAsync,The length of the statement  "	Func<IModel' IBasicConsumer> createConsumer = channel => _priorityConsumerManager.CreateAsyncConsumer (channel' subscriptionOption.SubscriptionName' subscriptionOption.MessageHandler' subscriptionOption.BatchSize <= 0 ? (ushort)1 : subscriptionOption.BatchSize); " is 262.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,GetProperPrefetchSize,The length of the statement  "	var prefetchSize = subscriptionOption.QueuePrefetchSizeSelector != null ? subscriptionOption.QueuePrefetchSizeSelector (priority) : subscriptionOption.QueuePrefetchSize; " is 169.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,GetProperPrefetchSize,The length of the statement  "		_watcher.WarnFormat ("The prefetch size is too high {0}' the queue will prefetch the maximum {1} msgs"' prefetchSize' ushort.MaxValue); " is 135.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,CreateSubscription,The length of the statement  "				throw new NotSupportedException (string.Format ("Expected PriorityBurrowConsumer but was {0}"' consumer == null ? "NULL" : consumer.GetType ().Name)); " is 150.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,CreateSubscription,The length of the statement  "			channel.BasicConsume (subscription.QueueName' false/* noAck' must be false */' subscription.ConsumerTag' priorityConsumer); " is 123.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,CreateSubscription,The length of the statement  "			_watcher.InfoFormat ("Subscribed to: {0} with subscriptionName: {1}"' subscription.QueueName' subscription.SubscriptionName); " is 125.
Long Statement,Burrow.Extras.Internal,RabbitTunnelWithPriorityQueuesSupport,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\RabbitTunnelWithPriorityQueuesSupport.cs,GetPriorityQueueName,The length of the statement  "	return (subscriptionOption.RouteFinder ?? _routeFinder).FindQueueName<T> (subscriptionOption.SubscriptionName) + (subscriptionOption.QueueSuffixNameConvention ?? PriorityQueuesRabbitSetup.GlobalPriorityQueueSuffix).Get (typeof(T)' priority); " is 241.
Long Statement,Burrow.Extras.Internal,CompositeSubscription,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\CompositeSubscription.cs,TryAckOrNAck,The length of the statement  "		throw new SubscriptionNotFoundException (consumerTag' string.Format ("Subscription {0} not found' this problem could happen after a retry for new connection. You properly just ignore the old objects you're trying to ack/nack"' consumerTag)); " is 241.
Long Statement,Burrow.Extras.Internal,PriorityTunnelFactory,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\Internal\PriorityTunnelFactory.cs,Create,The length of the statement  "	var tunnel = new RabbitTunnelWithPriorityQueuesSupport (consumerManager' rabbitWatcher' new DefaultRouteFinder ()' durableConnection' Global.DefaultSerializer' Global.DefaultCorrelationIdGenerator' Global.DefaultPersistentMode); " is 228.
Complex Conditional,C5,CircularQueue,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\CircularQueue.cs,Check,The conditional expression  "front < 0 || front >= array.Length || back < 0 || back >= array.Length || (front <= back && size != back - front) || (front > back && size != array.Length + back - front)"  is complex.
Complex Conditional,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The conditional expression  "tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.MinValue"  is complex.
Complex Conditional,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Check,The conditional expression  "tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.MaxValue"  is complex.
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,expand,The following statement contains a magic number: expand (2 * array.Length' underlyingsize);  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (views != null)  	foreach (ArrayList<T> view in views) {  		if (view != this) {  			switch (viewPosition (view.offset' view.size)) {  			case MutualViewPosition.ContainedIn:  				if (reverse)  					view.offset = 2 * offset + size - view.size - view.offset;  				else  					view.Dispose ();  				break;  			case MutualViewPosition.Overlapping:  				view.Dispose ();  				break;  			case MutualViewPosition.Contains:  			case MutualViewPosition.NonOverlapping:  				break;  			}  		}  	}  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: foreach (ArrayList<T> view in views) {  	if (view != this) {  		switch (viewPosition (view.offset' view.size)) {  		case MutualViewPosition.ContainedIn:  			if (reverse)  				view.offset = 2 * offset + size - view.size - view.offset;  			else  				view.Dispose ();  			break;  		case MutualViewPosition.Overlapping:  			view.Dispose ();  			break;  		case MutualViewPosition.Contains:  		case MutualViewPosition.NonOverlapping:  			break;  		}  	}  }  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (view != this) {  	switch (viewPosition (view.offset' view.size)) {  	case MutualViewPosition.ContainedIn:  		if (reverse)  			view.offset = 2 * offset + size - view.size - view.offset;  		else  			view.Dispose ();  		break;  	case MutualViewPosition.Overlapping:  		view.Dispose ();  		break;  	case MutualViewPosition.Contains:  	case MutualViewPosition.NonOverlapping:  		break;  	}  }  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: switch (viewPosition (view.offset' view.size)) {  case MutualViewPosition.ContainedIn:  	if (reverse)  		view.offset = 2 * offset + size - view.size - view.offset;  	else  		view.Dispose ();  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (reverse)  	view.offset = 2 * offset + size - view.size - view.offset;  else  	view.Dispose ();  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: view.offset = 2 * offset + size - view.size - view.offset;  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,FindAll,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	T a = array [offset + i];  	bool found = filter (a);  	modifycheck (stamp);  	if (found) {  		if (j == rescap)  			res.expand (rescap = 2 * rescap' j);  		res.array [j++] = a;  	}  }  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,FindAll,The following statement contains a magic number: if (found) {  	if (j == rescap)  		res.expand (rescap = 2 * rescap' j);  	res.array [j++] = a;  }  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,FindAll,The following statement contains a magic number: if (j == rescap)  	res.expand (rescap = 2 * rescap' j);  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,FindAll,The following statement contains a magic number: res.expand (rescap = 2 * rescap' j);  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,Reverse,The following statement contains a magic number: for (int i = 0' length = size / 2' end = offset + size - 1; i < length; i++) {  	T swap = array [offset + i];  	array [offset + i] = array [end - i];  	array [end - i] = swap;  }  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,Clear,The following statement contains a magic number: if (underlying == null) {  	updatecheck ();  	if (size == 0)  		return;  	int oldsize = size;  	fixViewsBeforeRemove (0' size);  	array = new T[8];  	size = 0;  	(underlying ?? this).raiseForRemoveInterval (offset' oldsize);  } else  	RemoveInterval (0' size);  
Magic Number,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,Clear,The following statement contains a magic number: array = new T[8];  
Magic Number,C5,CircularQueue,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\CircularQueue.cs,CircularQueue,The following statement contains a magic number: while (newlength < capacity)  	newlength *= 2;  
Magic Number,C5,CircularQueue,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\CircularQueue.cs,CircularQueue,The following statement contains a magic number: newlength *= 2;  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,expand,The following statement contains a magic number: expand (2 * array.Length' underlyingsize);  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (views != null)  	foreach (HashedArrayList<T> view in views) {  		if (view != this) {  			switch (viewPosition (view.offset' view.size)) {  			case MutualViewPosition.ContainedIn:  				if (reverse)  					view.offset = 2 * offset + size - view.size - view.offset;  				else  					view.Dispose ();  				break;  			case MutualViewPosition.Overlapping:  				view.Dispose ();  				break;  			case MutualViewPosition.Contains:  			case MutualViewPosition.NonOverlapping:  				break;  			}  		}  	}  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: foreach (HashedArrayList<T> view in views) {  	if (view != this) {  		switch (viewPosition (view.offset' view.size)) {  		case MutualViewPosition.ContainedIn:  			if (reverse)  				view.offset = 2 * offset + size - view.size - view.offset;  			else  				view.Dispose ();  			break;  		case MutualViewPosition.Overlapping:  			view.Dispose ();  			break;  		case MutualViewPosition.Contains:  		case MutualViewPosition.NonOverlapping:  			break;  		}  	}  }  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (view != this) {  	switch (viewPosition (view.offset' view.size)) {  	case MutualViewPosition.ContainedIn:  		if (reverse)  			view.offset = 2 * offset + size - view.size - view.offset;  		else  			view.Dispose ();  		break;  	case MutualViewPosition.Overlapping:  		view.Dispose ();  		break;  	case MutualViewPosition.Contains:  	case MutualViewPosition.NonOverlapping:  		break;  	}  }  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: switch (viewPosition (view.offset' view.size)) {  case MutualViewPosition.ContainedIn:  	if (reverse)  		view.offset = 2 * offset + size - view.size - view.offset;  	else  		view.Dispose ();  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (reverse)  	view.offset = 2 * offset + size - view.size - view.offset;  else  	view.Dispose ();  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: view.offset = 2 * offset + size - view.size - view.offset;  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,FindAll,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	T a = array [offset + i];  	bool found = filter (a);  	modifycheck (stamp);  	if (found) {  		if (j == rescap)  			res.expand (rescap = 2 * rescap' j);  		res.array [j++] = a;  	}  }  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,FindAll,The following statement contains a magic number: if (found) {  	if (j == rescap)  		res.expand (rescap = 2 * rescap' j);  	res.array [j++] = a;  }  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,FindAll,The following statement contains a magic number: if (j == rescap)  	res.expand (rescap = 2 * rescap' j);  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,FindAll,The following statement contains a magic number: res.expand (rescap = 2 * rescap' j);  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,Reverse,The following statement contains a magic number: for (int i = 0' length = size / 2' end = offset + size - 1; i < length; i++) {  	T swap = array [offset + i];  	array [offset + i] = array [end - i];  	array [end - i] = swap;  }  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,Clear,The following statement contains a magic number: if (underlying == null) {  	updatecheck ();  	if (size == 0)  		return;  	int oldsize = size;  	fixViewsBeforeRemove (0' size);  	itemIndex.Clear ();  	array = new T[8];  	size = 0;  	(underlying ?? this).raiseForRemoveInterval (offset' oldsize);  } else  	RemoveInterval (0' size);  
Magic Number,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,Clear,The following statement contains a magic number: array = new T[8];  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,BinarySearch,The following statement contains a magic number: middle = top / 2;  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,BinarySearch,The following statement contains a magic number: while (top > bottom) {  	int comparer;  	if ((comparer = _comparer.Compare (array [middle]' item)) == 0) {  		return true;  	}  	if (comparer > 0) {  		top = middle;  	} else {  		bottom = middle + 1;  	}  	middle = bottom + ((top - bottom) / 2);  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,BinarySearch,The following statement contains a magic number: middle = bottom + ((top - bottom) / 2);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,FindAll,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	T a = array [i];  	if (f (a)) {  		if (j == rescap)  			res.expand (rescap = 2 * rescap' j);  		res.array [j++] = a;  	}  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,FindAll,The following statement contains a magic number: if (f (a)) {  	if (j == rescap)  		res.expand (rescap = 2 * rescap' j);  	res.array [j++] = a;  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,FindAll,The following statement contains a magic number: if (j == rescap)  	res.expand (rescap = 2 * rescap' j);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,FindAll,The following statement contains a magic number: res.expand (rescap = 2 * rescap' j);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: mid = top / 2;  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: while (top > bot) {  	if ((comp = c.CompareTo (array [mid])) == 0)  		break;  	if (comp < 0) {  		rbest = top = mid;  	} else {  		lbest = mid;  		bot = mid + 1;  	}  	mid = (bot + top) / 2;  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: mid = (bot + top) / 2;  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: while (rbest > bot) {  	mid = (bot + rbest) / 2;  	if (c.CompareTo (array [mid]) < 0) {  		rbest = mid;  	} else {  		bot = mid + 1;  	}  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: mid = (bot + rbest) / 2;  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: while (top > lbest) {  	mid = (lbest + top + 1) / 2;  	if (c.CompareTo (array [mid]) > 0) {  		lbest = mid;  	} else {  		top = mid - 1;  	}  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: mid = (lbest + top + 1) / 2;  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: foreach (T item in items)  	if (BinarySearch (item' out ind))  		toremove [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: foreach (T item in items)  	if (BinarySearch (item' out ind))  		toremove [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: if (BinarySearch (item' out ind))  	toremove [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: if (BinarySearch (item' out ind))  	toremove [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: toremove [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: toremove [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: for (int i = 0; i < size; i++)  	if ((toremove [i >> 5] & (1 << (i & 31))) == 0)  		array [j++] = array [i];  	else if (mustFire)  		raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: for (int i = 0; i < size; i++)  	if ((toremove [i >> 5] & (1 << (i & 31))) == 0)  		array [j++] = array [i];  	else if (mustFire)  		raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: if ((toremove [i >> 5] & (1 << (i & 31))) == 0)  	array [j++] = array [i];  else if (mustFire)  	raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: if ((toremove [i >> 5] & (1 << (i & 31))) == 0)  	array [j++] = array [i];  else if (mustFire)  	raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: foreach (T item in items)  	if (BinarySearch (item' out ind))  		toretain [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: foreach (T item in items)  	if (BinarySearch (item' out ind))  		toretain [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: if (BinarySearch (item' out ind))  	toretain [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: if (BinarySearch (item' out ind))  	toretain [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: toretain [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: toretain [ind >> 5] |= 1 << (ind & 31);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: for (int i = 0; i < size; i++)  	if ((toretain [i >> 5] & (1 << (i & 31))) != 0)  		array [j++] = array [i];  	else if (mustFire)  		raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: for (int i = 0; i < size; i++)  	if ((toretain [i >> 5] & (1 << (i & 31))) != 0)  		array [j++] = array [i];  	else if (mustFire)  		raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: if ((toretain [i >> 5] & (1 << (i & 31))) != 0)  	array [j++] = array [i];  else if (mustFire)  	raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: if ((toretain [i >> 5] & (1 << (i & 31))) != 0)  	array [j++] = array [i];  else if (mustFire)  	raiseHandler.Remove (array [i]);  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,AddAll,The following statement contains a magic number: while (newsize < size + toadd) {  	newsize *= 2;  }  
Magic Number,C5,SortedArray,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\SortedArray.cs,AddAll,The following statement contains a magic number: newsize *= 2;  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items) {  	uint h1 = (uint)itemequalityComparer.GetHashCode (item);  	h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  }  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items) {  	uint h1 = (uint)itemequalityComparer.GetHashCode (item);  	h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  }  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items) {  	uint h1 = (uint)itemequalityComparer.GetHashCode (item);  	h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  }  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items) {  	uint h1 = (uint)itemequalityComparer.GetHashCode (item);  	h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  }  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  
Magic Number,C5,CollectionBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ComputeHashCode,The following statement contains a magic number: h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));  
Magic Number,C5,ArrayBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,expand,The following statement contains a magic number: expand (2 * array.Length' size);  
Magic Number,C5,ArrayBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,expand,The following statement contains a magic number: while (newlength < newcapacity)  	newlength *= 2;  
Magic Number,C5,ArrayBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,expand,The following statement contains a magic number: newlength *= 2;  
Magic Number,C5,ArrayBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ArrayBase,The following statement contains a magic number: while (newlength < capacity)  	newlength *= 2;  
Magic Number,C5,ArrayBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,ArrayBase,The following statement contains a magic number: newlength *= 2;  
Magic Number,C5,ArrayBase,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Collections.cs,Clear,The following statement contains a magic number: array = new T[8];  
Magic Number,C5,KeyValuePair,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Dictionaries.cs,GetHashCode,The following statement contains a magic number: return EqualityComparer<K>.Default.GetHashCode (Key) + 13984681 * EqualityComparer<V>.Default.GetHashCode (Value);  
Magic Number,C5,KeyValuePair,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Dictionaries.cs,Show,The following statement contains a magic number: rest -= 4;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,maxLength,The following statement contains a magic number: if (format == null)  	return 80;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,maxLength,The following statement contains a magic number: return 80;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: rest -= 2 * startdelim.Length;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (showMultiplicities) {  	foreach (KeyValuePair<T' int> p in coll.ItemMultiplicities ()) {  		complete = false;  		if (rest <= 0)  			break;  		if (first)  			first = false;  		else {  			stringbuilder.Append ("' ");  			rest -= 2;  		}  		if (complete = Showing.Show (p.Key' stringbuilder' ref rest' formatProvider)) {  			string multiplicityString = string.Format ("(*{0})"' p.Value);  			stringbuilder.Append (multiplicityString);  			rest -= multiplicityString.Length;  		}  	}  } else {  	foreach (T x in items) {  		complete = false;  		if (rest <= 0)  			break;  		if (first)  			first = false;  		else {  			stringbuilder.Append ("' ");  			rest -= 2;  		}  		if (showIndexes) {  			string indexString = string.Format ("{0}:"' index++);  			stringbuilder.Append (indexString);  			rest -= indexString.Length;  		}  		complete = Showing.Show (x' stringbuilder' ref rest' formatProvider);  	}  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (showMultiplicities) {  	foreach (KeyValuePair<T' int> p in coll.ItemMultiplicities ()) {  		complete = false;  		if (rest <= 0)  			break;  		if (first)  			first = false;  		else {  			stringbuilder.Append ("' ");  			rest -= 2;  		}  		if (complete = Showing.Show (p.Key' stringbuilder' ref rest' formatProvider)) {  			string multiplicityString = string.Format ("(*{0})"' p.Value);  			stringbuilder.Append (multiplicityString);  			rest -= multiplicityString.Length;  		}  	}  } else {  	foreach (T x in items) {  		complete = false;  		if (rest <= 0)  			break;  		if (first)  			first = false;  		else {  			stringbuilder.Append ("' ");  			rest -= 2;  		}  		if (showIndexes) {  			string indexString = string.Format ("{0}:"' index++);  			stringbuilder.Append (indexString);  			rest -= indexString.Length;  		}  		complete = Showing.Show (x' stringbuilder' ref rest' formatProvider);  	}  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: foreach (KeyValuePair<T' int> p in coll.ItemMultiplicities ()) {  	complete = false;  	if (rest <= 0)  		break;  	if (first)  		first = false;  	else {  		stringbuilder.Append ("' ");  		rest -= 2;  	}  	if (complete = Showing.Show (p.Key' stringbuilder' ref rest' formatProvider)) {  		string multiplicityString = string.Format ("(*{0})"' p.Value);  		stringbuilder.Append (multiplicityString);  		rest -= multiplicityString.Length;  	}  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (first)  	first = false;  else {  	stringbuilder.Append ("' ");  	rest -= 2;  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: foreach (T x in items) {  	complete = false;  	if (rest <= 0)  		break;  	if (first)  		first = false;  	else {  		stringbuilder.Append ("' ");  		rest -= 2;  	}  	if (showIndexes) {  		string indexString = string.Format ("{0}:"' index++);  		stringbuilder.Append (indexString);  		rest -= indexString.Length;  	}  	complete = Showing.Show (x' stringbuilder' ref rest' formatProvider);  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (first)  	first = false;  else {  	stringbuilder.Append ("' ");  	rest -= 2;  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (!complete) {  	stringbuilder.Append ("...");  	rest -= 3;  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: rest -= 3;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The following statement contains a magic number: rest -= 4;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The following statement contains a magic number: foreach (KeyValuePair<K' V> p in dictionary) {  	complete = false;  	if (rest <= 0)  		break;  	if (first)  		first = false;  	else {  		stringbuilder.Append ("' ");  		rest -= 2;  	}  	complete = Showing.Show (p' stringbuilder' ref rest' formatProvider);  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The following statement contains a magic number: if (first)  	first = false;  else {  	stringbuilder.Append ("' ");  	rest -= 2;  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The following statement contains a magic number: if (!complete) {  	stringbuilder.Append ("...");  	rest -= 3;  }  
Magic Number,C5,Showing,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Formatting.cs,ShowDictionary,The following statement contains a magic number: rest -= 3;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,shrink,The following statement contains a magic number: if (bits > 3) {  	Logger.Log (string.Format (string.Format ("Shrink to {0} bits"' bits - 1)));  	resize (bits - 1);  }  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,resize,The following statement contains a magic number: bitsc = 32 - bits;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,clear,The following statement contains a magic number: bitsc = 32 - bits;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: _randomhashfactor = (Debug.UseDeterministicHashing) ? 1529784659 : (2 * (uint)Random.Next () + 1) * 1529784659;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: _randomhashfactor = (Debug.UseDeterministicHashing) ? 1529784659 : (2 * (uint)Random.Next () + 1) * 1529784659;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: _randomhashfactor = (Debug.UseDeterministicHashing) ? 1529784659 : (2 * (uint)Random.Next () + 1) * 1529784659;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: if (fill < 0.1 || fill > 0.9)  	throw new ArgumentException ("Fill outside valid range [0.1' 0.9]");  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: if (fill < 0.1 || fill > 0.9)  	throw new ArgumentException ("Fill outside valid range [0.1' 0.9]");  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: origbits = 4;  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,Check,The following statement contains a magic number: if (bitsc != 32 - bits) {  	Logger.Log (string.Format ("bitsc != 32 - bits ({0}' {1})"' bitsc' bits));  	retval = false;  }  
Magic Number,C5,HashSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\hashing\HashTable.cs,Check,The following statement contains a magic number: if (bitsc != 32 - bits) {  	Logger.Log (string.Format ("resizethreshhold != (int)(table.Length * fillfactor) ({0}' {1}' {2})"' resizethreshhold' table.Length' fillfactor));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: if (2 * cell + 1 < size && comparer.Compare (currentitem' other) > 0) {  	swappedroot = true;  	Handle otherhandle = heap [cell].lasthandle;  	updateLast (cell' currentitem' currenthandle);  	currentitem = other;  	currenthandle = otherhandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l < size && comparer.Compare (lv = heap [l].first' minitem) < 0) {  		currentmin = l;  		minitem = lv;  	}  	if (2 * r < size && comparer.Compare (rv = heap [r].first' minitem) < 0) {  		currentmin = r;  		minitem = rv;  	}  	if (currentmin == cell)  		break;  	minhandle = heap [currentmin].firsthandle;  	updateFirst (cell' minitem' minhandle);  	cell = currentmin;  	//Maybe swap first and last  	T other = heap [cell].last;  	if (2 * currentmin + 1 < size && comparer.Compare (currentitem' other) > 0) {  		Handle otherhandle = heap [cell].lasthandle;  		updateLast (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	minitem = currentitem;  	minhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l < size && comparer.Compare (lv = heap [l].first' minitem) < 0) {  		currentmin = l;  		minitem = lv;  	}  	if (2 * r < size && comparer.Compare (rv = heap [r].first' minitem) < 0) {  		currentmin = r;  		minitem = rv;  	}  	if (currentmin == cell)  		break;  	minhandle = heap [currentmin].firsthandle;  	updateFirst (cell' minitem' minhandle);  	cell = currentmin;  	//Maybe swap first and last  	T other = heap [cell].last;  	if (2 * currentmin + 1 < size && comparer.Compare (currentitem' other) > 0) {  		Handle otherhandle = heap [cell].lasthandle;  		updateLast (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	minitem = currentitem;  	minhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l < size && comparer.Compare (lv = heap [l].first' minitem) < 0) {  		currentmin = l;  		minitem = lv;  	}  	if (2 * r < size && comparer.Compare (rv = heap [r].first' minitem) < 0) {  		currentmin = r;  		minitem = rv;  	}  	if (currentmin == cell)  		break;  	minhandle = heap [currentmin].firsthandle;  	updateFirst (cell' minitem' minhandle);  	cell = currentmin;  	//Maybe swap first and last  	T other = heap [cell].last;  	if (2 * currentmin + 1 < size && comparer.Compare (currentitem' other) > 0) {  		Handle otherhandle = heap [cell].lasthandle;  		updateLast (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	minitem = currentitem;  	minhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l < size && comparer.Compare (lv = heap [l].first' minitem) < 0) {  		currentmin = l;  		minitem = lv;  	}  	if (2 * r < size && comparer.Compare (rv = heap [r].first' minitem) < 0) {  		currentmin = r;  		minitem = rv;  	}  	if (currentmin == cell)  		break;  	minhandle = heap [currentmin].firsthandle;  	updateFirst (cell' minitem' minhandle);  	cell = currentmin;  	//Maybe swap first and last  	T other = heap [cell].last;  	if (2 * currentmin + 1 < size && comparer.Compare (currentitem' other) > 0) {  		Handle otherhandle = heap [cell].lasthandle;  		updateLast (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	minitem = currentitem;  	minhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: if (2 * l < size && comparer.Compare (lv = heap [l].first' minitem) < 0) {  	currentmin = l;  	minitem = lv;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: if (2 * r < size && comparer.Compare (rv = heap [r].first' minitem) < 0) {  	currentmin = r;  	minitem = rv;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: if (2 * currentmin + 1 < size && comparer.Compare (currentitem' other) > 0) {  	Handle otherhandle = heap [cell].lasthandle;  	updateLast (cell' currentitem' currenthandle);  	currentitem = other;  	currenthandle = otherhandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: if (2 * cell + 1 < size && comparer.Compare (currentitem' other) < 0) {  	swappedroot = true;  	Handle otherhandle = heap [cell].firsthandle;  	updateFirst (cell' currentitem' currenthandle);  	currentitem = other;  	currenthandle = otherhandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l + 1 < size && comparer.Compare (lv = heap [l].last' maxitem) > 0) {  		currentmax = l;  		maxitem = lv;  	}  	if (2 * r + 1 < size && comparer.Compare (rv = heap [r].last' maxitem) > 0) {  		currentmax = r;  		maxitem = rv;  	}  	if (currentmax == cell)  		break;  	maxhandle = heap [currentmax].lasthandle;  	updateLast (cell' maxitem' maxhandle);  	cell = currentmax;  	//Maybe swap first and last  	T other = heap [cell].first;  	if (comparer.Compare (currentitem' other) < 0) {  		Handle otherhandle = heap [cell].firsthandle;  		updateFirst (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	maxitem = currentitem;  	maxhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l + 1 < size && comparer.Compare (lv = heap [l].last' maxitem) > 0) {  		currentmax = l;  		maxitem = lv;  	}  	if (2 * r + 1 < size && comparer.Compare (rv = heap [r].last' maxitem) > 0) {  		currentmax = r;  		maxitem = rv;  	}  	if (currentmax == cell)  		break;  	maxhandle = heap [currentmax].lasthandle;  	updateLast (cell' maxitem' maxhandle);  	cell = currentmax;  	//Maybe swap first and last  	T other = heap [cell].first;  	if (comparer.Compare (currentitem' other) < 0) {  		Handle otherhandle = heap [cell].firsthandle;  		updateFirst (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	maxitem = currentitem;  	maxhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: while (true) {  	int l = 2 * cell + 1' r = l + 1;  	T lv' rv;  	if (2 * l + 1 < size && comparer.Compare (lv = heap [l].last' maxitem) > 0) {  		currentmax = l;  		maxitem = lv;  	}  	if (2 * r + 1 < size && comparer.Compare (rv = heap [r].last' maxitem) > 0) {  		currentmax = r;  		maxitem = rv;  	}  	if (currentmax == cell)  		break;  	maxhandle = heap [currentmax].lasthandle;  	updateLast (cell' maxitem' maxhandle);  	cell = currentmax;  	//Maybe swap first and last  	T other = heap [cell].first;  	if (comparer.Compare (currentitem' other) < 0) {  		Handle otherhandle = heap [cell].firsthandle;  		updateFirst (cell' currentitem' currenthandle);  		currentitem = other;  		currenthandle = otherhandle;  	}  	maxitem = currentitem;  	maxhandle = currenthandle;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: if (2 * l + 1 < size && comparer.Compare (lv = heap [l].last' maxitem) > 0) {  	currentmax = l;  	maxitem = lv;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: if (2 * r + 1 < size && comparer.Compare (rv = heap [r].last' maxitem) > 0) {  	currentmax = r;  	maxitem = rv;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMin,The following statement contains a magic number: if (i > 0) {  	T min = heap [i].first' iv = min;  	Handle minhandle = heap [i].firsthandle;  	int p = (i + 1) / 2 - 1;  	while (i > 0) {  		if (comparer.Compare (iv' min = heap [p = (i + 1) / 2 - 1].first) < 0) {  			updateFirst (i' min' heap [p].firsthandle);  			min = iv;  			i = p;  		} else  			break;  	}  	updateFirst (i' iv' minhandle);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMin,The following statement contains a magic number: if (i > 0) {  	T min = heap [i].first' iv = min;  	Handle minhandle = heap [i].firsthandle;  	int p = (i + 1) / 2 - 1;  	while (i > 0) {  		if (comparer.Compare (iv' min = heap [p = (i + 1) / 2 - 1].first) < 0) {  			updateFirst (i' min' heap [p].firsthandle);  			min = iv;  			i = p;  		} else  			break;  	}  	updateFirst (i' iv' minhandle);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMin,The following statement contains a magic number: while (i > 0) {  	if (comparer.Compare (iv' min = heap [p = (i + 1) / 2 - 1].first) < 0) {  		updateFirst (i' min' heap [p].firsthandle);  		min = iv;  		i = p;  	} else  		break;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMin,The following statement contains a magic number: if (comparer.Compare (iv' min = heap [p = (i + 1) / 2 - 1].first) < 0) {  	updateFirst (i' min' heap [p].firsthandle);  	min = iv;  	i = p;  } else  	break;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMax,The following statement contains a magic number: if (i > 0) {  	T max = heap [i].last' iv = max;  	Handle maxhandle = heap [i].lasthandle;  	int p = (i + 1) / 2 - 1;  	while (i > 0) {  		if (comparer.Compare (iv' max = heap [p = (i + 1) / 2 - 1].last) > 0) {  			updateLast (i' max' heap [p].lasthandle);  			max = iv;  			i = p;  		} else  			break;  	}  	updateLast (i' iv' maxhandle);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMax,The following statement contains a magic number: if (i > 0) {  	T max = heap [i].last' iv = max;  	Handle maxhandle = heap [i].lasthandle;  	int p = (i + 1) / 2 - 1;  	while (i > 0) {  		if (comparer.Compare (iv' max = heap [p = (i + 1) / 2 - 1].last) > 0) {  			updateLast (i' max' heap [p].lasthandle);  			max = iv;  			i = p;  		} else  			break;  	}  	updateLast (i' iv' maxhandle);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMax,The following statement contains a magic number: while (i > 0) {  	if (comparer.Compare (iv' max = heap [p = (i + 1) / 2 - 1].last) > 0) {  		updateLast (i' max' heap [p].lasthandle);  		max = iv;  		i = p;  	} else  		break;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,bubbleUpMax,The following statement contains a magic number: if (comparer.Compare (iv' max = heap [p = (i + 1) / 2 - 1].last) > 0) {  	updateLast (i' max' heap [p].lasthandle);  	max = iv;  	i = p;  } else  	break;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size == 2 * heap.Length) {  	Interval[] newheap = new Interval[2 * heap.Length];  	Array.Copy (heap' newheap' heap.Length);  	heap = newheap;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size == 2 * heap.Length) {  	Interval[] newheap = new Interval[2 * heap.Length];  	Array.Copy (heap' newheap' heap.Length);  	heap = newheap;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0) {  	int i = size / 2' p = (i + 1) / 2 - 1;  	T tmp = heap [p].last;  	if (comparer.Compare (item' tmp) > 0) {  		updateFirst (i' tmp' heap [p].lasthandle);  		updateLast (p' item' itemhandle);  		bubbleUpMax (p);  	} else {  		updateFirst (i' item' itemhandle);  		if (comparer.Compare (item' heap [p].first) < 0)  			bubbleUpMin (i);  	}  } else {  	int i = size / 2;  	T other = heap [i].first;  	if (comparer.Compare (item' other) < 0) {  		updateLast (i' other' heap [i].firsthandle);  		updateFirst (i' item' itemhandle);  		bubbleUpMin (i);  	} else {  		updateLast (i' item' itemhandle);  		bubbleUpMax (i);  	}  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0) {  	int i = size / 2' p = (i + 1) / 2 - 1;  	T tmp = heap [p].last;  	if (comparer.Compare (item' tmp) > 0) {  		updateFirst (i' tmp' heap [p].lasthandle);  		updateLast (p' item' itemhandle);  		bubbleUpMax (p);  	} else {  		updateFirst (i' item' itemhandle);  		if (comparer.Compare (item' heap [p].first) < 0)  			bubbleUpMin (i);  	}  } else {  	int i = size / 2;  	T other = heap [i].first;  	if (comparer.Compare (item' other) < 0) {  		updateLast (i' other' heap [i].firsthandle);  		updateFirst (i' item' itemhandle);  		bubbleUpMin (i);  	} else {  		updateLast (i' item' itemhandle);  		bubbleUpMax (i);  	}  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0) {  	int i = size / 2' p = (i + 1) / 2 - 1;  	T tmp = heap [p].last;  	if (comparer.Compare (item' tmp) > 0) {  		updateFirst (i' tmp' heap [p].lasthandle);  		updateLast (p' item' itemhandle);  		bubbleUpMax (p);  	} else {  		updateFirst (i' item' itemhandle);  		if (comparer.Compare (item' heap [p].first) < 0)  			bubbleUpMin (i);  	}  } else {  	int i = size / 2;  	T other = heap [i].first;  	if (comparer.Compare (item' other) < 0) {  		updateLast (i' other' heap [i].firsthandle);  		updateFirst (i' item' itemhandle);  		bubbleUpMin (i);  	} else {  		updateLast (i' item' itemhandle);  		bubbleUpMax (i);  	}  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0) {  	int i = size / 2' p = (i + 1) / 2 - 1;  	T tmp = heap [p].last;  	if (comparer.Compare (item' tmp) > 0) {  		updateFirst (i' tmp' heap [p].lasthandle);  		updateLast (p' item' itemhandle);  		bubbleUpMax (p);  	} else {  		updateFirst (i' item' itemhandle);  		if (comparer.Compare (item' heap [p].first) < 0)  			bubbleUpMin (i);  	}  } else {  	int i = size / 2;  	T other = heap [i].first;  	if (comparer.Compare (item' other) < 0) {  		updateLast (i' other' heap [i].firsthandle);  		updateFirst (i' item' itemhandle);  		bubbleUpMin (i);  	} else {  		updateLast (i' item' itemhandle);  		bubbleUpMax (i);  	}  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,updateLast,The following statement contains a magic number: if (handle != null)  	handle.index = 2 * cell + 1;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,updateLast,The following statement contains a magic number: handle.index = 2 * cell + 1;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,updateFirst,The following statement contains a magic number: if (handle != null)  	handle.index = 2 * cell;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,updateFirst,The following statement contains a magic number: handle.index = 2 * cell;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,GetEnumerator,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	if (mystamp != stamp)  		throw new CollectionModifiedException ();  	yield return i % 2 == 0 ? heap [i >> 1].first : heap [i >> 1].last;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,GetEnumerator,The following statement contains a magic number: yield return i % 2 == 0 ? heap [i >> 1].first : heap [i >> 1].last;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size) {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	return retval;  } else {  	if (comparer.Compare (min' first) > 0) {  		Logger.Log (string.Format ("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size));  		retval = false;  	}  	if (comparer.Compare (first' last) > 0) {  		Logger.Log (string.Format ("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size));  		retval = false;  	}  	if (comparer.Compare (last' max) > 0) {  		Logger.Log (string.Format ("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size));  		retval = false;  	}  	if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  		Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  		retval = false;  	}  	if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  		Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  		retval = false;  	}  	int l = 2 * i + 1' r = l + 1;  	if (2 * l < size)  		retval = retval && check (l' first' last);  	if (2 * r < size)  		retval = retval && check (r' first' last);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  	Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  	Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  	Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (interval.firsthandle != null && interval.firsthandle.index != 2 * i) {  	Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: Logger.Log (string.Format ("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size));  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  	Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1) {  	Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  	retval = false;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: Logger.Log (string.Format ("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size));  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * l < size)  	retval = retval && check (l' first' last);  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * r < size)  	retval = retval && check (r' first' last);  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (cell == lastcell) {  	if (isfirst) {  		retval = heap [cell].first;  		if (size % 2 == 0) {  			updateFirst (cell' heap [cell].last' heap [cell].lasthandle);  			heap [cell].last = default(T);  			heap [cell].lasthandle = null;  		} else {  			heap [cell].first = default(T);  			heap [cell].firsthandle = null;  		}  	} else {  		retval = heap [cell].last;  		heap [cell].last = default(T);  		heap [cell].lasthandle = null;  	}  	size--;  } else if (isfirst) {  	retval = heap [cell].first;  	if (size % 2 == 0) {  		updateFirst (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	if (size % 2 == 0) {  		updateLast (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (cell == lastcell) {  	if (isfirst) {  		retval = heap [cell].first;  		if (size % 2 == 0) {  			updateFirst (cell' heap [cell].last' heap [cell].lasthandle);  			heap [cell].last = default(T);  			heap [cell].lasthandle = null;  		} else {  			heap [cell].first = default(T);  			heap [cell].firsthandle = null;  		}  	} else {  		retval = heap [cell].last;  		heap [cell].last = default(T);  		heap [cell].lasthandle = null;  	}  	size--;  } else if (isfirst) {  	retval = heap [cell].first;  	if (size % 2 == 0) {  		updateFirst (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	if (size % 2 == 0) {  		updateLast (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (cell == lastcell) {  	if (isfirst) {  		retval = heap [cell].first;  		if (size % 2 == 0) {  			updateFirst (cell' heap [cell].last' heap [cell].lasthandle);  			heap [cell].last = default(T);  			heap [cell].lasthandle = null;  		} else {  			heap [cell].first = default(T);  			heap [cell].firsthandle = null;  		}  	} else {  		retval = heap [cell].last;  		heap [cell].last = default(T);  		heap [cell].lasthandle = null;  	}  	size--;  } else if (isfirst) {  	retval = heap [cell].first;  	if (size % 2 == 0) {  		updateFirst (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	if (size % 2 == 0) {  		updateLast (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (isfirst) {  	retval = heap [cell].first;  	if (size % 2 == 0) {  		updateFirst (cell' heap [cell].last' heap [cell].lasthandle);  		heap [cell].last = default(T);  		heap [cell].lasthandle = null;  	} else {  		heap [cell].first = default(T);  		heap [cell].firsthandle = null;  	}  } else {  	retval = heap [cell].last;  	heap [cell].last = default(T);  	heap [cell].lasthandle = null;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (size % 2 == 0) {  	updateFirst (cell' heap [cell].last' heap [cell].lasthandle);  	heap [cell].last = default(T);  	heap [cell].lasthandle = null;  } else {  	heap [cell].first = default(T);  	heap [cell].firsthandle = null;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (isfirst) {  	retval = heap [cell].first;  	if (size % 2 == 0) {  		updateFirst (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	if (size % 2 == 0) {  		updateLast (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (isfirst) {  	retval = heap [cell].first;  	if (size % 2 == 0) {  		updateFirst (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	if (size % 2 == 0) {  		updateLast (cell' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (cell' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (size % 2 == 0) {  	updateFirst (cell' heap [lastcell].last' heap [lastcell].lasthandle);  	heap [lastcell].last = default(T);  	heap [lastcell].lasthandle = null;  } else {  	updateFirst (cell' heap [lastcell].first' heap [lastcell].firsthandle);  	heap [lastcell].first = default(T);  	heap [lastcell].firsthandle = null;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (size % 2 == 0) {  	updateLast (cell' heap [lastcell].last' heap [lastcell].lasthandle);  	heap [lastcell].last = default(T);  	heap [lastcell].lasthandle = null;  } else {  	updateLast (cell' heap [lastcell].first' heap [lastcell].firsthandle);  	heap [lastcell].first = default(T);  	heap [lastcell].firsthandle = null;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,checkHandle,The following statement contains a magic number: cell = toremove / 2;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,checkHandle,The following statement contains a magic number: isfirst = toremove % 2 == 0;  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (isfirst) {  	retval = heap [cell].first;  	heap [cell].first = item;  	if (size == 1) {  	} else if (size == 2 * cell + 1)// cell == lastcell  	 {  		int p = (cell + 1) / 2 - 1;  		if (comparer.Compare (item' heap [p].last) > 0) {  			Handle thehandle = heap [cell].firsthandle;  			updateFirst (cell' heap [p].last' heap [p].lasthandle);  			updateLast (p' item' thehandle);  			bubbleUpMax (p);  		} else  			bubbleUpMin (cell);  	} else if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	heap [cell].last = item;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (isfirst) {  	retval = heap [cell].first;  	heap [cell].first = item;  	if (size == 1) {  	} else if (size == 2 * cell + 1)// cell == lastcell  	 {  		int p = (cell + 1) / 2 - 1;  		if (comparer.Compare (item' heap [p].last) > 0) {  			Handle thehandle = heap [cell].firsthandle;  			updateFirst (cell' heap [p].last' heap [p].lasthandle);  			updateLast (p' item' thehandle);  			bubbleUpMax (p);  		} else  			bubbleUpMin (cell);  	} else if (heapifyMin (cell))  		bubbleUpMax (cell);  	else  		bubbleUpMin (cell);  } else {  	retval = heap [cell].last;  	heap [cell].last = item;  	if (heapifyMax (cell))  		bubbleUpMin (cell);  	else  		bubbleUpMax (cell);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (size == 1) {  } else if (size == 2 * cell + 1)// cell == lastcell   {  	int p = (cell + 1) / 2 - 1;  	if (comparer.Compare (item' heap [p].last) > 0) {  		Handle thehandle = heap [cell].firsthandle;  		updateFirst (cell' heap [p].last' heap [p].lasthandle);  		updateLast (p' item' thehandle);  		bubbleUpMax (p);  	} else  		bubbleUpMin (cell);  } else if (heapifyMin (cell))  	bubbleUpMax (cell);  else  	bubbleUpMin (cell);  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (size == 1) {  } else if (size == 2 * cell + 1)// cell == lastcell   {  	int p = (cell + 1) / 2 - 1;  	if (comparer.Compare (item' heap [p].last) > 0) {  		Handle thehandle = heap [cell].firsthandle;  		updateFirst (cell' heap [p].last' heap [p].lasthandle);  		updateLast (p' item' thehandle);  		bubbleUpMax (p);  	} else  		bubbleUpMin (cell);  } else if (heapifyMin (cell))  	bubbleUpMax (cell);  else  	bubbleUpMin (cell);  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (size == 2 * cell + 1)// cell == lastcell   {  	int p = (cell + 1) / 2 - 1;  	if (comparer.Compare (item' heap [p].last) > 0) {  		Handle thehandle = heap [cell].firsthandle;  		updateFirst (cell' heap [p].last' heap [p].lasthandle);  		updateLast (p' item' thehandle);  		bubbleUpMax (p);  	} else  		bubbleUpMin (cell);  } else if (heapifyMin (cell))  	bubbleUpMax (cell);  else  	bubbleUpMin (cell);  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (size == 2 * cell + 1)// cell == lastcell   {  	int p = (cell + 1) / 2 - 1;  	if (comparer.Compare (item' heap [p].last) > 0) {  		Handle thehandle = heap [cell].firsthandle;  		updateFirst (cell' heap [p].last' heap [p].lasthandle);  		updateLast (p' item' thehandle);  		bubbleUpMax (p);  	} else  		bubbleUpMin (cell);  } else if (heapifyMin (cell))  	bubbleUpMax (cell);  else  	bubbleUpMin (cell);  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,DeleteMin,The following statement contains a magic number: if (size == 1) {  	size = 0;  	heap [0].first = default(T);  	heap [0].firsthandle = null;  } else {  	int lastcell = (size - 1) / 2;  	if (size % 2 == 0) {  		updateFirst (0' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (0' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	heapifyMin (0);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,DeleteMin,The following statement contains a magic number: if (size == 1) {  	size = 0;  	heap [0].first = default(T);  	heap [0].firsthandle = null;  } else {  	int lastcell = (size - 1) / 2;  	if (size % 2 == 0) {  		updateFirst (0' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateFirst (0' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	heapifyMin (0);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,DeleteMin,The following statement contains a magic number: if (size % 2 == 0) {  	updateFirst (0' heap [lastcell].last' heap [lastcell].lasthandle);  	heap [lastcell].last = default(T);  	heap [lastcell].lasthandle = null;  } else {  	updateFirst (0' heap [lastcell].first' heap [lastcell].firsthandle);  	heap [lastcell].first = default(T);  	heap [lastcell].firsthandle = null;  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,DeleteMax,The following statement contains a magic number: if (size == 1) {  	size = 0;  	retval = heap [0].first;  	myhandle = heap [0].firsthandle;  	if (myhandle != null)  		myhandle.index = -1;  	heap [0].first = default(T);  	heap [0].firsthandle = null;  } else {  	retval = heap [0].last;  	myhandle = heap [0].lasthandle;  	if (myhandle != null)  		myhandle.index = -1;  	int lastcell = (size - 1) / 2;  	if (size % 2 == 0) {  		updateLast (0' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (0' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	heapifyMax (0);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,DeleteMax,The following statement contains a magic number: if (size == 1) {  	size = 0;  	retval = heap [0].first;  	myhandle = heap [0].firsthandle;  	if (myhandle != null)  		myhandle.index = -1;  	heap [0].first = default(T);  	heap [0].firsthandle = null;  } else {  	retval = heap [0].last;  	myhandle = heap [0].lasthandle;  	if (myhandle != null)  		myhandle.index = -1;  	int lastcell = (size - 1) / 2;  	if (size % 2 == 0) {  		updateLast (0' heap [lastcell].last' heap [lastcell].lasthandle);  		heap [lastcell].last = default(T);  		heap [lastcell].lasthandle = null;  	} else {  		updateLast (0' heap [lastcell].first' heap [lastcell].firsthandle);  		heap [lastcell].first = default(T);  		heap [lastcell].firsthandle = null;  	}  	size--;  	heapifyMax (0);  }  
Magic Number,C5,IntervalHeap,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\heaps\IntervalHeap.cs,DeleteMax,The following statement contains a magic number: if (size % 2 == 0) {  	updateLast (0' heap [lastcell].last' heap [lastcell].lasthandle);  	heap [lastcell].last = default(T);  	heap [lastcell].lasthandle = null;  } else {  	updateLast (0' heap [lastcell].first' heap [lastcell].firsthandle);  	heap [lastcell].first = default(T);  	heap [lastcell].firsthandle = null;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,get,The following statement contains a magic number: if (pos < 0 || pos >= size)  	throw new IndexOutOfRangeException ();  else if (pos < size / 2) {  	// Closer to front  	Node node = startsentinel;  	for (int i = 0; i <= pos; i++)  		node = node.next;  	return node;  } else {  	// Closer to end  	Node node = endsentinel;  	for (int i = size; i > pos; i--)  		node = node.prev;  	return node;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,get,The following statement contains a magic number: if (pos < size / 2) {  	// Closer to front  	Node node = startsentinel;  	for (int i = 0; i <= pos; i++)  		node = node.next;  	return node;  } else {  	// Closer to end  	Node node = endsentinel;  	for (int i = size; i > pos; i--)  		node = node.prev;  	return node;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup) {  	node.taggroup = predgroup;  	predgroup.count++;  	if (pred.tag + 1 == succ.tag)  		splittaggroup (predgroup);  	else  		node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  } else if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup) {  	node.taggroup = predgroup;  	predgroup.count++;  	if (pred.tag + 1 == succ.tag)  		splittaggroup (predgroup);  	else  		node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  } else if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup) {  	node.taggroup = predgroup;  	predgroup.count++;  	if (pred.tag + 1 == succ.tag)  		splittaggroup (predgroup);  	else  		node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  } else if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup) {  	node.taggroup = predgroup;  	predgroup.count++;  	if (pred.tag + 1 == succ.tag)  		splittaggroup (predgroup);  	else  		node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  } else if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup) {  	node.taggroup = predgroup;  	predgroup.count++;  	if (pred.tag + 1 == succ.tag)  		splittaggroup (predgroup);  	else  		node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  } else if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup) {  	node.taggroup = predgroup;  	predgroup.count++;  	if (pred.tag + 1 == succ.tag)  		splittaggroup (predgroup);  	else  		node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  } else if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (pred.tag + 1 == succ.tag)  	splittaggroup (predgroup);  else  	node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (pred.tag + 1 == succ.tag)  	splittaggroup (predgroup);  else  	node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup.first != null) {  	node.taggroup = predgroup;  	predgroup.last = node;  	predgroup.count++;  	if (pred.tag == int.MaxValue)  		splittaggroup (predgroup);  	else  		node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  } else if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (pred.tag == int.MaxValue)  	splittaggroup (predgroup);  else  	node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (pred.tag == int.MaxValue)  	splittaggroup (predgroup);  else  	node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (succgroup.first != null) {  	node.taggroup = succgroup;  	succgroup.first = node;  	succgroup.count++;  	if (succ.tag == int.MinValue)  		splittaggroup (node.taggroup);  	else  		node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  } else {  	System.Diagnostics.Debug.Assert (Taggroups == 0);  	TagGroup newgroup = new TagGroup ();  	Taggroups = 1;  	node.taggroup = newgroup;  	newgroup.first = newgroup.last = node;  	newgroup.count = 1;  	return;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (succ.tag == int.MinValue)  	splittaggroup (node.taggroup);  else  	node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (succ.tag == int.MinValue)  	splittaggroup (node.taggroup);  else  	node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: for (int i = 0; i < size / 2; i++) {  	T swap;  	swap = a.item;  	a.item = b.item;  	b.item = swap;  	dict [a.item] = a;  	dict [b.item] = b;  	if (positions != null)  		mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' i);  	a = a.next;  	b = b.prev;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)  	mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' size / 2);  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)  	mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' size / 2);  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' size / 2);  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: foreach (T item in items)  	if (dictremove (item' out node)) {  		if (mustFire)  			raiseHandler.Remove (node.item);  		remove (node' 118);  	}  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: if (dictremove (item' out node)) {  	if (mustFire)  		raiseHandler.Remove (node.item);  	remove (node' 118);  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: remove (node' 118);  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: while (n != endsentinel) {  	bool removeIt = predicate (n.item);  	updatecheck ();  	if (removeIt) {  		dict.Remove (n.item);  		remove (n' 119);  		if (mustFire)  			raiseHandler.Remove (n.item);  	}  	n = n.next;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: if (removeIt) {  	dict.Remove (n.item);  	remove (n' 119);  	if (mustFire)  		raiseHandler.Remove (n.item);  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: remove (n' 119);  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: while (n != endsentinel && toremove.Count > 0) {  	if (toremove.Contains (n.item)) {  		dict.Remove (n.item);  		remove (n' 119);  		if (mustFire)  			raiseHandler.Remove (n.item);  	}  	n = n.next;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: if (toremove.Contains (n.item)) {  	dict.Remove (n.item);  	remove (n' 119);  	if (mustFire)  		raiseHandler.Remove (n.item);  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: remove (n' 119);  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: while (n != endsentinel) {  	bool removeIt = !predicate (n.item);  	updatecheck ();  	if (removeIt) {  		dict.Remove (n.item);  		remove (n' 119);  		if (mustFire)  			raiseHandler.Remove (n.item);  	}  	n = n.next;  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: if (removeIt) {  	dict.Remove (n.item);  	remove (n' 119);  	if (mustFire)  		raiseHandler.Remove (n.item);  }  
Magic Number,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: remove (n' 119);  
Magic Number,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,get,The following statement contains a magic number: if (pos < 0 || pos >= size)  	throw new IndexOutOfRangeException ();  else if (pos < size / 2) {  	// Closer to front  	Node node = startsentinel;  	for (int i = 0; i <= pos; i++)  		node = node.next;  	return node;  } else {  	// Closer to end  	Node node = endsentinel;  	for (int i = size; i > pos; i--)  		node = node.prev;  	return node;  }  
Magic Number,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,get,The following statement contains a magic number: if (pos < size / 2) {  	// Closer to front  	Node node = startsentinel;  	for (int i = 0; i <= pos; i++)  		node = node.next;  	return node;  } else {  	// Closer to end  	Node node = endsentinel;  	for (int i = size; i > pos; i--)  		node = node.prev;  	return node;  }  
Magic Number,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: for (int i = 0; i < size / 2; i++) {  	T swap;  	swap = a.item;  	a.item = b.item;  	b.item = swap;  	if (positions != null)  		mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' i);  	a = a.next;  	b = b.prev;  }  
Magic Number,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)  	mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' size / 2);  
Magic Number,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)  	mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' size / 2);  
Magic Number,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: mirrorViewSentinelsForReverse (positions' ref poslow' ref poshigh' a' b' size / 2);  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,Cmwc,The following statement contains a magic number: i = (i + 1) & 15;  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,Cmwc,The following statement contains a magic number: c = (uint)(t >> 32);  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,NextDouble,The following statement contains a magic number: return Cmwc () / 4294967296.0;  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,Next,The following statement contains a magic number: return (int)(Cmwc () / 4294967296.0 * max);  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,Next,The following statement contains a magic number: return min + (int)(Cmwc () / 4294967296.0 * (max - min));  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	j ^= j << 13;  	j ^= j >> 17;  	j ^= j << 5;  	Q [i] = j;  }  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	j ^= j << 13;  	j ^= j >> 17;  	j ^= j << 5;  	Q [i] = j;  }  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	j ^= j << 13;  	j ^= j >> 17;  	j ^= j << 5;  	Q [i] = j;  }  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	j ^= j << 13;  	j ^= j >> 17;  	j ^= j << 5;  	Q [i] = j;  }  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: j ^= j << 13;  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: j ^= j >> 17;  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: j ^= j << 5;  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: Q [15] = (uint)(seed ^ (seed >> 32));  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: Q [15] = (uint)(seed ^ (seed >> 32));  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: if (Q.Length != 16)  	throw new ArgumentException ("Q must have length 16' was " + Q.Length);  
Magic Number,C5,C5Random,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Random.cs,C5Random,The following statement contains a magic number: Array.Copy (Q' this.Q' 16);  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: if (incomplete) {  	stringbuilder.Append ("...");  	rest -= 3;  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 3;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: if (incomplete) {  	stringbuilder.Append ("...");  	rest -= 3;  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 3;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X4' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X4' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X4' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: try {  	if (incomplete = !Showing.Show (X1' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X2' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X3' stringbuilder' ref rest' formatProvider))  		return false;  	stringbuilder.Append ("' ");  	rest -= 2;  	if (incomplete = !Showing.Show (X4' stringbuilder' ref rest' formatProvider))  		return false;  } finally {  	if (incomplete) {  		stringbuilder.Append ("...");  		rest -= 3;  	}  	stringbuilder.Append (")");  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 2;  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: if (incomplete) {  	stringbuilder.Append ("...");  	rest -= 3;  }  
Magic Number,C5,Rec,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\Records.cs,Show,The following statement contains a magic number: rest -= 3;  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: dirs = new int[2 * dirs.Length];  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: path = new Node[2 * dirs.Length];  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: dirs = new int[2 * dirs.Length];  
Magic Number,C5,TreeBag,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: path = new Node[2 * dirs.Length];  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: dirs = new int[2 * dirs.Length];  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: path = new Node[2 * dirs.Length];  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth) {  	dirs = new int[2 * dirs.Length];  	path = new Node[2 * dirs.Length];  }  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: dirs = new int[2 * dirs.Length];  
Magic Number,C5,TreeSet,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: path = new Node[2 * dirs.Length];  
Missing Default,C5,ArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\ArrayList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition (view.offset' view.size)) {  case MutualViewPosition.ContainedIn:  	if (reverse)  		view.offset = 2 * offset + size - view.size - view.offset;  	else  		view.Dispose ();  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Missing Default,C5,HashedArrayList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition (view.offset' view.size)) {  case MutualViewPosition.ContainedIn:  	if (reverse)  		view.offset = 2 * offset + size - view.size - view.offset;  	else  		view.Dispose ();  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Missing Default,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition (view)) {  case MutualViewPosition.ContainedIn:  	if (reverse) {  	} else  		view.Dispose ();  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Missing Default,C5,HashedLinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\HashedLinkedList.cs,Reverse,The following switch statement is missing a default case: switch (viewPosition (view)) {  case MutualViewPosition.ContainedIn:  	(_positions ?? (_positions = new CircularQueue<Position> ())).Enqueue (new Position (view' true));  	_positions.Enqueue (new Position (view' false));  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Missing Default,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition (view)) {  case MutualViewPosition.ContainedIn:  	if (reverse) {  	} else  		view.Dispose ();  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
Missing Default,C5,LinkedList,D:\newReposJune17\vanthoainguyen_Burrow.NET\src\Burrow.Extras\C5\linkedlists\LinkedList.cs,Reverse,The following switch statement is missing a default case: switch (viewPosition (view)) {  case MutualViewPosition.ContainedIn:  	(_positions ?? (_positions = new CircularQueue<Position> ())).Enqueue (new Position (view' true));  	_positions.Enqueue (new Position (view' false));  	break;  case MutualViewPosition.Overlapping:  	view.Dispose ();  	break;  case MutualViewPosition.Contains:  case MutualViewPosition.NonOverlapping:  	break;  }  
