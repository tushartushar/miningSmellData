Implementation smell,Namespace,Class,File,Method,Description
Long Method,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The method has 176 lines of code.
Long Method,DbmlBuilder.Utilities,Utility,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,KeyWordCheck,The method has 187 lines of code.
Complex Method,DbmlBuilder,CodeService,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CodeService.cs,GetTemplateText,Cyclomatic complexity of the method is 19
Complex Method,DbmlBuilder,CSharpCodeLanguage,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CSharpCodeLanguage.cs,GetVariableType,Cyclomatic complexity of the method is 25
Complex Method,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,Cyclomatic complexity of the method is 27
Complex Method,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,GetDbType,Cyclomatic complexity of the method is 28
Complex Method,DbmlBuilder.CodeGenerator,Compiler,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,DbmlBuilder.Utilities,Utility,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,KeyWordCheck,Cyclomatic complexity of the method is 88
Long Parameter List,DbmlBuilder.TableSchema,TableColumnCollection,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\TableSchema.cs,Add,The method has 6 parameters.
Long Statement,DbmlBuilder,CodeService,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CodeService.cs,PrepareTemplate,The length of the statement  "		templateText = Utility.FastReplace (templateText' replaceHolder' var.ReplaceWith' StringComparison.InvariantCultureIgnoreCase); " is 127.
Long Statement,DbmlBuilder,Program,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Program.cs,SetProvider,The length of the statement  "				throw new ConfigurationErrorsException (string.Format ("ConnectionStrings section missing connection string with the name '{0}'"' connectionStringName)); " is 153.
Long Statement,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The length of the statement  "			DataRow[] drMap = dsManyToManyMap.Tables [Name].Select ("FK_Table = '" + mapTable + "' AND PK_Table <> '" + tbl.Name + "'"); " is 124.
Long Statement,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,GetScalarFunctionCollection,The length of the statement  "		StoredProcedure sp = new StoredProcedure (rdr [SqlSchemaVariable.SCHEMA_NAME].ToString ()' rdr [SqlSchemaVariable.NAME].ToString ()); " is 133.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,AddTemplate,The length of the statement  "		template.TemplateText = Utility.FastReplace (template.TemplateText' "#TEMPLATENUMBER#"' Templates.Count.ToString ()' StringComparison.InvariantCultureIgnoreCase); " is 162.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,Run,The length of the statement  "				string errorMessage = "Error generating template code: This usually indicates an error in template itself' such as use of reserved words. Detail: "; " is 148.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,CallEntry,The length of the statement  "			MethodInfo mi = type.GetMethod (Templates [i].EntryPoint' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static); " is 126.
Long Statement,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanTemplate,The length of the statement  "	templateInputText = Regex.Replace (templateInputText' @"<%=.*?%>"' new MatchEvaluator (CleanCalls)' RegexOptions.Singleline); " is 125.
Long Statement,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanTemplate,The length of the statement  "	templateInputText = Regex.Replace (templateInputText' @"<%[^=|@].*?%>"' new MatchEvaluator (CleanCodeTags)' RegexOptions.Singleline); " is 133.
Long Statement,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The length of the statement  "			writer.Write ("\t\t\twriter.Write(@\"" + templateInputText.Substring (lnLast' lnAt - lnLast).Replace ("\""' "\"\"") + "\" );"); " is 127.
Long Statement,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The length of the statement  "			writer.Write ("\t\t\twriter.Write(@\"" + templateInputText.Substring (lnLast' templateInputText.Length - lnLast).Replace ("\""' "\"\"") + "\" );"); " is 147.
Long Statement,DbmlBuilder.Utilities,Utility,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,IsStringNumeric,The length of the statement  "	return (double.TryParse (str' System.Globalization.NumberStyles.Float' System.Globalization.NumberFormatInfo.CurrentInfo' out result)); " is 135.
Magic Number,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The following statement contains a magic number: for (int i = 0; i < drfkr.Length; i++) {  	Relationship rel = new Relationship ();  	rel.Name = drfkr [i] ["RelName"].ToString ();  	Table fktable = Db.Service.GetSchema (drfkr [i] ["FkTable"].ToString ());  	rel.ClassNameOne = tbl.ClassName;  	rel.ClassNameMany = fktable.ClassName;  	string[] a = Regex.Split (rel.Name' "__");  	if (a.Length == 2) {  		rel.PropertyNameMany = a [0];  		// name used in primary table to fetch many of this table  		rel.PropertyNameOne = a [1];  		// named used for foreign key in this table  	} else {  		rel.PropertyNameOne = tbl.ClassName;  		rel.PropertyNameMany = fktable.ClassNamePlural;  	}  	DataRow[] drfk = dtFK.Select ("PkTable = '" + tbl.Name + "' and RelName = '" + rel.Name + "'");  	for (int ii = 0; ii < drfk.Length; ii++) {  		Relationship.KeyPair kp = new Relationship.KeyPair ();  		TableColumn fkcol = fktable.Columns.GetColumn (drfk [ii] ["FkColumn"].ToString ());  		TableColumn pkcol = columns.GetColumn (drfk [ii] ["PkColumn"].ToString ());  		kp.vartype = fkcol.VarType;  		kp.ForeignKey = fkcol.Name;  		kp.PrimaryKey = pkcol.Name;  		rel.KeyPairs.Add (kp);  		if (ii > 0) {  			rel.ForeignKey += "'";  			rel.PrimaryKey += "'";  		}  		rel.PrimaryKey += kp.PrimaryKey;  		rel.ForeignKey += kp.ForeignKey;  	}  	tbl.ForeignKeyTables.Add (rel);  }  
Magic Number,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The following statement contains a magic number: if (a.Length == 2) {  	rel.PropertyNameMany = a [0];  	// name used in primary table to fetch many of this table  	rel.PropertyNameOne = a [1];  	// named used for foreign key in this table  } else {  	rel.PropertyNameOne = tbl.ClassName;  	rel.PropertyNameMany = fktable.ClassNamePlural;  }  
Magic Number,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The following statement contains a magic number: for (int i = 0; i < drfkr.Length; i++) {  	Relationship rel = new Relationship ();  	rel.Name = drfkr [i] ["RelName"].ToString ();  	Table pktable = Db.Service.GetSchema (drfkr [i] ["PkTable"].ToString ());  	rel.ClassNameOne = pktable.ClassName;  	rel.ClassNameMany = tbl.ClassName;  	string[] a = Regex.Split (rel.Name' "__");  	if (a.Length == 2) {  		rel.PropertyNameMany = a [0];  		// name used in primary table to fetch many of this table  		rel.PropertyNameOne = a [1];  		// named used for foreign key in this table  	} else {  		rel.PropertyNameOne = pktable.ClassName;  		rel.PropertyNameMany = tbl.ClassNamePlural;  	}  	DataRow[] drfk = dtFK.Select ("FkTable = '" + tbl.Name + "' and RelName = '" + rel.Name + "'");  	for (int ii = 0; ii < drfk.Length; ii++) {  		Relationship.KeyPair kp = new Relationship.KeyPair ();  		TableColumn fkcol = columns.GetColumn (drfk [ii] ["FkColumn"].ToString ());  		TableColumn pkcol = pktable.Columns.GetColumn (drfk [ii] ["PkColumn"].ToString ());  		kp.vartype = fkcol.VarType;  		kp.ForeignKey = fkcol.Name;  		kp.PrimaryKey = pkcol.Name;  		rel.KeyPairs.Add (kp);  		if (ii > 0) {  			rel.ForeignKey += "'";  			rel.PrimaryKey += "'";  		}  		rel.PrimaryKey += kp.PrimaryKey;  		rel.ForeignKey += kp.ForeignKey;  		fkcol.PropertyNameOne = rel.PropertyNameOne;  	}  	tbl.ForeignKeys.Add (rel);  }  
Magic Number,DbmlBuilder,SqlDataProvider,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The following statement contains a magic number: if (a.Length == 2) {  	rel.PropertyNameMany = a [0];  	// name used in primary table to fetch many of this table  	rel.PropertyNameOne = a [1];  	// named used for foreign key in this table  } else {  	rel.PropertyNameOne = pktable.ClassName;  	rel.PropertyNameMany = tbl.ClassNamePlural;  }  
Magic Number,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanCodeTags,The following statement contains a magic number: x = x.Substring (2' x.Length - 4);  
Magic Number,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanCodeTags,The following statement contains a magic number: x = x.Substring (2' x.Length - 4);  
Magic Number,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: while (lnAt > -1) {  	if (lnAt > -1)  		writer.Write ("\t\t\twriter.Write(@\"" + templateInputText.Substring (lnLast' lnAt - lnLast).Replace ("\""' "\"\"") + "\" );");  	int lnAt2 = templateInputText.IndexOf ("%>"' lnAt);  	if (lnAt2 < 0)  		break;  	writer.Write (templateInputText.Substring (lnAt' lnAt2 - lnAt + 2));  	lnLast = lnAt2 + 2;  	lnAt = templateInputText.IndexOf ("<%"' lnLast);  	if (lnAt < 0)  		writer.Write ("\t\t\twriter.Write(@\"" + templateInputText.Substring (lnLast' templateInputText.Length - lnLast).Replace ("\""' "\"\"") + "\" );");  }  
Magic Number,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: while (lnAt > -1) {  	if (lnAt > -1)  		writer.Write ("\t\t\twriter.Write(@\"" + templateInputText.Substring (lnLast' lnAt - lnLast).Replace ("\""' "\"\"") + "\" );");  	int lnAt2 = templateInputText.IndexOf ("%>"' lnAt);  	if (lnAt2 < 0)  		break;  	writer.Write (templateInputText.Substring (lnAt' lnAt2 - lnAt + 2));  	lnLast = lnAt2 + 2;  	lnAt = templateInputText.IndexOf ("<%"' lnLast);  	if (lnAt < 0)  		writer.Write ("\t\t\twriter.Write(@\"" + templateInputText.Substring (lnLast' templateInputText.Length - lnLast).Replace ("\""' "\"\"") + "\" );");  }  
Magic Number,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: writer.Write (templateInputText.Substring (lnAt' lnAt2 - lnAt + 2));  
Magic Number,DbmlBuilder.CodeGenerator,Template,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: lnLast = lnAt2 + 2;  
Magic Number,DbmlBuilder.Utilities,Utility,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,GetProperName,The following statement contains a magic number: if (propertyName.EndsWith ("TypeCode"))  	propertyName = propertyName.Substring (0' propertyName.Length - 4);  
Magic Number,DbmlBuilder.Utilities,Utility,F:\newReposMay17\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,GetProperName,The following statement contains a magic number: propertyName = propertyName.Substring (0' propertyName.Length - 4);  
