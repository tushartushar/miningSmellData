Implementation smell,Namespace,Class,File,Method,Description
Long Method,DbmlBuilder,SqlDataProvider,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The method has 201 lines of code.
Long Method,DbmlBuilder.Utilities,Utility,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,KeyWordCheck,The method has 101 lines of code.
Complex Method,DbmlBuilder,SqlDataProvider,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,Cyclomatic complexity of the method is 25
Long Parameter List,DbmlBuilder.TableSchema,TableColumnCollection,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\TableSchema.cs,Add,The method has 6 parameters. Parameters: tbl' name' dbType' isNullable' isPrimaryKey' isForeignKey
Long Identifier,DbmlBuilder,TemplateName,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Constants.cs,,The length of the parameter GENERATED_SCAFFOLD_CODE_BEHIND is 30.
Long Identifier,DbmlBuilder,ConfigurationPropertyName,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Constants.cs,,The length of the parameter EXTRACT_CLASS_NAME_FROM_SP_NAME is 31.
Long Identifier,DbmlBuilder,ConfigurationPropertyName,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Constants.cs,,The length of the parameter GENERATE_RELATED_TABLES_AS_PROPERTIES is 37.
Long Identifier,DbmlBuilder,ConfigurationPropertyName,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Constants.cs,,The length of the parameter SET_PROPERTY_DEFAULTS_FROM_DATABASE is 35.
Long Statement,DbmlBuilder,CodeService,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CodeService.cs,PrepareTemplate,The length of the statement  "                templateText = Utility.FastReplace(templateText' replaceHolder' var.ReplaceWith' StringComparison.InvariantCultureIgnoreCase); " is 126.
Long Statement,DbmlBuilder,SqlDataProvider,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The length of the statement  "                    DataRow[] drMap = dsManyToManyMap.Tables[Name].Select("FK_Table = '" + mapTable + "' AND PK_Table <> '" + tbl.Name + "'"); " is 122.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,AddTemplate,The length of the statement  "                Utility.FastReplace(template.TemplateText' "#TEMPLATENUMBER#"' Templates.Count.ToString()' StringComparison.InvariantCultureIgnoreCase); " is 136.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,Run,The length of the statement  "                        string errorMessage = "Error generating template code: This usually indicates an error in template itself' such as use of reserved words. Detail: "; " is 148.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,ScrubOutput,The length of the statement  "                result = Utility.FastReplace(result' "namespace"' "\r\nnamespace"' StringComparison.InvariantCulture); //Must be case-sensitive' or it will cause VB End Namespace to wrap " is 170.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,ScrubOutput,The length of the statement  "                result = Utility.FastReplace(result' "public class "' "\r\npublic class "' StringComparison.InvariantCulture); //trailing space need to address class names that begin with "class" " is 179.
Long Statement,DbmlBuilder.CodeGenerator,Compiler,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\CompileEngine.cs,CallEntry,The length of the statement  "                    MethodInfo mi = type.GetMethod(Templates[i].EntryPoint' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static); " is 124.
Long Statement,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanTemplate,The length of the statement  "            templateInputText = Regex.Replace(templateInputText' @"<%=.*?%>"' new MatchEvaluator(CleanCalls)' RegexOptions.Singleline); " is 123.
Long Statement,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanTemplate,The length of the statement  "            templateInputText = Regex.Replace(templateInputText' @"<%[^=|@].*?%>"' new MatchEvaluator(CleanCodeTags)' RegexOptions.Singleline); " is 131.
Long Statement,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The length of the statement  "                    writer.Write("\t\t\twriter.Write(@\"" + templateInputText.Substring(lnLast' lnAt - lnLast).Replace("\""' "\"\"") + "\" );"); " is 124.
Long Statement,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The length of the statement  "                    writer.Write("\t\t\twriter.Write(@\"" + templateInputText.Substring(lnLast' templateInputText.Length - lnLast).Replace("\""' "\"\"") + "\" );"); " is 144.
Long Statement,DbmlBuilder.Utilities,Utility,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,IsStringNumeric,The length of the statement  "            return (double.TryParse(str' System.Globalization.NumberStyles.Float' System.Globalization.NumberFormatInfo.CurrentInfo' out result)); " is 134.
Magic Number,DbmlBuilder,SqlDataProvider,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The following statement contains a magic number: for (int i = 0; i < drfkr.Length; i++)              {                  Relationship rel = new Relationship();                  rel.Name = drfkr[i]["RelName"].ToString();                  Table fktable = Db.Service.GetSchema(drfkr[i]["FkTable"].ToString());                  rel.ClassNameOne = tbl.ClassName;                  rel.ClassNameMany = fktable.ClassName;                  string[] a = Regex.Split(rel.Name' "__");                  if (a.Length == 2)                  {                      rel.PropertyNameMany = a[0]; // name used in primary table to fetch many of this table                      rel.PropertyNameOne = a[1]; // named used for foreign key in this table                  }                  else                  {                      rel.PropertyNameOne = tbl.ClassName;                      rel.PropertyNameMany = fktable.ClassNamePlural;                  }                    DataRow[] drfk = dtFK.Select("PkTable = '" + tbl.Name + "' and RelName = '" + rel.Name + "'");                  for (int ii = 0; ii < drfk.Length; ii++)                  {                      Relationship.KeyPair kp = new Relationship.KeyPair();                      TableColumn fkcol = fktable.Columns.GetColumn(drfk[ii]["FkColumn"].ToString());                      TableColumn pkcol = columns.GetColumn(drfk[ii]["PkColumn"].ToString());                      kp.vartype = fkcol.VarType;                      kp.ForeignKey = fkcol.Name;                      kp.PrimaryKey = pkcol.Name;                      rel.KeyPairs.Add(kp);                      if (ii > 0)                      {                          rel.ForeignKey += "'";                          rel.PrimaryKey += "'";                      }                      rel.PrimaryKey += kp.PrimaryKey;                      rel.ForeignKey += kp.ForeignKey;                  }                      tbl.ForeignKeyTables.Add(rel);              }
Magic Number,DbmlBuilder,SqlDataProvider,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Sql Tools\SqlDataProvider.cs,FillTableSchema,The following statement contains a magic number: for (int i = 0; i < drfkr.Length; i++)              {                  Relationship rel = new Relationship();                  rel.Name = drfkr[i]["RelName"].ToString();                  Table pktable = Db.Service.GetSchema(drfkr[i]["PkTable"].ToString());                  rel.ClassNameOne = pktable.ClassName;                  rel.ClassNameMany = tbl.ClassName;                  string[] a = Regex.Split(rel.Name' "__");                  if (a.Length == 2)                  {                      rel.PropertyNameMany = a[0]; // name used in primary table to fetch many of this table                      rel.PropertyNameOne = a[1]; // named used for foreign key in this table                  }                  else                  {                      rel.PropertyNameOne = pktable.ClassName;                      rel.PropertyNameMany = tbl.ClassNamePlural;                  }                    DataRow[] drfk = dtFK.Select("FkTable = '" + tbl.Name + "' and RelName = '" + rel.Name + "'");                  for (int ii = 0; ii < drfk.Length; ii++)                  {                      Relationship.KeyPair kp = new Relationship.KeyPair();                      TableColumn fkcol = columns.GetColumn(drfk[ii]["FkColumn"].ToString());                      TableColumn pkcol = pktable.Columns.GetColumn(drfk[ii]["PkColumn"].ToString());                      kp.vartype = fkcol.VarType;                      kp.ForeignKey = fkcol.Name;                      kp.PrimaryKey = pkcol.Name;                      rel.KeyPairs.Add(kp);                      if (ii > 0)                      {                          rel.ForeignKey += "'";                          rel.PrimaryKey += "'";                      }                      rel.PrimaryKey += kp.PrimaryKey;                      rel.ForeignKey += kp.ForeignKey;                      fkcol.PropertyNameOne = rel.PropertyNameOne;                  }                    tbl.ForeignKeys.Add(rel);              }
Magic Number,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanCodeTags,The following statement contains a magic number: x = x.Substring(2' x.Length - 4);
Magic Number,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,CleanCodeTags,The following statement contains a magic number: x = x.Substring(2' x.Length - 4);
Magic Number,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: while (lnAt > -1)              {                  if (lnAt > -1)                      writer.Write("\t\t\twriter.Write(@\"" + templateInputText.Substring(lnLast' lnAt - lnLast).Replace("\""' "\"\"") + "\" );");                    int lnAt2 = templateInputText.IndexOf("%>"' lnAt);                  if (lnAt2 < 0)                      break;                    writer.Write(templateInputText.Substring(lnAt' lnAt2 - lnAt + 2));                    lnLast = lnAt2 + 2;                  lnAt = templateInputText.IndexOf("<%"' lnLast);                  if (lnAt < 0)                      writer.Write("\t\t\twriter.Write(@\"" + templateInputText.Substring(lnLast' templateInputText.Length - lnLast).Replace("\""' "\"\"") + "\" );");              }
Magic Number,DbmlBuilder.CodeGenerator,Template,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: while (lnAt > -1)              {                  if (lnAt > -1)                      writer.Write("\t\t\twriter.Write(@\"" + templateInputText.Substring(lnLast' lnAt - lnLast).Replace("\""' "\"\"") + "\" );");                    int lnAt2 = templateInputText.IndexOf("%>"' lnAt);                  if (lnAt2 < 0)                      break;                    writer.Write(templateInputText.Substring(lnAt' lnAt2 - lnAt + 2));                    lnLast = lnAt2 + 2;                  lnAt = templateInputText.IndexOf("<%"' lnLast);                  if (lnAt < 0)                      writer.Write("\t\t\twriter.Write(@\"" + templateInputText.Substring(lnLast' templateInputText.Length - lnLast).Replace("\""' "\"\"") + "\" );");              }
Magic Number,DbmlBuilder.Utilities,Utility,C:\repos\bvcms_bvcms\DbmlBuilder\DbmlBuilder\Utility.cs,GetProperName,The following statement contains a magic number: if (propertyName.EndsWith("TypeCode"))                  propertyName = propertyName.Substring(0' propertyName.Length - 4);
