Implementation smell,Namespace,Class,File,Method,Description
Long Method,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,FetchContributions,The method has 136 lines of code.
Long Method,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,HtmlTable,The method has 148 lines of code.
Long Method,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The method has 151 lines of code.
Long Method,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoReplaceCode,The method has 188 lines of code.
Long Method,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,ParseCondition,The method has 123 lines of code.
Long Method,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,GetExpression,The method has 226 lines of code.
Long Method,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendPeopleEmail,The method has 110 lines of code.
Long Method,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,DoGiving,The method has 104 lines of code.
Long Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,MovePersonStuff,The method has 260 lines of code.
Long Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,PostUnattendedContribution,The method has 114 lines of code.
Long Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Person,The method has 153 lines of code.
Long Method,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The method has 105 lines of code.
Long Method,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,Process,The method has 135 lines of code.
Long Method,CmsData.Classes.ProtectMyMinistry,ProtectMyMinistryHelper,C:\repos\bvcms_bvcms\CmsData\Classes\ProtectMyMinistry\ProtectMyMinistryHelper.cs,XmlCreate,The method has 108 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The method has 112 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,NextToken,The method has 176 lines of code.
Long Method,CmsData.Registration,Settings,C:\repos\bvcms_bvcms\CmsData\Registration\ReadWriteXml.cs,ReadXml,The method has 115 lines of code.
Complex Method,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,UpdateOrganization,Cyclomatic complexity of the method is 8
Complex Method,CmsData.API,APIPerson,C:\repos\bvcms_bvcms\CmsData\API\APIPerson.cs,ValidateAddress,Cyclomatic complexity of the method is 12
Complex Method,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,Cyclomatic complexity of the method is 9
Complex Method,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,FetchContributions,Cyclomatic complexity of the method is 21
Complex Method,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,HtmlTable,Cyclomatic complexity of the method is 16
Complex Method,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,ChangePassword,Cyclomatic complexity of the method is 12
Complex Method,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,ResetPassword,Cyclomatic complexity of the method is 8
Complex Method,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,UpdateValue,Cyclomatic complexity of the method is 12
Complex Method,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ExpressionTree,Cyclomatic complexity of the method is 11
Complex Method,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendPeopleEmail,Cyclomatic complexity of the method is 13
Complex Method,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendPeopleEmailWithPython,Cyclomatic complexity of the method is 8
Complex Method,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendGridMsg,Cyclomatic complexity of the method is 9
Complex Method,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendSmtpMsg,Cyclomatic complexity of the method is 9
Complex Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,DropMemberships,Cyclomatic complexity of the method is 10
Complex Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,MovePersonStuff,Cyclomatic complexity of the method is 46
Complex Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,Cyclomatic complexity of the method is 14
Complex Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UpdateValueFromText,Cyclomatic complexity of the method is 8
Complex Method,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,PostUnattendedContribution,Cyclomatic complexity of the method is 13
Complex Method,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,MoveToOrg,Cyclomatic complexity of the method is 10
Complex Method,CmsData.Finance,GivingConfirmation,C:\repos\bvcms_bvcms\CmsData\Finance\GivingConfirmationBuilder.cs,PostAndBuild,Cyclomatic complexity of the method is 9
Complex Method,CmsData.Classes.ProtectMyMinistry,ProtectMyMinistryHelper,C:\repos\bvcms_bvcms\CmsData\Classes\ProtectMyMinistry\ProtectMyMinistryHelper.cs,XmlCreate,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseIdentifier,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Complex Method,CmsData.Registration,Settings,C:\repos\bvcms_bvcms\CmsData\Registration\ReadWriteXml.cs,WriteXmlMessages,Cyclomatic complexity of the method is 12
Long Parameter List,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,UpdateOrgMember,The method has 6 parameters. Parameters: orgid' peopleid' MemberType' EnrollDate' InactiveDate' pending
Long Parameter List,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,NewOrganization,The method has 9 parameters. Parameters: divId' name' location' parentOrgId' campusId' orgtype' leadertype' securitytype' securityrole
Long Parameter List,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,UpdateOrganization,The method has 11 parameters. Parameters: orgid' name' campusid' active' location' description' orgtype' leadertype' securitytype' securityrole' parentorg
Long Parameter List,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,MessageReplacements,The method has 7 parameters. Parameters: db' p' divisionName' orgId' organizationName' location' message
Long Parameter List,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,PostContribution,The method has 7 parameters. Parameters: PeopleId' Amount' FundId' desc' date' type' checkno
Long Parameter List,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The method has 13 parameters. Parameters: Db' fromDate' toDate' PeopleId' SpouseId' FamilyId' noaddressok' useMinAmt' startswith' sort' singleStatement' tagid' excludeelectronic
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContent,The method has 6 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' subject' contentName
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,Email2,The method has 6 parameters. Parameters: qid' queuedBy' fromAddr' fromName' subject' body
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContent2,The method has 5 parameters. Parameters: qid' queuedBy' fromAddr' fromName' contentName
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContent2,The method has 6 parameters. Parameters: qid' queuedBy' fromAddr' fromName' subject' contentName
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,UploadExcelFromSqlToFtp,The method has 5 parameters. Parameters: sqlscript' username' password' targetpath' filename
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,AddPerson,The method has 7 parameters. Parameters: firstname' nickname' lastname' email' marital' gender' familymemberid
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,FindAddPerson,The method has 5 parameters. Parameters: first' last' dob' email' phone
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,FindAddPerson,The method has 5 parameters. Parameters: first' last' dob' email' phone
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,FindAddPeopleId,The method has 5 parameters. Parameters: first' last' dob' email' phone
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,Email,The method has 8 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' subject' body' cclist' dateWanted
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContent,The method has 5 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' contentName
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContentWithSubject,The method has 8 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' subject' contentName' cclist' dateWanted
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailReport,The method has 6 parameters. Parameters: savedquery' queuedBy' fromaddr' fromname' subject' report
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailReport,The method has 8 parameters. Parameters: savedquery' queuedBy' fromaddr' fromname' subject' report' queryname' querydescription
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,Email2,The method has 9 parameters. Parameters: db2' q' queuedBy' fromAddr' fromName' subject' body' cclist' dateWanted
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContent2,The method has 8 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' subject' contentName' cclist' dateWanted
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailWithPythonData,The method has 7 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' subject' body' recipientData
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContentWithPythonData,The method has 6 parameters. Parameters: savedQuery' queuedBy' fromAddr' fromName' contentName' recipientData
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,MoveToOrg,The method has 5 parameters. Parameters: pid' fromOrg' toOrg' moveregdata' toMemberTypeId
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RestPost,The method has 5 parameters. Parameters: url' headers' body' user' password
Long Parameter List,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RestPostJson,The method has 5 parameters. Parameters: url' headers' obj' user' password
Long Parameter List,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,QueryCountProgIdDivDateRange,The method has 5 parameters. Parameters: s' progid' division' startdt' days
Long Parameter List,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,AttendanceTypeCountDateRange,The method has 6 parameters. Parameters: progid' divid' orgid' attendtype' startdt' days
Long Parameter List,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,AttendCountAsOf,The method has 6 parameters. Parameters: startdt' enddt' guestonly' progid' divid' orgid
Long Parameter List,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,AttendMemberTypeCountAsOf,The method has 7 parameters. Parameters: startdt' enddt' membertypes' notmembertypes' progid' divid' orgid
Long Parameter List,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,MeetingCountDateHours,The method has 5 parameters. Parameters: progid' divid' orgid' startdt' hours
Long Parameter List,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,NumPresentDateRange,The method has 5 parameters. Parameters: progid' divid' orgid' startdt' days
Long Parameter List,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,RegisterLinkUrl,The method has 6 parameters. Parameters: db' orgid' pid' queueid' linktype' expires
Long Parameter List,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,EmailReplacements,The method has 6 parameters. Parameters: callingContext' text' from' queueid' noPremailer' pythondata
Long Parameter List,CmsData,AddressVerify,C:\repos\bvcms_bvcms\CmsData\AddressVerify.cs,LookupAddress,The method has 5 parameters. Parameters: line1' line2' city' st' zip
Long Parameter List,CmsData,AddressResult,C:\repos\bvcms_bvcms\CmsData\AddressVerify.cs,Changed,The method has 5 parameters. Parameters: addr1' addr2' city' state' zip
Long Parameter List,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The method has 11 parameters. Parameters: firstName' middleName' lastName' suffix' address' address2' city' state' country' zip' phone
Long Parameter List,CmsData,IGateway,C:\repos\bvcms_bvcms\CmsData\Finance\IGateway.cs,StoreInVault,The method has 8 parameters. Parameters: peopleId' type' cardNumber' expires' cardCode' routing' account' giving
Long Parameter List,CmsData,IGateway,C:\repos\bvcms_bvcms\CmsData\Finance\IGateway.cs,AuthCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData,IGateway,C:\repos\bvcms_bvcms\CmsData\Finance\IGateway.cs,PayWithCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData,IGateway,C:\repos\bvcms_bvcms\CmsData\Finance\IGateway.cs,PayWithCheck,The method has 18 parameters. Parameters: peopleId' amt' routing' acct' description' tranid' email' first' middle' last' suffix' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData,IGateway,C:\repos\bvcms_bvcms\CmsData\Finance\IGateway.cs,PayWithVault,The method has 5 parameters. Parameters: peopleId' amt' description' tranid' type
Long Parameter List,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,MarkRegistered,The method has 6 parameters. Parameters: Db' OrgId' PeopleId' MeetingDate' CommitId' AvoidRegrets
Long Parameter List,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,MarkRegistered,The method has 5 parameters. Parameters: Db' PeopleId' MeetingId' CommitId' AvoidRegrets
Long Parameter List,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttend,The method has 5 parameters. Parameters: Db' PeopleId' OrgId' Present' dt
Long Parameter List,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,AddAttend,The method has 5 parameters. Parameters: Db' PeopleId' OrgId' Present' dt
Long Parameter List,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,AddAttend,The method has 6 parameters. Parameters: Db' PeopleId' OrgId' Present' MeetingId' dt
Long Parameter List,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,AddAttend,The method has 7 parameters. Parameters: Db' PeopleId' OrgId' Present' attendtype' membertype' dt
Long Parameter List,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Parameter List,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,NewUser,The method has 5 parameters. Parameters: username' password' email' isApproved' PeopleId
Long Parameter List,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,MakeNewUser,The method has 5 parameters. Parameters: username' password' email' isApproved' PeopleId
Long Parameter List,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,AddContact,The method has 5 parameters. Parameters: Db' contacteeid' date' comments' contactmakerid
Long Parameter List,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,AddOrgContact,The method has 5 parameters. Parameters: db' orgId' date' comments' contactmakerid
Long Parameter List,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CreateDatabase,The method has 6 parameters. Parameters: hostName' sqlScriptsPath' masterConnectionString' imageConnectionString' elmahConnectionString' standardConnectionString
Long Parameter List,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,_logActivity,The method has 8 parameters. Parameters: host' activity' orgId' peopleId' datumId' userId' pageUrl' clientIp
Long Parameter List,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,LogActivity,The method has 7 parameters. Parameters: activity' orgid' peopleid' datumId' userId' pageUrl' clientIp
Long Parameter List,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,LogActivity,The method has 6 parameters. Parameters: host' activity' orgid' peopleid' datumId' userId
Long Parameter List,CmsData,ITableWithExtraValues,C:\repos\bvcms_bvcms\CmsData\DbUtil\ITableWithExtraValues.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ContributionAmount2,The method has 5 parameters. Parameters: start' end' fund' amt' nontaxded
Long Parameter List,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CompareContains,The method has 6 parameters. Parameters: parm' prop' op' a' arrayType' itemType
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Email,The method has 6 parameters. Parameters: from' p' addmail' subject' body' redacted
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,EmailFinanceInformation,The method has 5 parameters. Parameters: fromaddress' p' list' subject' body
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Email,The method has 6 parameters. Parameters: fromAddress' p' addmail' subject' body' redacted
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,CreateQueue,The method has 8 parameters. Parameters: From' subject' body' schedule' tagId' publicViewable' ccParents' cclist
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,CreateQueueForOrg,The method has 7 parameters. Parameters: from' subject' body' schedule' orgid' publicViewable' cclist
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,CreateQueue,The method has 10 parameters. Parameters: queuedBy' from' subject' body' schedule' tagId' publicViewable' goerSupporterId' ccParents' cclist
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,CreateQueueForSupporters,The method has 7 parameters. Parameters: queuedBy' from' subject' body' schedule' list' publicViewable
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,NotifySentEmails,The method has 5 parameters. Parameters: fromemail' fromName' subject' count' id
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendEmail,The method has 6 parameters. Parameters: fromAddress' subject' message' to' eqto' cc
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendEmail,The method has 7 parameters. Parameters: fromAddress' subject' message' to' id' pid' cc
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendGridMsg,The method has 7 parameters. Parameters: from' subject' message' to' id' pid' cc
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendSmtpMsg,The method has 8 parameters. Parameters: fromAddress' subject' message' to' id' pid' attachments' cc
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,LogActivity,The method has 5 parameters. Parameters: activity' oid' pid' did' uid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecordAttendance,The method has 6 parameters. Parameters: orgId' peopleId' meetingDate' present' location' userId
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecordAttendance,The method has 5 parameters. Parameters: orgId' peopleId' meetingDate' present' location
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,LinkEnrollmentTransaction,The method has 5 parameters. Parameters: tid' trandt' typeid' orgid' pid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgPeople,The method has 6 parameters. Parameters: oid' first' last' sgfilter' filterchecked' filtertag
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgPeople,The method has 8 parameters. Parameters: oid' grouptype' first' last' sgfilter' showhidden' filterchecked' filtertag
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,TagRecentStartAttend,The method has 7 parameters. Parameters: progid' divid' org' orgtype' days0' days' tagid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,AddExtraValueData,The method has 7 parameters. Parameters: pid' field' strvalue' datevalue' text' intvalue' bitvalue
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActivityLogSearch,The method has 9 parameters. Parameters: machine' activity' userid' orgid' peopleid' enddate' lookback' pagesize' pagenum
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,AttendanceTypeAsOf,The method has 7 parameters. Parameters: from' to' progid' divid' orgid' orgtype' ids
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,AttendCntHistory,The method has 6 parameters. Parameters: progid' divid' org' sched' start' end
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,AttendDaysAfterNthVisitAsOf,The method has 7 parameters. Parameters: progid' divid' org' d1' d2' n' days
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,AttendedAsOf,The method has 6 parameters. Parameters: progid' divid' org' dt1' dt2' guestonly
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,AttendMemberTypeAsOf,The method has 7 parameters. Parameters: from' to' progid' divid' orgid' ids' notids
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ContactSummary,The method has 5 parameters. Parameters: dt1' dt2' min' type' reas
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Contributions0,The method has 7 parameters. Parameters: fd' td' fundid' campusid' pledges' nontaxded' includeUnclosed
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Contributions2,The method has 6 parameters. Parameters: fd' td' campusid' pledges' nontaxded' includeUnclosed
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ContributionSearch,The method has 18 parameters. Parameters: Name' Comments' MinAmt' MaxAmt' StartDate' EndDate' CampusId' FundId' Online' Status' TaxNonTax' Year' Type' BundleType' IncludeUnclosedBundles' Mobile' PeopleId' ActiveTagFilter
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ContributionSearch0,The method has 16 parameters. Parameters: name' comments' bundletype' type' status' minamt' maxamt' startdate' enddate' taxnontax' fundid' campusid' year' includeunclosedbundles' mobile' online
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Contributors,The method has 7 parameters. Parameters: fd' td' pid' spid' fid' noaddrok' tagid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,DownlineDetails,The method has 5 parameters. Parameters: categoryid' leaderid' level' pagenum' pagesize
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FindPerson,The method has 5 parameters. Parameters: first' last' dob' email' phone
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FindPerson2,The method has 11 parameters. Parameters: first' goesby' last' m' d' y' email' email2' phone1' phone2' phone3
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FindPerson3,The method has 7 parameters. Parameters: first' last' dob' email' phone1' phone2' phone3
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetContributionsDetails,The method has 7 parameters. Parameters: fd' td' campusid' pledges' nontaxded' includeUnclosed' tagid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetContributionsRange,The method has 7 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed' pledge' fundid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributions2,The method has 5 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributions3,The method has 5 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributionsAgeRange,The method has 5 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributionsDonor,The method has 6 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed' tagid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributionsDonor2,The method has 7 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed' tagid' fundid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributionsDonorFund,The method has 6 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed' tagid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetTotalContributionsRange,The method has 5 parameters. Parameters: fd' td' campusid' nontaxded' includeUnclosed
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GuestList,The method has 5 parameters. Parameters: oid' since' showHidden' first' last
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,HasIncompleteRegistrations,The method has 5 parameters. Parameters: prog' div' org' begdt' enddt
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,MembersAsOf,The method has 5 parameters. Parameters: from' to' progid' divid' orgid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,NotAttendedAsOf,The method has 6 parameters. Parameters: progid' divid' org' dt1' dt2' guestonly
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgMember,The method has 6 parameters. Parameters: oid' grouptype' first' last' sgfilter' showhidden
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgMinistryInfo,The method has 6 parameters. Parameters: oid' grouptype' first' last' sgfilter' showhidden
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgPeople,The method has 12 parameters. Parameters: oid' grouptype' first' last' sgfilter' showhidden' currtag' currtagowner' filterchecked' filtertag' ministryinfo' userpeopleid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgPeople2,The method has 12 parameters. Parameters: oid' grouptype' first' last' sgfilter' showhidden' currtag' currtagowner' filterchecked' filtertag' ministryinfo' userpeopleid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgPeopleIds,The method has 12 parameters. Parameters: oid' grouptype' first' last' sgfilter' showhidden' currtag' currtagowner' filterchecked' filtertag' ministryinfo' userpeopleid
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OrgSearch,The method has 10 parameters. Parameters: name' prog' div' type' campus' sched' status' onlinereg' UserId' targetDiv
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,PeopleIdsFromOrgSearch,The method has 10 parameters. Parameters: name' prog' div' type' campus' sched' status' onlinereg' mainfellowship' parentorg
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecentAttendInDaysByCount,The method has 5 parameters. Parameters: progid' divid' org' orgtype' days
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecentAttendInDaysByCountDesc,The method has 6 parameters. Parameters: progid' divid' org' orgtype' days' desc
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecentAttendMemberType,The method has 5 parameters. Parameters: progid' divid' org' days' idstring
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecentAttendType,The method has 5 parameters. Parameters: progid' divid' org' days' idstring
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecentIncompleteRegistrations,The method has 5 parameters. Parameters: prog' div' org' begdt' enddt
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecentNewVisitCount,The method has 6 parameters. Parameters: progid' divid' org' orgtype' days0' days
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RollList,The method has 5 parameters. Parameters: mid' meetingdt' oid' current' FromMobile
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RollListFilteredBySubgroups,The method has 7 parameters. Parameters: mid' meetingdt' oid' current' FromMobile' subgroupIds' IncludeLeaderless
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RollListHighlight,The method has 5 parameters. Parameters: mid' meetingdt' oid' current' highlight
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,DaysBetween12Attend,The method has 5 parameters. Parameters: pid' progid' divid' orgid' lookback
Long Parameter List,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FindPerson0,The method has 5 parameters. Parameters: first' last' dob' email' phone
Long Parameter List,CmsData,Meeting,C:\repos\bvcms_bvcms\CmsData\Meetings\Meeting.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData,Transaction,C:\repos\bvcms_bvcms\CmsData\Finance\Transaction.cs,FullName,The method has 5 parameters. Parameters: first' last' mi' suffix' name
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FormatBirthday,The method has 5 parameters. Parameters: y' m' d' def' peopleid
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The method has 9 parameters. Parameters: fam' position' tag' name' dob' married' gender' originId' entryPointId
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The method has 11 parameters. Parameters: fam' position' tag' firstname' nickname' lastname' dob' marriedCode' gender' originId' entryPointId
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The method has 6 parameters. Parameters: db' fam' firstname' nickname' lastname' dob
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The method has 14 parameters. Parameters: db' sendNotices' fam' position' tag' firstname' nickname' lastname' dob' marriedCode' gender' originId' entryPointId' testing
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The method has 11 parameters. Parameters: fam' position' tag' firstname' nickname' lastname' dob' married' gender' originId' entryPointId
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Tag,The method has 5 parameters. Parameters: db' peopleId' tagName' ownerId' tagTypeId
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UnTag,The method has 5 parameters. Parameters: db' peopleId' tagName' ownerId' tagTypeId
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,AddEditExtraData,The method has 5 parameters. Parameters: db' id' field' value' dt
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,AddToExtraText,The method has 5 parameters. Parameters: db' id' field' value' dt
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,AddEditExtraAttributes,The method has 5 parameters. Parameters: db' id' field' value' dt
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,PostUnattendedContribution,The method has 7 parameters. Parameters: db' amt' fund' description' pledge' typecode' tranid
Long Parameter List,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FindAddPerson,The method has 9 parameters. Parameters: db' context' first' last' dob' email' phone' streetaddress' zip
Long Parameter List,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,InsertOrgMembers,The method has 9 parameters. Parameters: db' organizationId' peopleId' memberTypeId' enrollmentDate' inactiveDate' pending' name' skipTriggerProcessing
Long Parameter List,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,InsertOrgMembers,The method has 8 parameters. Parameters: db' organizationId' peopleId' memberTypeId' enrollmentDate' inactiveDate' pending' skipTriggerProcessing
Long Parameter List,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,AddOrgMember,The method has 6 parameters. Parameters: db' organizationId' peopleId' memberTypeId' enrollmentDate' name
Long Parameter List,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,AddTransaction,The method has 7 parameters. Parameters: db' reason' payment' description' amount' adjustFee' pmtDescription
Long Parameter List,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,MoveToOrg,The method has 6 parameters. Parameters: db' pid' fromOrg' toOrg' moveregdata' toMemberTypeId
Long Parameter List,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,AddAsPreviousMember,The method has 8 parameters. Parameters: db' oid' pid' orgname' mbrid' joindt' dropdt' userid
Long Parameter List,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,AddEditExtraValue,The method has 7 parameters. Parameters: field' code' date' text' bit' intn' dt
Long Parameter List,CmsData.Classes.GoogleCloudMessaging,GCMData,C:\repos\bvcms_bvcms\CmsData\Classes\GoogleCloudMessaging\GCMData.cs,GCMData,The method has 5 parameters. Parameters: type' action' id' title' message
Long Parameter List,CmsData.Classes.GoogleCloudMessaging,GCMHelper,C:\repos\bvcms_bvcms\CmsData\Classes\GoogleCloudMessaging\GCMHelper.cs,sendNotification,The method has 5 parameters. Parameters: peopleID' type' id' title' message
Long Parameter List,CmsData.Classes.GoogleCloudMessaging,GCMHelper,C:\repos\bvcms_bvcms\CmsData\Classes\GoogleCloudMessaging\GCMHelper.cs,sendNotification,The method has 5 parameters. Parameters: peopleIDs' type' id' title' message
Long Parameter List,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,StoreInVault,The method has 8 parameters. Parameters: peopleId' type' cardNumber' expires' cardCode' routing' account' giving
Long Parameter List,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,AuthCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,PayWithCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,PayWithCheck,The method has 18 parameters. Parameters: peopleId' amt' routing' acct' description' tranid' email' first' middle' last' suffix' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,PayWithVault,The method has 5 parameters. Parameters: peopleId' amt' description' tranid' type
Long Parameter List,CmsData.Finance,GivingConfirmation,C:\repos\bvcms_bvcms\CmsData\Finance\GivingConfirmationBuilder.cs,PostAndBuild,The method has 9 parameters. Parameters: db' staff' person' body' orgId' fundItems' tran' desc' donationFundId
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,StoreInVault,The method has 8 parameters. Parameters: peopleId' type' cardNumber' expires' cardCode' routing' account' giving
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,AuthCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,PayWithCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,PayWithCheck,The method has 18 parameters. Parameters: peopleId' amt' routing' acct' description' tranid' email' first' middle' last' suffix' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,PayWithVault,The method has 5 parameters. Parameters: peopleId' amt' description' tranid' type
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,ChargeCreditCardVault,The method has 5 parameters. Parameters: vaultId' peopleId' amount' tranid' description
Long Parameter List,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,ChargeAchVault,The method has 5 parameters. Parameters: vaultId' peopleId' amount' tranid' description
Long Parameter List,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,StoreInVault,The method has 8 parameters. Parameters: peopleId' type' cardNumber' expires' cardCode' routing' account' giving
Long Parameter List,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,SaveCreditCardToProfile,The method has 5 parameters. Parameters: cardNumber' cardCode' expires' paymentInfo' customer
Long Parameter List,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,AuthCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,PayWithCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,PayWithCheck,The method has 18 parameters. Parameters: peopleId' amt' routing' acct' description' tranid' email' first' middle' last' suffix' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,PayWithVault,The method has 5 parameters. Parameters: peopleId' amt' description' tranid' type
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,StoreInVault,The method has 8 parameters. Parameters: peopleId' type' cardNumber' expires' cardCode' routing' account' giving
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,AuthCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,PayWithCreditCard,The method has 17 parameters. Parameters: peopleId' amt' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,PayWithCheck,The method has 18 parameters. Parameters: peopleId' amt' routing' acct' description' tranid' email' first' middle' last' suffix' addr' addr2' city' state' country' zip' phone
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,PayWithVault,The method has 5 parameters. Parameters: peopleId' amt' description' tranid' type
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,ChargeCreditCardVault,The method has 5 parameters. Parameters: vaultGuid' person' paymentInfo' amount' tranid
Long Parameter List,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,ChargeAchVault,The method has 5 parameters. Parameters: vaultGuid' person' paymentInfo' amount' tranid
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,setCustomerInformation,The method has 6 parameters. Parameters: name1' name2' addr1' city' state' zip
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,setupCCTransaction,The method has 14 parameters. Parameters: peopleId' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' city' state' zip' phone
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,setupACHTransaction,The method has 13 parameters. Parameters: peopleId' routing' account' description' tranid' email' first' last' addr' city' state' zip' phone
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,setCustomerInformation,The method has 8 parameters. Parameters: name1' name2' addr1' addr2' city' state' zip' peopleId
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,setCustomerInformation,The method has 9 parameters. Parameters: name1' name2' addr1' addr2' city' state' zip' country' peopleId
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,updateRebillingInformation,The method has 6 parameters. Parameters: rebillID' rebNextDate' rebExpr' rebCycles' rebAmount' rebNextAmount
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getTransactionReport,The method has 5 parameters. Parameters: reportStart' reportEnd' subaccountsSearched' doNotEscape' errors
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getTransactionSettledReport,The method has 5 parameters. Parameters: reportStart' reportEnd' subaccountsSearched' doNotEscape' excludeErrors
Long Parameter List,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,calcTransNotifyTPS,The method has 13 parameters. Parameters: secretKey' transID' transStatus' transType' amount' batchID' batchStatus' totalCount' totalAmount' batchUploadID' rebillID' rebillAmount' rebillStatus
Long Parameter List,CmsData.Finance.Sage.Report,SettledBatchSummaryRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Report\SettledBatchSummaryRequest.cs,SettledBatchSummaryRequest,The method has 6 parameters. Parameters: id' key' startDate' endDate' includeCreditCards' includeEChecks
Long Parameter List,CmsData.Finance.Sage.Transaction.Auth,CreditCardAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Auth\CreditCardAuthRequest.cs,CreditCardAuthRequest,The method has 5 parameters. Parameters: id' key' creditCard' amount' orderNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Auth,CreditCardAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Auth\CreditCardAuthRequest.cs,CreditCardAuthRequest,The method has 6 parameters. Parameters: id' key' creditCard' amount' orderNumber' customerNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Auth,CreditCardVaultAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Auth\CreditCardVaultAuthRequest.cs,CreditCardVaultAuthRequest,The method has 6 parameters. Parameters: id' key' vaultGuid' nameOnCard' billingAddress' amount
Long Parameter List,CmsData.Finance.Sage.Transaction.Auth,CreditCardVaultAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Auth\CreditCardVaultAuthRequest.cs,CreditCardVaultAuthRequest,The method has 7 parameters. Parameters: id' key' vaultGuid' nameOnCard' billingAddress' amount' orderNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Auth,CreditCardVaultAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Auth\CreditCardVaultAuthRequest.cs,CreditCardVaultAuthRequest,The method has 8 parameters. Parameters: id' key' vaultGuid' nameOnCard' billingAddress' amount' orderNumber' customerNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,AchSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\AchSaleRequest.cs,AchSaleRequest,The method has 5 parameters. Parameters: id' key' originatorId' ach' amount
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,AchSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\AchSaleRequest.cs,AchSaleRequest,The method has 6 parameters. Parameters: id' key' originatorId' ach' amount' orderNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,AchVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\AchVaultSaleRequest.cs,AchVaultSaleRequest,The method has 10 parameters. Parameters: id' key' originatorId' vaultGuid' firstName' middleInitial' lastName' suffix' billingAddress' amount
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,AchVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\AchVaultSaleRequest.cs,AchVaultSaleRequest,The method has 11 parameters. Parameters: id' key' originatorId' vaultGuid' firstName' middleInitial' lastName' suffix' billingAddress' amount' orderNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,CreditCardSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\CreditCardSaleRequest.cs,CreditCardSaleRequest,The method has 5 parameters. Parameters: id' key' creditCard' amount' orderNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,CreditCardSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\CreditCardSaleRequest.cs,CreditCardSaleRequest,The method has 6 parameters. Parameters: id' key' creditCard' amount' orderNumber' customerNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,CreditCardVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\CreditCardVaultSaleRequest.cs,CreditCardVaultSaleRequest,The method has 6 parameters. Parameters: id' key' vaultGuid' nameOnCard' billingAddress' amount
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,CreditCardVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\CreditCardVaultSaleRequest.cs,CreditCardVaultSaleRequest,The method has 7 parameters. Parameters: id' key' vaultGuid' nameOnCard' billingAddress' amount' orderNumber
Long Parameter List,CmsData.Finance.Sage.Transaction.Sale,CreditCardVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Transaction\Sale\CreditCardVaultSaleRequest.cs,CreditCardVaultSaleRequest,The method has 8 parameters. Parameters: id' key' vaultGuid' nameOnCard' billingAddress' amount' orderNumber' customerNumber
Long Parameter List,CmsData.Finance.Sage.Vault,UpdateAchVaultRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Vault\UpdateAchVaultRequest.cs,UpdateAchVaultRequest,The method has 5 parameters. Parameters: id' key' vaultGuid' accountNumber' routingNumber
Long Parameter List,CmsData.Finance.Sage.Vault,UpdateCreditCardVaultRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Vault\UpdateCreditCardVaultRequest.cs,UpdateCreditCardVaultRequest,The method has 5 parameters. Parameters: id' key' operation' vaultGuid' expiration
Long Parameter List,CmsData.Finance.Sage.Vault,UpdateCreditCardVaultRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Vault\UpdateCreditCardVaultRequest.cs,UpdateCreditCardVaultRequest,The method has 5 parameters. Parameters: id' key' vaultGuid' expiration' cardNumber
Long Parameter List,CmsData.Finance.TransNational.Query,QueryRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\QueryRequest.cs,QueryRequest,The method has 5 parameters. Parameters: userName' password' transactionIds' startDate' endDate
Long Parameter List,CmsData.Finance.TransNational.Query,QueryRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\QueryRequest.cs,QueryRequest,The method has 5 parameters. Parameters: userName' password' startDate' endDate' conditions
Long Parameter List,CmsData.Finance.TransNational.Query,QueryRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\QueryRequest.cs,QueryRequest,The method has 6 parameters. Parameters: userName' password' startDate' endDate' conditions' transactionTypes
Long Parameter List,CmsData.Finance.TransNational.Query,QueryRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\QueryRequest.cs,QueryRequest,The method has 6 parameters. Parameters: userName' password' startDate' endDate' conditions' actionTypes
Long Parameter List,CmsData.Finance.TransNational.Query,QueryRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\QueryRequest.cs,QueryRequest,The method has 7 parameters. Parameters: userName' password' startDate' endDate' conditions' transactionTypes' actionTypes
Long Parameter List,CmsData.Finance.TransNational.Transaction.Auth,CreditCardAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Auth\CreditCardAuthRequest.cs,CreditCardAuthRequest,The method has 5 parameters. Parameters: userName' password' creditCard' amount' orderId
Long Parameter List,CmsData.Finance.TransNational.Transaction.Auth,CreditCardAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Auth\CreditCardAuthRequest.cs,CreditCardAuthRequest,The method has 6 parameters. Parameters: userName' password' creditCard' amount' orderId' orderDescription
Long Parameter List,CmsData.Finance.TransNational.Transaction.Auth,CreditCardAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Auth\CreditCardAuthRequest.cs,CreditCardAuthRequest,The method has 7 parameters. Parameters: userName' password' creditCard' amount' orderId' orderDescription' poNumber
Long Parameter List,CmsData.Finance.TransNational.Transaction.Auth,CreditCardVaultAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Auth\CreditCardVaultAuthRequest.cs,CreditCardVaultAuthRequest,The method has 5 parameters. Parameters: userName' password' vaultId' amount' orderId
Long Parameter List,CmsData.Finance.TransNational.Transaction.Auth,CreditCardVaultAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Auth\CreditCardVaultAuthRequest.cs,CreditCardVaultAuthRequest,The method has 6 parameters. Parameters: userName' password' vaultId' amount' orderId' orderDescription
Long Parameter List,CmsData.Finance.TransNational.Transaction.Auth,CreditCardVaultAuthRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Auth\CreditCardVaultAuthRequest.cs,CreditCardVaultAuthRequest,The method has 7 parameters. Parameters: userName' password' vaultId' amount' orderId' orderDescription' poNumber
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,AchSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\AchSaleRequest.cs,AchSaleRequest,The method has 5 parameters. Parameters: userName' password' ach' amount' orderId
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,AchSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\AchSaleRequest.cs,AchSaleRequest,The method has 6 parameters. Parameters: userName' password' ach' amount' orderId' orderDescription
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,AchSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\AchSaleRequest.cs,AchSaleRequest,The method has 7 parameters. Parameters: userName' password' ach' amount' orderId' orderDescription' poNumber
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,AchVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\AchVaultSaleRequest.cs,AchVaultSaleRequest,The method has 5 parameters. Parameters: userName' password' vaultId' amount' orderId
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,AchVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\AchVaultSaleRequest.cs,AchVaultSaleRequest,The method has 6 parameters. Parameters: userName' password' vaultId' amount' orderId' orderDescription
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,AchVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\AchVaultSaleRequest.cs,AchVaultSaleRequest,The method has 7 parameters. Parameters: userName' password' vaultId' amount' orderId' orderDescription' poNumber
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,CreditCardSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\CreditCardSaleRequest.cs,CreditCardSaleRequest,The method has 5 parameters. Parameters: userName' password' creditCard' amount' orderId
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,CreditCardSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\CreditCardSaleRequest.cs,CreditCardSaleRequest,The method has 6 parameters. Parameters: userName' password' creditCard' amount' orderId' orderDescription
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,CreditCardSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\CreditCardSaleRequest.cs,CreditCardSaleRequest,The method has 7 parameters. Parameters: userName' password' creditCard' amount' orderId' orderDescription' poNumber
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,CreditCardVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\CreditCardVaultSaleRequest.cs,CreditCardVaultSaleRequest,The method has 5 parameters. Parameters: userName' password' vaultId' amount' orderId
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,CreditCardVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\CreditCardVaultSaleRequest.cs,CreditCardVaultSaleRequest,The method has 6 parameters. Parameters: userName' password' vaultId' amount' orderId' orderDescription
Long Parameter List,CmsData.Finance.TransNational.Transaction.Sale,CreditCardVaultSaleRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Transaction\Sale\CreditCardVaultSaleRequest.cs,CreditCardVaultSaleRequest,The method has 7 parameters. Parameters: userName' password' vaultId' amount' orderId' orderDescription' poNumber
Long Parameter List,CmsData.Finance.TransNational.Vault,UpdateAchVaultRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Vault\UpdateAchVaultRequest.cs,UpdateAchVaultRequest,The method has 5 parameters. Parameters: userName' password' vaultId' nameOnAccount' billingAddress
Long Parameter List,CmsData.Finance.TransNational.Vault,UpdateCreditCardVaultRequest,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Vault\UpdateCreditCardVaultRequest.cs,UpdateCreditCardVaultRequest,The method has 5 parameters. Parameters: userName' password' vaultId' expiration' billingAddress
Long Parameter List,CmsData.Classes.ProtectMyMinistry,ProtectMyMinistryHelper,C:\repos\bvcms_bvcms\CmsData\Classes\ProtectMyMinistry\ProtectMyMinistryHelper.cs,Submit,The method has 9 parameters. Parameters: iRequestID' sSSN' sDLN' sResponseURL' iStateID' sUser' sPassword' sPlusCounty' sPlusState
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Parameter List,CmsData.Classes.Twilio,TwilioHelper,C:\repos\bvcms_bvcms\CmsData\Classes\Twilio\TwilioHelper.cs,SendSms,The method has 5 parameters. Parameters: sSID' sToken' sFrom' sTo' sBody
Long Identifier,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,,The length of the parameter pMinRequiredNonAlphanumericCharacters is 37.
Long Identifier,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,,The length of the parameter pPasswordStrengthRegularExpression is 34.
Long Identifier,CmsData,DUser,C:\repos\bvcms_bvcms\CmsData\Generated\DUser.cs,,The length of the parameter _FailedPasswordAttemptWindowStart is 33.
Long Identifier,CmsData,DUser,C:\repos\bvcms_bvcms\CmsData\Generated\DUser.cs,,The length of the parameter _FailedPasswordAnswerAttemptCount is 33.
Long Identifier,CmsData,DUser,C:\repos\bvcms_bvcms\CmsData\Generated\DUser.cs,,The length of the parameter _FailedPasswordAnswerAttemptWindowStart is 39.
Long Identifier,CmsData,User,C:\repos\bvcms_bvcms\CmsData\Extensions\User.cs,,The length of the parameter _FailedPasswordAttemptWindowStart is 33.
Long Identifier,CmsData,User,C:\repos\bvcms_bvcms\CmsData\Extensions\User.cs,,The length of the parameter _FailedPasswordAnswerAttemptCount is 33.
Long Identifier,CmsData,User,C:\repos\bvcms_bvcms\CmsData\Extensions\User.cs,,The length of the parameter _FailedPasswordAnswerAttemptWindowStart is 39.
Long Identifier,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,GetBatchDetails,The length of the parameter creditCardSettledBatchListingRequest is 36.
Long Identifier,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,GetBatchDetails,The length of the parameter creditCardSettledBatchListingResponse is 37.
Long Identifier,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,GetBatchDetails,The length of the parameter achSettledBatchListingResponse is 30.
Long Identifier,System.Linq.Dynamic,Res,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,OrganizationsForDiv,The length of the statement  "                        NumMembers = o.OrganizationMembers.Count(om => om.Pending != true && om.MemberTypeId != CmsData.Codes.MemberTypeCode.InActive) " is 126.
Long Statement,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,SendVolunteerReminders,The length of the statement  "                    sb.AppendFormat("\n<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>"' om.Person.Name' d.ToLongDateString()' d.ToLongTimeString()); " is 127.
Long Statement,CmsData.API,APIPerson,C:\repos\bvcms_bvcms\CmsData\API\APIPerson.cs,ValidateAddress,The length of the statement  "            if (a.AddressLineOne.Text.HasValue() && (a.CityName.Text.HasValue() || a.StateCode.Text.HasValue() || a.ZipCode.Text.HasValue()) " is 128.
Long Statement,CmsData.API,APIPerson,C:\repos\bvcms_bvcms\CmsData\API\APIPerson.cs,ValidateAddress,The length of the statement  "                var r = AddressVerify.LookupAddress(a.AddressLineOne.Text' a.AddressLineTwo.Text' a.CityName.Text' a.StateCode.Text' a.ZipCode.Text); " is 133.
Long Statement,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The length of the statement  "                    where (p.LastName.CompareTo(startswith) >= 0 && p.LastName.CompareTo(endswith) < 0) || SqlMethods.Like(p.LastName' endswith + "%") " is 130.
Long Statement,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The length of the statement  "                        (option == INDIV && (p.Amount > 0 || p.GiftInKind == true)) // GiftInKind = NonTaxDeductible Fund or Pledge OR GiftInkind " is 121.
Long Statement,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The length of the statement  "            Handlebars.RegisterHelper("FmtPhone"' (writer' context' args) => { writer.Write(args[0].ToString().FmtFone($"{args[1]}")); }); " is 126.
Long Statement,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,AddRole,The length of the statement  "                        user = new User() {PeopleId = p.PeopleId' Password = pword' Username = uname' MustChangePassword = false' IsApproved = true' Name = p.Name}; " is 140.
Long Statement,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,ContentForDate,The length of the statement  "            var a = Regex.Split(c.Body' @"<h1>\s*(?<dt>\d{1'2}(?:/|-)\d{1'2}(?:/|-)\d{2'4})=+\s*</h1>"' RegexOptions.ExplicitCapture); " is 122.
Long Statement,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,SqlDateValueArray,The length of the statement  "                return @"[[{label: 'Date'' id: 'Date'' type: 'date'}' 'Value']'[new Date(2000' 1' 1)' 0]' [new Date(2000' 1' 2)' 10]'[new Date(2000' 2' 1)' 0]'[new Date(2000' 2' 2)' 10]'[new Date(2000' 2' 3)' 0]'[new Date(2000' 3' 1)' 0]'[new Date(2000' 3' 2)' 10]'[new Date(2000' 3' 3)' 1]'[new Date(2000' 4' 1)' 1]'[new Date(2000' 4' 2)' 10]'[new Date(2000' 4' 3)' 0]'[new Date(2000' 5' 1)' 0]'[new Date(2000' 5' 2)' 10]'[new Date(2000' 5' 3)' 1]'[new Date(2000' 6' 1)' 1]'[new Date(2000' 6' 2)' 0]'[new Date(2000' 7' 1)' 0]'[new Date(2000' 7' 2)' 10]'[new Date(2000' 7' 3)' 1]'[new Date(2000' 8' 1)' 1]'[new Date(2000' 8' 2)' 0]]"; " is 618.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]"; " is 217.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]"; " is 201.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]"; " is 186.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]"; " is 171.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]"; " is 156.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]"; " is 141.
Long Statement,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The length of the statement  "                        return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]"; " is 126.
Long Statement,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoReplaceCode,The length of the statement  "                    return Person.FormatBirthday(person.BirthYr' person.BirthMonth' person.BirthDay' "not available"' emailqueueto?.PeopleId); " is 122.
Long Statement,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoReplaceCode,The length of the statement  "                        return person.PreferredName.Contains("?") || person.PreferredName.Contains("unknown"' true) ? "" : person.PreferredName; " is 120.
Long Statement,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,FirstOrSubstituteReplacement,The length of the statement  "            return !person.PreferredName.HasValue() || person.PreferredName.Contains("?") || person.PreferredName.Contains("unknown"' true)  " is 127.
Long Statement,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,TextReplacementsList,The length of the statement  "            var stringlist = Regex.Split(text' Pattern2' RegexOptions.IgnoreCase | RegexOptions.Singleline | RegexOptions.IgnorePatternWhitespace); " is 135.
Long Statement,CmsData,AddressResult,C:\repos\bvcms_bvcms\CmsData\AddressVerify.cs,Changed,The length of the statement  "                return Line1 != addr1 || (Line2 ?? "") != (addr2 ?? "") || City != city || State != state || (Zip ?? "") != (zip ?? ""); " is 120.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,PreviewCommandText,The length of the statement  "				output.AppendFormat( "-- {0}: {1} {2} (Size = {3}; Prec = {4}; Scale = {5}) [{6}]\r\n"' new object[] { parameter.ParameterName' parameter.Direction' ( parameter2 == null ) ? parameter.DbType.ToString() : parameter2.SqlDbType.ToString()' parameter.Size.ToString( CultureInfo.CurrentCulture )' num' num2' ( parameter2 == null ) ? parameter.Value : parameter2.SqlValue } ); " is 370.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDeleteBatchCommand,The length of the statement  "			deleteCommand.CommandText = string.Format( "DELETE [{0}]\r\n"' table.GetDbName() ) + GetBatchJoinQuery<TEntity>( table' entities ); " is 131.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "				throw new NotImplementedException( string.Format( "The MemberInitExpression is intializing a class of the incorrect type '{0}' and it should be '{1}'."' memberInitExpression.Type' entityType ) ); " is 195.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "			var dbCols = from mdm in metaTable.RowType.DataMembers			// Used to look up actual field names when MemberAssignment is a constant " is 130.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "			// Walk all the expression bindings and generate SQL 'commands' from them.  Each binding represents a property assignment " is 121.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "					throw new NotImplementedException( "All bindings inside the MemberInitExpression are expected to be of type MemberAssignment." ); " is 129.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "				// (Document): What is this doing?  I know it's grabbing existing parameter to pass into Expression.Call() but explain 'why' " is 124.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "				assignment.Expression.Visit<ParameterExpression>( delegate( ParameterExpression p ) { if ( p.Type == entityType ) entityParam = p; return p; } ); " is 145.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "					throw new ArgumentOutOfRangeException( name' string.Format( "The corresponding field on the {0} table could not be found."' tableName ) ); " is 138.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "					// (Documentation): Explain what we are doing here again' I remember you telling me why we have to call but I can't remember now. " is 129.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "					// Wny are we calling Expression.Call and what are we passing it?  Below comments are just 'made up' and probably wrong. " is 120.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "					// Create a MethodCallExpression which represents a 'simple' select of *only* the assignment part (right hand operator) of " is 122.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The length of the statement  "					// of the MemberInitExpression.MemberAssignment so that we can let the Linq Provider do all the 'sql syntax' generation for " is 123.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,ValidateExpression,The length of the statement  "			PropertyInfo providerProperty = context.GetType().GetProperty( "Provider"' BindingFlags.Instance | BindingFlags.NonPublic ); " is 124.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,ValidateExpression,The length of the statement  "			var compileMI = provider.GetType().GetMethod( "System.Data.Linq.Provider.IProvider.Compile"' BindingFlags.Instance | BindingFlags.NonPublic ); " is 142.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetAssignment,The length of the statement  "									.Replace( " AS [value]"' "" )					// If the select is not a direct field (constant or expression)' remove the field alias " is 121.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetBatchJoinQuery,The length of the statement  "			var selectClause = select.Substring( 0' select.IndexOf( "[t0]" ) );							// Get 'SELECT ' and any TOP clause if present " is 120.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetBatchJoinQuery,The length of the statement  "			subSelect += select.Substring( select.IndexOf( "\r\nFROM " ) ); // Create a sub SELECT that *only* includes the primary key fields " is 130.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetBatchJoinQuery,The length of the statement  "			var batchJoin = String.Format( "FROM [{0}] AS j0 INNER JOIN (\r\n\r\n{1}\r\n\r\n) AS j1 ON ({2})\r\n"' table.GetDbName()' subSelect' join ); " is 140.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetLog,The length of the statement  "			PropertyInfo providerProperty = context.GetType().GetProperty( "Provider"' BindingFlags.Instance | BindingFlags.NonPublic ); " is 124.
Long Statement,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetLog,The length of the statement  "			PropertyInfo modelProperty = services != null ? services.GetType().GetProperty( "Model"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.GetProperty ) : null; " is 194.
Long Statement,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,_logActivity,The length of the statement  "//                        "INSERT dbo.RegActivity (db' dt' activity' oid' pid' did) VALUES(@db' @dt' @ac' @oid' @pid' @did)"' " is 125.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FamilyExtraDate,The length of the statement  "                Expression<Func<Person' DateTime>> pred = p => p.Family.FamilyExtras.SingleOrDefault(e => e.Field == field).DateValue.Value; " is 124.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,DaysSinceExtraDate,The length of the statement  "            Expression<Func<Person' int?>> pred = p => SqlMethods.DateDiffDay(p.PeopleExtras.SingleOrDefault(e => e.Field == field).DateValue' Util.Now.Date); " is 146.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,HasParents,The length of the statement  "                p.Family.People.Any(m => m.PositionInFamilyId == PositionInFamily.PrimaryAdult && p.PositionInFamilyId == PositionInFamily.Child); " is 130.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FamilyHasChildrenAged2,The length of the statement  "                p.Family.People.Any(m => (m.Age ?? 0) >= range[0].ToInt() && (m.Age ?? 0) <= range[1].ToInt() && m.PositionInFamilyId == PositionInFamily.Child); " is 145.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FamHasStatusFlag,The length of the statement  "                p.Family.People.Any(m => m.Tags.Any(tt => codes.Contains(tt.Tag.Name) && tt.Tag.TypeId == DbUtil.TagTypeId_StatusFlags)); " is 121.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The length of the statement  "                                 where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt)) " is 122.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The length of the statement  "                                 where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt)) " is 122.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The length of the statement  "                                 where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt)) " is 122.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The length of the statement  "                                 where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt)) " is 122.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,DaysAfterNthVisitAsOf,The length of the statement  "            var q = db.AttendDaysAfterNthVisitAsOf(ProgramInt' DivisionInt' OrganizationInt' StartDate' EndDate' Quarters.ToInt()' Days).Select(p => p.PeopleId); " is 149.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInByActivity,The length of the statement  "            Expression<Func<Person' bool>> pred = p => p.CheckInTimes.Any(e => e.CheckInActivities.Any(a => CodeStrIds.Contains(a.Activity))); " is 130.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,HasRecentNewAttend,The length of the statement  "            db.TagRecentStartAttend(ProgramInt ?? 0' DivisionInt ?? 0' OrganizationInt' OrgTypeInt ?? 0' days0 ?? 365' Days' tag.Id); " is 121.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,NeedAttendance,The length of the statement  "                where !m.Organization.Meetings.Any(mm => mm.MeetingDate > mindt && (mm.HeadCount > 0 || mm.Attends.Any(aa => aa.AttendanceFlag))) " is 129.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentFamilyAdultLastAttend,The length of the statement  "            var q = from m in db.LastFamilyOrgAttends(ProgramInt' DivisionInt' OrganizationInt' Codes.PositionInFamily.PrimaryAdult) " is 120.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,LeadersUnderCurrentOrg,The length of the statement  "                    p.OrganizationMembers.Any(mm => oids.Contains(mm.OrganizationId) && mm.MemberType.AttendanceTypeId == AttendTypeCode.Leader) " is 124.
Long Statement,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CompareStringConstant,The length of the statement  "            var left = Expression.Call(Expression.Coalesce(Expression.Property(parm' prop)' Expression.Constant(""))' "Trim"' null); " is 120.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,CreateQueue,The length of the statement  "            return CreateQueue(Util.UserPeopleId' From' subject' body' schedule' tagId' publicViewable' ccParents: ccParents' cclist: cclist); " is 130.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SendPersonEmail,The length of the statement  "                            $"<p style='color:red'>You are receiving this because there is no email address for {p.Name}({p.PeopleId}). You should probably contact them since they were probably expecting this information.</p>\n{text}"' " is 207.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,CcMessage,The length of the statement  "                return $"<p align='center'><small><i>This email was CC\'d to the email addresses below and they are included in the Reply-To Field.</br>{cclist}</i></small></p>"; " is 162.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,XSmtpApiHeader,The length of the statement  "            return $"{{\"unique_args\":{{\"host\":\"{CmsHost}\"'\"mailid\":\"{id}\"'\"pid\":\"{pid}\"'\"domain\":\"{fromEmail}\"}}}}"; " is 122.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SubmitChanges,The length of the statement  "                        //        var iex = new InvalidOperationException(mm.Name + " in " + mm.DeclaringType.Name + " has a value that will not fit into " + mm.DbType + " " + dt.FormatDate()); " is 169.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SubmitChanges,The length of the statement  "                                    var iex = new InvalidOperationException(mm.Name + " in " + mm.DeclaringType.Name + " has a value that will not fit into " + mm.DbType); " is 135.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,RecordAttendance,The length of the statement  "            var result = this.ExecuteMethodCall(this' ((MethodInfo)(MethodInfo.GetCurrentMethod()))' orgId' peopleId' meetingDate' present' location' userId); " is 146.
Long Statement,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,LinkEnrollmentTransaction,The length of the statement  "            var result = this.ExecuteMethodCall(this' ((MethodInfo)(MethodInfo.GetCurrentMethod()))' tid' trandt' typeid' orgid' pid); " is 122.
Long Statement,CmsData,Util2,C:\repos\bvcms_bvcms\CmsData\DbUtil\Session.cs,Log2File,The length of the statement  "            string fn = ConfigurationManager.AppSettings["SharedFolder"].Replace("%USERPROFILE%"' Environment.GetEnvironmentVariable("USERPROFILE")); " is 137.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,Drop,The length of the statement  "                db.ExecuteCommand("DELETE dbo.Attend WHERE OrganizationId = {0} AND MeetingDate > {1} AND PeopleId = {2} AND ISNULL(Commitment' 1) = 1"' OrganizationId' Util.Now' PeopleId); " is 173.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,Drop,The length of the statement  "                db.ExecuteCommand("DELETE dbo.Attend WHERE OrganizationId = {0} AND DATEADD(DAY' DATEDIFF(DAY' 0' MeetingDate)' 0) = DATEADD(DAY' DATEDIFF(DAY' 0' GETDATE())' 0) AND PeopleId = {1} AND AttendanceFlag = 0"' OrganizationId' PeopleId); " is 232.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,Drop,The length of the statement  "                db.ExecuteCommand("UPDATE dbo.GoerSenderAmounts SET InActive = 1 WHERE OrgId = {0} AND (GoerId = {1} OR SupporterId = {1})"' OrganizationId' PeopleId); " is 151.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,InsertOrgMembers,The length of the statement  "            return InsertOrgMembers(db' organizationId' peopleId' memberTypeId' enrollmentDate' inactiveDate' pending' org.OrganizationName' skipTriggerProcessing); " is 152.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,AddTransaction,The length of the statement  "                ti2.TransactionPeople.Add(new TransactionPerson { PeopleId = PeopleId' OrgId = OrganizationId' Amt = amount ?? payment }); " is 122.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,AddEditExtra,The length of the statement  "            var omev = db.OrgMemberExtras.SingleOrDefault(oe => oe.OrganizationId == OrganizationId && oe.PeopleId == PeopleId && oe.Field == field); " is 137.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,GetExtra,The length of the statement  "            var oev = db.OrgMemberExtras.SingleOrDefault(oe => oe.OrganizationId == OrganizationId && oe.PeopleId == PeopleId && oe.Field == field); " is 136.
Long Statement,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,RemoveExtraValue,The length of the statement  "            var ev = OrgMemberExtras.AsEnumerable().FirstOrDefault(ee => string.Compare(ee.Field' field' StringComparison.OrdinalIgnoreCase) == 0); " is 135.
Long Statement,CmsData,User,C:\repos\bvcms_bvcms\CmsData\Extensions\User.cs,SetRoles,The length of the statement  "                db.LogActivity($"Remove Roles {string.Join("'"' deletes.Select(rr => rr.RoleName))} from user {Username}"' pid: PeopleId' uid: Util.UserPeopleId); " is 146.
Long Statement,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateMemberType,The length of the statement  "                mt = new MemberType { Id = max' Description = type' Code = type.Truncate(20)' AttendanceTypeId = AttendTypeCode.Member }; " is 121.
Long Statement,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,RemoveExtraValue,The length of the statement  "            var ev = OrganizationExtras.AsEnumerable().FirstOrDefault(ee => string.Compare(ee.Field' field' ignoreCase: true) == 0); " is 120.
Long Statement,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,StoreInVault,The length of the statement  "                gateway.setupCCTransaction(peopleId' cardNumber' expires' description' null' cardCode' email' first' last' addr' city' state' zip' phone); " is 138.
Long Statement,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,StoreInVault,The length of the statement  "                        $"BluePay failed to save the credit card info for people id: {person.PeopleId}' message: {response.Message}; transactionID: {response.TransactionId}"); " is 151.
Long Statement,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,AuthCreditCard,The length of the statement  "            gateway.setupCCTransaction(peopleId' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' city' state' zip' phone); " is 140.
Long Statement,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,PayWithCreditCard,The length of the statement  "            gateway.setupCCTransaction(peopleId' cardnumber' expires' description' tranid' cardcode' email' first' last' addr' city' state' zip' phone); " is 140.
Long Statement,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,PayWithCheck,The length of the statement  "            gateway.setupACHTransaction(peopleId' routing' acct' description' tranid' email' first' last' addr' city' state' zip' phone); " is 125.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "            var unmatchedBatchReferences = allBatchReferences.Where(br => !db.CheckedBatches.Any(tt => tt.BatchRef == br)).ToList(); " is 120.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "                var unMatchedKeyedByReference = unMatchedBatchTransactions.Where(x => x.BatchType == batchType).ToDictionary(x => x.Reference' x => x); " is 135.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "                                                   where (transaction.PaymentType == null || transaction.PaymentType == (batchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard)) " is 141.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "                    var originalTransaction = db.Transactions.SingleOrDefault(t => t.TransactionId == transactionToInsert.Reference && transactionToInsert.TransactionDate >= notbefore && t.PaymentType == (batchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard)); " is 257.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "                        Description = originalTransaction != null ? originalTransaction.Description : $"no description from {gateway.GatewayType}' id={transactionToInsert.TransactionId}"' " is 163.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "                    existingTransaction.PaymentType = batchTransaction.BatchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard; " is 121.
Long Statement,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,CheckBatchSettlements,The length of the statement  "                    existingTransaction.LastFourCC = batchTransaction.BatchType == BatchType.CreditCard ? batchTransaction.LastDigits : null; " is 121.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CreateCreditCardVault,The length of the statement  "                    $"TransNational failed to create the credit card for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 162.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,UpdateCreditCardVault,The length of the statement  "                    $"TransNational failed to update the credit card for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 162.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,UpdateCreditCardVault,The length of the statement  "                    $"TransNational failed to update the credit card expiration date for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 178.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CreateAchVault,The length of the statement  "                    $"TransNational failed to create the ach account for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 162.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,UpdateAchVault,The length of the statement  "                    $"TransNational failed to update the ach account for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 162.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,UpdateAchVault,The length of the statement  "                    $"TransNational failed to update the ach account for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 162.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,DeleteVault,The length of the statement  "                    $"TransNational failed to delete the vault for people id: {person.PeopleId}' responseCode: {response.ResponseCode}' responseText: {response.ResponseText}"); " is 156.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,BuildBatchTransactionsList,The length of the statement  "                // need to make sure that both the settle action and the original action (sale' capture' credit or refund) are present before proceeding. " is 137.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,GetReturnedChecks,The length of the statement  "                var returnAction = transaction.Actions.FirstOrDefault(a => a.ActionType == ActionType.CheckReturn || a.ActionType == ActionType.CheckLateReturn); " is 145.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The length of the statement  "                var unMatchedKeyedByReference = batchTransactions.Where(x => x.BatchType == batchType).ToDictionary(x => x.Reference' x => x); " is 126.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The length of the statement  "                    var originalTransaction = db.Transactions.SingleOrDefault(t => t.TransactionId == transactionToInsert.Reference && transactionToInsert.TransactionDate >= notbefore && t.PaymentType == (batchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard)); " is 257.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The length of the statement  "                        Description = originalTransaction != null ? originalTransaction.Description : $"no description from {GatewayType}' id={transactionToInsert.TransactionId}"' " is 155.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The length of the statement  "                    existingTransaction.PaymentType = batchTransaction.BatchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard; " is 121.
Long Statement,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The length of the statement  "                    existingTransaction.LastFourCC = batchTransaction.BatchType == BatchType.CreditCard ? batchTransaction.LastDigits : null; " is 121.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,StoreInVault,The length of the statement  "                // TODO: Authorize.net needs to release a new Nuget package' because they don't have a clean way to pass in customer ID (aka PeopleId) yet... the latest code has a parameter for this' though " is 190.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,SaveECheckToProfile,The length of the statement  "            var foundPaymentProfile = customer.PaymentProfiles.SingleOrDefault(p => p.ProfileID == paymentInfo.AuNetCustPayBankId.ToString()); " is 130.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,SaveECheckToProfile,The length of the statement  "                var paymentProfileId = CustomerGateway.AddECheckBankAccount(customer.ProfileID' BankAccountType.Checking' routingNumber' accountNumber' customer.Description); " is 158.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,SaveCreditCardToProfile,The length of the statement  "            var foundPaymentProfile = customer.PaymentProfiles.SingleOrDefault(p => p.ProfileID == paymentInfo.AuNetCustPayId.ToString()); " is 126.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,RefundCreditCard,The length of the statement  "                throw new ArgumentException("Last four of credit card number are required for refunds against Authorize.net"' "lastDigits"); " is 124.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,RefundCheck,The length of the statement  "                throw new ArgumentException("Last four of bank account number are required for refunds against Authorize.net"' "lastDigits"); " is 125.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,PayWithCheck,The length of the statement  "            var request = new EcheckRequest(EcheckType.WEB' amt' routing' acct' BankAccountType.Checking' null' first + " " + last' null); " is 126.
Long Statement,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,GetReturnedChecks,The length of the statement  "            foreach (var transaction in ReportingGateway.GetTransactionList(start' end).Where(t => t.HasReturnedItems == NullableBooleanEnum.True)) " is 135.
Long Statement,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,UpdateCreditCardVault,The length of the statement  "                    $"Sage failed to update the credit card expiration date for people id: {person.PeopleId}' message: {response.Message}"); " is 120.
Long Statement,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,setCCInformation,The length of the statement  "            if (cvv2 != null && !cvv2.StartsWith("X")) //checks for masked number in case this is a request to update vault info besides cvv2# " is 130.
Long Statement,CmsData.Finance.Sage.Vault,DeleteVaultRequest,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Vault\DeleteVaultRequest.cs,Execute,The length of the statement  "                //TODO: There seems to be a bug with Sage on deleting a vault. It always returns true (even when it shouldn't) in some wierd boolean xml node' so for now I just always return true. " is 180.
Long Statement,CmsData.QueryBuilder,QueryLexer,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryLexer.cs,GetNext,The length of the statement  "            throw new QueryParser.QueryParserException($"Unable to match against any tokens at line {LineNumber} position {Position} \"{LineRemaining}\""); " is 143.
Long Statement,CmsData.Registration,AskDropdown,C:\repos\bvcms_bvcms\CmsData\Registration\AskDropdown.cs,SmallGroupChoice,The length of the statement  "            var v = list.Where(i => i.SmallGroup != "nocheckbox").SingleOrDefault(i => choices.Contains(i.SmallGroup' StringComparer.OrdinalIgnoreCase)); " is 141.
Complex Conditional,CmsData.API,APIPerson,C:\repos\bvcms_bvcms\CmsData\API\APIPerson.cs,ValidateAddress,The conditional expression  "!addrok && !a.CityName.Text.HasValue() && !a.StateCode.Text.HasValue() && !a.ZipCode.Text.HasValue()"  is complex.
Complex Conditional,CmsData.API,APIPerson,C:\repos\bvcms_bvcms\CmsData\API\APIPerson.cs,ValidateAddress,The conditional expression  "a.AddressLineOne.Text.HasValue() && (a.CityName.Text.HasValue() || a.StateCode.Text.HasValue() || a.ZipCode.Text.HasValue())                  && (a.CountryName == "United States" || !a.CountryName.HasValue())"  is complex.
Complex Conditional,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The conditional expression  "name.Contains("Info") || name.Contains("Classes") || name == "Questions" || name == "Address""  is complex.
Complex Conditional,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,GetWhereClause,The conditional expression  "typ == typeof(int)                           || typ == typeof(int?)                           || typ == typeof(long)                           || typ == typeof(long?)                           || typ == typeof(decimal)                           || typ == typeof(decimal?)                           || typ == typeof(double)                          || typ == typeof(double?)                          || typ == typeof(float)                          || typ == typeof(float?)"  is complex.
Complex Conditional,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,GetGateway,The conditional expression  "(pi.PreferredGivingType == "B" && pi.SageBankGuid.HasValue) ||                          (pi.PreferredGivingType == "C" && pi.SageCardGuid.HasValue)"  is complex.
Complex Conditional,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,GetGateway,The conditional expression  "(pi.PreferredGivingType == "B" && pi.TbnBankVaultId.HasValue) ||                          (pi.PreferredGivingType == "C" && pi.TbnCardVaultId.HasValue)"  is complex.
Complex Conditional,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The conditional expression  "Util.UserPeopleId.HasValue                      && Util.UserPeopleId.Value != db.NewPeopleManagerId                      && HttpContext.Current.User.IsInRole("Access")                      && !HttpContext.Current.User.IsInRole("OrgMembersOnly")                      && !HttpContext.Current.User.IsInRole("OrgLeadersOnly")"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                  token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                  token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                  token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseMultiplicative,The conditional expression  "token.id == TokenId.Asterisk || token.id == TokenId.Slash ||                  token.id == TokenId.Percent || TokenIdentifierIs("mod")"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType(exprType) || IsEnumType(exprType)) &&                      (IsNumericType(type)) || IsEnumType(type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom(type) || type.IsAssignableFrom(exprType) ||                  exprType.IsInterface || type.IsInterface"  is complex.
Empty Catch Block,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,EmailReplacements,The method has an empty catch block.
Magic Number,CmsData.API,ApiSessionModel,C:\repos\bvcms_bvcms\CmsData\API\ApiSessionModel.cs,DetermineApiSessionStatus,The following statement contains a magic number: const int minutesSessionIsValid = 30;
Magic Number,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,SendVolunteerReminders,The following statement contains a magic number: var currmembers = (from om in org.OrganizationMembers                                 where (om.Pending ?? false) == false                                 where om.MemberTypeId != CmsData.Codes.MemberTypeCode.InActive                                 where org.Attends.Any(a => (a.MeetingDate <= DateTime.Today.AddDays(7) || sendall)                                     && a.MeetingDate >= DateTime.Today                                     && AttendCommitmentCode.committed.Contains(a.Commitment ?? 0)                                     && a.PeopleId == om.PeopleId)                                 select om).ToList();
Magic Number,CmsData.API,APIOrganization,C:\repos\bvcms_bvcms\CmsData\API\APIOrganization.cs,SendVolunteerReminders,The following statement contains a magic number: foreach (var om in currmembers)              {                  var q = (from a in org.Attends                           where a.PeopleId == om.PeopleId                           where AttendCommitmentCode.committed.Contains(a.Commitment ?? 0)                           where a.MeetingDate >= DateTime.Today                           where a.MeetingDate <= DateTime.Today.AddDays(7)                           orderby a.MeetingDate                           select a.MeetingDate).ToList();                  if (!q.Any())                      continue;                  foreach (var d in q)                      sb.AppendFormat("\n<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>"' om.Person.Name' d.ToLongDateString()' d.ToLongTimeString());              }
Magic Number,CmsData.API,APIPerson,C:\repos\bvcms_bvcms\CmsData\API\APIPerson.cs,GetPeopleData,The following statement contains a magic number: return q.Take(100);
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,PostContribution,The following statement contains a magic number: try              {                  var p = Db.LoadPersonById(PeopleId);                  if (p == null)                      throw new Exception("no person");                  var c = p.PostUnattendedContribution(Db' Amount' FundId' desc);                  DateTime dt;                  if (date.DateTryParse(out dt))                      c.ContributionDate = dt;                  if (type.HasValue)                      c.ContributionTypeId = type.Value;                  if (checkno.HasValue())                      c.CheckNo = (checkno ?? "").Trim().Truncate(20);                  Db.SubmitChanges();                  return $@"<PostContribution status=""ok"" id=""{c.ContributionId}"" />";              }              catch (Exception ex)              {                  return $@"<PostContribution status=""error"">{ex.Message}</PostContribution>";              }
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,Contributions,The following statement contains a magic number: try              {                  var p = Db.LoadPersonById(PeopleId);                  if (p == null)                      throw new Exception("no person");                  if (p.PositionInFamilyId != PositionInFamily.PrimaryAdult)                      throw new Exception("not a primary adult");                  var frdt = new DateTime(Year' 1' 1);                  var todt = new DateTime(Year' 12' 31);                  var f = GetFamilyContributions(frdt' todt' p);                  return SerializeContributions(f);              }              catch (Exception ex)              {                  return $@"<PostContribution status=""error"">{ex.Message}</PostContribution>";              }
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,Contributions,The following statement contains a magic number: try              {                  var p = Db.LoadPersonById(PeopleId);                  if (p == null)                      throw new Exception("no person");                  if (p.PositionInFamilyId != PositionInFamily.PrimaryAdult)                      throw new Exception("not a primary adult");                  var frdt = new DateTime(Year' 1' 1);                  var todt = new DateTime(Year' 12' 31);                  var f = GetFamilyContributions(frdt' todt' p);                  return SerializeContributions(f);              }              catch (Exception ex)              {                  return $@"<PostContribution status=""error"">{ex.Message}</PostContribution>";              }
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The following statement contains a magic number: if (startswith != null && startswith.Contains("-"))              {                  var a = startswith.SplitStr("-"' 2);                  startswith = a[0];                  endswith = a[1];              }
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The following statement contains a magic number: if (singleStatement)              {                  var familylist = q.ToList();                  if (familylist.Any(m => m.DeceasedDate != null && m.ContributionOptionsId == 2))                      return GetInfo(familylist);              }
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The following statement contains a magic number: if (Db.Setting("NoTitlesOnStatements"' "false").ToBool())                  q2 = from p in q                       let option = (p.ContributionOptionsId ?? 0) == 0                           ? (p.SpouseId > 0 && (p.SpouseContributionOptionsId ?? 0) != 1 ? 2 : 1)                           : p.ContributionOptionsId                       let name =                           option == 1                               ? p.Name                               : (p.SpouseId == null                                   ? p.Name                                   : (p.HohFlag == 1                                       ? p.CoupleName ?? (p.Name + " and " + p.SpouseName)                                       : p.CoupleName ?? (p.SpouseName + " and " + p.Name)))                       select new ContributorInfo                       {                           Name = name'                           MailingAddress = MailingAddress(p)'                           PeopleId = p.PeopleId'                           SpouseID = p.SpouseId'                           DeacesedDate = p.DeceasedDate'                           FamilyId = p.FamilyId'                           Age = p.Age'                           FamilyPositionId = p.PositionInFamilyId'                           hohInd = p.HohFlag'                           Joint = option == 2'                           CampusId = p.CampusId'                       };              else                  q2 = GetInfo(q);
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,contributors,The following statement contains a magic number: if (Db.Setting("NoTitlesOnStatements"' "false").ToBool())                  q2 = from p in q                       let option = (p.ContributionOptionsId ?? 0) == 0                           ? (p.SpouseId > 0 && (p.SpouseContributionOptionsId ?? 0) != 1 ? 2 : 1)                           : p.ContributionOptionsId                       let name =                           option == 1                               ? p.Name                               : (p.SpouseId == null                                   ? p.Name                                   : (p.HohFlag == 1                                       ? p.CoupleName ?? (p.Name + " and " + p.SpouseName)                                       : p.CoupleName ?? (p.SpouseName + " and " + p.Name)))                       select new ContributorInfo                       {                           Name = name'                           MailingAddress = MailingAddress(p)'                           PeopleId = p.PeopleId'                           SpouseID = p.SpouseId'                           DeacesedDate = p.DeceasedDate'                           FamilyId = p.FamilyId'                           Age = p.Age'                           FamilyPositionId = p.PositionInFamilyId'                           hohInd = p.HohFlag'                           Joint = option == 2'                           CampusId = p.CampusId'                       };              else                  q2 = GetInfo(q);
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,GetInfo,The following statement contains a magic number: var q2 = from p in q                       let option = (p.ContributionOptionsId ?? 0) == 0                           ? (p.SpouseId > 0 && (p.SpouseContributionOptionsId ?? 0) != 1 ? 2 : 1)                           : p.ContributionOptionsId                       let name =                           (option == 1                               ? (p.Title != null ? p.Title + " " + p.Name : p.Name)                               : (p.SpouseId == null                                   ? (p.Title != null ? p.Title + " " + p.Name : p.Name)                                   : p.CoupleName ?? (p.HohFlag == 1                                       ? ((p.Title ?? "") != ""                                           ? p.Title + " and Mrs. " + p.Name                                           : "Mr. and Mrs. " + p.Name)                                       : ((p.SpouseTitle ?? "") != ""                                           ? p.SpouseTitle + " and Mrs. " + p.SpouseName                                           : "Mr. and Mrs. " + p.SpouseName))))                           + ((p.Suffix ?? "") == "" ? "" : "' " + p.Suffix)                       select new ContributorInfo                       {                           Name = name'                           MailingAddress = MailingAddress(p)'                           PeopleId = p.PeopleId'                           SpouseID = p.SpouseId'                           DeacesedDate = p.DeceasedDate'                           FamilyId = p.FamilyId'                           Age = p.Age'                           FamilyPositionId = p.PositionInFamilyId'                           hohInd = p.HohFlag'                           Joint = option == 2'                           CampusId = p.CampusId'                       };
Magic Number,CmsData.API,APIContribution,C:\repos\bvcms_bvcms\CmsData\API\APIContribution.cs,GetInfo,The following statement contains a magic number: var q2 = from p in q                       let option = (p.ContributionOptionsId ?? 0) == 0                           ? (p.SpouseId > 0 && (p.SpouseContributionOptionsId ?? 0) != 1 ? 2 : 1)                           : p.ContributionOptionsId                       let name =                           (option == 1                               ? (p.Title != null ? p.Title + " " + p.Name : p.Name)                               : (p.SpouseId == null                                   ? (p.Title != null ? p.Title + " " + p.Name : p.Name)                                   : p.CoupleName ?? (p.HohFlag == 1                                       ? ((p.Title ?? "") != ""                                           ? p.Title + " and Mrs. " + p.Name                                           : "Mr. and Mrs. " + p.Name)                                       : ((p.SpouseTitle ?? "") != ""                                           ? p.SpouseTitle + " and Mrs. " + p.SpouseName                                           : "Mr. and Mrs. " + p.SpouseName))))                           + ((p.Suffix ?? "") == "" ? "" : "' " + p.Suffix)                       select new ContributorInfo                       {                           Name = name'                           MailingAddress = MailingAddress(p)'                           PeopleId = p.PeopleId'                           SpouseID = p.SpouseId'                           DeacesedDate = p.DeceasedDate'                           FamilyId = p.FamilyId'                           Age = p.Age'                           FamilyPositionId = p.PositionInFamilyId'                           hohInd = p.HohFlag'                           Joint = option == 2'                           CampusId = p.CampusId'                       };
Magic Number,CmsData.API,ContributionSearchInfo,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,ContributionSearchInfo,The following statement contains a magic number: Online = 2;
Magic Number,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,ContributionsXML,The following statement contains a magic number: var a = new ContributionElements              {                  NumberOfPages = (int) Math.Ceiling((model.Count ?? 0)/100.0)'                  NumberOfItems = model.Count ?? 0'                  TotalAmount = model.Total ?? 0'                  List = (from c in cc                          let bd = c.BundleDetails.FirstOrDefault()                          select new APIContribution.Contribution                          {                              ContributionId = c.ContributionId'                              PeopleId = c.PeopleId ?? 0'                              Name = c.Person.Name'                              Date = c.ContributionDate.FormatDate()'                              Amount = c.ContributionAmount ?? 0'                              Fund = c.ContributionFund.FundName'                              Description = c.ContributionDesc'                              CheckNo = c.CheckNo                          }).ToArray()              };
Magic Number,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,FetchContributions,The following statement contains a magic number: if (model.BundleType == 9999)                  contributions = from c in contributions                                  where !c.BundleDetails.Any()                                  select c;              else if ((model.BundleType ?? 0) != 0)                  contributions = from c in contributions                                  where c.BundleDetails.First().BundleHeader.BundleHeaderTypeId == model.BundleType                                  select c;
Magic Number,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,Online,The following statement contains a magic number: return model.Online == 2 ? "Both" : model.Online == 1 ? "Online" : "Not Online";
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: using (var header = ws.Cells[1' 1' 1' dt.Columns.Count])              {                  header.Style.Font.Bold = true;                  header.Style.Fill.PatternType = ExcelFillStyle.Solid;                  header.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(91' 154' 212));                  header.Style.Font.Color.SetColor(Color.White);              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: using (var header = ws.Cells[1' 1' 1' dt.Columns.Count])              {                  header.Style.Font.Bold = true;                  header.Style.Fill.PatternType = ExcelFillStyle.Solid;                  header.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(91' 154' 212));                  header.Style.Font.Color.SetColor(Color.White);              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: using (var header = ws.Cells[1' 1' 1' dt.Columns.Count])              {                  header.Style.Font.Bold = true;                  header.Style.Fill.PatternType = ExcelFillStyle.Solid;                  header.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(91' 154' 212));                  header.Style.Font.Color.SetColor(Color.White);              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: for (var i = 0; i < dt.Columns.Count; i++)              {                  var col = i + 1;                  var name = dt.Columns[i].ColumnName;                  var type = dt.Columns[i].DataType;                    if (table != null)                      table.Columns[i].Name = name;                    var colrange = ws.Cells[1' col' count + 2' col];                    if (name.Contains("Info") || name.Contains("Classes") || name == "Questions" || name == "Address")                  {                      colrange.Style.WrapText = true;                      ws.Column(col).Width = 40.0;                  }                  else if (!name.ToLower().EndsWith("id") && type == typeof(int))                  {                      colrange.Style.Numberformat.Format = "#'##0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(decimal))                  {                      colrange.Style.Numberformat.Format = "#'##0.00";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if ((type == typeof(float) || type == typeof(double)) && PythonModel.StartsEndsWith("Pct"' name))                  {                      colrange.Style.Numberformat.Format = "#####0.0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(DateTime))                  {                      if (name.EndsWith("Time"))                      {                          colrange.Style.Numberformat.Format = "m/d/yy h:mm AM/PM";                          ws.Column(col).Width = 16;                      }                      else                      {                          colrange.Style.Numberformat.Format = "m/d/yy";                          ws.Column(col).Width = 12;                      }                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                  }                  else                      try                      {                          colrange.AutoFitColumns();                      }                      catch (Exception)                      {                          ws.Column(col).Width = 50;                      }              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: for (var i = 0; i < dt.Columns.Count; i++)              {                  var col = i + 1;                  var name = dt.Columns[i].ColumnName;                  var type = dt.Columns[i].DataType;                    if (table != null)                      table.Columns[i].Name = name;                    var colrange = ws.Cells[1' col' count + 2' col];                    if (name.Contains("Info") || name.Contains("Classes") || name == "Questions" || name == "Address")                  {                      colrange.Style.WrapText = true;                      ws.Column(col).Width = 40.0;                  }                  else if (!name.ToLower().EndsWith("id") && type == typeof(int))                  {                      colrange.Style.Numberformat.Format = "#'##0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(decimal))                  {                      colrange.Style.Numberformat.Format = "#'##0.00";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if ((type == typeof(float) || type == typeof(double)) && PythonModel.StartsEndsWith("Pct"' name))                  {                      colrange.Style.Numberformat.Format = "#####0.0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(DateTime))                  {                      if (name.EndsWith("Time"))                      {                          colrange.Style.Numberformat.Format = "m/d/yy h:mm AM/PM";                          ws.Column(col).Width = 16;                      }                      else                      {                          colrange.Style.Numberformat.Format = "m/d/yy";                          ws.Column(col).Width = 12;                      }                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                  }                  else                      try                      {                          colrange.AutoFitColumns();                      }                      catch (Exception)                      {                          ws.Column(col).Width = 50;                      }              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: for (var i = 0; i < dt.Columns.Count; i++)              {                  var col = i + 1;                  var name = dt.Columns[i].ColumnName;                  var type = dt.Columns[i].DataType;                    if (table != null)                      table.Columns[i].Name = name;                    var colrange = ws.Cells[1' col' count + 2' col];                    if (name.Contains("Info") || name.Contains("Classes") || name == "Questions" || name == "Address")                  {                      colrange.Style.WrapText = true;                      ws.Column(col).Width = 40.0;                  }                  else if (!name.ToLower().EndsWith("id") && type == typeof(int))                  {                      colrange.Style.Numberformat.Format = "#'##0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(decimal))                  {                      colrange.Style.Numberformat.Format = "#'##0.00";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if ((type == typeof(float) || type == typeof(double)) && PythonModel.StartsEndsWith("Pct"' name))                  {                      colrange.Style.Numberformat.Format = "#####0.0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(DateTime))                  {                      if (name.EndsWith("Time"))                      {                          colrange.Style.Numberformat.Format = "m/d/yy h:mm AM/PM";                          ws.Column(col).Width = 16;                      }                      else                      {                          colrange.Style.Numberformat.Format = "m/d/yy";                          ws.Column(col).Width = 12;                      }                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                  }                  else                      try                      {                          colrange.AutoFitColumns();                      }                      catch (Exception)                      {                          ws.Column(col).Width = 50;                      }              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: for (var i = 0; i < dt.Columns.Count; i++)              {                  var col = i + 1;                  var name = dt.Columns[i].ColumnName;                  var type = dt.Columns[i].DataType;                    if (table != null)                      table.Columns[i].Name = name;                    var colrange = ws.Cells[1' col' count + 2' col];                    if (name.Contains("Info") || name.Contains("Classes") || name == "Questions" || name == "Address")                  {                      colrange.Style.WrapText = true;                      ws.Column(col).Width = 40.0;                  }                  else if (!name.ToLower().EndsWith("id") && type == typeof(int))                  {                      colrange.Style.Numberformat.Format = "#'##0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(decimal))                  {                      colrange.Style.Numberformat.Format = "#'##0.00";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if ((type == typeof(float) || type == typeof(double)) && PythonModel.StartsEndsWith("Pct"' name))                  {                      colrange.Style.Numberformat.Format = "#####0.0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(DateTime))                  {                      if (name.EndsWith("Time"))                      {                          colrange.Style.Numberformat.Format = "m/d/yy h:mm AM/PM";                          ws.Column(col).Width = 16;                      }                      else                      {                          colrange.Style.Numberformat.Format = "m/d/yy";                          ws.Column(col).Width = 12;                      }                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                  }                  else                      try                      {                          colrange.AutoFitColumns();                      }                      catch (Exception)                      {                          ws.Column(col).Width = 50;                      }              }
Magic Number,CmsData,CreateExcel,C:\repos\bvcms_bvcms\CmsData\API\CreateExcel.cs,AddSheet,The following statement contains a magic number: for (var i = 0; i < dt.Columns.Count; i++)              {                  var col = i + 1;                  var name = dt.Columns[i].ColumnName;                  var type = dt.Columns[i].DataType;                    if (table != null)                      table.Columns[i].Name = name;                    var colrange = ws.Cells[1' col' count + 2' col];                    if (name.Contains("Info") || name.Contains("Classes") || name == "Questions" || name == "Address")                  {                      colrange.Style.WrapText = true;                      ws.Column(col).Width = 40.0;                  }                  else if (!name.ToLower().EndsWith("id") && type == typeof(int))                  {                      colrange.Style.Numberformat.Format = "#'##0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(decimal))                  {                      colrange.Style.Numberformat.Format = "#'##0.00";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if ((type == typeof(float) || type == typeof(double)) && PythonModel.StartsEndsWith("Pct"' name))                  {                      colrange.Style.Numberformat.Format = "#####0.0";                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                      colrange.AutoFitColumns();                  }                  else if (type == typeof(DateTime))                  {                      if (name.EndsWith("Time"))                      {                          colrange.Style.Numberformat.Format = "m/d/yy h:mm AM/PM";                          ws.Column(col).Width = 16;                      }                      else                      {                          colrange.Style.Numberformat.Format = "m/d/yy";                          ws.Column(col).Width = 12;                      }                      colrange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;                  }                  else                      try                      {                          colrange.AutoFitColumns();                      }                      catch (Exception)                      {                          ws.Column(col).Width = 50;                      }              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,SendSms,The following statement contains a magic number: if (sTitle.Length > 150)              {                  throw new Exception($"The title length was {sTitle.Length} but cannot be over 150.");              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,SendSms,The following statement contains a magic number: if (sMessage.Length > 160)              {                  throw new Exception($"The message length was {sMessage.Length} but cannot be over 160.");              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,SqlGrid,The following statement contains a magic number: if (sql.Contains("@BlueToolbarTagId"))                  if (dictionary.ContainsKey("BlueToolbarGuid"))                  {                      var guid = (dictionary["BlueToolbarGuid"] as string).ToGuid();                      if (!guid.HasValue)                          throw new Exception("missing BlueToolbar Information");                      var j = DbUtil.Db.PeopleQuery(guid.Value).Select(vv => vv.PeopleId).Take(1000);                      var tag = DbUtil.Db.PopulateTemporaryTag(j);                      tagid = tag.Id;                      p.Add("@BlueToolbarTagId"' tag.Id);                  }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,SqlGrid,The following statement contains a magic number: using (var cn = new SqlConnection(cs))              {                  cn.Open();                  using (var rd = db.Connection.ExecuteReader(sql' p' commandTimeout: 300))                  {                      var table = Table(rd);                      return $@"  <!-- TagId={tagid} -->  <div class=""report box box-responsive"">    <div class=""box-content"">      <div class=""table-responsive"">        {table}        <strong>Total Count</strong> <span class=""badge""></span>      </div>    </div>  </div>  ";                  }              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,PageBreakTables,The following statement contains a magic number: while (true)              {                  var s = sql.Replace("WHERE 1=1"' $"WHERE pagebreak={pg}");                  var cmd = new SqlCommand(s' cn);                  foreach (var parm in p.ParameterNames)                  {                      var value = p.Get<dynamic>(parm);                      cmd.Parameters.AddWithValue(parm' value);                  }                  cmd.CommandTimeout = 1200;                  using (var rd = cmd.ExecuteReader())                  {                      if (!rd.HasRows)                          return sb.ToString();                      if (pg == 1)                      {                          var colnames = Enumerable.Range(0' rd.FieldCount).Select(rd.GetName).ToList();                          pagebreakcol = colnames.FindIndex(vv => vv == "pagebreak");                      }                      var t = HtmlTable(rd' $"pagebreak={pagebreakcol}");                      t.RenderControl(new HtmlTextWriter(new StringWriter(sb)));                      sb.AppendLine("<div class='page-break'></div>");                  }                  pg++;              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,UploadExcelFromSqlToFtp,The following statement contains a magic number: if (sqlscript.Length <= 75)              {                  script = db.Content(sqlscript' "");                  if (!script.HasValue())                      if (sqlscript.Contains("select"' ignoreCase: true))                          script = sqlscript;                      else                          throw new Exception("no sql script found");              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("IfCond"' (writer' options' context' args) =>              {                  var op = HttpUtility.HtmlDecode(args[1].ToString());                  bool b = false;                  switch (op)                  {                      case "==":                          b = Compare(args) == 0;                          break;                      case "!=":                          b = Compare(args) != 0;                          break;                      case "<":                          b = Compare(args) < 0;                          break;                      case ">":                          b = Compare(args) > 0;                          break;                      case ">=":                          b = Compare(args) >= 0;                          break;                      case "<=":                          b = Compare(args) <= 0;                          break;                      case "&&":                          b = NumTrue(args) == 2;                          break;                      case "||":                          b = NumTrue(args) >= 1;                          break;                  }                  if (b)                      options.Template(writer' (object)context);                  else                      options.Inverse(writer' (object)context);              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("GetToken"' (writer' context' args) =>              {                  var s = args[0].ToString();                  var n = args[1].ToInt();                  var ntoks = args.Length > 2 ? args[2].ToInt() : 2;                  var sep = args.Length > 3 ? args[3].ToString() : " ";                  var a = s.SplitStr(sep' ntoks);                  writer.Write(a[n].trim());              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("GetToken"' (writer' context' args) =>              {                  var s = args[0].ToString();                  var n = args[1].ToInt();                  var ntoks = args.Length > 2 ? args[2].ToInt() : 2;                  var sep = args.Length > 3 ? args[3].ToString() : " ";                  var a = s.SplitStr(sep' ntoks);                  writer.Write(a[n].trim());              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("GetToken"' (writer' context' args) =>              {                  var s = args[0].ToString();                  var n = args[1].ToInt();                  var ntoks = args.Length > 2 ? args[2].ToInt() : 2;                  var sep = args.Length > 3 ? args[3].ToString() : " ";                  var a = s.SplitStr(sep' ntoks);                  writer.Write(a[n].trim());              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("GetToken"' (writer' context' args) =>              {                  var s = args[0].ToString();                  var n = args[1].ToInt();                  var ntoks = args.Length > 2 ? args[2].ToInt() : 2;                  var sep = args.Length > 3 ? args[3].ToString() : " ";                  var a = s.SplitStr(sep' ntoks);                  writer.Write(a[n].trim());              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("GetToken"' (writer' context' args) =>              {                  var s = args[0].ToString();                  var n = args[1].ToInt();                  var ntoks = args.Length > 2 ? args[2].ToInt() : 2;                  var sep = args.Length > 3 ? args[3].ToString() : " ";                  var a = s.SplitStr(sep' ntoks);                  writer.Write(a[n].trim());              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("ReplaceCode"' (writer' context' args) =>              {                  EmailReplacements r = context.Replacements as EmailReplacements                      ?? (context.Replacements = new EmailReplacements(db));                  var code = args[0].ToString();                  var p = db.LoadPersonById(args[1].ToInt());                  int? oid = null;                  if (args.Length == 3)                      oid = args[2].ToInt2();                  writer.Write(r.RenderCode(code' p' oid));              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following statement contains a magic number: Handlebars.RegisterHelper("ReplaceCode"' (writer' context' args) =>              {                  EmailReplacements r = context.Replacements as EmailReplacements                      ?? (context.Replacements = new EmailReplacements(db));                  var code = args[0].ToString();                  var p = db.LoadPersonById(args[1].ToInt());                  int? oid = null;                  if (args.Length == 3)                      oid = args[2].ToInt2();                  writer.Write(r.RenderCode(code' p' oid));              });
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,Compare,The following statement contains a magic number: var a2 = args[2];
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,Compare,The following statement contains a magic number: if (a1 is int)                  a2 = args[2].ToInt();
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,Compare,The following statement contains a magic number: if (a1 is decimal)                  a2 = args[2].ToNullableDecimal() ?? 0m;
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,NumTrue,The following statement contains a magic number: return (IsTrue(args[0]) ? 1 : 0)                  + (IsTrue(args[2]) ? 1 : 0);
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,ContentForDate,The following statement contains a magic number: for (; i < a.Length; i++)              {                  if (a[i].Length < 6 || a[i].Length > 10)                      continue;                  var dt = a[i].ToDate();                  if (dt.HasValue && dt == dtwanted)                      return a[i + 1];              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,ContentForDate,The following statement contains a magic number: for (; i < a.Length; i++)              {                  if (a[i].Length < 6 || a[i].Length > 10)                      continue;                  var dt = a[i].ToDate();                  if (dt.HasValue && dt == dtwanted)                      return a[i + 1];              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,EmailContentWithPythonData,The following statement contains a magic number: if (c == null)                  throw new Exception($"Cannot find content named \"{contentName.Truncate(50)}\"");
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,AddOrganization,The following statement contains a magic number: using (var db2 = NewDataContext())              {                  var prog = Organization.FetchOrCreateProgram(db2' program);                  var div = Organization.FetchOrCreateDivision(db2' prog' division);                  var neworg = new Organization                  {                      OrganizationName = name'                      CreatedDate = Util.Now'                      CreatedBy = Util.UserId1'                      OrganizationStatusId = 30'                      DivisionId = div.Id'                  };                  db2.Organizations.InsertOnSubmit(neworg);                  db2.SubmitChanges();                  neworg.DivOrgs.Add(new DivOrg() {Organization = neworg' DivId = div.Id});                  db2.SubmitChanges();                  db2.LogActivity($"Python AddOrganization({neworg.OrganizationName}' {program}' {division})");                  return neworg.OrganizationId;              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,AddOrganization,The following statement contains a magic number: using (var db2 = NewDataContext())              {                  var org = db2.LoadOrganizationById(templateid);                  if (org == null)                  {                      org = new Organization() {DivisionId = 1};                      copysettings = false;                  }                  var neworg = new Organization                  {                      OrganizationName = name'                      CreatedDate = Util.Now'                      CreatedBy = Util.UserId1'                      EntryPointId = org.EntryPointId'                      OrganizationTypeId = org.OrganizationTypeId'                      CampusId = org.CampusId'                      OrganizationStatusId = 30'                      DivisionId = org.DivisionId'                  };                  db2.Organizations.InsertOnSubmit(neworg);                  db2.SubmitChanges();                  foreach (var div in org.DivOrgs)                      neworg.DivOrgs.Add(new DivOrg {Organization = neworg' DivId = div.DivId});                  if (copysettings && templateid > 0)                  {                      foreach (var sc in org.OrgSchedules)                          neworg.OrgSchedules.Add(new OrgSchedule                                {                                    OrganizationId = neworg.OrganizationId'                                    AttendCreditId = sc.AttendCreditId'                                    SchedDay = sc.SchedDay'                                    SchedTime = sc.SchedTime'                                    Id = sc.Id                                });                      neworg.CopySettings(db2' templateid.Value);                  }                  db2.SubmitChanges();                  db2.LogActivity($"Python NewOrganization{neworg.OrganizationName} ({neworg.OrganizationId})");                  return neworg.OrganizationId;              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,JoinOrg,The following statement contains a magic number: using (var db2 = NewDataContext())                  OrganizationMember.InsertOrgMembers(db2' orgid.ToInt()' pid.Value' 220' Util.Now' null' false);
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,ReplaceCodeStr,The following statement contains a magic number: foreach (var pair in codes.SplitStr("'"))              {                  var a = pair.SplitStr("="' 2);                  text = text.Replace(a[0]' a[1]);              }
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,StatusFlagList,The following statement contains a magic number: var q2 = from s in q.ToList()                       where re.Match(s.Name).Success                       let a = s.Name.SplitStr(":"' 2)                       let c = Condition.Import(s.Text)                       orderby a[0]                       select new StatusFlag()                       {                           Flag = a[0]'                           Id = s.QueryId.ToCode()'                           Desc = a[1]'                           Code = Regex.Replace(c.ToCode()' "^"' "\t"' RegexOptions.Multiline)'                       };
Magic Number,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,StatusFlagDictionary,The following statement contains a magic number: var q2 = from s in q.ToList()                       where re.Match(s.Name).Success                       let a = s.Name.SplitStr(":"' 2)                       let c = Condition.Import(s.Text)                       where (filter == null || filter.Contains(a[0]))                       orderby a[0]                       select new StatusFlag()                       {                           Flag = a[0]'                           Id = s.QueryId.ToCode()'                           Desc = a[1]'                           Code = Regex.Replace(c.ToCode()' "^"' "\t"' RegexOptions.Multiline)'                       };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,QueryList2,The following statement contains a magic number: return q.Take(1000);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,GetStartEndDates,The following statement contains a magic number: if (d2 == d2.Value.Date)                  d2 = d2.Value.AddHours(24);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ContributionCount,The following statement contains a magic number: var typs = new[] { 6' 7 };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ContributionCount,The following statement contains a magic number: var typs = new[] { 6' 7 };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ContributionCount,The following statement contains a magic number: var typs = new[] { 6' 7 };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ContributionCount,The following statement contains a magic number: var typs = new[] { 6' 7 };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ContributionTotals,The following statement contains a magic number: var typs = new[] { 6' 7 };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ContributionTotals,The following statement contains a magic number: var typs = new[] { 6' 7 };
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,BlueToolbarReport,The following statement contains a magic number: return db.PeopleQuery(guid.Value).Take(1000);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,BlueToolbarReport,The following statement contains a magic number: return q.Take(1000);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,QueryList,The following statement contains a magic number: return SortList(sort' db.PeopleQuery2(query)).Take(1000);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,QuerySql,The following statement contains a magic number: return cn.Query(sql' parameters' commandTimeout: 300);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,QuerySql,The following statement contains a magic number: return cn.Query(sql' parameters' commandTimeout: 300);
Magic Number,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,ApplyStandardParameters,The following statement contains a magic number: if (sql.Contains("@BlueToolbarTagId"))                  if (dictionary.ContainsKey("BlueToolbarGuid"))                  {                      var guid = (dictionary["BlueToolbarGuid"] as string).ToGuid();                      if (!guid.HasValue)                          throw new Exception("missing BlueToolbar Information");                      var j = db.PeopleQuery(guid.Value).Select(vv => vv.PeopleId).Take(1000);                      var tag = db.PopulateTemporaryTag(j);                      parameters.Add("@BlueToolbarTagId"' tag.Id);                  }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,DateValueRow,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Query.cs,ToString,The following statement contains a magic number: switch (Columns)                  {                      case 10:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}' {SqlRow.Val10}]";                      case 9:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}' {SqlRow.Val9}]";                      case 8:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}' {SqlRow.Val8}]";                      case 7:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}' {SqlRow.Val7}]";                      case 6:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}' {SqlRow.Val6}]";                      case 5:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}' {SqlRow.Val5}]";                      case 4:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}' {SqlRow.Val4}]";                      case 3:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}' {SqlRow.Val3}]";                      case 2:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}' {SqlRow.Val2}]";                      case 1:                      default:                          return $"  [new Date({Date.Year}' {Date.Month - 1}' {Date.Day})' {SqlRow.Val1}]";                    }
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,ReplaceColorCodeStr,The following statement contains a magic number: foreach (var pair in codes.SplitStr("'"))              {                  if(!pair.Contains("="))                      continue;                  var a = pair.SplitStr("="' 2);                  text = text.Replace(a[0]' a[1]);              }
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,ImageReplacement,The following statement contains a magic number: var a = code.SplitStr("#"' 2);
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,ImageReplacement,The following statement contains a magic number: var b = a[1].SplitStr("="' 2);
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,VolSubLinkReplacement,The following statement contains a magic number: if (list.ContainsKey(qs))                  ot = list[qs];              else              {                  ot = new OneTimeLink                  {                      Id = Guid.NewGuid()'                      Querystring = qs'                      Expires = Util.Now.AddHours(72)                  };                  db.OneTimeLinks.InsertOnSubmit(ot);                  db.SubmitChanges();                  list.Add(qs' ot);              }
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoInsertDrafts,The following statement contains a magic number: if (a.Length <= 2)                  return text;
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoInsertDrafts,The following statement contains a magic number: for (var i = 1; i < a.Length; i += 2)                  if (a[i].StartsWith("{insertdraft:"))                      a[i] = InsertDraft(a[i]);
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoReplacements,The following statement contains a magic number: using (db = CMSDataContext.Create(connStr' host))              {                  if (currentOrgId.HasValue)                      db.SetCurrentOrgId(currentOrgId);                  var p = db.LoadPersonById(pid);                  person = p;                    pi = GetPayInfo(emailqueueto.OrgId ?? currentOrgId ?? db.CurrentSessionOrgId' p.PeopleId);                    var aa = db.GetAddressList(p);                    if (emailqueueto.EmailQueue.FinanceOnly == true)                  {                      var contributionemail = (from ex in db.PeopleExtras                                               where ex.PeopleId == p.PeopleId                                               where ex.Field == "ContributionEmail"                                               select ex.Data).SingleOrDefault();                      if (contributionemail.HasValue())                          contributionemail = contributionemail.trim();                      if (!Util.ValidEmail(contributionemail))                          contributionemail = p.FromEmail;                      aa.Clear();                      aa.Add(Util.TryGetMailAddress(contributionemail));                  }                    if (OptOuts != null && emailqueueto.EmailQueue.CCParents == true)                  {                      var pp = OptOuts.SingleOrDefault(vv => vv.PeopleId == emailqueueto.PeopleId);                      if (pp != null)                      {                          if (pp.HhPeopleId.HasValue && Util.ValidEmail(pp.HhEmail))                          {                              aa.Add(new MailAddress(pp.HhEmail' pp.HhName));                              emailqueueto.Parent1 = pp.HhPeopleId;                          }                          if (pp.HhSpPeopleId.HasValue && Util.ValidEmail(pp.HhSpEmail))                          {                              aa.Add(new MailAddress(pp.HhSpEmail' pp.HhSpName));                              emailqueueto.Parent2 = pp.HhSpPeopleId;                          }                      }                  }                  if (emailqueueto.AddEmail.HasValue())                      foreach (var ad in emailqueueto.AddEmail.SplitStr("'"))                          Util.AddGoodAddress(aa' ad);                    if (emailqueueto.OrgId.HasValue && pi != null)                      Util.AddGoodAddress(aa' Util.FullEmail(pi.RegisterMail' p.Name));                    ListAddresses = aa.DistinctEmails();                    var noreplacements = emailqueueto.EmailQueue.NoReplacements ?? false;                  var texta = new List<string>(stringlist);                  for (var i = 1; i < texta.Count; i += 2)                      if (noreplacements && !texta[i].StartsWith("<style"))                          texta[i] = "";                      else                          texta[i] = DoReplaceCode(texta[i]' emailqueueto);                    db.SubmitChanges();                  return string.Join(""' texta);              }
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DoReplacements,The following statement contains a magic number: for (var i = 1; i < texta.Count; i += 2)                  texta[i] = DoReplaceCode(texta[i]);
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DocXReplacements,The following statement contains a magic number: for (var i = 1; i < texta.Count; i += 2)                  if (!dict.ContainsKey(texta[i]))                      dict.Add(texta[i]' DoReplaceCode(texta[i]' eqto));
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,TextReplacementsList,The following statement contains a magic number: for (var i = 1; i < stringlist.Length; i += 2)                  if (!codes.Contains(stringlist[i]))                      codes.Add(stringlist[i]);
Magic Number,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DocXReplacementsDictionary,The following statement contains a magic number: for (var i = 1; i < texta.Count; i += 2)                  if (!dict.ContainsKey(texta[i]))                      dict.Add(texta[i]' p == null ? "" : DoReplaceCode(texta[i]' eqto));
Magic Number,CmsData,MyWebClient,C:\repos\bvcms_bvcms\CmsData\AddressVerify.cs,GetWebRequest,The following statement contains a magic number: w.Timeout = 1000;
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: FirstName = firstName.Truncate(50);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: MiddleInitial = middleName.Truncate(10);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: LastName = lastName.Truncate(50);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: Suffix = suffix.Truncate(10);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: Address = address.Truncate(50);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: Address2 = address2.Truncate(50);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: City = city.Truncate(50);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: State = state.Truncate(10);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: Country = country.Truncate(50);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: Zip = zip.Truncate(15);
Magic Number,CmsData,PaymentInfo,C:\repos\bvcms_bvcms\CmsData\Extensions\PaymentInfo.cs,SetBillingAddress,The following statement contains a magic number: Phone = phone.Truncate(25);
Magic Number,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttendance,The following statement contains a magic number: int ntries = 6;
Magic Number,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttendance,The following statement contains a magic number: while (true)  			{  				try  				{          			return Db.RecordAttendance(MeetingId' PeopleId' attended);  				}  				catch (SqlException ex)  				{  					if (ex.Number == 1205)  						if (--ntries > 0)  						{  							System.Threading.Thread.Sleep(500);  							continue;  						}  					throw;  				}  			}
Magic Number,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttendance,The following statement contains a magic number: while (true)  			{  				try  				{          			return Db.RecordAttendance(MeetingId' PeopleId' attended);  				}  				catch (SqlException ex)  				{  					if (ex.Number == 1205)  						if (--ntries > 0)  						{  							System.Threading.Thread.Sleep(500);  							continue;  						}  					throw;  				}  			}
Magic Number,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttend,The following statement contains a magic number: int ntries = 6;
Magic Number,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttend,The following statement contains a magic number: while (true)  			{  				try  				{          		    Db.RecordAttendance(OrgId' PeopleId' dt' Present' info.Location);  				    return;  				}  				catch (SqlException ex)  				{  					if (ex.Number == 1205)  						if (--ntries > 0)  						{  							System.Threading.Thread.Sleep(500);  							continue;  						}  					throw;  				}  			}
Magic Number,CmsData,Attend,C:\repos\bvcms_bvcms\CmsData\Meetings\Attend.cs,RecordAttend,The following statement contains a magic number: while (true)  			{  				try  				{          		    Db.RecordAttendance(OrgId' PeopleId' dt' Present' info.Location);  				    return;  				}  				catch (SqlException ex)  				{  					if (ex.Number == 1205)  						if (--ntries > 0)  						{  							System.Threading.Thread.Sleep(500);  							continue;  						}  					throw;  				}  			}
Magic Number,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetStatement,The following statement contains a magic number: return "SET " + setStatements.Substring( 0' setStatements.Length - 2 );
Magic Number,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetAssignment,The following statement contains a magic number: selectStmt = selectStmt.Substring( 7'									// Remove 'SELECT ' from front ( 7 )  										selectStmt.IndexOf( "\r\nFROM " ) - 7 )		// Return only the selection field expression  									.Replace( "[t0]."' "" )							// Remove table alias from the select  									.Replace( " AS [value]"' "" )					// If the select is not a direct field (constant or expression)' remove the field alias  									.Replace( "@p"' "@p" + bindingName );
Magic Number,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetDbSetAssignment,The following statement contains a magic number: selectStmt = selectStmt.Substring( 7'									// Remove 'SELECT ' from front ( 7 )  										selectStmt.IndexOf( "\r\nFROM " ) - 7 )		// Return only the selection field expression  									.Replace( "[t0]."' "" )							// Remove table alias from the select  									.Replace( " AS [value]"' "" )					// If the select is not a direct field (constant or expression)' remove the field alias  									.Replace( "@p"' "@p" + bindingName );
Magic Number,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetBatchJoinQuery,The following statement contains a magic number: join = join.Substring( 0' join.Length - 5 );
Magic Number,CmsData,LinqToSqlExtensions,C:\repos\bvcms_bvcms\CmsData\Batch\LinqToSqlExtensions.cs,GetBatchJoinQuery,The following statement contains a magic number: subSelect = subSelect.Substring( 0' subSelect.Length - 2 );
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,GetUser,The following statement contains a magic number: if (u != null)              {                  MembershipUser mu = GetMu(u);                  if (userIsOnline)                  {                      u.LastActivityDate = Util.Now;                      string host = HttpContext.Current.Request.Url.Host;                      if (host.Length > 98)                          host = host.Substring(0' 98);                      u.Host = host;                      Db.SubmitChanges();                  }                  return mu;              }
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,GetUser,The following statement contains a magic number: if (u != null)              {                  MembershipUser mu = GetMu(u);                  if (userIsOnline)                  {                      u.LastActivityDate = Util.Now;                      string host = HttpContext.Current.Request.Url.Host;                      if (host.Length > 98)                          host = host.Substring(0' 98);                      u.Host = host;                      Db.SubmitChanges();                  }                  return mu;              }
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,GetUser,The following statement contains a magic number: if (u != null)              {                  MembershipUser mu = GetMu(u);                  if (userIsOnline)                  {                      u.LastActivityDate = Util.Now;                      string host = HttpContext.Current.Request.Url.Host;                      if (host.Length > 98)                          host = host.Substring(0' 98);                      u.Host = host;                      Db.SubmitChanges();                  }                  return mu;              }
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,GetUser,The following statement contains a magic number: if (u != null)              {                  MembershipUser mu = GetMu(u);                  if (userIsOnline)                  {                      u.LastActivityDate = Util.Now;                      string host = HttpContext.Current.Request.Url.Host;                      if (host.Length > 98)                          host = host.Substring(0' 98);                      u.Host = host;                      Db.SubmitChanges();                  }                  return mu;              }
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,ValidateUser,The following statement contains a magic number: try              {                  var Db = GetDb();                  username = Util.GetUserName(username);                  var user = Db.Users.FirstOrDefault(u =>                      u.Username == username                      || u.EmailAddress == username                      || u.Person.EmailAddress2 == username                      );                  if (user == null)                      return false;                  if (CheckPassword(password' user.Password))                      if (user.IsApproved)                      {                          user.LastLoginDate = Util.Now;                          user.FailedPasswordAttemptCount = 0;                          if (user.IsLockedOut && user.FailedPasswordAttemptWindowStart.HasValue)                              if ((DateTime.Now - user.FailedPasswordAttemptWindowStart.Value).TotalMinutes > 3)                                  user.IsLockedOut = false;                          Db.SubmitChanges();                          return true;                      }                  UpdateFailureCount(Db' user' "password");                  return false;              }              catch (Exception)              {                  return false;              }
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,HexToByte,The following statement contains a magic number: byte[] returnBytes = new byte[hexString.Length / 2];
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                  returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                  returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,CmsData,CMSMembershipProvider,C:\repos\bvcms_bvcms\CmsData\CMSMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                  returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactType,The following statement contains a magic number: if (ct == null)  			{  				var max = Db.ContactTypes.Max(mm => mm.Id) + 10;  				if (max < 1000)  					max = 1010;  				ct = new ContactType { Id = max' Description = type' Code = type.Truncate(20) };  				Db.ContactTypes.InsertOnSubmit(ct);  				Db.SubmitChanges();  			}
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactType,The following statement contains a magic number: if (ct == null)  			{  				var max = Db.ContactTypes.Max(mm => mm.Id) + 10;  				if (max < 1000)  					max = 1010;  				ct = new ContactType { Id = max' Description = type' Code = type.Truncate(20) };  				Db.ContactTypes.InsertOnSubmit(ct);  				Db.SubmitChanges();  			}
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactType,The following statement contains a magic number: if (ct == null)  			{  				var max = Db.ContactTypes.Max(mm => mm.Id) + 10;  				if (max < 1000)  					max = 1010;  				ct = new ContactType { Id = max' Description = type' Code = type.Truncate(20) };  				Db.ContactTypes.InsertOnSubmit(ct);  				Db.SubmitChanges();  			}
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactType,The following statement contains a magic number: if (ct == null)  			{  				var max = Db.ContactTypes.Max(mm => mm.Id) + 10;  				if (max < 1000)  					max = 1010;  				ct = new ContactType { Id = max' Description = type' Code = type.Truncate(20) };  				Db.ContactTypes.InsertOnSubmit(ct);  				Db.SubmitChanges();  			}
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactReason,The following statement contains a magic number: if (r == null)              {                  var max = db.ContactReasons.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  r = new ContactReason { Id = max' Description = reason' Code = reason.Truncate(20) };                  db.ContactReasons.InsertOnSubmit(r);                  db.SubmitChanges();              }
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactReason,The following statement contains a magic number: if (r == null)              {                  var max = db.ContactReasons.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  r = new ContactReason { Id = max' Description = reason' Code = reason.Truncate(20) };                  db.ContactReasons.InsertOnSubmit(r);                  db.SubmitChanges();              }
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactReason,The following statement contains a magic number: if (r == null)              {                  var max = db.ContactReasons.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  r = new ContactReason { Id = max' Description = reason' Code = reason.Truncate(20) };                  db.ContactReasons.InsertOnSubmit(r);                  db.SubmitChanges();              }
Magic Number,CmsData,Contact,C:\repos\bvcms_bvcms\CmsData\Extensions\Contact.cs,FetchOrCreateContactReason,The following statement contains a magic number: if (r == null)              {                  var max = db.ContactReasons.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  r = new ContactReason { Id = max' Description = reason' Code = reason.Truncate(20) };                  db.ContactReasons.InsertOnSubmit(r);                  db.SubmitChanges();              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,DatabaseExists,The following statement contains a magic number: return DatabaseExists(Util.GetConnectionString2("master"' 3)' name);
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CmsDatabaseExists,The following statement contains a magic number: HttpRuntime.Cache.Insert(Util.Host + "-DatabaseExists"' b' null'                  DateTime.Now.AddSeconds(60)' Cache.NoSlidingExpiration);
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CheckImageDatabaseExists,The following statement contains a magic number: using (var cn = new SqlConnection(Util.GetConnectionString2("master"' 3)))              {                  CheckDatabaseResult ret;                  try                  {                      cn.Open();                      var b = DatabaseExists(cn' name);                      ret = b ? CheckDatabaseResult.DatabaseExists : CheckDatabaseResult.DatabaseDoesNotExist;                  }                  catch (Exception ex)                  {                      if (ex.Message.StartsWith("A network-related"))                          ret = CheckDatabaseResult.ServerNotFound;                      else                          throw;                  }                  if (nocache == false)                  {                      HttpRuntime.Cache.Insert(Util.Host + "-ImageCheckDatabaseResult"' ret' null'                          ret == CheckDatabaseResult.DatabaseExists                              ? DateTime.Now.AddSeconds(60)                              : DateTime.Now.AddSeconds(5)' Cache.NoSlidingExpiration);                  }                  return ret;              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CheckImageDatabaseExists,The following statement contains a magic number: using (var cn = new SqlConnection(Util.GetConnectionString2("master"' 3)))              {                  CheckDatabaseResult ret;                  try                  {                      cn.Open();                      var b = DatabaseExists(cn' name);                      ret = b ? CheckDatabaseResult.DatabaseExists : CheckDatabaseResult.DatabaseDoesNotExist;                  }                  catch (Exception ex)                  {                      if (ex.Message.StartsWith("A network-related"))                          ret = CheckDatabaseResult.ServerNotFound;                      else                          throw;                  }                  if (nocache == false)                  {                      HttpRuntime.Cache.Insert(Util.Host + "-ImageCheckDatabaseResult"' ret' null'                          ret == CheckDatabaseResult.DatabaseExists                              ? DateTime.Now.AddSeconds(60)                              : DateTime.Now.AddSeconds(5)' Cache.NoSlidingExpiration);                  }                  return ret;              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CheckImageDatabaseExists,The following statement contains a magic number: using (var cn = new SqlConnection(Util.GetConnectionString2("master"' 3)))              {                  CheckDatabaseResult ret;                  try                  {                      cn.Open();                      var b = DatabaseExists(cn' name);                      ret = b ? CheckDatabaseResult.DatabaseExists : CheckDatabaseResult.DatabaseDoesNotExist;                  }                  catch (Exception ex)                  {                      if (ex.Message.StartsWith("A network-related"))                          ret = CheckDatabaseResult.ServerNotFound;                      else                          throw;                  }                  if (nocache == false)                  {                      HttpRuntime.Cache.Insert(Util.Host + "-ImageCheckDatabaseResult"' ret' null'                          ret == CheckDatabaseResult.DatabaseExists                              ? DateTime.Now.AddSeconds(60)                              : DateTime.Now.AddSeconds(5)' Cache.NoSlidingExpiration);                  }                  return ret;              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CheckDatabaseExists,The following statement contains a magic number: using (var cn = new SqlConnection(Util.GetConnectionString2("master"' 3)))              {                  CheckDatabaseResult ret;                  try                  {                      cn.Open();                      var b = DatabaseExists(cn' name);                      ret = b ? CheckDatabaseResult.DatabaseExists : CheckDatabaseResult.DatabaseDoesNotExist;                  }                  catch (Exception ex)                  {                      if (ex.Message.StartsWith("A network-related"))                          ret = CheckDatabaseResult.ServerNotFound;                      else                          throw;                  }                  if (nocache == false)                  {                      HttpRuntime.Cache.Insert(Util.Host + "-CheckDatabaseResult"' ret' null'                          ret == CheckDatabaseResult.DatabaseExists                              ? DateTime.Now.AddSeconds(60)                              : DateTime.Now.AddSeconds(5)' Cache.NoSlidingExpiration);                  }                  return ret;              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CheckDatabaseExists,The following statement contains a magic number: using (var cn = new SqlConnection(Util.GetConnectionString2("master"' 3)))              {                  CheckDatabaseResult ret;                  try                  {                      cn.Open();                      var b = DatabaseExists(cn' name);                      ret = b ? CheckDatabaseResult.DatabaseExists : CheckDatabaseResult.DatabaseDoesNotExist;                  }                  catch (Exception ex)                  {                      if (ex.Message.StartsWith("A network-related"))                          ret = CheckDatabaseResult.ServerNotFound;                      else                          throw;                  }                  if (nocache == false)                  {                      HttpRuntime.Cache.Insert(Util.Host + "-CheckDatabaseResult"' ret' null'                          ret == CheckDatabaseResult.DatabaseExists                              ? DateTime.Now.AddSeconds(60)                              : DateTime.Now.AddSeconds(5)' Cache.NoSlidingExpiration);                  }                  return ret;              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,CheckDatabaseExists,The following statement contains a magic number: using (var cn = new SqlConnection(Util.GetConnectionString2("master"' 3)))              {                  CheckDatabaseResult ret;                  try                  {                      cn.Open();                      var b = DatabaseExists(cn' name);                      ret = b ? CheckDatabaseResult.DatabaseExists : CheckDatabaseResult.DatabaseDoesNotExist;                  }                  catch (Exception ex)                  {                      if (ex.Message.StartsWith("A network-related"))                          ret = CheckDatabaseResult.ServerNotFound;                      else                          throw;                  }                  if (nocache == false)                  {                      HttpRuntime.Cache.Insert(Util.Host + "-CheckDatabaseResult"' ret' null'                          ret == CheckDatabaseResult.DatabaseExists                              ? DateTime.Now.AddSeconds(60)                              : DateTime.Now.AddSeconds(5)' Cache.NoSlidingExpiration);                  }                  return ret;              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,_logActivity,The following statement contains a magic number: using (var db = Create(host))              {                  if (!userId.HasValue || userId == 0)                      userId = Util.UserId;                  if (userId == 0)                      userId = null;                  if (orgId.HasValue && !db.PeopleIdOk(peopleId))                      peopleId = null;                  if (peopleId.HasValue && !db.OrgIdOk(orgId))                      orgId = null;                    var a = new ActivityLog                  {                      ActivityDate = Util.Now'                      UserId = userId'                      Activity = activity.Truncate(200)'                      Machine = Environment.MachineName'                      OrgId = orgId'                      PeopleId = peopleId'                      DatumId = datumId'                      PageUrl = pageUrl'                      ClientIp = clientIp ?? ip                  };                    db.ActivityLogs.InsertOnSubmit(a);                  db.SubmitChanges();              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,LogOrgActivity,The following statement contains a magic number: if (mru.Count > 5)                  mru.RemoveAt(mru.Count - 1);
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,LogPersonActivity,The following statement contains a magic number: if (mru.Count > 5)                  mru.RemoveAt(mru.Count - 1);
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,StandardExtraValues2,The following statement contains a magic number: HttpRuntime.Cache.Insert(db.Host + "StandardExtraValues2"' s' null'                  DateTime.Now.AddSeconds(Util.IsDebug() ? 0 : 10)' Cache.NoSlidingExpiration);
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,SetStandardExtraValues2,The following statement contains a magic number: HttpRuntime.Cache.Insert(db.Host + "StandardExtraValues2"' xml' null'                   DateTime.Now.AddSeconds(Util.IsDebug() ? 0 : 15)' Cache.NoSlidingExpiration);
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,FamilyExtraValues,The following statement contains a magic number: if (s == null)              {                  s = Content("FamilyExtraValues.xml"' "<Fields />");                  HttpRuntime.Cache.Insert(Db.Host + "FamilyExtraValues"' s' null'                       DateTime.Now.AddSeconds(Util.IsDebug() ? 0 : 15)' Cache.NoSlidingExpiration);              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,HeaderImage,The following statement contains a magic number: if (hc == null)              {                  var h = Content("HeaderImg");                  if (h != null)                      hc = h.Body;                  else                      hc = def;                  HttpRuntime.Cache.Insert(Db.Host + "headerimg"' hc' null'                       DateTime.Now.AddMinutes(3)' Cache.NoSlidingExpiration);              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,Header,The following statement contains a magic number: if (hc == null)              {                  var h = Content("Header");                  if (h != null)                      hc = h.Body;                  else                      hc = @"  <div id='CommonHeaderImage'>      <a href='/'><img src='/images/headerimage.jpg' /></a>  </div>  <div id='CommonHeaderTitleBlock'>      <h1 id='CommonHeaderTitle'>Bellevue Baptist Church</h1>      <h2 id='CommonHeaderSubTitle'>Feed My Sheep</h2>  </div>  ";                  HttpRuntime.Cache.Insert(Db.Host + "header"' hc' null'                       DateTime.Now.AddMinutes(3)' Cache.NoSlidingExpiration);              }
Magic Number,CmsData,DbUtil,C:\repos\bvcms_bvcms\CmsData\DbUtil\CreateDatabase.cs,Supporters,The following statement contains a magic number: return ss.Select(a => new SupportPerson              {                  id = a[1].ToInt()'                  name = a[0].Trim()'                  email = a[2].Trim()              }).ToList();
Magic Number,CmsData,Helper,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\FieldClass.cs,AddParamCode,The following statement contains a magic number: var v = s.GetCsvToken(2' 2);
Magic Number,CmsData,Helper,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\FieldClass.cs,AddParamCode,The following statement contains a magic number: var v = s.GetCsvToken(2' 2);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,GetCodeIdValuePart,The following statement contains a magic number: if (value != null && value.Contains("'"))                  return value.SplitStr("'"' 2)[(int)part];
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AddNewGroupClause,The following statement contains a magic number: var c = new Condition              {                  ParentId = Id'                  Id = Guid.NewGuid()'                  AllConditions = AllConditions'                  ConditionName = QueryType.Group.ToString()'                  Comparison = CompareType.AnyTrue.ToString()'                  Order = MaxClauseOrder() + 2              };
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ReorderClauses,The following statement contains a magic number: foreach (var c in q)              {                  c.Order = n;                  n += 2;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AddNewClause,The following statement contains a magic number: var c = new Condition              {                  ParentId = Id'                  Id = Guid.NewGuid()'                  AllConditions = AllConditions'                  ConditionName = QueryType.MatchAnything.ToString()'                  Comparison = CompareType.Equal.ToString()'                  Order = MaxClauseOrder() + 2              };
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,StatusFlags,The following statement contains a magic number: var q = (from c in db.Queries                       where SqlMethods.Like(c.Name' "F[0-9][0-9]:%")                       let t = db.Tags.SingleOrDefault(tt => tt.Name == c.Name.Substring(0' 3))                       where t != null                       orderby c.Name                       select new FlagItem                       {                           Tag = t.Name'                           Text = c.Name'                           Value = t.Id                       });
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,WriteAttributes,The following statement contains a magic number: if (ConditionName == "FamilyHasChildrenAged")                  w.WriteAttr("Age"' Age ?? 0' 12);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,SavedQuery2,The following statement contains a magic number: var a = SavedQuery.Split(":".ToCharArray()' 2);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,HasZipPlus4,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p =>                  p.Family.People.Any(pp => pp.PrimaryZip.Length >= 9);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,NumberOfPrimaryAdults,The following statement contains a magic number: Expression<Func<Person' int>> pred = p => p.Family.People.Count(pp => pp.PositionInFamilyId == 10);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FamilyHasChildren,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p =>                  p.Family.People.Any(m => (m.Age ?? 0) <= 12 && m.PositionInFamilyId == PositionInFamily.Child);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FamilyHasChildrenAged3,The following statement contains a magic number: if (range == null || range.Length != 2)                  return AlwaysFalse();
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FamHasPrimAdultChurchMemb,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p =>                  p.Family.People.Any(m =>                      m.PositionInFamilyId == PositionInFamily.PrimaryAdult                      && m.MemberStatusId == 10 // church member                      //&& m.PeopleId != p.PeopleId // someone else in family                      );
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,Birthday,The following statement contains a magic number: if (DateTime.TryParse(dob' out dt))                  if (Regex.IsMatch(dob' @"\d+/\d+/\d+"))                      pred = p => p.BirthDay == dt.Day && p.BirthMonth == dt.Month && p.BirthYear == dt.Year;                  else                      pred = p => p.BirthDay == dt.Day && p.BirthMonth == dt.Month;              else              {                  int y;                  if (int.TryParse(dob' out y))                      if (y <= 12 && y > 0)                          pred = p => p.BirthMonth == y;                      else                          pred = p => p.BirthYear == y;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,WeddingDate,The following statement contains a magic number: if (!TextValue.HasValue())              {                  pred = p => p.WeddingDate == null;              }              else              {                  DateTime weddingdate;                  if (DateTime.TryParse(TextValue' out weddingdate))                      if (Regex.IsMatch(TextValue' @"\d+/\d+/\d+"))                          pred = p => p.WeddingDate == weddingdate;                      else                          pred =                              p =>                                  p.WeddingDate.Value.Day == weddingdate.Day &&                                  p.WeddingDate.Value.Month == weddingdate.Month;                  else                  {                      int y;                      if (int.TryParse(TextValue' out y))                          if (y <= 12 && y > 0)                              pred = p => p.WeddingDate.Value.Month == y;                          else                              pred = p => p.WeddingDate.Value.Year == y;                  }              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ContributionAmountBothJointHistory,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ContributionAmountBothJointHistory,The following statement contains a magic number: if(EndDate.HasValue)                  enddt = EndDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,PledgeAmountBothJointHistory,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,PledgeAmountBothJointHistory,The following statement contains a magic number: if(EndDate.HasValue)                  enddt = EndDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,GivingChange,The following statement contains a magic number: var days = Quarters.ToInt2() ?? 365;
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,IsFamilyGiver,The following statement contains a magic number: var fd = td.AddDays(Days == 0 ? -365 : -Days);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,IsFamilyPledger,The following statement contains a magic number: var fd = td.AddDays(Days == 0 ? -365 : -Days);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendMemberTypeAsOf,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendMemberTypeAsOf,The following statement contains a magic number: if(EndDate.HasValue)                  enddt = EndDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendanceTypeAsOf,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendanceTypeAsOf,The following statement contains a magic number: if(EndDate.HasValue)                  enddt = EndDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendedAsOf,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendedAsOf,The following statement contains a magic number: if(enddt.HasValue && enddt.Value.TimeOfDay.Ticks == 0)                  enddt = enddt.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: if(EndDate.HasValue)                  enddt = EndDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: var q = from p in db.People                      let m = from et in p.EnrollmentTransactions                              where et.TransactionTypeId <= 3 // things that start a change                              where et.TransactionStatus == false                              where et.TransactionDate < enddt // transaction starts <= looked for end                              where (et.Pending ?? false) == false                              where (et.NextTranChangeDate ?? now) >= StartDate // transaction ends >= looked for start                              where OrganizationInt == 0 || et.OrganizationId == OrganizationInt                              where DivisionInt == 0 || et.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                              where ProgramInt == 0 || et.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                              select et                      where m.Any()                      select p;
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) > pct                           select p.PeopleId;                      break;                  case CompareType.GreaterEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) >= pct                           select p.PeopleId;                      break;                  case CompareType.Less:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) < pct                           select p.PeopleId;                      break;                  case CompareType.LessEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) <= pct                           select p.PeopleId;                      break;                  case CompareType.NotEqual:                  case CompareType.Equal:                      return AlwaysFalse();                  default:                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) > pct                           select p.PeopleId;                      break;                  case CompareType.GreaterEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) >= pct                           select p.PeopleId;                      break;                  case CompareType.Less:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) < pct                           select p.PeopleId;                      break;                  case CompareType.LessEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) <= pct                           select p.PeopleId;                      break;                  case CompareType.NotEqual:                  case CompareType.Equal:                      return AlwaysFalse();                  default:                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) > pct                           select p.PeopleId;                      break;                  case CompareType.GreaterEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) >= pct                           select p.PeopleId;                      break;                  case CompareType.Less:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) < pct                           select p.PeopleId;                      break;                  case CompareType.LessEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) <= pct                           select p.PeopleId;                      break;                  case CompareType.NotEqual:                  case CompareType.Equal:                      return AlwaysFalse();                  default:                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendPctHistory,The following statement contains a magic number: switch (op)              {                  case CompareType.Greater:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) > pct                           select p.PeopleId;                      break;                  case CompareType.GreaterEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) >= pct                           select p.PeopleId;                      break;                  case CompareType.Less:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) < pct                           select p.PeopleId;                      break;                  case CompareType.LessEqual:                      q2 = from p in q                           let g = from a in p.Attends                                   where a.MeetingDate >= StartDate                                   where a.MeetingDate < enddt                                   where OrganizationInt == 0 || a.Meeting.OrganizationId == OrganizationInt                                   where DivisionInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                                   where ProgramInt == 0 || a.Meeting.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                                   select a                           let n = g.Count(aa => aa.EffAttendFlag == true)                           let d = g.Count(aa => aa.EffAttendFlag != null)                           where (d == 0 ? 0d : n * 100.0 / d) <= pct                           select p.PeopleId;                      break;                  case CompareType.NotEqual:                  case CompareType.Equal:                      return AlwaysFalse();                  default:                      break;              }
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendCntHistory,The following statement contains a magic number: if (!EndDate.HasValue && StartDate.HasValue)                      enddt = StartDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendCntHistory,The following statement contains a magic number: if(EndDate.HasValue)                  enddt = EndDate.Value.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CommitmentForMeetingId,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p => p.Attends.Any(a =>                  a.MeetingId == meetingid && CodeIntIds.Contains(a.Commitment ?? 99));
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FirstFamilyVisitAsOf,The following statement contains a magic number: var enddt = EndDate?.AddHours(24) ?? Util.Today.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FirstFamilyVisitAsOf,The following statement contains a magic number: var enddt = EndDate?.AddHours(24) ?? Util.Today.AddHours(24);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,HasRecentNewAttend,The following statement contains a magic number: db.TagRecentStartAttend(ProgramInt ?? 0' DivisionInt ?? 0' OrganizationInt' OrgTypeInt ?? 0' days0 ?? 365' Days' tag.Id);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,KidsRecentAttendCount,The following statement contains a magic number: Expression<Func<Person' int>> pred = p =>                  p.Family.People.Any(k => k.PositionInFamilyId == 30 && k.Attends.Any())                      ? p.Family.People.Where(k => k.PositionInFamilyId == 30).Max(k =>                          k.Attends.Count(a => a.AttendanceFlag && a.MeetingDate >= mindt))                      : 0;
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,KidsRecentAttendCount,The following statement contains a magic number: Expression<Func<Person' int>> pred = p =>                  p.Family.People.Any(k => k.PositionInFamilyId == 30 && k.Attends.Any())                      ? p.Family.People.Where(k => k.PositionInFamilyId == 30).Max(k =>                          k.Attends.Count(a => a.AttendanceFlag && a.MeetingDate >= mindt))                      : 0;
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,BackgroundCheckStatus,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p =>                p.BackgroundChecks.Any(bc =>                    ids.Contains(bc.StatusID)                    && (user == "" || bc.User.Users.Any(uu => uu.Username == user))                    && (pid == 0 || bc.UserID == pid)                    && (lab.Contains(bc.ReportLabelID) || lab.Length == 0 || lab[0] == 99)                    );
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,PreviousCurrentOrg,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p =>                  p.EnrollmentTransactions.Any(m =>                      m.OrganizationId == db.CurrentSessionOrgId                      && m.TransactionTypeId > 3                      && m.MemberTypeId != MemberTypeCode.Prospect                      && m.TransactionStatus == false                      && (m.Pending ?? false) == false)                  && !p.OrganizationMembers.Any(m =>                      m.OrganizationId == db.CurrentSessionOrgId                      && (m.Pending ?? false) == false);
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,WasMemberAsOf,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p => (                  from et in p.EnrollmentTransactions                  where et.TransactionTypeId <= 3 // things that start a change                  where et.TransactionStatus == false                  where et.TransactionDate <= EndDate // transaction starts <= looked for end                  where et.MemberTypeId != MemberTypeCode.Prospect                  where (et.Pending ?? false) == false                  where (et.NextTranChangeDate ?? now) >= StartDate // transaction ends >= looked for start                  where (OrgTypeInt ?? 0) == 0 || et.Organization.OrganizationTypeId == OrgTypeInt                  where OrganizationInt == 0 || et.OrganizationId == OrganizationInt                  where DivisionInt == 0 || et.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                  where ProgramInt == 0 || et.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                  select et                  ).Any();
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,WasRecentMemberOf,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p => (                  from et in p.EnrollmentTransactions                  where et.TransactionTypeId <= 3 // things that start a change                  where et.TransactionStatus == false                  where et.MemberTypeId != MemberTypeCode.Prospect                  where (et.Pending ?? false) == false                  where (et.NextTranChangeDate ?? now) >= dt // transaction ends >= looked for start                  where (OrgTypeInt ?? 0) == 0 || et.Organization.OrganizationTypeId == OrgTypeInt                  where OrganizationInt == 0 || et.OrganizationId == OrganizationInt                  where DivisionInt == 0 || et.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                  where ProgramInt == 0 || et.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                  select et                  ).Any();
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,MemberTypeAsOf,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p => (                  from et in p.EnrollmentTransactions                  where et.TransactionTypeId <= 3 // things that start a change                  where et.TransactionStatus == false                  where StartDate <= (et.NextTranChangeDate ?? Util.Now) // where it ends                  where et.TransactionDate <= end // where it begins                  where (et.Pending ?? false) == false                  where CodeIntIds.Contains(et.MemberTypeId)  // what it's type was during that time                  where (OrgTypeInt ?? 0) == 0 || et.Organization.OrganizationTypeId == OrgTypeInt                  where OrganizationInt == 0 || et.OrganizationId == OrganizationInt                  where DivisionInt == 0 || et.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                  where ProgramInt == 0 || et.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                  select et                  ).Any();
Magic Number,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentRegistrationType,The following statement contains a magic number: Expression<Func<Person' bool>> pred = p => (                  from m in p.EnrollmentTransactions                  where m.TransactionTypeId == 1                  where m.EnrollmentDate >= mindt                  where CodeIntIds[0] == 99 || CodeIntIds.Contains(m.Organization.RegistrationTypeId ?? 0)                  where (OrgTypeInt ?? 0) == 0 || m.Organization.OrganizationTypeId == OrgTypeInt                  where OrganizationInt == 0 || m.OrganizationId == OrganizationInt                  where DivisionInt == 0 || m.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                  where ProgramInt == 0 || m.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                  select m                  ).Any();
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ScratchPadCondition,The following statement contains a magic number: if (q.Count < 5)              {                  c = Condition.CreateNewGroupClause();                  query = new Query                  {                      QueryId = c.Id'                      Owner = Util.UserName'                      Created = Util.Now'                      LastRun = Util.Now'                      Name = Util.ScratchPad2'                      Text = c.ToXml()                  };                  Queries.InsertOnSubmit(query);                  SubmitChanges();              }              else              {                  query = q.First();                  c = query.ToClause();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchLastFiveQueries,The following statement contains a magic number: var list = q.Take(5).ToList();
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Setting,The following statement contains a magic number: if (list == null)              {                  try                  {                      list = Settings.ToDictionary(c => c.Id.Trim()' c => c.SettingX'                          StringComparer.OrdinalIgnoreCase);                      HttpRuntime.Cache.Insert(Host + "Setting"' list' null'                          DateTime.Now.AddSeconds(15)' Cache.NoSlidingExpiration);                  }                  catch (SqlException)                  {                      throw;                  }                  catch (Exception)                  {                      return string.Empty;                  }              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetSetting,The following statement contains a magic number: if (list == null)              {                  list = Settings.ToDictionary(c => c.Id.Trim()' c => c.SettingX);                  HttpRuntime.Cache.Insert(Host + "Setting"' list' null'                          DateTime.Now.AddSeconds(60)' Cache.NoSlidingExpiration);              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,DeleteSetting,The following statement contains a magic number: if (list == null)              {                  list = Settings.ToDictionary(c => c.Id.Trim()' c => c.SettingX);                  HttpRuntime.Cache.Insert(Host + "Setting"' list' null'                          DateTime.Now.AddSeconds(60)' Cache.NoSlidingExpiration);              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetRegistrationsConverted,The following statement contains a magic number: HttpRuntime.Cache.Insert(Host + "-RegistrationsConverted"' true' null'                  DateTime.Now.AddHours(2)' Cache.NoSlidingExpiration);
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,OnCreated,The following statement contains a magic number: CommandTimeout = 1200;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,PersonQueryParents,The following statement contains a magic number: var q2 = from p in q                       from m in p.Family.People                       where m.PositionInFamilyId == 10                       //					 where (m.PositionInFamilyId == 10 && p.PositionInFamilyId != 10)                       //					 || (m.PeopleId == p.PeopleId && p.PositionInFamilyId == 10)                       where m.DeceasedDate == null                       select m.PeopleId;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,PersonQueryPlusParents,The following statement contains a magic number: var q2 = from p in q                       from m in p.Family.People                       where m.PositionInFamilyId == 10                       //					 where (m.PositionInFamilyId == 10 && p.PositionInFamilyId != 10)                       //					 || (m.PeopleId == p.PeopleId && p.PositionInFamilyId == 10)                       where m.DeceasedDate == null                       select m.PeopleId;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ReturnPrimaryAdults,The following statement contains a magic number: var q2 = from p in q                       from m in p.Family.People                       where m.PositionInFamilyId == 10                       where m.DeceasedDate == null                       select m.PeopleId;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,NewTemporaryTag,The following statement contains a magic number: Debug.Assert(NextTagId != 10' "got a 10");
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: var dt = Util.Now.AddYears(-3);
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: q = from p in People                  where p.EnrollmentTransactions.Any(et =>                          et.TransactionDate > dt                          && et.TransactionTypeId >= 4                          && oids.Contains(et.OrganizationId)                          && et.Organization.SecurityTypeId != 3                          && OrganizationMembers.Any(um =>                              um.OrganizationId == et.OrganizationId && um.PeopleId == me))                  select p;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: q = from p in People                  where p.EnrollmentTransactions.Any(et =>                          et.TransactionDate > dt                          && et.TransactionTypeId >= 4                          && oids.Contains(et.OrganizationId)                          && et.Organization.SecurityTypeId != 3                          && OrganizationMembers.Any(um =>                              um.OrganizationId == et.OrganizationId && um.PeopleId == me))                  select p;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: var attype = new int[] { 40' 50' 60 };
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: var attype = new int[] { 40' 50' 60 };
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: var attype = new int[] { 40' 50' 60 };
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,SetOrgLeadersOnly,The following statement contains a magic number: q = from p in People                  where p.Attends.Any(a =>                      OrganizationMembers.Any(um =>                          um.MemberType.AttendanceTypeId == AttendTypeCode.Leader                          && um.Organization.SecurityTypeId != 3                          && oids.Contains(um.OrganizationId)                          && um.OrganizationId == a.Meeting.OrganizationId                          && um.PeopleId == me)                      && attype.Contains(a.AttendanceTypeId.Value) && a.MeetingDate > dt)                  select p;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,StatusFlags,The following statement contains a magic number: var q2 = from s in q.ToList()                       where re.Match(s).Success                       let a = s.SplitStr(":"' 2)                       select new[] { a[0]' a[1] };
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,QueryStatClauses,The following statement contains a magic number: var q2 = from s in q.ToList()                       where re.Match(s).Success                       let a = s.SplitStr(":"' 2)                       select new[] { a[0]' a[1] };
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateCampusId,The following statement contains a magic number: if (c == null)              {                  var max = 10;                  if (Campus.Any())                      max = Campus.Max(mm => mm.Id) + 10;                  c = new Campu() { Id = max' Description = name' Code = name.Truncate(20) };                  Campus.InsertOnSubmit(c);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateCampusId,The following statement contains a magic number: if (c == null)              {                  var max = 10;                  if (Campus.Any())                      max = Campus.Max(mm => mm.Id) + 10;                  c = new Campu() { Id = max' Description = name' Code = name.Truncate(20) };                  Campus.InsertOnSubmit(c);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateCampusId,The following statement contains a magic number: if (c == null)              {                  var max = 10;                  if (Campus.Any())                      max = Campus.Max(mm => mm.Id) + 10;                  c = new Campu() { Id = max' Description = name' Code = name.Truncate(20) };                  Campus.InsertOnSubmit(c);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreatePositionId,The following statement contains a magic number: if (familyPosition == null)              {                  var max = FamilyPositions.Max(mm => mm.Id) + 10;                  familyPosition = new FamilyPosition() { Id = max' Description = name' Code = name.Truncate(20) };                  FamilyPositions.InsertOnSubmit(familyPosition);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreatePositionId,The following statement contains a magic number: if (familyPosition == null)              {                  var max = FamilyPositions.Max(mm => mm.Id) + 10;                  familyPosition = new FamilyPosition() { Id = max' Description = name' Code = name.Truncate(20) };                  FamilyPositions.InsertOnSubmit(familyPosition);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateRoleId,The following statement contains a magic number: if (role == null)              {                  var max = Roles.Max(mm => mm.RoleId) + 10;                  role = new Role() { RoleId = max' RoleName = name };                  Roles.InsertOnSubmit(role);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateOrgTypeId,The following statement contains a magic number: if (orgtype == null)              {                  var nextid = OrganizationTypes.Any()                      ? OrganizationTypes.Max(mm => mm.Id) + 10                      : 10;                  orgtype = new OrganizationType() { Id = nextid' Description = name' Code = name.Truncate(20) };                  OrganizationTypes.InsertOnSubmit(orgtype);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateOrgTypeId,The following statement contains a magic number: if (orgtype == null)              {                  var nextid = OrganizationTypes.Any()                      ? OrganizationTypes.Max(mm => mm.Id) + 10                      : 10;                  orgtype = new OrganizationType() { Id = nextid' Description = name' Code = name.Truncate(20) };                  OrganizationTypes.InsertOnSubmit(orgtype);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateOrgTypeId,The following statement contains a magic number: if (orgtype == null)              {                  var nextid = OrganizationTypes.Any()                      ? OrganizationTypes.Max(mm => mm.Id) + 10                      : 10;                  orgtype = new OrganizationType() { Id = nextid' Description = name' Code = name.Truncate(20) };                  OrganizationTypes.InsertOnSubmit(orgtype);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateEntryPoint,The following statement contains a magic number: if (ep == null)              {                  var max = EntryPoints.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  ep = new EntryPoint { Id = max' Description = type' Code = type.Truncate(20) };                  EntryPoints.InsertOnSubmit(ep);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateEntryPoint,The following statement contains a magic number: if (ep == null)              {                  var max = EntryPoints.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  ep = new EntryPoint { Id = max' Description = type' Code = type.Truncate(20) };                  EntryPoints.InsertOnSubmit(ep);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateEntryPoint,The following statement contains a magic number: if (ep == null)              {                  var max = EntryPoints.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  ep = new EntryPoint { Id = max' Description = type' Code = type.Truncate(20) };                  EntryPoints.InsertOnSubmit(ep);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,FetchOrCreateEntryPoint,The following statement contains a magic number: if (ep == null)              {                  var max = EntryPoints.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  ep = new EntryPoint { Id = max' Description = type' Code = type.Truncate(20) };                  EntryPoints.InsertOnSubmit(ep);                  SubmitChanges();              }
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecords,The following statement contains a magic number: clause.Days = 365;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecords,The following statement contains a magic number: clause.Days = 365;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecords2,The following statement contains a magic number: clause.Days = 365;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecords2,The following statement contains a magic number: clause.Days = 365;
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecordsdt,The following statement contains a magic number: clause.StartDate = dt.AddDays(-365);
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecordsdt,The following statement contains a magic number: clause.StartDate = dt.AddDays(-365);
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecords2dt,The following statement contains a magic number: clause.StartDate = dt.AddDays(-365);
Magic Number,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,ActiveRecords2dt,The following statement contains a magic number: clause.StartDate = dt.AddDays(-365);
Magic Number,CmsData,FamilyExtra,C:\repos\bvcms_bvcms\CmsData\Extensions\FamilyExtra.cs,OnCreated,The following statement contains a magic number: TransactionTime = new DateTime(1900' 1' 1);
Magic Number,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,FindNextDate,The following statement contains a magic number: if (SemiEvery == "S")              {                  var dt1 = new DateTime(ndt.Year' ndt.Month' Day1 ?? 1);                  var dt2 = new DateTime(ndt.Year' ndt.Month'                      Math.Min(DateTime.DaysInMonth(ndt.Year' ndt.Month)' Day2 ?? 15));                  if (ndt <= dt1)                      return dt1;                  if (ndt <= dt2)                      return dt2;                  return dt1.AddMonths(1);              }
Magic Number,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,FindNextDate,The following statement contains a magic number: switch (Period)              {                  case "W":                      while (ndt > dt)                          dt = startwhen.AddDays(everywhen * 7 * n++);                      break;                  case "M":                      while (ndt > dt)                          dt = startwhen.AddMonths(everywhen * n++);                      break;              }
Magic Number,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,DoGiving,The following statement contains a magic number: var t = new Transaction              {                  TransactionDate = DateTime.Now'                  TransactionId = "started"'                  First = Person.FirstName'                  MiddleInitial = Person.MiddleName.Truncate(1) ?? ""'                  Last = Person.LastName'                  Suffix = Person.SuffixCode'                  Amt = total'                  Description = "Recurring Giving"'                  Testing = false'                  TransactionGateway = gw.GatewayType'                  Financeonly = true'                  PaymentType = preferredType'                  LastFourCC = preferredType == PaymentType.CreditCard ? paymentInfo.MaskedCard.Last(4) : null'                  LastFourACH = preferredType == PaymentType.Ach ? paymentInfo.MaskedAccount.Last(4) : null'                  OrgId = orgid'                  LoginPeopleId = Person.PeopleId'              };
Magic Number,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,DoGiving,The following statement contains a magic number: var t = new Transaction              {                  TransactionDate = DateTime.Now'                  TransactionId = "started"'                  First = Person.FirstName'                  MiddleInitial = Person.MiddleName.Truncate(1) ?? ""'                  Last = Person.LastName'                  Suffix = Person.SuffixCode'                  Amt = total'                  Description = "Recurring Giving"'                  Testing = false'                  TransactionGateway = gw.GatewayType'                  Financeonly = true'                  PaymentType = preferredType'                  LastFourCC = preferredType == PaymentType.CreditCard ? paymentInfo.MaskedCard.Last(4) : null'                  LastFourACH = preferredType == PaymentType.Ach ? paymentInfo.MaskedAccount.Last(4) : null'                  OrgId = orgid'                  LoginPeopleId = Person.PeopleId'              };
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,ParseBirthdate,The following statement contains a magic number: if (DateTime.TryParse(s' out dt))              {                  birthDay = dt.Day;                  birthMonth = dt.Month;                  if (Regex.IsMatch(s' @"\d+/\d+/\d+"))                      birthYear = dt.Year;              }              else              {                  int n;                  if (int.TryParse(s' out n))                      if (n >= 1 && n <= 12)                          birthMonth = n;                      else                          birthYear = n;              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FormatBirthday,The following statement contains a magic number: try              {                  var yr = Birthyear(y' GetAge(y' m' d)' peopleid);                  if (m.HasValue && d.HasValue)                      if (!yr.HasValue)                          return new DateTime(2000' m.Value' d.Value).ToString("m");                      else                          return new DateTime(yr.Value' m.Value' d.Value).ToString("d");                  if (yr.HasValue)                      if (m.HasValue)                          return new DateTime(yr.Value' m.Value' 1).ToString("y");                      else                          return y.ToString();              }              catch (Exception)              {                  return $"bad date {m ?? 0}/{d ?? 0}/{y ?? 0}";              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,MovePersonStuff,The following statement contains a magic number: db.AttendUpdateN(targetid' 10);
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (!first.HasValue() || married)                  switch (gender)                  {                      case 0:                          first = "A";                          break;                      case 1:                          if (!first.HasValue()) first = "Husbander";                          break;                      case 2:                          first = "Wifey";                          break;                  }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: return Add(db' false' fam' 20' null' firstname' nickname' lastname' dob.ToString2("M/d/yyyy")' 0' 0' 0' 0);
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: p.AddressTypeId = 10;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (firstname.HasValue())                  p.FirstName = firstname.Trim().ToProper().Truncate(25);              else                  p.FirstName = "";
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (nickname.HasValue())                  p.NickName = nickname.Trim().ToProper().Truncate(15);
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (lastname.HasValue())                  p.LastName = lastname.Trim().ToProper().Truncate(100);              else                  p.LastName = "?";
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (p.GenderId == 99)                  p.GenderId = 0;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: if (Util.BirthDateValid(dob' out dt))              {                  if (dt.Year == Util.SignalNoYear)                  {                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = null;                  }                  else                  {                      while (dt.Year < 1900)                          dt = dt.AddYears(100);                      if (dt > Util.Now)                          dt = dt.AddYears(-100);                      p.BirthDay = dt.Day;                      p.BirthMonth = dt.Month;                      p.BirthYear = dt.Year;                  }                  if (p.GetAge() < 18 && marriedCode == 0)                      p.MaritalStatusId = MaritalStatusCode.Single;              }              // I think this else statement is no longer necessary              else if (DateTime.TryParse(dob' out dt))              {                  p.BirthDay = dt.Day;                  p.BirthMonth = dt.Month;                  if (Regex.IsMatch(dob' @"\d+[-/]\d+[-/]\d+"))                  {                      p.BirthYear = dt.Year;                      while (p.BirthYr < 1900)                          p.BirthYear += 100;                      if (p.GetAge() < 18 && marriedCode == 0)                          p.MaritalStatusId = MaritalStatusCode.Single;                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: return Add(fam' position' tag' firstname' nickname' lastname' dob' married ? 20 : 10' gender' originId'                  entryPointId);
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following statement contains a magic number: return Add(fam' position' tag' firstname' nickname' lastname' dob' married ? 20 : 10' gender' originId'                  entryPointId);
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,ComputeTitle,The following statement contains a magic number: if (GenderId == 2)                  if (MaritalStatusId == 20 || MaritalStatusId == 50)                      return "Mrs.";                  else                      return "Ms.";
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,ComputeTitle,The following statement contains a magic number: if (GenderId == 2)                  if (MaritalStatusId == 20 || MaritalStatusId == 50)                      return "Mrs.";                  else                      return "Ms.";
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,ComputeTitle,The following statement contains a magic number: if (GenderId == 2)                  if (MaritalStatusId == 20 || MaritalStatusId == 50)                      return "Mrs.";                  else                      return "Ms.";
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,PostUnattendedContribution,The following statement contains a magic number: if (spec.HasValue())              {                  var a = spec.SplitStr(" "' 2);                  try                  {                      var next = DateTime.Parse(now.ToShortDateString() + " " + a[1]);                      var dow = Enum.Parse(typeof(DayOfWeek)' a[0]' ignoreCase: true);                      next = next.Sunday().Add(next.TimeOfDay).AddDays(dow.ToInt());                      if (now > next)                          next = next.AddDays(7);                      var prev = next.AddDays(-7);                      var bid = BundleTypeCode.MissionTrip == typecode                          ? db.GetCurrentMissionTripBundle(next' prev)                          : BundleTypeCode.OnlinePledge == typecode                              ? db.GetCurrentOnlinePledgeBundle(next' prev)                              : db.GetCurrentOnlineBundle(next' prev);                      bundle = db.BundleHeaders.SingleOrDefault(bb => bb.BundleHeaderId == bid);                  }                  catch (Exception)                  {                      spec = "";                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,PostUnattendedContribution,The following statement contains a magic number: if (spec.HasValue())              {                  var a = spec.SplitStr(" "' 2);                  try                  {                      var next = DateTime.Parse(now.ToShortDateString() + " " + a[1]);                      var dow = Enum.Parse(typeof(DayOfWeek)' a[0]' ignoreCase: true);                      next = next.Sunday().Add(next.TimeOfDay).AddDays(dow.ToInt());                      if (now > next)                          next = next.AddDays(7);                      var prev = next.AddDays(-7);                      var bid = BundleTypeCode.MissionTrip == typecode                          ? db.GetCurrentMissionTripBundle(next' prev)                          : BundleTypeCode.OnlinePledge == typecode                              ? db.GetCurrentOnlinePledgeBundle(next' prev)                              : db.GetCurrentOnlineBundle(next' prev);                      bundle = db.BundleHeaders.SingleOrDefault(bb => bb.BundleHeaderId == bid);                  }                  catch (Exception)                  {                      spec = "";                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,PostUnattendedContribution,The following statement contains a magic number: if (spec.HasValue())              {                  var a = spec.SplitStr(" "' 2);                  try                  {                      var next = DateTime.Parse(now.ToShortDateString() + " " + a[1]);                      var dow = Enum.Parse(typeof(DayOfWeek)' a[0]' ignoreCase: true);                      next = next.Sunday().Add(next.TimeOfDay).AddDays(dow.ToInt());                      if (now > next)                          next = next.AddDays(7);                      var prev = next.AddDays(-7);                      var bid = BundleTypeCode.MissionTrip == typecode                          ? db.GetCurrentMissionTripBundle(next' prev)                          : BundleTypeCode.OnlinePledge == typecode                              ? db.GetCurrentOnlinePledgeBundle(next' prev)                              : db.GetCurrentOnlineBundle(next' prev);                      bundle = db.BundleHeaders.SingleOrDefault(bb => bb.BundleHeaderId == bid);                  }                  catch (Exception)                  {                      spec = "";                  }              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateBaptismType,The following statement contains a magic number: if (bt == null)              {                  var max = db.BaptismTypes.Max(mm => mm.Id) + 10;                  bt = new BaptismType() {Id = max' Code = "b" + max' Description = type};                  db.BaptismTypes.InsertOnSubmit(bt);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateDropType,The following statement contains a magic number: if (dr == null)              {                  var max = db.DropTypes.Max(mm => mm.Id) + 10;                  dr = new DropType() {Id = max' Code = "dr" + max' Description = type};                  db.DropTypes.InsertOnSubmit(dr);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateMaritalStatus,The following statement contains a magic number: if (ms == null)              {                  var max = db.BaptismTypes.Max(mm => mm.Id) + 10;                  ms = new MaritalStatus() {Id = max' Code = "ms" + max' Description = type};                  db.MaritalStatuses.InsertOnSubmit(ms);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateDecisionType,The following statement contains a magic number: if (dt == null)              {                  var max = db.DecisionTypes.Max(mm => mm.Id) + 10;                  dt = new DecisionType() {Id = max' Code = "d" + max' Description = type};                  db.DecisionTypes.InsertOnSubmit(dt);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateNewMemberClassStatus,The following statement contains a magic number: if (i == null)              {                  var max = db.NewMemberClassStatuses.Max(mm => mm.Id) + 10;                  i = new NewMemberClassStatus() {Id = max' Code = "NM" + max' Description = type};                  db.NewMemberClassStatuses.InsertOnSubmit(i);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateVolunteerApplicationStatus,The following statement contains a magic number: if (i == null)              {                  var max = db.VolApplicationStatuses.Max(mm => mm.Id) + 10;                  i = new VolApplicationStatus() {Id = max' Code = "VS" + max' Description = status};                  db.VolApplicationStatuses.InsertOnSubmit(i);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateCampus,The following statement contains a magic number: if (cam == null)              {                  int max = 10;                  if (db.Campus.Any())                      max = db.Campus.Max(mm => mm.Id) + 10;                  cam = new Campu() {Id = max' Description = campus' Code = campus.Truncate(20)};                  db.Campus.InsertOnSubmit(cam);                  db.SubmitChanges();              }              else if (!cam.Code.HasValue())              {                  cam.Code = campus.Truncate(20);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateCampus,The following statement contains a magic number: if (cam == null)              {                  int max = 10;                  if (db.Campus.Any())                      max = db.Campus.Max(mm => mm.Id) + 10;                  cam = new Campu() {Id = max' Description = campus' Code = campus.Truncate(20)};                  db.Campus.InsertOnSubmit(cam);                  db.SubmitChanges();              }              else if (!cam.Code.HasValue())              {                  cam.Code = campus.Truncate(20);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateCampus,The following statement contains a magic number: if (cam == null)              {                  int max = 10;                  if (db.Campus.Any())                      max = db.Campus.Max(mm => mm.Id) + 10;                  cam = new Campu() {Id = max' Description = campus' Code = campus.Truncate(20)};                  db.Campus.InsertOnSubmit(cam);                  db.SubmitChanges();              }              else if (!cam.Code.HasValue())              {                  cam.Code = campus.Truncate(20);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FetchOrCreateCampus,The following statement contains a magic number: if (cam == null)              {                  int max = 10;                  if (db.Campus.Any())                      max = db.Campus.Max(mm => mm.Id) + 10;                  cam = new Campu() {Id = max' Description = campus' Code = campus.Truncate(20)};                  db.Campus.InsertOnSubmit(cam);                  db.SubmitChanges();              }              else if (!cam.Code.HasValue())              {                  cam.Code = campus.Truncate(20);                  db.SubmitChanges();              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadPicture,The following statement contains a magic number: p.ThumbId = Image.NewImageFromBits(bits' 50' 50).Id;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadPicture,The following statement contains a magic number: p.ThumbId = Image.NewImageFromBits(bits' 50' 50).Id;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadPicture,The following statement contains a magic number: p.SmallId = Image.NewImageFromBits(bits' 120' 120).Id;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadPicture,The following statement contains a magic number: p.SmallId = Image.NewImageFromBits(bits' 120' 120).Id;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadPicture,The following statement contains a magic number: p.MediumId = Image.NewImageFromBits(bits' 320' 400).Id;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadPicture,The following statement contains a magic number: p.MediumId = Image.NewImageFromBits(bits' 320' 400).Id;
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadDocument,The following statement contains a magic number: var mdf = new MemberDocForm              {                  PeopleId = PeopleId'                  DocDate = Util.Now'                  UploaderId = Util2.CurrentPeopleId'                  Name = Path.GetFileName(name).Truncate(100)              };
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadDocument,The following statement contains a magic number: switch (mimetype)              {                  case "image/jpeg":                  case "image/pjpeg":                  case "image/gif":                  case "image/png":                      mdf.IsDocument = false;                      mdf.SmallId = Image.NewImageFromBits(bits' 165' 220).Id;                      mdf.MediumId = Image.NewImageFromBits(bits' 675' 900).Id;                      mdf.LargeId = Image.NewImageFromBits(bits).Id;                      break;                  case "text/plain":                  case "application/pdf":                  case "application/msword":                  case "application/vnd.ms-excel":                      mdf.MediumId = Image.NewImageFromBits(bits' mimetype).Id;                      mdf.SmallId = mdf.MediumId;                      mdf.LargeId = mdf.MediumId;                      mdf.IsDocument = true;                      break;                  default:                      throw new FormatException("file type not supported: " + mimetype);              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadDocument,The following statement contains a magic number: switch (mimetype)              {                  case "image/jpeg":                  case "image/pjpeg":                  case "image/gif":                  case "image/png":                      mdf.IsDocument = false;                      mdf.SmallId = Image.NewImageFromBits(bits' 165' 220).Id;                      mdf.MediumId = Image.NewImageFromBits(bits' 675' 900).Id;                      mdf.LargeId = Image.NewImageFromBits(bits).Id;                      break;                  case "text/plain":                  case "application/pdf":                  case "application/msword":                  case "application/vnd.ms-excel":                      mdf.MediumId = Image.NewImageFromBits(bits' mimetype).Id;                      mdf.SmallId = mdf.MediumId;                      mdf.LargeId = mdf.MediumId;                      mdf.IsDocument = true;                      break;                  default:                      throw new FormatException("file type not supported: " + mimetype);              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadDocument,The following statement contains a magic number: switch (mimetype)              {                  case "image/jpeg":                  case "image/pjpeg":                  case "image/gif":                  case "image/png":                      mdf.IsDocument = false;                      mdf.SmallId = Image.NewImageFromBits(bits' 165' 220).Id;                      mdf.MediumId = Image.NewImageFromBits(bits' 675' 900).Id;                      mdf.LargeId = Image.NewImageFromBits(bits).Id;                      break;                  case "text/plain":                  case "application/pdf":                  case "application/msword":                  case "application/vnd.ms-excel":                      mdf.MediumId = Image.NewImageFromBits(bits' mimetype).Id;                      mdf.SmallId = mdf.MediumId;                      mdf.LargeId = mdf.MediumId;                      mdf.IsDocument = true;                      break;                  default:                      throw new FormatException("file type not supported: " + mimetype);              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UploadDocument,The following statement contains a magic number: switch (mimetype)              {                  case "image/jpeg":                  case "image/pjpeg":                  case "image/gif":                  case "image/png":                      mdf.IsDocument = false;                      mdf.SmallId = Image.NewImageFromBits(bits' 165' 220).Id;                      mdf.MediumId = Image.NewImageFromBits(bits' 675' 900).Id;                      mdf.LargeId = Image.NewImageFromBits(bits).Id;                      break;                  case "text/plain":                  case "application/pdf":                  case "application/msword":                  case "application/vnd.ms-excel":                      mdf.MediumId = Image.NewImageFromBits(bits' mimetype).Id;                      mdf.SmallId = mdf.MediumId;                      mdf.LargeId = mdf.MediumId;                      mdf.IsDocument = true;                      break;                  default:                      throw new FormatException("file type not supported: " + mimetype);              }
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FindAddPerson,The following statement contains a magic number: var f = new Family              {                  HomePhone = phone.GetDigits().Truncate(20)'                  AddressLineOne = streetaddress'                  ZipCode = zip              };
Magic Number,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,FindAddPerson,The following statement contains a magic number: var position = 10;
Magic Number,CmsData,PeopleExtra,C:\repos\bvcms_bvcms\CmsData\Extensions\PeopleExtra.cs,OnCreated,The following statement contains a magic number: TransactionTime = new DateTime(1900' 1' 1);
Magic Number,CmsData,MembershipService,C:\repos\bvcms_bvcms\CmsData\DbUtil\MembershipService.cs,FetchUsername,The following statement contains a magic number: var username = firstinitial + last.Trim().ToLower().Replace("'"' "").Replace(" "' "").Truncate(20);
Magic Number,CmsData,MembershipService,C:\repos\bvcms_bvcms\CmsData\DbUtil\MembershipService.cs,FetchPassword,The following statement contains a magic number: if (a.Length == 2)                  return a[0] + "." + a[1];
Magic Number,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,Drop,The following statement contains a magic number: while (true)              {                  if (!EnrollmentDate.HasValue)                      EnrollmentDate = CreatedDate;                  var sglist = (from mt in db.OrgMemMemTags                                where mt.PeopleId == PeopleId                                where mt.OrgId == OrganizationId                                select mt.MemberTag.Name                      ).ToList();                  var droptrans = new EnrollmentTransaction                  {                      OrganizationId = OrganizationId'                      PeopleId = PeopleId'                      MemberTypeId = MemberTypeId'                      OrganizationName = orgname'                      TransactionDate = dropdate'                      TransactionTypeId = 5' // drop                      CreatedBy = Util.UserId1'                      CreatedDate = Util.Now'                      Pending = Pending'                      AttendancePercentage = AttendPct'                      InactiveDate = InactiveDate'                      UserData = UserData'                      Request = Request'                      ShirtSize = ShirtSize'                      Grade = Grade'                      Tickets = Tickets'                      RegisterEmail = RegisterEmail'                      Score = Score'                      SmallGroups = string.Join("\n"' sglist)'                      SkipInsertTriggerProcessing = skipTriggerProcessing                  };                    db.EnrollmentTransactions.InsertOnSubmit(droptrans);                  db.OrgMemMemTags.DeleteAllOnSubmit(this.OrgMemMemTags);                  db.SubmitChanges();                  foreach (var ev in this.OrgMemberExtras)                  {                      var ev2 = new PrevOrgMemberExtra()                      {                          EnrollmentTranId = droptrans.TransactionId'                          OrganizationId = ev.OrganizationId'                          PeopleId = ev.PeopleId'                          Field = ev.Field'                          StrValue = ev.StrValue'                          Data = ev.Data'                          BitValue = ev.BitValue'                          IntValue = ev.IntValue'                          DateValue = ev.DateValue'                      };                      db.PrevOrgMemberExtras.InsertOnSubmit(ev2);                      db.SubmitChanges();                  }                  db.OrgMemberExtras.DeleteAllOnSubmit(this.OrgMemberExtras);                  db.OrganizationMembers.DeleteOnSubmit(this);                  db.ExecuteCommand(@"  DELETE dbo.SubRequest  FROM dbo.SubRequest sr  JOIN dbo.Attend a ON a.AttendId = sr.AttendId  WHERE a.OrganizationId = {0}  AND a.MeetingDate > {1}  AND a.PeopleId = {2}  "' OrganizationId' Util.Now' PeopleId);                  db.ExecuteCommand("DELETE dbo.Attend WHERE OrganizationId = {0} AND MeetingDate > {1} AND PeopleId = {2} AND ISNULL(Commitment' 1) = 1"' OrganizationId' Util.Now' PeopleId);                  db.ExecuteCommand("DELETE dbo.Attend WHERE OrganizationId = {0} AND DATEADD(DAY' DATEDIFF(DAY' 0' MeetingDate)' 0) = DATEADD(DAY' DATEDIFF(DAY' 0' GETDATE())' 0) AND PeopleId = {1} AND AttendanceFlag = 0"' OrganizationId' PeopleId);                  db.ExecuteCommand("UPDATE dbo.GoerSenderAmounts SET InActive = 1 WHERE OrgId = {0} AND (GoerId = {1} OR SupporterId = {1})"' OrganizationId' PeopleId);                  return droptrans;              }
Magic Number,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,FastDrop,The following statement contains a magic number: var droptrans = new EnrollmentTransaction              {                  OrganizationId = OrganizationId'                  PeopleId = PeopleId'                  MemberTypeId = MemberTypeId'                  OrganizationName = orgname'                  TransactionDate = dropdate'                  TransactionTypeId = 5' // drop                  CreatedBy = Util.UserId1'                  CreatedDate = Util.Now'                  Pending = Pending'                  AttendancePercentage = AttendPct'                  InactiveDate = InactiveDate'                  UserData = UserData'                  Request = Request'                  ShirtSize = ShirtSize'                  Grade = Grade'                  Tickets = Tickets'                  RegisterEmail = RegisterEmail'                  Score = Score'              };
Magic Number,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,AddToGroup,The following statement contains a magic number: var name2 = name.Trim().Truncate(200);
Magic Number,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,InsertOrgMembers,The following statement contains a magic number: var ntries = 2;
Magic Number,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,InsertOrgMembers,The following statement contains a magic number: while (true)              {                  try                  {                      var m = db.OrganizationMembers.SingleOrDefault(m2 => m2.PeopleId == peopleId && m2.OrganizationId == organizationId);                      if (m != null)                      {                          m.Pending = pending;                          m.MemberTypeId = memberTypeId;                          db.SubmitChanges();                          return m;                      }                      var om = new OrganizationMember                      {                          OrganizationId = organizationId'                          PeopleId = peopleId'                          MemberTypeId = memberTypeId'                          EnrollmentDate = enrollmentDate'                          InactiveDate = inactiveDate'                          CreatedDate = Util.Now'                          Pending = pending'                          SkipInsertTriggerProcessing = skipTriggerProcessing                      };                        var et = new EnrollmentTransaction                      {                          OrganizationId = om.OrganizationId'                          PeopleId = om.PeopleId'                          MemberTypeId = om.MemberTypeId'                          OrganizationName = name'                          TransactionDate = enrollmentDate'                          EnrollmentDate = enrollmentDate'                          TransactionTypeId = 1'                          // join                          CreatedBy = Util.UserId1'                          CreatedDate = Util.Now'                          Pending = pending'                          AttendancePercentage = om.AttendPct'                          SkipInsertTriggerProcessing = skipTriggerProcessing                      };                        db.OrganizationMembers.InsertOnSubmit(om);                      db.EnrollmentTransactions.InsertOnSubmit(et);                        db.SubmitChanges();                      return om;                  }                  catch (SqlException ex)                  {                      if (ex.Number == 1205)                          if (--ntries > 0)                          {                              System.Threading.Thread.Sleep(500);                              continue;                          }                      throw;                  }              }
Magic Number,CmsData,OrganizationMember,C:\repos\bvcms_bvcms\CmsData\Organization\OrganizationMember.cs,InsertOrgMembers,The following statement contains a magic number: while (true)              {                  try                  {                      var m = db.OrganizationMembers.SingleOrDefault(m2 => m2.PeopleId == peopleId && m2.OrganizationId == organizationId);                      if (m != null)                      {                          m.Pending = pending;                          m.MemberTypeId = memberTypeId;                          db.SubmitChanges();                          return m;                      }                      var om = new OrganizationMember                      {                          OrganizationId = organizationId'                          PeopleId = peopleId'                          MemberTypeId = memberTypeId'                          EnrollmentDate = enrollmentDate'                          InactiveDate = inactiveDate'                          CreatedDate = Util.Now'                          Pending = pending'                          SkipInsertTriggerProcessing = skipTriggerProcessing                      };                        var et = new EnrollmentTransaction                      {                          OrganizationId = om.OrganizationId'                          PeopleId = om.PeopleId'                          MemberTypeId = om.MemberTypeId'                          OrganizationName = name'                          TransactionDate = enrollmentDate'                          EnrollmentDate = enrollmentDate'                          TransactionTypeId = 1'                          // join                          CreatedBy = Util.UserId1'                          CreatedDate = Util.Now'                          Pending = pending'                          AttendancePercentage = om.AttendPct'                          SkipInsertTriggerProcessing = skipTriggerProcessing                      };                        db.OrganizationMembers.InsertOnSubmit(om);                      db.EnrollmentTransactions.InsertOnSubmit(et);                        db.SubmitChanges();                      return om;                  }                  catch (SqlException ex)                  {                      if (ex.Number == 1205)                          if (--ntries > 0)                          {                              System.Threading.Thread.Sleep(500);                              continue;                          }                      throw;                  }              }
Magic Number,CmsData,Task,C:\repos\bvcms_bvcms\CmsData\Extensions\Task.cs,AddTasks,The following statement contains a magic number: if (qCount > 100)                  return qCount;
Magic Number,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,UploadPicture,The following statement contains a magic number: p.ThumbId = Image.NewImageFromBits(bits' 50' 50).Id;
Magic Number,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,UploadPicture,The following statement contains a magic number: p.ThumbId = Image.NewImageFromBits(bits' 50' 50).Id;
Magic Number,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,UploadPicture,The following statement contains a magic number: p.SmallId = Image.NewImageFromBits(bits' 120' 120).Id;
Magic Number,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,UploadPicture,The following statement contains a magic number: p.SmallId = Image.NewImageFromBits(bits' 120' 120).Id;
Magic Number,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,UploadPicture,The following statement contains a magic number: p.MediumId = Image.NewImageFromBits(bits' 320' 400).Id;
Magic Number,CmsData,Family,C:\repos\bvcms_bvcms\CmsData\Extensions\Family.cs,UploadPicture,The following statement contains a magic number: p.MediumId = Image.NewImageFromBits(bits' 320' 400).Id;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: int dw = id / 10000 - 1;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: id %= 10000;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: if (dw == 10) // any day                  dw = DateTime.Today.DayOfWeek.ToInt();
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: if (dw == 0)                  dw = 7;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: int hour = id / 100;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: int min = id % 100;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,GetDateFromScheduleId,The following statement contains a magic number: if (hour > 0)                  return new DateTime(1900' 1' dw' hour' min' 0);
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var d = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase)              {                  { "sun"' 0 }'                  { "mon"' 1 }'                  { "tue"' 2 }'                  { "wed"' 3 }'                  { "thu"' 4 }'                  { "fri"' 5 }'                  { "sat"' 6 }'                  { "any"' 10 }'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var d = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase)              {                  { "sun"' 0 }'                  { "mon"' 1 }'                  { "tue"' 2 }'                  { "wed"' 3 }'                  { "thu"' 4 }'                  { "fri"' 5 }'                  { "sat"' 6 }'                  { "any"' 10 }'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var d = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase)              {                  { "sun"' 0 }'                  { "mon"' 1 }'                  { "tue"' 2 }'                  { "wed"' 3 }'                  { "thu"' 4 }'                  { "fri"' 5 }'                  { "sat"' 6 }'                  { "any"' 10 }'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var d = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase)              {                  { "sun"' 0 }'                  { "mon"' 1 }'                  { "tue"' 2 }'                  { "wed"' 3 }'                  { "thu"' 4 }'                  { "fri"' 5 }'                  { "sat"' 6 }'                  { "any"' 10 }'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var d = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase)              {                  { "sun"' 0 }'                  { "mon"' 1 }'                  { "tue"' 2 }'                  { "wed"' 3 }'                  { "thu"' 4 }'                  { "fri"' 5 }'                  { "sat"' 6 }'                  { "any"' 10 }'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var d = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase)              {                  { "sun"' 0 }'                  { "mon"' 1 }'                  { "tue"' 2 }'                  { "wed"' 3 }'                  { "thu"' 4 }'                  { "fri"' 5 }'                  { "sat"' 6 }'                  { "any"' 10 }'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: dow = dow.Truncate(3);
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var schedid = (d[dow] + 1) * 10000 + t.TimeOfDay.Hours * 100 + t.TimeOfDay.Minutes;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,ParseSchedule,The following statement contains a magic number: var schedid = (d[dow] + 1) * 10000 + t.TimeOfDay.Hours * 100 + t.TimeOfDay.Minutes;
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateType,The following statement contains a magic number: if (t == null)              {                  var max = 10;                  if (db.OrganizationTypes.Any())                      max = db.OrganizationTypes.Max(mm => mm.Id) + 10;                  t = new OrganizationType { Description = type' Code = type.Substring(0' 3)' Id = max };                  db.OrganizationTypes.InsertOnSubmit(t);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateType,The following statement contains a magic number: if (t == null)              {                  var max = 10;                  if (db.OrganizationTypes.Any())                      max = db.OrganizationTypes.Max(mm => mm.Id) + 10;                  t = new OrganizationType { Description = type' Code = type.Substring(0' 3)' Id = max };                  db.OrganizationTypes.InsertOnSubmit(t);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateType,The following statement contains a magic number: if (t == null)              {                  var max = 10;                  if (db.OrganizationTypes.Any())                      max = db.OrganizationTypes.Max(mm => mm.Id) + 10;                  t = new OrganizationType { Description = type' Code = type.Substring(0' 3)' Id = max };                  db.OrganizationTypes.InsertOnSubmit(t);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateMemberType,The following statement contains a magic number: if (mt == null)              {                  var max = db.MemberTypes.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  mt = new MemberType { Id = max' Description = type' Code = type.Truncate(20)' AttendanceTypeId = AttendTypeCode.Member };                  db.MemberTypes.InsertOnSubmit(mt);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateMemberType,The following statement contains a magic number: if (mt == null)              {                  var max = db.MemberTypes.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  mt = new MemberType { Id = max' Description = type' Code = type.Truncate(20)' AttendanceTypeId = AttendTypeCode.Member };                  db.MemberTypes.InsertOnSubmit(mt);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateMemberType,The following statement contains a magic number: if (mt == null)              {                  var max = db.MemberTypes.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  mt = new MemberType { Id = max' Description = type' Code = type.Truncate(20)' AttendanceTypeId = AttendTypeCode.Member };                  db.MemberTypes.InsertOnSubmit(mt);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,FetchOrCreateMemberType,The following statement contains a magic number: if (mt == null)              {                  var max = db.MemberTypes.Max(mm => mm.Id) + 10;                  if (max < 1000)                      max = 1010;                  mt = new MemberType { Id = max' Description = type' Code = type.Truncate(20)' AttendanceTypeId = AttendTypeCode.Member };                  db.MemberTypes.InsertOnSubmit(mt);                  db.SubmitChanges();              }
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,CreateOrganization,The following statement contains a magic number: var o = new Organization              {                  OrganizationName = organization'                  SecurityTypeId = 0'                  CreatedDate = Util.Now'                  CreatedBy = Util.UserId1'                  OrganizationStatusId = 30'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,CreateOrganization,The following statement contains a magic number: var o = new Organization              {                  OrganizationName = organization.Truncate(100)'                  SecurityTypeId = 0'                  CreatedDate = Util.Now'                  CreatedBy = Util.UserId1'                  OrganizationStatusId = 30'                  DivisionId = divid'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,CreateOrganization,The following statement contains a magic number: var o = new Organization              {                  OrganizationName = organization.Truncate(100)'                  SecurityTypeId = 0'                  CreatedDate = Util.Now'                  CreatedBy = Util.UserId1'                  OrganizationStatusId = 30'                  DivisionId = divid'              };
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,AddAsPreviousMember,The following statement contains a magic number: db.EnrollmentTransactions.InsertOnSubmit(                  new EnrollmentTransaction                  {                      OrganizationId = oid'                      PeopleId = pid'                      OrganizationName = orgname'                      MemberTypeId = mbrid'                      TransactionDate = dropdt'                      TransactionTypeId = 5'                      CreatedBy = userid'                      CreatedDate = Util.Now'                  });
Magic Number,CmsData,Organization,C:\repos\bvcms_bvcms\CmsData\Organization\Organization.cs,AddMemberTag,The following statement contains a magic number: var name2 = name.Trim().Truncate(200);
Magic Number,CmsData.Classes.HealthChecker,HealthChecker,C:\repos\bvcms_bvcms\CmsData\Classes\HealthChecker\HealthChecker.cs,GetHealthLabel,The following statement contains a magic number: foreach (var contactExtra in latestContact.ContactExtras)              {                  if (contactExtra.Metadata == null) continue;                    var groupHealth = contactExtra.Metadata.Split(''');                  if (groupHealth.Length < 2) continue;                    var contactLabel = groupHealth[0];                  var contactValue = int.Parse(groupHealth[1]);                  if (contactValue >= healthValue)                  {                      healthLabel = contactLabel;                      healthValue = contactValue;                  }              }
Magic Number,CmsData.Finance,BluePayGateway,C:\repos\bvcms_bvcms\CmsData\Finance\BluePayGateway.cs,GetBatchDetails,The following statement contains a magic number: foreach (var transaction in report.GetTransactionList())              {                  var batchTransaction = new BatchTransaction                  {                      TransactionId = transaction.invoice_id.ToInt()'                      Reference = transaction.id'                      BatchReference = transaction.settlement_id'                      TransactionType = GetTransactionType(transaction.trans_type)'                      BatchType = GetBatchType(transaction.payment_type)'                      Name = $"{transaction.name1} {transaction.name2}"'                      Amount = transaction.amount'                      Approved = IsApproved(transaction.status)'                      Message = transaction.message'                      TransactionDate = transaction.issue_date'                      SettledDate = transaction.settle_date'                      LastDigits = transaction.payment_account.Last(4)                  };                  batchTransactions.Add(batchTransaction);              }
Magic Number,CmsData.Finance,CheckBatchedTransactions,C:\repos\bvcms_bvcms\CmsData\Finance\CheckBatchSettlements.cs,AdjustSettlementDateForAllTimeZones,The following statement contains a magic number: return settlementDate.AddHours(4);
Magic Number,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,StoreInVault,The following statement contains a magic number: if (type == PaymentType.CreditCard)              {                  if (paymentInfo.TbnCardVaultId == null) // create new vault.                      paymentInfo.TbnCardVaultId = CreateCreditCardVault(person' paymentInfo' cardNumber' expires);                  else                  {                      // update existing vault.                      // check for updating the entire card or only expiration.                      if (!cardNumber.StartsWith("X"))                          UpdateCreditCardVault(person' paymentInfo' cardNumber' expires);                      else                          UpdateCreditCardVault(person' paymentInfo' expires);                  }                    paymentInfo.MaskedCard = Util.MaskCC(cardNumber);                  paymentInfo.Expires = expires;              }              else if (type == PaymentType.Ach)              {                  if (paymentInfo.TbnBankVaultId == null) // create new vault                      paymentInfo.TbnBankVaultId = CreateAchVault(person' paymentInfo' account' routing);                  else                  {                      // we can only update the ach account if there is a full account number.                      if (!account.StartsWith("X"))                          UpdateAchVault(person' paymentInfo' account' routing);                      else                          UpdateAchVault(person' paymentInfo);                  }                    paymentInfo.MaskedAccount = Util.MaskAccount(account);                  paymentInfo.Routing = Util.Mask(new StringBuilder(routing)' 2);              }              else                  throw new ArgumentException($"Type {type} not supported"' nameof(type));
Magic Number,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,GetReturnedChecks,The following statement contains a magic number: var queryRequest = new QueryRequest(                  _userName'                  _password'                  DateTime.Now.AddDays(-30)'                  DateTime.Now'                  new List<TransNational.Query.Condition> {TransNational.Query.Condition.Failed}'                  new List<TransNational.Query.TransactionType> { TransNational.Query.TransactionType.Ach }'                  new List<ActionType> {ActionType.CheckReturn' ActionType.CheckLateReturn});
Magic Number,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The following statement contains a magic number: foreach (var batchType in batchTypes)              {                  // key it by transaction reference and payment type.                  var unMatchedKeyedByReference = batchTransactions.Where(x => x.BatchType == batchType).ToDictionary(x => x.Reference' x => x);                    // next let's get all the approved matching transactions from our transaction table by transaction id (reference).                  var approvedMatchingTransactions = from transaction in db.Transactions                                                     where unMatchedKeyedByReference.Keys.Contains(transaction.TransactionId)                                                     where transaction.Approved == true                                                     select transaction;                    // next key the matching approved transactions that came from our transaction table by the transaction id (reference).                  var distinctTransactionIds = approvedMatchingTransactions.Select(x => x.TransactionId).Distinct();                    // finally let's get a list of all transactions that need to be inserted' which we don't already have.                  var transactionsToInsert = from transaction in unMatchedKeyedByReference                                             where !distinctTransactionIds.Contains(transaction.Key)                                             select transaction.Value;                    var notbefore = DateTime.Parse("6/1/12"); // the date when Sage payments began in BVCMS (?)                    // spin through each transaction and insert them to the transaction table.                  foreach (var transactionToInsert in transactionsToInsert)                  {                      // get the original transaction.                      var originalTransaction = db.Transactions.SingleOrDefault(t => t.TransactionId == transactionToInsert.Reference && transactionToInsert.TransactionDate >= notbefore && t.PaymentType == (batchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard));                        // get the first and last name.                      string first' last;                      Util.NameSplit(transactionToInsert.Name' out first' out last);                        // get the settlement date' however we are not exactly sure why we add four hours to the settlement date.                      // we think it is to handle all timezones and push to the next day??                      var settlementDate = transactionToInsert.SettledDate.AddHours(4);                        // insert the transaction record.                      db.Transactions.InsertOnSubmit(new Transaction                      {                          Name = transactionToInsert.Name'                          First = first'                          Last = last'                          TransactionId = transactionToInsert.Reference'                          Amt = transactionToInsert.TransactionType == TransactionType.Credit ||                                transactionToInsert.TransactionType == TransactionType.Refund                              ? -transactionToInsert.Amount                              : transactionToInsert.Amount'                          Approved = transactionToInsert.Approved'                          Message = transactionToInsert.Message'                          TransactionDate = transactionToInsert.TransactionDate'                          TransactionGateway = GatewayType'                          Settled = settlementDate'                          Batch = settlementDate' // this date now will be the same as the settlement date.                          Batchref = transactionToInsert.BatchReference'                          Batchtyp = transactionToInsert.BatchType == BatchType.Ach ? "eft" : "bankcard"'                          OriginalId = originalTransaction != null ? (originalTransaction.OriginalId ?? originalTransaction.Id) : (int?) null'                          Fromsage = true'                          Description = originalTransaction != null ? originalTransaction.Description : $"no description from {GatewayType}' id={transactionToInsert.TransactionId}"'                          PaymentType = transactionToInsert.BatchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard'                          LastFourCC = transactionToInsert.BatchType == BatchType.CreditCard ? transactionToInsert.LastDigits : null'                          LastFourACH = transactionToInsert.BatchType == BatchType.Ach ? transactionToInsert.LastDigits : null                      });                  }                    // next update Existing transactions with new batch data if there are any.                  foreach (var existingTransaction in approvedMatchingTransactions)                  {                      if (!unMatchedKeyedByReference.ContainsKey(existingTransaction.TransactionId))                          continue;                        // first get the matching batch transaction.                      var batchTransaction = unMatchedKeyedByReference[existingTransaction.TransactionId];                        // get the adjusted settlement date                      var settlementDate = batchTransaction.SettledDate.AddHours(4);                        existingTransaction.Batch = settlementDate; // this date now will be the same as the settlement date.                      existingTransaction.Batchref = batchTransaction.BatchReference;                      existingTransaction.Batchtyp = batchTransaction.BatchType == BatchType.Ach ? "eft" : "bankcard";                      existingTransaction.Settled = settlementDate;                      existingTransaction.PaymentType = batchTransaction.BatchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard;                      existingTransaction.LastFourCC = batchTransaction.BatchType == BatchType.CreditCard ? batchTransaction.LastDigits : null;                      existingTransaction.LastFourACH = batchTransaction.BatchType == BatchType.Ach ? batchTransaction.LastDigits : null;                  }              }
Magic Number,CmsData.Finance,TransNationalGateway,C:\repos\bvcms_bvcms\CmsData\Finance\TransNationalGateway.cs,CheckBatchSettlements,The following statement contains a magic number: foreach (var batchType in batchTypes)              {                  // key it by transaction reference and payment type.                  var unMatchedKeyedByReference = batchTransactions.Where(x => x.BatchType == batchType).ToDictionary(x => x.Reference' x => x);                    // next let's get all the approved matching transactions from our transaction table by transaction id (reference).                  var approvedMatchingTransactions = from transaction in db.Transactions                                                     where unMatchedKeyedByReference.Keys.Contains(transaction.TransactionId)                                                     where transaction.Approved == true                                                     select transaction;                    // next key the matching approved transactions that came from our transaction table by the transaction id (reference).                  var distinctTransactionIds = approvedMatchingTransactions.Select(x => x.TransactionId).Distinct();                    // finally let's get a list of all transactions that need to be inserted' which we don't already have.                  var transactionsToInsert = from transaction in unMatchedKeyedByReference                                             where !distinctTransactionIds.Contains(transaction.Key)                                             select transaction.Value;                    var notbefore = DateTime.Parse("6/1/12"); // the date when Sage payments began in BVCMS (?)                    // spin through each transaction and insert them to the transaction table.                  foreach (var transactionToInsert in transactionsToInsert)                  {                      // get the original transaction.                      var originalTransaction = db.Transactions.SingleOrDefault(t => t.TransactionId == transactionToInsert.Reference && transactionToInsert.TransactionDate >= notbefore && t.PaymentType == (batchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard));                        // get the first and last name.                      string first' last;                      Util.NameSplit(transactionToInsert.Name' out first' out last);                        // get the settlement date' however we are not exactly sure why we add four hours to the settlement date.                      // we think it is to handle all timezones and push to the next day??                      var settlementDate = transactionToInsert.SettledDate.AddHours(4);                        // insert the transaction record.                      db.Transactions.InsertOnSubmit(new Transaction                      {                          Name = transactionToInsert.Name'                          First = first'                          Last = last'                          TransactionId = transactionToInsert.Reference'                          Amt = transactionToInsert.TransactionType == TransactionType.Credit ||                                transactionToInsert.TransactionType == TransactionType.Refund                              ? -transactionToInsert.Amount                              : transactionToInsert.Amount'                          Approved = transactionToInsert.Approved'                          Message = transactionToInsert.Message'                          TransactionDate = transactionToInsert.TransactionDate'                          TransactionGateway = GatewayType'                          Settled = settlementDate'                          Batch = settlementDate' // this date now will be the same as the settlement date.                          Batchref = transactionToInsert.BatchReference'                          Batchtyp = transactionToInsert.BatchType == BatchType.Ach ? "eft" : "bankcard"'                          OriginalId = originalTransaction != null ? (originalTransaction.OriginalId ?? originalTransaction.Id) : (int?) null'                          Fromsage = true'                          Description = originalTransaction != null ? originalTransaction.Description : $"no description from {GatewayType}' id={transactionToInsert.TransactionId}"'                          PaymentType = transactionToInsert.BatchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard'                          LastFourCC = transactionToInsert.BatchType == BatchType.CreditCard ? transactionToInsert.LastDigits : null'                          LastFourACH = transactionToInsert.BatchType == BatchType.Ach ? transactionToInsert.LastDigits : null                      });                  }                    // next update Existing transactions with new batch data if there are any.                  foreach (var existingTransaction in approvedMatchingTransactions)                  {                      if (!unMatchedKeyedByReference.ContainsKey(existingTransaction.TransactionId))                          continue;                        // first get the matching batch transaction.                      var batchTransaction = unMatchedKeyedByReference[existingTransaction.TransactionId];                        // get the adjusted settlement date                      var settlementDate = batchTransaction.SettledDate.AddHours(4);                        existingTransaction.Batch = settlementDate; // this date now will be the same as the settlement date.                      existingTransaction.Batchref = batchTransaction.BatchReference;                      existingTransaction.Batchtyp = batchTransaction.BatchType == BatchType.Ach ? "eft" : "bankcard";                      existingTransaction.Settled = settlementDate;                      existingTransaction.PaymentType = batchTransaction.BatchType == BatchType.Ach ? PaymentType.Ach : PaymentType.CreditCard;                      existingTransaction.LastFourCC = batchTransaction.BatchType == BatchType.CreditCard ? batchTransaction.LastDigits : null;                      existingTransaction.LastFourACH = batchTransaction.BatchType == BatchType.Ach ? batchTransaction.LastDigits : null;                  }              }
Magic Number,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,StoreInVault,The following statement contains a magic number: if (type == PaymentType.Ach)              {                  SaveECheckToProfile(routing' account' paymentInfo' customer);                    paymentInfo.MaskedAccount = Util.MaskAccount(account);                  paymentInfo.Routing = Util.Mask(new StringBuilder(routing)' 2);              }              else if (type == PaymentType.CreditCard)              {                  var normalizeExpires = DbUtil.NormalizeExpires(expires);                  if (normalizeExpires == null)                      throw new ArgumentException($"Can't normalize date {expires}"' nameof(expires));                    var expiredDate = normalizeExpires.Value;                    SaveCreditCardToProfile(cardNumber' cardCode' expiredDate' paymentInfo' customer);                    paymentInfo.MaskedCard = Util.MaskCC(cardNumber);                  paymentInfo.Expires = expires;              }              else                  throw new ArgumentException($"Type {type} not supported"' nameof(type));
Magic Number,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,GetBatchDetails,The following statement contains a magic number: foreach (var batch in ReportingGateway.GetSettledBatchList(start' end' includeStats: true))              {                  foreach (var transaction in ReportingGateway.GetTransactionList(batch.ID))                  {                      var batchTransaction = new BatchTransaction                      {                          TransactionId = transaction.InvoiceNumber.ToInt()'                          Reference = transaction.TransactionID'                          BatchReference = batch.ID'                          TransactionType = GetTransactionType(transaction.Status)'                          BatchType = GetBatchType(batch.PaymentMethod)'                          Name = $"{transaction.FirstName} {transaction.LastName}"'                          Amount = transaction.SettleAmount'                          Approved = IsApproved(batch.State)'                          Message = batch.State.ToUpper()'                          TransactionDate = transaction.DateSubmitted'                          SettledDate = batch.SettledOn'                          LastDigits = transaction.CardNumber.Last(4)                      };                        if (!string.IsNullOrWhiteSpace(transaction.eCheckBankAccount?.accountNumber))                          batchTransaction.LastDigits = transaction.eCheckBankAccount.accountNumber.Last(4);                        batchTransactions.Add(batchTransaction);                  }              }
Magic Number,CmsData.Finance,AuthorizeNetGateway,C:\repos\bvcms_bvcms\CmsData\Finance\AuthorizeNetGateway.cs,GetBatchDetails,The following statement contains a magic number: foreach (var batch in ReportingGateway.GetSettledBatchList(start' end' includeStats: true))              {                  foreach (var transaction in ReportingGateway.GetTransactionList(batch.ID))                  {                      var batchTransaction = new BatchTransaction                      {                          TransactionId = transaction.InvoiceNumber.ToInt()'                          Reference = transaction.TransactionID'                          BatchReference = batch.ID'                          TransactionType = GetTransactionType(transaction.Status)'                          BatchType = GetBatchType(batch.PaymentMethod)'                          Name = $"{transaction.FirstName} {transaction.LastName}"'                          Amount = transaction.SettleAmount'                          Approved = IsApproved(batch.State)'                          Message = batch.State.ToUpper()'                          TransactionDate = transaction.DateSubmitted'                          SettledDate = batch.SettledOn'                          LastDigits = transaction.CardNumber.Last(4)                      };                        if (!string.IsNullOrWhiteSpace(transaction.eCheckBankAccount?.accountNumber))                          batchTransaction.LastDigits = transaction.eCheckBankAccount.accountNumber.Last(4);                        batchTransactions.Add(batchTransaction);                  }              }
Magic Number,CmsData.Finance,SageGateway,C:\repos\bvcms_bvcms\CmsData\Finance\SageGateway.cs,StoreInVault,The following statement contains a magic number: if (type == PaymentType.CreditCard)              {                  if (paymentInfo.SageCardGuid == null) // create new vault.                      paymentInfo.SageCardGuid = CreateCreditCardVault(person' cardNumber' expires);                  else                  {                      // update existing vault.                      // check for updating the entire card or only expiration.                      if (!cardNumber.StartsWith("X"))                          UpdateCreditCardVault(paymentInfo.SageCardGuid.GetValueOrDefault()' person' cardNumber' expires);                      else                          UpdateCreditCardVault(paymentInfo.SageCardGuid.GetValueOrDefault()' person' expires);                  }                    paymentInfo.MaskedCard = Util.MaskCC(cardNumber);                  paymentInfo.Expires = expires;              }              else if (type == PaymentType.Ach)              {                  if (paymentInfo.SageBankGuid == null) // create new vault                      paymentInfo.SageBankGuid = CreateAchVault(person' account' routing);                  else                  {                      // we can only update the ach account if there is a full account number.                      if (!account.StartsWith("X"))                          UpdateAchVault(paymentInfo.SageBankGuid.GetValueOrDefault()' person' account' routing);                  }                    paymentInfo.MaskedAccount = Util.MaskAccount(account);                  paymentInfo.Routing = Util.Mask(new StringBuilder(routing)' 2);              }              else                  throw new ArgumentException($"Type {type} not supported"' nameof(type));
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,responseParams,The following statement contains a magic number: var read = new char[512];
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,responseParams,The following statement contains a magic number: var count = readStream.Read(read' 0' 512);
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,responseParams,The following statement contains a magic number: while (count > 0)              {                  // Dumps the 256 characters on a string and displays the string to the console.                  var str = new string(read' 0' count);                  response = response + HttpUtility.UrlDecode(str);                  count = readStream.Read(read' 0' 512);              }
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getStatus,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(7));
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getStatus,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(7));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getTransID,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(5));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getMessage,The following statement contains a magic number: if (m.Success)              {                  string[] message = m.Value.Substring(8).Split('"');                  return message[0];              }              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getCVV2,The following statement contains a magic number: if (m.Success)                  return m.Value.Substring(5);              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getAVS,The following statement contains a magic number: if (m.Success)                  return m.Value.Substring(4);              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getMaskedPaymentAccount,The following statement contains a magic number: if (m.Success)                  return m.Value.Substring(16);              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getCardType,The following statement contains a magic number: if (m.Success)                  return m.Value.Substring(10);              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getBank,The following statement contains a magic number: if (m.Success)                  return m.Value.Substring(10);              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getAuthCode,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(10));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getRebillID,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(6));
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getRebillID,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(10));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getCreationDate,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(14));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getNextDate,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(10));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getLastDate,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(9));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getSchedExpr,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(11));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getCyclesRemain,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(14));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getRebillAmount,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(11));              else                  return "";
Magic Number,BPCSharp,BluePayPayment,C:\repos\bvcms_bvcms\CmsData\Finance\BluePay\BluePayPayment.cs,getNextAmount,The following statement contains a magic number: if (m.Success)                  return (m.Value.Substring(12));              else                  return "";
Magic Number,CmsData.Finance.Sage.Report,Transaction,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Report\Transaction.cs,Transaction,The following statement contains a magic number: if (cardNumberElement != null)                  LastDigits = cardNumberElement.Value.Last(4);              else if (acctElement != null)                  LastDigits = acctElement.Value.Last(4);
Magic Number,CmsData.Finance.Sage.Report,Transaction,C:\repos\bvcms_bvcms\CmsData\Finance\Sage\Report\Transaction.cs,Transaction,The following statement contains a magic number: if (cardNumberElement != null)                  LastDigits = cardNumberElement.Value.Last(4);              else if (acctElement != null)                  LastDigits = acctElement.Value.Last(4);
Magic Number,CmsData.Finance.TransNational.Query,Transaction,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\Transaction.cs,Transaction,The following statement contains a magic number: if (TransactionType == TransactionType.CreditCard)              {                  Name = $"{data.Element("first_name").Value} {data.Element("last_name").Value}";                  LastDigits = data.Element("cc_number").Value.Last(4);              }              else              {                  Name = data.Element("check_name").Value;                  LastDigits = data.Element("check_account").Value.Last(4);              }
Magic Number,CmsData.Finance.TransNational.Query,Transaction,C:\repos\bvcms_bvcms\CmsData\Finance\TransNational\Query\Transaction.cs,Transaction,The following statement contains a magic number: if (TransactionType == TransactionType.CreditCard)              {                  Name = $"{data.Element("first_name").Value} {data.Element("last_name").Value}";                  LastDigits = data.Element("cc_number").Value.Last(4);              }              else              {                  Name = data.Element("check_name").Value;                  LastDigits = data.Element("check_account").Value.Last(4);              }
Magic Number,CmsData.Codes,AttendCommitmentCode,C:\repos\bvcms_bvcms\CmsData\DbUtil\Codes.cs,Order,The following statement contains a magic number: switch (id)              {                  case Substitute:                      return 10;                  case FindSub:                      return 20;                  case Attending:                      return 30;                  case SubFound:                      return 40;                  case Regrets:                      return 50;              }
Magic Number,CmsData.Codes,AttendCommitmentCode,C:\repos\bvcms_bvcms\CmsData\DbUtil\Codes.cs,Order,The following statement contains a magic number: switch (id)              {                  case Substitute:                      return 10;                  case FindSub:                      return 20;                  case Attending:                      return 30;                  case SubFound:                      return 40;                  case Regrets:                      return 50;              }
Magic Number,CmsData.Codes,AttendCommitmentCode,C:\repos\bvcms_bvcms\CmsData\DbUtil\Codes.cs,Order,The following statement contains a magic number: switch (id)              {                  case Substitute:                      return 10;                  case FindSub:                      return 20;                  case Attending:                      return 30;                  case SubFound:                      return 40;                  case Regrets:                      return 50;              }
Magic Number,CmsData.Codes,AttendCommitmentCode,C:\repos\bvcms_bvcms\CmsData\DbUtil\Codes.cs,Order,The following statement contains a magic number: switch (id)              {                  case Substitute:                      return 10;                  case FindSub:                      return 20;                  case Attending:                      return 30;                  case SubFound:                      return 40;                  case Regrets:                      return 50;              }
Magic Number,CmsData.Codes,AttendCommitmentCode,C:\repos\bvcms_bvcms\CmsData\DbUtil\Codes.cs,Order,The following statement contains a magic number: switch (id)              {                  case Substitute:                      return 10;                  case FindSub:                      return 20;                  case Attending:                      return 30;                  case SubFound:                      return 40;                  case Regrets:                      return 50;              }
Magic Number,CmsData.Classes.ProtectMyMinistry,ProtectMyMinistryHelper,C:\repos\bvcms_bvcms\CmsData\Classes\ProtectMyMinistry\ProtectMyMinistryHelper.cs,Submit,The following statement contains a magic number: if (rbResponse.bHasErrors)  			{  				bc.StatusID = 0;  				bc.ErrorMessages = rbResponse.sErrors;  			}  			else  			{  				if (rbResponse.bHasInstant)  				{  					bc.StatusID = 3;  					bc.ErrorMessages = "";  					bc.ReportID = int.Parse(rbResponse.sReportID);  					bc.ReportLink = rbResponse.sReportLink;  				}  				else  				{  					bc.StatusID = 2;  					bc.ErrorMessages = "";  					bc.ReportID = int.Parse(rbResponse.sReportID);  				}  			}
Magic Number,CmsData.Classes.ProtectMyMinistry,ProtectMyMinistryHelper,C:\repos\bvcms_bvcms\CmsData\Classes\ProtectMyMinistry\ProtectMyMinistryHelper.cs,Submit,The following statement contains a magic number: if (rbResponse.bHasErrors)  			{  				bc.StatusID = 0;  				bc.ErrorMessages = rbResponse.sErrors;  			}  			else  			{  				if (rbResponse.bHasInstant)  				{  					bc.StatusID = 3;  					bc.ErrorMessages = "";  					bc.ReportID = int.Parse(rbResponse.sReportID);  					bc.ReportLink = rbResponse.sReportLink;  				}  				else  				{  					bc.StatusID = 2;  					bc.ErrorMessages = "";  					bc.ReportID = int.Parse(rbResponse.sReportID);  				}  			}
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)                  throw ParseError(errorPos' Res.IifRequiresThreeArgs);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional(args[0]' args[1]' args[2]' errorPos);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type)) {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type)) {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Missing Default,CmsData.API,APIFunctions,C:\repos\bvcms_bvcms\CmsData\API\APIFunctions.cs,AddEditExtraValue,The following switch statement is missing a default case: switch (type)                  {                      case "code":                          ev.StrValue = value;                          break;                      case "data":                          ev.Data = value;                          break;                      case "date":                          ev.DateValue = value.ToDate();                          break;                      case "int":                          ev.IntValue = value.ToInt2();                          break;                  }
Missing Default,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,FetchContributions,The following switch statement is missing a default case: switch (model.TaxNonTax)              {                  case "TaxDed":                      contributions = from c in contributions                                      where !ContributionTypeCode.NonTaxTypes.Contains(c.ContributionTypeId)                                      select c;                      break;                  case "NonTaxDed":                      contributions = from c in contributions                                      where c.ContributionTypeId == ContributionTypeCode.NonTaxDed                                      select c;                      break;                  case "Both":                      contributions = from c in contributions                                      where c.ContributionTypeId != ContributionTypeCode.Pledge                                      select c;                      break;                  case "Pledge":                      contributions = from c in contributions                                      where c.ContributionTypeId == ContributionTypeCode.Pledge                                      select c;                      break;              }
Missing Default,CmsData.API,APIContributionSearchModel,C:\repos\bvcms_bvcms\CmsData\API\APIContributionSearchModel.cs,FetchContributions,The following switch statement is missing a default case: switch (model.Status)              {                  case ContributionStatusCode.Recorded:                      if(!model.PeopleId.HasValue)                          contributions = from c in contributions                                          where c.ContributionStatusId == ContributionStatusCode.Recorded                                          where !ContributionTypeCode.ReturnedReversedTypes.Contains(c.ContributionTypeId)                                          select c;                      break;                  case ContributionStatusCode.Returned:                      contributions = from c in contributions                                      where c.ContributionStatusId == ContributionStatusCode.Returned                                            || c.ContributionTypeId == ContributionTypeCode.ReturnedCheck                                      select c;                      break;                  case ContributionStatusCode.Reversed:                      contributions = from c in contributions                                      where c.ContributionStatusId == ContributionStatusCode.Reversed                                            || c.ContributionTypeId == ContributionTypeCode.Reversed                                      select c;                      break;              }
Missing Default,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,HtmlTable,The following switch statement is missing a default case: switch (typ.ToLower())                  {                      case "decimal":                          align = HorizontalAlign.Right;                          break;                      case "int":                          if (nam != "year" && !nam.EndsWith("id") && !nam.EndsWith("id2"))                              align = HorizontalAlign.Right;                          break;                  }
Missing Default,CmsData,PythonModel,C:\repos\bvcms_bvcms\CmsData\API\PythonModel\Deprecated.cs,RegisterHelpers,The following switch statement is missing a default case: switch (op)                  {                      case "==":                          b = Compare(args) == 0;                          break;                      case "!=":                          b = Compare(args) != 0;                          break;                      case "<":                          b = Compare(args) < 0;                          break;                      case ">":                          b = Compare(args) > 0;                          break;                      case ">=":                          b = Compare(args) >= 0;                          break;                      case "<=":                          b = Compare(args) <= 0;                          break;                      case "&&":                          b = NumTrue(args) == 2;                          break;                      case "||":                          b = NumTrue(args) >= 1;                          break;                  }
Missing Default,CmsData,QueryFunctions,C:\repos\bvcms_bvcms\CmsData\API\QueryFunctions\Deprecated.cs,SortList,The following switch statement is missing a default case: switch (sort.ToLower())              {                  case "age":                      q = from u in q                          orderby u.Age' u.Name2                          select u;                      break;                  case "age desc":                      q = from u in q                          orderby u.Age descending' u.Name2                          select u;                      break;                  case "birthday":                      q = from u in q                          orderby u.BirthMonth' u.BirthDay' u.Name2                          select u;                      break;                  case "birthday desc":                      q = from u in q                          orderby u.BirthMonth descending' u.BirthDay descending' u.Name2                          select u;                      break;                  case "name":                      q = from u in q                          orderby u.Name2                          select u;                      break;                  case "name desc":                      q = from u in q                          orderby u.Name2 descending                          select u;                      break;              }
Missing Default,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,DateFormattedReplacement,The following switch statement is missing a default case: switch (what)              {                  case "birth":                      return DateFormattedReplacement(person.GetBirthdate()' format:fmt);                  case "wedding":                  case "anniversary":                      return DateFormattedReplacement(person.WeddingDate' format:fmt);                  case "joined":                      return DateFormattedReplacement(person.JoinDate' format:fmt);                  case "dropped":                      return DateFormattedReplacement(person.DropDate' format:fmt);              }
Missing Default,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,ExtraValueReplacement,The following switch statement is missing a default case: switch (type)              {                  case "value":                  case "code":                      return ev.StrValue;                  case "data":                  case "text":                      return ev.Data;                  case "date":                      return ev.DateValue.FormatDate();                  case "int":                      return ev.IntValue.ToString();                  case "bit":                  case "bool":                      return ev.BitValue.ToString();              }
Missing Default,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,OrgMemberReplacement,The following switch statement is missing a default case: switch (type.ToLower())              {                  case "location":                      return org.Location;                  case "pendinglocation":                  case "pendingloc":                      return org.PendingLoc;                  case "orgname":                  case "name":                      return org.OrganizationName;                  case "leader":                      return org.LeaderName;              }
Missing Default,CmsData,EmailReplacements,C:\repos\bvcms_bvcms\CmsData\Email\ReplacementCodes\Links\DropFromOrgTag.cs,PledgeReplacement,The following switch statement is missing a default case: switch (type.ToLower())              {                  case "bal":                      return (i.Balance ?? 0).ToString("N");                  case "amt":                      return (i.PledgeAmt ?? 0).ToString("N");                  case "given":                      return (i.GivenAmt ?? 0).ToString("N");              }
Missing Default,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,ParseCondition,The following switch statement is missing a default case: switch (Token.Type)              {                  case TokenType.LParen:                      c.ConditionName = "Group";                      ParseConditions(c);                      return;                  case TokenType.Name:                      c.ConditionName = Token.Text;                      break;                  case TokenType.Func:                      c.ConditionName = Token.Text;                      NextToken(TokenType.LParen);                      do                          ParseParam(c);                      while (Token.Type == TokenType.Comma);                      if (Token.Type != TokenType.RParen)                          throw new QueryParserException("missing ) on function parameters");                      break;              }
Missing Default,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,ParseCondition,The following switch statement is missing a default case: switch (op.Text)                      {                          case "=":                              if (Token.Text.StartsWith("*") && Token.Text.EndsWith("*"))                                  c.SetComparisonType(CompareType.Contains);                              else if (Token.Text.StartsWith("*"))                                  c.SetComparisonType(CompareType.EndsWith);                              else if (Token.Text.EndsWith("*"))                                  c.SetComparisonType(CompareType.StartsWith);                              else                                  c.SetComparisonType(CompareType.Equal);                              Token.Text = Token.Text.Trim('*');                              break;                          case "<>":                              if (Token.Text.StartsWith("*") && Token.Text.EndsWith("*"))                                  c.SetComparisonType(CompareType.DoesNotContain);                              else if (Token.Text.StartsWith("*"))                                  c.SetComparisonType(CompareType.DoesNotEndWith);                              else if (Token.Text.EndsWith("*"))                                  c.SetComparisonType(CompareType.DoesNotStartWith);                              else                                  c.SetComparisonType(CompareType.NotEqual);                              Token.Text = Token.Text.Trim('*');                              break;                          case ">":                              c.SetComparisonType(CompareType.After);                              break;                          case "<":                              c.SetComparisonType(CompareType.Before);                              break;                          case ">=":                              c.SetComparisonType(CompareType.AfterOrSame);                              break;                          case "<=":                              c.SetComparisonType(CompareType.BeforeOrSame);                              break;                      }
Missing Default,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,ParseCondition,The following switch statement is missing a default case: switch (op.Text)                      {                          case "=":                              c.SetComparisonType(CompareType.Equal);                              break;                          case "<>":                              c.SetComparisonType(CompareType.NotEqual);                              break;                          case ">":                              c.SetComparisonType(CompareType.Greater);                              break;                          case "<":                              c.SetComparisonType(CompareType.Less);                              break;                          case ">=":                              c.SetComparisonType(CompareType.GreaterEqual);                              break;                          case "<=":                              c.SetComparisonType(CompareType.LessEqual);                              break;                      }
Missing Default,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,SetComparisionType,The following switch statement is missing a default case: switch (Token.Type)                  {                      case TokenType.And:                          g.SetComparisonType(CompareType.AllTrue);                          break;                      case TokenType.Or:                          g.SetComparisonType(CompareType.AnyTrue);                          break;                      case TokenType.AndNot:                          g.SetComparisonType(CompareType.AllFalse);                          break;                  }
Missing Default,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,SetRightSide,The following switch statement is missing a default case: switch (c.Compare2.ValueType())                  {                      case "text":                          c.TextValue = s.Replace("''"' "'");                          if (!c.TextValue.HasValue())                              c.TextValue = null;                          break;                      case "number":                          c.TextValue = s.Replace("''"' "'");                          break;                      case "idtext":                      case "idvalue":                          c.CodeIdValue = Token2Csv();                          break;                      case "date":                          c.DateValue = s.ToDate();                          break;                  }
Missing Default,CmsData,QueryParser,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryParser.cs,ParamEnum,The following switch statement is missing a default case: switch (name)              {                  case "Prog":                      name = "Program";                      break;                  case "Div":                      name = "Division";                      break;                  case "Org":                      name = "Organization";                      break;                  case "Sched":                      name = "Schedule";                      break;                  case "SavedQuery":                      name = "SavedQueryIdDesc";                      break;                  case "VisitNumber":                  case "Field":                  case "Name":                  case "FundIdOrBlank":                  case "FundIdOrNullForAll":                  case "FundIdOrBlankForAll":                  case "AgeRange":                  case "NthVisitNumber":                  case "TopNumber":                  case "UsernameOrPeopleId":                  case "MeetingId":                  case "NumberOfDaysForNoAttendance":                  case "AttendCreditId":                  case "DaysInPeriod":                  case "MeetsOnDay0Sun":                  case "SqlScript":                      name = "Quarters";                      break;              }
Missing Default,CmsData,CompareClass,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\CompareClass.cs,ToString,The following switch statement is missing a default case: switch (c.ComparisonType)              {                  case CompareType.IsNull:                      return $"{fld} = ''";                  case CompareType.IsNotNull:                      return $"{fld} <> ''";              }
Missing Default,CmsData,FieldClass,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\FieldClass.cs,FormatArgs,The following switch statement is missing a default case: switch (param)                  {                      case Param.Program:                          list.AddParamCode("Prog"' prop);                          break;                      case Param.Division:                          list.AddParamCode("Div"' prop);                          break;                      case Param.Organization:                          list.AddParamCode("Org"' prop);                          break;                      case Param.Schedule:                          list.AddParamCode("Sched"' prop);                          break;                      case Param.SavedQueryIdDesc:                          list.AddParamStr("SavedQuery"' prop);                          break;                      case Param.Tags:                      case Param.PmmLabels:                          var tags = prop.ToString();                          foreach (var t in tags.Split(';'))                              list.AddParamCode("Tag"' t);                          break;                      case Param.OnlineReg:                          list.AddParamCode(attr' prop' -1);                          break;                      case Param.OrgStatus:                      case Param.Campus:                      case Param.OrgType:                      case Param.OrgType2:                          list.AddParamCode(attr' prop);                          break;                      case Param.Ministry:                          if(prop.Equals(""))                              prop = Util.GetProperty(c' "Program") ?? ""; // Ministry used to be stored in Program                          list.AddParamCode(attr' prop);                          break;                      case Param.OrgName:                      case Param.Quarters:                          list.AddParamStr(attr' prop);                          break;                      case Param.Days:                      case Param.Age:                          list.AddParamInt(attr' prop);                          break;                      case Param.StartDate:                      case Param.EndDate:                          list.AddParamDate(attr' prop);                          break;                  }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,CheckInVisits,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() > visits                                   select g).Any();                      break;                  case CompareType.Less:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() < visits                                   select g).Any();                      break;                  case CompareType.GreaterEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() >= visits                                   select g).Any();                      break;                  case CompareType.LessEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() <= visits                                   select g).Any();                      break;                  case CompareType.Equal:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() == visits                                   select g).Any();                      break;                  case CompareType.NotEqual:                      pred = p => (from e in p.CheckInTimes                                   where e.AccessTypeID == 2                                   group e by e.PeopleId into g                                   where g.Count() != visits                                   select g).Any();                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentContributionCount2,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Count() > cnt                          select g.Key ?? 0;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0 || cnt == 0                          group c by c.CreditGiverId into g                          where g.Count() >= cnt                          select g.Key ?? 0;                      break;                  case CompareType.Less:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Count() < cnt                          select g.Key ?? 0;                      break;                  case CompareType.LessEqual:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Count() <= cnt                          select g.Key ?? 0;                      break;                  case CompareType.Equal:                      //if (cnt == 0) // This is a very special case' use different approach                      //{                      //    q = from pid in db.Contributions0(dt' now' fund' 0' false' taxnontax' true)                      //        select pid.PeopleId;                      //    Expression<Func<Person' bool>> pred0 = p => q.Contains(p.PeopleId);                      //    Expression expr0 = System.Linq.Expressions.Expression.Invoke(pred0' parm);                      //    return expr0;                      //}                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Count() == cnt                          select g.Key ?? 0;                      break;                  case CompareType.NotEqual:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Count() != cnt                          select g.Key ?? 0;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentContributionAmount2,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) > amt                          select g.Key ?? 0;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) >= amt                          select g.Key ?? 0;                      break;                  case CompareType.Less:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) <= amt                          select g.Key ?? 0;                      break;                  case CompareType.LessEqual:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) <= amt                          select g.Key ?? 0;                      break;                  case CompareType.Equal:                      if (amt == 0)                          q = from pid in db.Contributions0(dt' now' fund' 0' false' taxnontax' true)                              select pid.PeopleId.Value;                      else                          q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                              where fund == 0 || c.FundId == fund                              where c.Amount > 0                              group c by c.CreditGiverId into g                              where g.Sum(cc => cc.Amount) == amt                              select g.Key ?? 0;                      break;                  case CompareType.NotEqual:                      q = from c in db.Contributions2(dt' now' 0' false' taxnontax' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) != amt                          select g.Key ?? 0;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ContributionAmount2,The following switch statement is missing a default case: switch (op)              {                  case CompareType.GreaterEqual:                      q = from c in db.Contributions2(start' end' 0' false' nontaxded' true)                          where fund == 0 || c.FundId == fund                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) >= amt                          select g.Key ?? 0;                      break;                  case CompareType.Greater:                      q = from c in db.Contributions2(start' end' 0' false' nontaxded' true)                          where fund == 0 || c.FundId == fund                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) > amt                          select g.Key ?? 0;                      break;                  case CompareType.LessEqual:                      q = from c in db.Contributions2(start' end' 0' false' nontaxded' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) <= amt                          select g.Key ?? 0;                      break;                  case CompareType.Less:                      q = from c in db.Contributions2(start' end' 0' false' nontaxded' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) < amt                          select g.Key ?? 0;                      break;                  case CompareType.Equal:                      if (amt == 0) // This is a special case' use different approach                          q = from pid in db.Contributions0(start' end' fund' 0' false' nontaxded' true)                              select pid.PeopleId.Value;                      else                          q = from c in db.Contributions2(start' end' 0' false' nontaxded' true)                              where fund == 0 || c.FundId == fund                              group c by c.CreditGiverId into g                              where g.Sum(cc => cc.Amount) == amt                              select g.Key ?? 0;                      break;                  case CompareType.NotEqual:                      q = from c in db.Contributions2(start' end' 0' false' nontaxded' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.Amount) != amt                          select g.Key ?? 0;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,ContributionAmountBothJoint,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.GetContributionTotalsBothIfJoint(startdt' enddt' fund)                          where c.Amount > amt                          select c.PeopleId.Value;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.GetContributionTotalsBothIfJoint(startdt' enddt' fund)                          where c.Amount >= amt                          select c.PeopleId.Value;                      break;                  case CompareType.Less:                      q = from c in db.GetContributionTotalsBothIfJoint(StartDate' enddt' fund)                          where c.Amount > 0                          where c.Amount <= amt                          select c.PeopleId.Value;                      break;                  case CompareType.LessEqual:                      q = from c in db.GetContributionTotalsBothIfJoint(startdt' enddt' fund)                          where c.Amount > 0                          where c.Amount <= amt                          select c.PeopleId.Value;                      break;                  case CompareType.Equal:                      if (amt == 0)                          q = from pid in db.Contributions0(startdt' enddt' fund' 0' false' false' true)                              select pid.PeopleId.Value;                      else                          q = from c in db.GetContributionTotalsBothIfJoint(startdt' enddt' fund)                              where c.Amount > 0                              where c.Amount == amt                              select c.PeopleId.Value;                      break;                  case CompareType.NotEqual:                      q = from c in db.GetContributionTotalsBothIfJoint(startdt' enddt' fund)                          where c.Amount > 0                          where c.Amount != amt                          select c.PeopleId.Value;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,PledgeAmountBothJoint,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.PledgeAmount > amt                          select c.PeopleId.Value;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.PledgeAmount.Value >= amt                          select c.PeopleId.Value;                      break;                  case CompareType.Less:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.PledgeAmount.Value > 0                          where c.PledgeAmount.Value <= amt                          select c.PeopleId.Value;                      break;                  case CompareType.LessEqual:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.PledgeAmount.Value > 0                          where c.PledgeAmount.Value <= amt                          select c.PeopleId.Value;                      break;                  case CompareType.Equal:                      if (amt == 0)                          q = from pid in db.Pledges0(startdt' enddt' fund' 0)                              select pid.PeopleId;                      else                          q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                              where c.PledgeAmount.Value > 0                              where c.PledgeAmount.Value == amt                              select c.PeopleId.Value;                      break;                  case CompareType.NotEqual:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.PledgeAmount.Value > 0                          where c.PledgeAmount.Value != amt                          select c.PeopleId.Value;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,PledgeBalance,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.Balance > amt                          select c.PeopleId.Value;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.Balance >= amt                          select c.PeopleId.Value;                      break;                  case CompareType.Less:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.Balance < amt                          select c.PeopleId.Value;                      break;                  case CompareType.LessEqual:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.Balance <= amt                          select c.PeopleId.Value;                      break;                  case CompareType.Equal:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.Balance == amt                          select c.PeopleId.Value;                      break;                  case CompareType.NotEqual:                      q = from c in db.GetPledgedTotalsBothIfJoint(startdt' enddt' fund)                          where c.Balance != amt                          select c.PeopleId.Value;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentPledgeCount,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.PledgeAmount > 0                          group c by c.CreditGiverId into g                          where g.Count() > cnt                          select g.Key ?? 0;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.PledgeAmount > 0                          group c by c.CreditGiverId into g                          where g.Count() >= cnt                          select g.Key ?? 0;                      break;                  case CompareType.Less:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.PledgeAmount > 0                          group c by c.CreditGiverId into g                          where g.Count() < cnt                          select g.Key ?? 0;                      break;                  case CompareType.LessEqual:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.PledgeAmount > 0                          group c by c.CreditGiverId into g                          where g.Count() <= cnt                          select g.Key ?? 0;                      break;                  case CompareType.Equal:                      if (cnt == 0) // special case' use different approach                      {                          q = from pid in db.Pledges0(dt' now' fund' 0)                              select pid.PeopleId;                          Expression<Func<Person' bool>> pred0 = p => q.Contains(p.PeopleId);                          Expression expr0 = Expression.Invoke(pred0' parm);                          return expr0;                      }                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.PledgeAmount > 0                          group c by c.CreditGiverId into g                          where g.Count() == cnt                          select g.Key ?? 0;                      break;                  case CompareType.NotEqual:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.PledgeAmount > 0                          group c by c.CreditGiverId into g                          where g.Count() != cnt                          select g.Key ?? 0;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentPledgeAmount,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.PledgeAmount) > amt                          select g.Key ?? 0;                      break;                  case CompareType.GreaterEqual:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.PledgeAmount) >= amt                          select g.Key ?? 0;                      break;                  case CompareType.Less:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.PledgeAmount) < amt                          select g.Key ?? 0;                      break;                  case CompareType.LessEqual:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.PledgeAmount) <= amt                          select g.Key ?? 0;                      break;                  case CompareType.Equal:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.PledgeAmount) == amt                          select g.Key ?? 0;                      break;                  case CompareType.NotEqual:                      q = from c in db.Contributions2(dt' now' 0' true' false' true)                          where fund == 0 || c.FundId == fund                          where c.Amount > 0                          group c by c.CreditGiverId into g                          where g.Sum(cc => cc.PledgeAmount) != amt                          select g.Key ?? 0;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,GivingChange,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = q.Where(vv => vv.PctChange > pct);                      break;                  case CompareType.GreaterEqual:                      q = q.Where(vv => vv.PctChange >= pct);                      break;                  case CompareType.Less:                      q = q.Where(vv => vv.PctChange < pct);                      break;                  case CompareType.LessEqual:                      q = q.Where(vv => vv.PctChange <= pct);                      break;                  case CompareType.Equal:                      q = q.Where(vv => vv.PctChange == pct);                      break;                  case CompareType.NotEqual:                      q = q.Where(vv => vv.PctChange != pct);                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,AttendCntHistory,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = q.Where(cc => cc.Cnt > cnt); break;                  case CompareType.GreaterEqual:                      q = q.Where(cc => cc.Cnt >= cnt); break;                  case CompareType.Less:                      q = q.Where(cc => cc.Cnt < cnt); break;                  case CompareType.LessEqual:                      q = q.Where(cc => cc.Cnt <= cnt); break;                  case CompareType.Equal:                      q = q.Where(cc => cc.Cnt == cnt); break;                  case CompareType.NotEqual:                      q = q.Where(cc => cc.Cnt != cnt); break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,RecentAttendCount,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      q = q.Where(cc => cc.Cnt > cnt); break;                  case CompareType.GreaterEqual:                      q = q.Where(cc => cc.Cnt >= cnt); break;                  case CompareType.Less:                      q = q.Where(cc => cc.Cnt < cnt); break;                  case CompareType.LessEqual:                      q = q.Where(cc => cc.Cnt <= cnt); break;                  case CompareType.Equal:                      q = q.Where(cc => cc.Cnt == cnt); break;                  case CompareType.NotEqual:                      q = q.Where(cc => cc.Cnt != cnt); break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,VisitNumber,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Greater:                      pred = p => p.CreatedDate > cdt &&                             p.Attends.Any(aa => aa.SeqNo == n && aa.MeetingDate > DateValue);                      break;                  case CompareType.Less:                      pred = p => p.CreatedDate > cdt &&                             p.Attends.Any(aa => aa.SeqNo == n && aa.MeetingDate < DateValue);                      break;                  case CompareType.GreaterEqual:                      pred = p => p.CreatedDate > cdt &&                             p.Attends.Any(aa => aa.SeqNo == n && aa.MeetingDate >= DateValue);                      break;                  case CompareType.LessEqual:                      pred = p => p.CreatedDate > cdt &&                             p.Attends.Any(aa => aa.SeqNo == n && aa.MeetingDate <= DateValue);                      break;                  case CompareType.Equal:                      pred = p => p.CreatedDate > cdt &&                             p.Attends.Any(aa => aa.SeqNo == n && aa.MeetingDate.Date == DateValue);                      break;                  case CompareType.NotEqual:                  case CompareType.IsNull:                      pred = p => p.CreatedDate > cdt &&                             !p.Attends.Any(aa => aa.SeqNo == n && aa.MeetingDate.Date == DateValue);                      break;                  case CompareType.IsNotNull:                      pred = p => p.CreatedDate > cdt &&                             p.Attends.Any(aa => aa.SeqNo == n);                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,FirstOrgJoinDate,The following switch statement is missing a default case: switch (op)              {                  case CompareType.Equal:                      if (DateValue == null)                          q = from p in db.People                              where !(from et in p.EnrollmentTransactions                                      where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                      select et).Any()                              select p.PeopleId;                      else                          q = from p in db.People                              where (from et in p.EnrollmentTransactions                                     where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                     select et.TransactionDate.Date).Min() == DateValue                              select p.PeopleId;                      break;                  case CompareType.Greater:                      q = from p in db.People                          where (from et in p.EnrollmentTransactions                                 where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                 select et.TransactionDate.Date).Min() > DateValue                          select p.PeopleId;                      break;                  case CompareType.GreaterEqual:                      q = from p in db.People                          where (from et in p.EnrollmentTransactions                                 where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                 select et.TransactionDate.Date).Min() >= DateValue                          select p.PeopleId;                      break;                  case CompareType.Less:                      q = from p in db.People                          where (from et in p.EnrollmentTransactions                                 where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                 select et.TransactionDate.Date).Min() < DateValue                          select p.PeopleId;                      break;                  case CompareType.LessEqual:                      q = from p in db.People                          where (from et in p.EnrollmentTransactions                                 where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                 select et.TransactionDate.Date).Min() <= DateValue                          select p.PeopleId;                      break;                  case CompareType.NotEqual:                      if (DateValue == null)                          q = from p in db.People                              where (from et in p.EnrollmentTransactions                                     where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                     select et).Any()                              select p.PeopleId;                      else                          q = from p in db.People                              where (from et in p.EnrollmentTransactions                                     where et.TransactionTypeId == 1                                      && (OrganizationInt == 0 || et.OrganizationId == OrganizationInt)                                      && (DivisionInt == 0 || et.Organization.DivOrgs.Any(t => t.DivId == DivisionInt))                                      && (ProgramInt == 0 || et.Organization.DivOrgs.Any(t => t.Division.ProgDivs.Any(d => d.ProgId == ProgramInt)))                                     select et.TransactionDate.Date).Min() != DateValue                              select p.PeopleId;                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,SmallGroup,The following switch statement is missing a default case: switch (op)                  {                      case CompareType.Equal:                      case CompareType.NotEqual:                          pred = p => (                              from m in p.OrganizationMembers                              where m.OrgMemMemTags.Any(mt => mt.MemberTag.Name == smallgroup)                              where OrganizationInt == 0 || m.OrganizationId == OrganizationInt                              where DivisionInt == 0 || m.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                              where ProgramInt == 0 || m.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                              select m                          ).Any();                          break;                      case CompareType.StartsWith:                          pred = p => (                              from m in p.OrganizationMembers                              where m.OrgMemMemTags.Any(mt => mt.MemberTag.Name.StartsWith(smallgroup))                              where OrganizationInt == 0 || m.OrganizationId == OrganizationInt                              where DivisionInt == 0 || m.Organization.DivOrgs.Any(dg => dg.DivId == DivisionInt)                              where ProgramInt == 0 || m.Organization.DivOrgs.Any(dg => dg.Division.ProgDivs.Any(pg => pg.ProgId == ProgramInt))                              select m                          ).Any();                          break;                  }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,Compare,The following switch statement is missing a default case: switch (op)              {                  case CompareType.NotEqual:                  case CompareType.IsNotNull:                      expr = Expression.NotEqual(left' right);                      break;                  case CompareType.Equal:                  case CompareType.IsNull:                      expr = Expression.Equal(left' right);                      break;                  case CompareType.Greater:                      expr = Expression.GreaterThan(left' right);                      break;                  case CompareType.GreaterEqual:                      expr = Expression.GreaterThanOrEqual(left' right);                      break;                  case CompareType.Less:                      expr = Expression.LessThan(left' right);                      break;                  case CompareType.LessEqual:                      expr = Expression.LessThanOrEqual(left' right);                      break;                  case CompareType.DoesNotStartWith:                  case CompareType.StartsWith:                      expr = Expression.Call(left'                          typeof(string).GetMethod("StartsWith"' new[] { typeof(string) })' right);                      break;                  case CompareType.DoesNotEndWith:                  case CompareType.EndsWith:                      expr = Expression.Call(left'                          typeof(string).GetMethod("EndsWith"' new[] { typeof(string) })' right);                      break;                  case CompareType.DoesNotContain:                  case CompareType.Contains:                      expr = Expression.Call(left'                          typeof(string).GetMethod("Contains"' new[] { typeof(string) })' right);                      break;                  case CompareType.After:                  case CompareType.AfterOrSame:                  case CompareType.Before:                  case CompareType.BeforeOrSame:                      expr = Expression.Call(left'                          typeof(string).GetMethod("CompareTo"' new[] { typeof(string) })' right);                      break;              }
Missing Default,CmsData,Condition,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\Condition.cs,Compare,The following switch statement is missing a default case: switch (op)              {                  // now reverse the logic if necessary                  case CompareType.DoesNotEndWith:                  case CompareType.DoesNotContain:                  case CompareType.DoesNotStartWith:                      expr = Expression.Not(expr);                      break;                  case CompareType.After:                      expr = Expression.GreaterThan(expr' Expression.Constant(0));                      break;                  case CompareType.AfterOrSame:                      expr = Expression.GreaterThanOrEqual(expr' Expression.Constant(0));                      break;                  case CompareType.Before:                      expr = Expression.LessThan(expr' Expression.Constant(0));                      break;                  case CompareType.BeforeOrSame:                      expr = Expression.LessThanOrEqual(expr' Expression.Constant(0));                      break;              }
Missing Default,CmsData,CMSDataContext,C:\repos\bvcms_bvcms\CmsData\QueryBuilder\QueryContext.cs,Gateway,The following switch statement is missing a default case: switch (type.ToLower())              {                  case "sage":                      return new SageGateway(this' testing);                    case "authorizenet":                      return new AuthorizeNetGateway(this' testing);                    case "transnational":                      return new TransNationalGateway(this' testing);                  //IS THIS the only place that the new paymentGateway needs to be hooked up?                  case "bluepay":                      return new BluePayGateway(this' testing);              }
Missing Default,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,FindNextDate,The following switch statement is missing a default case: switch (Period)              {                  case "W":                      while (ndt > dt)                          dt = startwhen.AddDays(everywhen * 7 * n++);                      break;                  case "M":                      while (ndt > dt)                          dt = startwhen.AddMonths(everywhen * n++);                      break;              }
Missing Default,CmsData,ManagedGiving,C:\repos\bvcms_bvcms\CmsData\Generated\ManagedGiving.cs,GetGateway,The following switch statement is missing a default case: switch (gateway.ToLower()) // Check to see if standard gateway is set up              {                  case "sage":                      if ((pi.PreferredGivingType == "B" && pi.SageBankGuid.HasValue) ||                          (pi.PreferredGivingType == "C" && pi.SageCardGuid.HasValue))                          return db.Gateway();                      break;                  case "transnational":                      if ((pi.PreferredGivingType == "B" && pi.TbnBankVaultId.HasValue) ||                          (pi.PreferredGivingType == "C" && pi.TbnCardVaultId.HasValue))                          return db.Gateway();                      break;              }
Missing Default,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,Add,The following switch statement is missing a default case: switch (gender)                  {                      case 0:                          first = "A";                          break;                      case 1:                          if (!first.HasValue()) first = "Husbander";                          break;                      case 2:                          first = "Wifey";                          break;                  }
Missing Default,CmsData,Person,C:\repos\bvcms_bvcms\CmsData\API\MemberRules.cs,UpdateOption,The following switch statement is missing a default case: switch (opt)                  {                      case StatementOptionCode.Joint:                      case StatementOptionCode.Individual:                      case StatementOptionCode.None:                          sp.UpdateValue(field' opt);                          sp.LogChanges(db);                          break;                      case null:                          if (sp.ContributionOptionsId == StatementOptionCode.Joint)                          {                              sp.UpdateValue(field' null);                              sp.LogChanges(db);                          }                          break;                  }
Missing Default,CmsData.Classes.GoogleCloudMessaging,GCMHelper,C:\repos\bvcms_bvcms\CmsData\Classes\GoogleCloudMessaging\GCMHelper.cs,send,The following switch statement is missing a default case: switch (result.error)                                  {                                      case "InvalidRegistration":                                      case "NotRegistered":                                      {                                          var record = (from r in Db.MobileAppPushRegistrations                                                        where r.RegistrationId == registrationId                                                        select r).SingleOrDefault();                                            if (record != null)                                              Db.MobileAppPushRegistrations.DeleteOnSubmit(record);                                            break;                                      }                                  }
Missing Default,CmsData.OnlineRegSummaryText,OnlineRegPersonModel0,C:\repos\bvcms_bvcms\CmsData\Classes\OnlineRegSummaryText\OnlineRegPersonModel0.cs,CreateFromSettings,The following switch statement is missing a default case: switch (ask.Type)                  {                      case "AskExtraQuestions":                          var eq = (AskExtraQuestions)ask;                          if(eq.UniqueId >= m.ExtraQuestion.Count)                              m.ExtraQuestion.Add(new Dictionary<string' string>());                          foreach (var q in eq.list)                              m.ExtraQuestion[eq.UniqueId][q.Question] = "";                          break;                      case "AskText":                          var tx = (AskText)ask;                          if(tx.UniqueId >= m.Text.Count)                              m.Text.Add(new Dictionary<string' string>());                          foreach (var q in tx.list)                              m.Text[tx.UniqueId][q.Question] = "";                          break;                  }
Missing Default,CmsData.Codes,AttendCommitmentCode,C:\repos\bvcms_bvcms\CmsData\DbUtil\Codes.cs,Order,The following switch statement is missing a default case: switch (id)              {                  case Substitute:                      return 10;                  case FindSub:                      return 20;                  case Attending:                      return 30;                  case SubFound:                      return 40;                  case Regrets:                      return 50;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {                      case TokenId.Equal:                      case TokenId.DoubleEqual:                          left = GenerateEqual(left' right);                          break;                      case TokenId.ExclamationEqual:                      case TokenId.LessGreater:                          left = GenerateNotEqual(left' right);                          break;                      case TokenId.GreaterThan:                          left = GenerateGreaterThan(left' right);                          break;                      case TokenId.GreaterThanEqual:                          left = GenerateGreaterThanEqual(left' right);                          break;                      case TokenId.LessThan:                          left = GenerateLessThan(left' right);                          break;                      case TokenId.LessThanEqual:                          left = GenerateLessThanEqual(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {                      case TokenId.Plus:                          if (left.Type == typeof(string) || right.Type == typeof(string))                              goto case TokenId.Amphersand;                          CheckAndPromoteOperands(typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateAdd(left' right);                          break;                      case TokenId.Minus:                          CheckAndPromoteOperands(typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateSubtract(left' right);                          break;                      case TokenId.Amphersand:                          left = GenerateStringConcat(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {                      case TokenId.Asterisk:                          left = Expression.Multiply(left' right);                          break;                      case TokenId.Slash:                          left = Expression.Divide(left' right);                          break;                      case TokenId.Percent:                      case TokenId.Identifier:                          left = Expression.Modulo(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type)) {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  if (target == typeof(decimal)) value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type))) {                  case TypeCode.SByte:                      sbyte sb;                      if (sbyte.TryParse(text' out sb)) return sb;                      break;                  case TypeCode.Byte:                      byte b;                      if (byte.TryParse(text' out b)) return b;                      break;                  case TypeCode.Int16:                      short s;                      if (short.TryParse(text' out s)) return s;                      break;                  case TypeCode.UInt16:                      ushort us;                      if (ushort.TryParse(text' out us)) return us;                      break;                  case TypeCode.Int32:                      int i;                      if (int.TryParse(text' out i)) return i;                      break;                  case TypeCode.UInt32:                      uint ui;                      if (uint.TryParse(text' out ui)) return ui;                      break;                  case TypeCode.Int64:                      long l;                      if (long.TryParse(text' out l)) return l;                      break;                  case TypeCode.UInt64:                      ulong ul;                      if (ulong.TryParse(text' out ul)) return ul;                      break;                  case TypeCode.Single:                      float f;                      if (float.TryParse(text' out f)) return f;                      break;                  case TypeCode.Double:                      double d;                      if (double.TryParse(text' out d)) return d;                      break;                  case TypeCode.Decimal:                      decimal e;                      if (decimal.TryParse(text' out e)) return e;                      break;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\bvcms_bvcms\CmsData\DbUtil\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
Missing Default,CmsData.Registration,Settings,C:\repos\bvcms_bvcms\CmsData\Registration\ReadWriteXml.cs,ReadXml,The following switch statement is missing a default case: switch (name)                  {                      case "Confirmation":                          Subject = e.Element("Subject")?.Value;                          Body = e.Element("Body")?.Value;                          break;                      case "Reminder":                          ReminderSubject = e.Element("Subject")?.Value;                          ReminderBody = e.Element("Body")?.Value;                          break;                      case "SupportEmail":                          SupportSubject = e.Element("Subject")?.Value;                          SupportBody = e.Element("Body")?.Value;                          break;                      case "SenderEmail":                          SenderSubject = e.Element("Subject")?.Value;                          SenderBody = e.Element("Body")?.Value;                          break;                      case "Instructions":                          InstructionLogin = e.Element("Login")?.Value;                          InstructionSelect = e.Element("Select")?.Value;                          InstructionFind = e.Element("Find")?.Value;                          InstructionOptions = e.Element("Options")?.Value;                          InstructionSpecial = e.Element("Special")?.Value;                          InstructionSubmit = e.Element("Submit")?.Value;                          InstructionSorry = e.Element("Sorry")?.Value;                          ThankYouMessage = e.Element("Thanks")?.Value;                          Terms = e.Element("Terms")?.Value;                          break;                      case "Fees":                          Fee = e.Element("Fee")?.Value.ToDecimal();                          Deposit = e.Element("Deposit")?.Value.ToDecimal();                          ExtraFee = e.Element("ExtraFee")?.Value.ToDecimal();                          MaximumFee = e.Element("MaximumFee")?.Value.ToDecimal();                          ApplyMaxToOtherFees = e.Element("ApplyMaxToOtherFees")?.Value.ToBool2() ?? false;                          ExtraValueFeeName = e.Element("ExtraValueFeeName")?.Value;                          AccountingCode = e.Element("AccountingCode")?.Value;                          IncludeOtherFeesWithDeposit = e.Element("IncludeOtherFeesWithDeposit")?.Value.ToBool2() ?? false;                          OtherFeesAddedToOrgFee = e.Element("OtherFeesAddedToOrgFee")?.Value.ToBool2() ?? false;                          AskDonation = e.Element("AskDonation")?.Value.ToBool2() ?? false;                          DonationLabel = e.Element("DonationLabel")?.Value;                          DonationFundId = e.Element("DonationFundId")?.Value.ToInt2();                          break;                      case "AgeGroups":                          if (AgeGroups == null)                              AgeGroups = new List<AgeGroup>();                          foreach (var ee in e.Elements("Group"))                              AgeGroups.Add(new AgeGroup                              {                                  StartAge = ee.Attribute("StartAge")?.Value.ToInt2() ?? 0'                                  EndAge = ee.Attribute("EndAge")?.Value.ToInt2() ?? 0'                                  Fee = ee.Attribute("Fee")?.Value.ToDecimal()'                                  SmallGroup = ee.Value                              });                          break;                      case "OrgFees":                          if (OrgFees == null)                              OrgFees = new List<OrgFee>();                          foreach (var ee in e.Elements("Fee"))                              OrgFees.Add(new OrgFee                              {                                  OrgId = ee.Attribute("OrgId")?.Value.ToInt()'                                  Fee = ee.Attribute("Fee")?.Value.ToDecimal()                              });                          break;                      case "Options":                          ConfirmationTrackingCode = e.Element("ConfirmationTrackingCode")?.Value;                          ValidateOrgs = e.Element("ValidateOrgs")?.Value;                          Shell = e.Element("Shell")?.Value;                          ShellBs = e.Element("ShellBs")?.Value;                          FinishRegistrationButton = e.Element("FinishRegistrationButton")?.Value;                          SpecialScript = e.Element("SpecialScript")?.Value;                          GroupToJoin = e.Element("GroupToJoin")?.Value;                          TimeOut = e.Element("TimeOut")?.Value.ToInt2();                          AllowOnlyOne = e.Element("AllowOnlyOne")?.Value.ToBool2() ?? false;                          TargetExtraValues = e.Element("TargetExtraValues")?.Value.ToBool2() ?? false;                          AllowReRegister = e.Element("AllowReRegister")?.Value.ToBool2() ?? false;                          AllowSaveProgress = e.Element("AllowSaveProgress")?.Value.ToBool2() ?? false;                          MemberOnly = e.Element("MemberOnly")?.Value.ToBool2() ?? false;                          AddAsProspect = e.Element("AddAsProspect")?.Value.ToBool2() ?? false;                          DisallowAnonymous = e.Element("DisallowAnonymous")?.Value.ToBool2() ?? false;                          break;                      case "NotRequired":                          NoReqBirthYear = e.Element("NoReqBirthYear")?.Value.ToBool2() ?? false;                          NotReqDOB = e.Element("NotReqDOB")?.Value.ToBool2() ?? false;                          NotReqAddr = e.Element("NotReqAddr")?.Value.ToBool2() ?? false;                          NotReqZip = e.Element("NotReqZip")?.Value.ToBool2() ?? false;                          NotReqPhone = e.Element("NotReqPhone")?.Value.ToBool2() ?? false;                          NotReqGender = e.Element("NotReqGender")?.Value.ToBool2() ?? false;                          NotReqMarital = e.Element("NotReqMarital")?.Value.ToBool2() ?? false;                          NotReqCampus = e.Element("NotReqCampus")?.Value.ToBool2() ?? false;                          break;                      case "TimeSlots":                          TimeSlots = TimeSlots.ReadXml(e);                          if (TimeSlots.TimeSlotLockDays.HasValue)                              TimeSlotLockDays = TimeSlots.TimeSlotLockDays;                          break;                      case "AskItems":                          foreach (var ele in e.Elements())                              AskItems.Add(Ask.ReadXml(ele));                          break;                    }
