Implementation smell,Namespace,Class,File,Method,Description
Long Method,MagnifierApp.Pages,InfoPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The method has 101 lines of code.
Long Identifier,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The length of the parameter lowResolutionToHighResolutionCropScale is 38.
Long Identifier,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The length of the parameter previewToLowResolutionCropScale is 31.
Long Identifier,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the parameter previewToHighResolutionCropScale is 32.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneContrastForegroundBrush"]).Color = (Color)Resources["MagnifierAppContrastForegroundColor"]; " is 125.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneContrastBackgroundBrush"]).Color = (Color)Resources["MagnifierAppContrastBackgroundColor"]; " is 125.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextBoxForegroundBrush"]).Color = (Color)Resources["MagnifierAppTextBoxForegroundColor"]; " is 123.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextBoxEditBackgroundBrush"]).Color = (Color)Resources["MagnifierAppTextBoxEditBackgroundColor"]; " is 131.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextBoxSelectionForegroundBrush"]).Color = (Color)Resources["MagnifierAppTextBoxSelectionForegroundColor"]; " is 141.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneButtonBasePressedForegroundBrush"]).Color = (Color)Resources["MagnifierAppButtonBasePressedForegroundColor"]; " is 143.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneProgressBarBackgroundBrush"]).Color = (Color)Resources["MagnifierAppProgressBarBackgroundColor"]; " is 131.
Long Statement,MagnifierApp,App,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextHighContrastBrush"]).Color = (Color)Resources["MagnifierAppTextHighContrastColor"]; " is 121.
Long Statement,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The length of the statement  "            var lowResolutionToHighResolutionCropScale = _info.ImageSize.Width / _lowResolutionBitmap.PixelWidth / screenScaleFactor * DIGITAL_MAGNIFICATION; " is 145.
Long Statement,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The length of the statement  "            // Adjust scale transform coordinate and translate image brush coordinate so that the correct low resolution image area is displayed in the lense " is 145.
Long Statement,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 128.
Long Statement,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 129.
Long Statement,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 132.
Long Statement,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 133.
Long Statement,MagnifierApp.Models,PhotoModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Models\PhotoModel.cs,SaveAsync,The length of the statement  "                    using (var target = await KnownFolders.CameraRoll.OpenStreamForWriteAsync(filename' CreationCollisionOption.GenerateUniqueName)) " is 128.
Long Statement,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "            var topLeftFoundationPoint = new Windows.Foundation.Point(Math.Round(topLeftWindowsPoint.X)' Math.Round(topLeftWindowsPoint.Y)); " is 128.
Long Statement,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "            var bottomRightFoundationPoint = new Windows.Foundation.Point(Math.Round(bottomRightWindowsPoint.X)' Math.Round(bottomRightWindowsPoint.Y)); " is 140.
Long Statement,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "                Size = new Windows.Foundation.Size(bottomRightFoundationPoint.X - topLeftFoundationPoint.X' bottomRightFoundationPoint.Y - topLeftFoundationPoint.Y) " is 148.
Long Statement,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The length of the statement  "            Viewport.Bounds = new Rect(0' 0' Image.Width + Image.Margin.Left + Image.Margin.Right' Image.Height + Image.Margin.Top + Image.Margin.Bottom); " is 142.
Long Statement,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "                Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom); " is 121.
Long Statement,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "                    //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"' " is 130.
Long Statement,MagnifierApp.Pages,InfoPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The length of the statement  "                            Value = String.Format(AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round(exposureTime' 2).ToString()) " is 122.
Complex Conditional,MagnifierApp.Pages,InfoPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The conditional expression  "reader.GetTagValue(ExifLib.ExifTags.PixelXDimension' out x) && x > 0 &&                      reader.GetTagValue(ExifLib.ExifTags.PixelYDimension' out y) && y > 0"  is complex.
Complex Conditional,MagnifierApp.Pages,PhotosPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\PhotosPageViewModel.cs,PopulatePhotos,The conditional expression  "path.Contains(KnownFolders.CameraRoll.Path) &&                      path.Contains(PhotoModel.HIGH_RESOLUTION_PHOTO_SUFFIX) &&                      path.Contains("photoinspector") &&                      !Mapping.HasCrop(path)"  is complex.
Complex Conditional,MagnifierApp.Pages,PhotosPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\PhotosPageViewModel.cs,PopulatePhotos,The conditional expression  "(path.Contains(KnownFolders.SavedPictures.Name) && !path.Contains(PhotoModel.REFRAME_PHOTO_SUFFIX))                      || !path.Contains(".jpg")                      || path.Contains(PhotoModel.HIGH_RESOLUTION_PHOTO_SUFFIX)"  is complex.
Empty Catch Block,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Models,PhotoModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Models\PhotoModel.cs,FromLibraryPath,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Models,PhotoModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Models\PhotoModel.cs,StreamToBuffer,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,InfoPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,PopulateInfos,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,InfoPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,PrintSupportedExifInfo,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,PhotosPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\PhotosPageViewModel.cs,DeletePhoto,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,SetFlashState,The method has an empty catch block.
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: HighResolutionCropImage.Clip = new RectangleGeometry()              {                  Rect = new Rect(0' 0' LenseContent.Width' LenseContent.Height)'                  RadiusX = 360'                  RadiusY = 360              };
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: HighResolutionCropImage.Clip = new RectangleGeometry()              {                  Rect = new Rect(0' 0' LenseContent.Width' LenseContent.Height)'                  RadiusX = 360'                  RadiusY = 360              };
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: if (_info.ImageSize.Width >= _info.ImageSize.Height)              {                  _lowResolutionBitmap.DecodePixelWidth = 1536;                  _lowResolutionBitmap.DecodePixelHeight = 0;              }              else              {                  _lowResolutionBitmap.DecodePixelWidth = 0;                  _lowResolutionBitmap.DecodePixelHeight = 1536;              }
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: if (_info.ImageSize.Width >= _info.ImageSize.Height)              {                  _lowResolutionBitmap.DecodePixelWidth = 1536;                  _lowResolutionBitmap.DecodePixelHeight = 0;              }              else              {                  _lowResolutionBitmap.DecodePixelWidth = 0;                  _lowResolutionBitmap.DecodePixelHeight = 1536;              }
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMinX = Lense.Width / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMaxX = ContentPanel.ActualWidth - Lense.Width / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseCandidateX = clampedCenter.X + (ContentPanel.ActualWidth - PreviewImage.ActualWidth) / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMinY = Lense.Height / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMaxY = ContentPanel.ActualHeight - Lense.Height / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseCandidateY = clampedCenter.Y + (ContentPanel.ActualHeight - PreviewImage.ActualHeight) / 2 - LENSE_OFFSET;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: _lowResolutionBrushTransform.TranslateX = -clampedCenter.X * previewToLowResolutionCropScale + LenseContent.Width / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: _lowResolutionBrushTransform.TranslateY = -clampedCenter.Y * previewToLowResolutionCropScale + LenseContent.Height / 2;
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent)              {                  _renderingLenseContent = true;                    HighResolutionCropImage.Visibility = Visibility.Collapsed;                    do                  {                      center = _lastLenseCenterForRendering;                        // Scale between the rendered image element and the bitmap displayed in it                      var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;                      var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;                        // Find crop area top left coordinate in the actual high resolution image                      var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        // Find crop area bottom right coordinate in the actual high resolution image                      var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        var topLeft = new Windows.Foundation.Point(topLeftX' topLeftY);                      var bottomRight = new Windows.Foundation.Point(bottomRightX' bottomRightY);                        _reframingFilter.ReframingArea = new Windows.Foundation.Rect(topLeft' bottomRight);                        await _renderer.RenderAsync();                  }                  while (_lastLenseCenterForRendering != center);                    _highResolutionCropBitmap.Invalidate();                    HighResolutionCropImage.Visibility = Visibility.Visible;                    _renderingLenseContent = false;              }
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent)              {                  _renderingLenseContent = true;                    HighResolutionCropImage.Visibility = Visibility.Collapsed;                    do                  {                      center = _lastLenseCenterForRendering;                        // Scale between the rendered image element and the bitmap displayed in it                      var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;                      var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;                        // Find crop area top left coordinate in the actual high resolution image                      var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        // Find crop area bottom right coordinate in the actual high resolution image                      var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        var topLeft = new Windows.Foundation.Point(topLeftX' topLeftY);                      var bottomRight = new Windows.Foundation.Point(bottomRightX' bottomRightY);                        _reframingFilter.ReframingArea = new Windows.Foundation.Rect(topLeft' bottomRight);                        await _renderer.RenderAsync();                  }                  while (_lastLenseCenterForRendering != center);                    _highResolutionCropBitmap.Invalidate();                    HighResolutionCropImage.Visibility = Visibility.Visible;                    _renderingLenseContent = false;              }
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent)              {                  _renderingLenseContent = true;                    HighResolutionCropImage.Visibility = Visibility.Collapsed;                    do                  {                      center = _lastLenseCenterForRendering;                        // Scale between the rendered image element and the bitmap displayed in it                      var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;                      var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;                        // Find crop area top left coordinate in the actual high resolution image                      var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        // Find crop area bottom right coordinate in the actual high resolution image                      var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        var topLeft = new Windows.Foundation.Point(topLeftX' topLeftY);                      var bottomRight = new Windows.Foundation.Point(bottomRightX' bottomRightY);                        _reframingFilter.ReframingArea = new Windows.Foundation.Rect(topLeft' bottomRight);                        await _renderer.RenderAsync();                  }                  while (_lastLenseCenterForRendering != center);                    _highResolutionCropBitmap.Invalidate();                    HighResolutionCropImage.Visibility = Visibility.Visible;                    _renderingLenseContent = false;              }
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent)              {                  _renderingLenseContent = true;                    HighResolutionCropImage.Visibility = Visibility.Collapsed;                    do                  {                      center = _lastLenseCenterForRendering;                        // Scale between the rendered image element and the bitmap displayed in it                      var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;                      var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;                        // Find crop area top left coordinate in the actual high resolution image                      var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        // Find crop area bottom right coordinate in the actual high resolution image                      var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        var topLeft = new Windows.Foundation.Point(topLeftX' topLeftY);                      var bottomRight = new Windows.Foundation.Point(bottomRightX' bottomRightY);                        _reframingFilter.ReframingArea = new Windows.Foundation.Rect(topLeft' bottomRight);                        await _renderer.RenderAsync();                  }                  while (_lastLenseCenterForRendering != center);                    _highResolutionCropBitmap.Invalidate();                    HighResolutionCropImage.Visibility = Visibility.Visible;                    _renderingLenseContent = false;              }
Magic Number,MagnifierApp,MagnifierPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent)              {                  _renderingLenseContent = true;                    HighResolutionCropImage.Visibility = Visibility.Collapsed;                    do                  {                      center = _lastLenseCenterForRendering;                        // Scale between the rendered image element and the bitmap displayed in it                      var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;                      var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;                        // Find crop area top left coordinate in the actual high resolution image                      var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        // Find crop area bottom right coordinate in the actual high resolution image                      var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                      var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;                        var topLeft = new Windows.Foundation.Point(topLeftX' topLeftY);                      var bottomRight = new Windows.Foundation.Point(bottomRightX' bottomRightY);                        _reframingFilter.ReframingArea = new Windows.Foundation.Rect(topLeft' bottomRight);                        await _renderer.RenderAsync();                  }                  while (_lastLenseCenterForRendering != center);                    _highResolutionCropBitmap.Invalidate();                    HighResolutionCropImage.Visibility = Visibility.Visible;                    _renderingLenseContent = false;              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: using (var memoryStream = new MemoryStream())              {                  image.Position = 0;                  image.CopyTo(memoryStream);                    try                  {                      // Some streams do not support flushing                        image.Flush();                  }                  catch (Exception)                  {                  }                    memoryStream.Position = 0;                    // Initialize image source                    _source = new StreamImageSource(memoryStream);                    // Get image info                    Task.Run(async () => { _info = await _source.GetInfoAsync(); }).Wait();                    // Set _lowResolutionBitmap decoding to a quite low resolution and initialize it with image                  if (_info.ImageSize.Width >= _info.ImageSize.Height)                  {                      _bitmap.DecodePixelWidth = 1536;                      _bitmap.DecodePixelHeight = 0;                  }                  else                  {                      _bitmap.DecodePixelWidth = 0;                      _bitmap.DecodePixelHeight = 1536;                  }                    image.Position = 0;                    _bitmap.SetSource(image);              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: using (var memoryStream = new MemoryStream())              {                  image.Position = 0;                  image.CopyTo(memoryStream);                    try                  {                      // Some streams do not support flushing                        image.Flush();                  }                  catch (Exception)                  {                  }                    memoryStream.Position = 0;                    // Initialize image source                    _source = new StreamImageSource(memoryStream);                    // Get image info                    Task.Run(async () => { _info = await _source.GetInfoAsync(); }).Wait();                    // Set _lowResolutionBitmap decoding to a quite low resolution and initialize it with image                  if (_info.ImageSize.Width >= _info.ImageSize.Height)                  {                      _bitmap.DecodePixelWidth = 1536;                      _bitmap.DecodePixelHeight = 0;                  }                  else                  {                      _bitmap.DecodePixelWidth = 0;                      _bitmap.DecodePixelHeight = 1536;                  }                    image.Position = 0;                    _bitmap.SetSource(image);              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null)              {                  e.Handled = true;                    if (!_pinching)                  {                      _pinching = true;                        _relativeCenter = new Point(                          e.PinchManipulation.Original.Center.X / Image.Width'                          e.PinchManipulation.Original.Center.Y / Image.Height);                  }                    double w' h;                    if (_info.ImageSize.Width < _info.ImageSize.Height)                  {                      w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;                      w = Math.Max(Crop.Width' w);                      w = Math.Min(w' _info.ImageSize.Width);                      w = Math.Min(w' 4096);                        h = w * _info.ImageSize.Height / _info.ImageSize.Width;                        if (h > 4096)                      {                          var scaler = 4096.0 / h;                          h *= scaler;                          w *= scaler;                      }                  }                  else                  {                      h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;                      h = Math.Max(Crop.Height' h);                      h = Math.Min(h' _info.ImageSize.Height);                      h = Math.Min(h' 4096);                        w = h * _info.ImageSize.Width / _info.ImageSize.Height;                        if (w > 4096)                      {                          var scaler = 4096.0 / w;                          w *= scaler;                          h *= scaler;                      }                  }                    Image.Width = w;                  Image.Height = h;                    Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);                    GeneralTransform transform = Image.TransformToVisual(Viewport);                  Point p = transform.Transform(e.PinchManipulation.Original.Center);                    double x = _relativeCenter.X * w - p.X + Image.Margin.Left;                  double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;                    if (w < _info.ImageSize.Width && h < _info.ImageSize.Height)                  {                      //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'                      //    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);                        Viewport.SetViewportOrigin(new Point(x' y));                  }              }              else if (_pinching)              {                  e.Handled = true;                    CompletePinching();              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null)              {                  e.Handled = true;                    if (!_pinching)                  {                      _pinching = true;                        _relativeCenter = new Point(                          e.PinchManipulation.Original.Center.X / Image.Width'                          e.PinchManipulation.Original.Center.Y / Image.Height);                  }                    double w' h;                    if (_info.ImageSize.Width < _info.ImageSize.Height)                  {                      w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;                      w = Math.Max(Crop.Width' w);                      w = Math.Min(w' _info.ImageSize.Width);                      w = Math.Min(w' 4096);                        h = w * _info.ImageSize.Height / _info.ImageSize.Width;                        if (h > 4096)                      {                          var scaler = 4096.0 / h;                          h *= scaler;                          w *= scaler;                      }                  }                  else                  {                      h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;                      h = Math.Max(Crop.Height' h);                      h = Math.Min(h' _info.ImageSize.Height);                      h = Math.Min(h' 4096);                        w = h * _info.ImageSize.Width / _info.ImageSize.Height;                        if (w > 4096)                      {                          var scaler = 4096.0 / w;                          w *= scaler;                          h *= scaler;                      }                  }                    Image.Width = w;                  Image.Height = h;                    Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);                    GeneralTransform transform = Image.TransformToVisual(Viewport);                  Point p = transform.Transform(e.PinchManipulation.Original.Center);                    double x = _relativeCenter.X * w - p.X + Image.Margin.Left;                  double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;                    if (w < _info.ImageSize.Width && h < _info.ImageSize.Height)                  {                      //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'                      //    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);                        Viewport.SetViewportOrigin(new Point(x' y));                  }              }              else if (_pinching)              {                  e.Handled = true;                    CompletePinching();              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null)              {                  e.Handled = true;                    if (!_pinching)                  {                      _pinching = true;                        _relativeCenter = new Point(                          e.PinchManipulation.Original.Center.X / Image.Width'                          e.PinchManipulation.Original.Center.Y / Image.Height);                  }                    double w' h;                    if (_info.ImageSize.Width < _info.ImageSize.Height)                  {                      w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;                      w = Math.Max(Crop.Width' w);                      w = Math.Min(w' _info.ImageSize.Width);                      w = Math.Min(w' 4096);                        h = w * _info.ImageSize.Height / _info.ImageSize.Width;                        if (h > 4096)                      {                          var scaler = 4096.0 / h;                          h *= scaler;                          w *= scaler;                      }                  }                  else                  {                      h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;                      h = Math.Max(Crop.Height' h);                      h = Math.Min(h' _info.ImageSize.Height);                      h = Math.Min(h' 4096);                        w = h * _info.ImageSize.Width / _info.ImageSize.Height;                        if (w > 4096)                      {                          var scaler = 4096.0 / w;                          w *= scaler;                          h *= scaler;                      }                  }                    Image.Width = w;                  Image.Height = h;                    Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);                    GeneralTransform transform = Image.TransformToVisual(Viewport);                  Point p = transform.Transform(e.PinchManipulation.Original.Center);                    double x = _relativeCenter.X * w - p.X + Image.Margin.Left;                  double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;                    if (w < _info.ImageSize.Width && h < _info.ImageSize.Height)                  {                      //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'                      //    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);                        Viewport.SetViewportOrigin(new Point(x' y));                  }              }              else if (_pinching)              {                  e.Handled = true;                    CompletePinching();              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null)              {                  e.Handled = true;                    if (!_pinching)                  {                      _pinching = true;                        _relativeCenter = new Point(                          e.PinchManipulation.Original.Center.X / Image.Width'                          e.PinchManipulation.Original.Center.Y / Image.Height);                  }                    double w' h;                    if (_info.ImageSize.Width < _info.ImageSize.Height)                  {                      w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;                      w = Math.Max(Crop.Width' w);                      w = Math.Min(w' _info.ImageSize.Width);                      w = Math.Min(w' 4096);                        h = w * _info.ImageSize.Height / _info.ImageSize.Width;                        if (h > 4096)                      {                          var scaler = 4096.0 / h;                          h *= scaler;                          w *= scaler;                      }                  }                  else                  {                      h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;                      h = Math.Max(Crop.Height' h);                      h = Math.Min(h' _info.ImageSize.Height);                      h = Math.Min(h' 4096);                        w = h * _info.ImageSize.Width / _info.ImageSize.Height;                        if (w > 4096)                      {                          var scaler = 4096.0 / w;                          w *= scaler;                          h *= scaler;                      }                  }                    Image.Width = w;                  Image.Height = h;                    Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);                    GeneralTransform transform = Image.TransformToVisual(Viewport);                  Point p = transform.Transform(e.PinchManipulation.Original.Center);                    double x = _relativeCenter.X * w - p.X + Image.Margin.Left;                  double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;                    if (w < _info.ImageSize.Width && h < _info.ImageSize.Height)                  {                      //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'                      //    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);                        Viewport.SetViewportOrigin(new Point(x' y));                  }              }              else if (_pinching)              {                  e.Handled = true;                    CompletePinching();              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null)              {                  e.Handled = true;                    if (!_pinching)                  {                      _pinching = true;                        _relativeCenter = new Point(                          e.PinchManipulation.Original.Center.X / Image.Width'                          e.PinchManipulation.Original.Center.Y / Image.Height);                  }                    double w' h;                    if (_info.ImageSize.Width < _info.ImageSize.Height)                  {                      w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;                      w = Math.Max(Crop.Width' w);                      w = Math.Min(w' _info.ImageSize.Width);                      w = Math.Min(w' 4096);                        h = w * _info.ImageSize.Height / _info.ImageSize.Width;                        if (h > 4096)                      {                          var scaler = 4096.0 / h;                          h *= scaler;                          w *= scaler;                      }                  }                  else                  {                      h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;                      h = Math.Max(Crop.Height' h);                      h = Math.Min(h' _info.ImageSize.Height);                      h = Math.Min(h' 4096);                        w = h * _info.ImageSize.Width / _info.ImageSize.Height;                        if (w > 4096)                      {                          var scaler = 4096.0 / w;                          w *= scaler;                          h *= scaler;                      }                  }                    Image.Width = w;                  Image.Height = h;                    Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);                    GeneralTransform transform = Image.TransformToVisual(Viewport);                  Point p = transform.Transform(e.PinchManipulation.Original.Center);                    double x = _relativeCenter.X * w - p.X + Image.Margin.Left;                  double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;                    if (w < _info.ImageSize.Width && h < _info.ImageSize.Height)                  {                      //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'                      //    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);                        Viewport.SetViewportOrigin(new Point(x' y));                  }              }              else if (_pinching)              {                  e.Handled = true;                    CompletePinching();              }
Magic Number,MagnifierApp.Pages,CropPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null)              {                  e.Handled = true;                    if (!_pinching)                  {                      _pinching = true;                        _relativeCenter = new Point(                          e.PinchManipulation.Original.Center.X / Image.Width'                          e.PinchManipulation.Original.Center.Y / Image.Height);                  }                    double w' h;                    if (_info.ImageSize.Width < _info.ImageSize.Height)                  {                      w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;                      w = Math.Max(Crop.Width' w);                      w = Math.Min(w' _info.ImageSize.Width);                      w = Math.Min(w' 4096);                        h = w * _info.ImageSize.Height / _info.ImageSize.Width;                        if (h > 4096)                      {                          var scaler = 4096.0 / h;                          h *= scaler;                          w *= scaler;                      }                  }                  else                  {                      h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;                      h = Math.Max(Crop.Height' h);                      h = Math.Min(h' _info.ImageSize.Height);                      h = Math.Min(h' 4096);                        w = h * _info.ImageSize.Width / _info.ImageSize.Height;                        if (w > 4096)                      {                          var scaler = 4096.0 / w;                          w *= scaler;                          h *= scaler;                      }                  }                    Image.Width = w;                  Image.Height = h;                    Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);                    GeneralTransform transform = Image.TransformToVisual(Viewport);                  Point p = transform.Transform(e.PinchManipulation.Original.Center);                    double x = _relativeCenter.X * w - p.X + Image.Margin.Left;                  double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;                    if (w < _info.ImageSize.Width && h < _info.ImageSize.Height)                  {                      //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'                      //    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);                        Viewport.SetViewportOrigin(new Point(x' y));                  }              }              else if (_pinching)              {                  e.Handled = true;                    CompletePinching();              }
Magic Number,MagnifierApp.Pages,InfoPageViewModel,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The following statement contains a magic number: using (var reader = new ExifLib.ExifReader(stream))              {                  PrintSupportedExifInfo(reader);                    // Aperture                    double aperture;                    if (reader.GetTagValue(ExifLib.ExifTags.FNumber' out aperture))                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_ApertureTitleTextBlock_Text'                              Value = "F" + Math.Round(aperture' 1).ToString().Replace('''' '.')                          });                  }                    // Exposure time                    double exposureTime;                    if (reader.GetTagValue(ExifLib.ExifTags.ExposureTime' out exposureTime))                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_ExposureTimeTitleTextBlock_Text'                              Value = String.Format(AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round(exposureTime' 2).ToString())                          });                  }                    // ISO                    UInt16 iso;                    if (reader.GetTagValue(ExifLib.ExifTags.ISOSpeedRatings' out iso) && iso > 0)                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_IsoTitleTextBlock_Text'                              Value = iso.ToString()                          });                  }                    // Flash (simplified)                    UInt16 flash;                    if (reader.GetTagValue(ExifLib.ExifTags.Flash' out flash))                  {                      var bytes = BitConverter.GetBytes(flash);                        Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_FlashTitleTextBlock_Text'                              Value = (bytes[0] & 0x01) != 0x00 ?                                  AppResources.InfoPage_FlashValueFiredTextBlock_Text :                                  AppResources.InfoPage_FlashValueNotFiredTextBlock_Text                          });                  }                    // Date and time                    DateTime dateTime;                    if (reader.GetTagValue(ExifLib.ExifTags.DateTimeOriginal' out dateTime))                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_DateTimeTitleTextBlock_Text'                              Value = dateTime.ToLocalTime().ToString()                          });                  }                    // Dimensions                    UInt32 x;                  UInt32 y;                    if (reader.GetTagValue(ExifLib.ExifTags.PixelXDimension' out x) && x > 0 &&                      reader.GetTagValue(ExifLib.ExifTags.PixelYDimension' out y) && y > 0)                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_DimensionsTitleTextBlock_Text'                              Value = x + " x " + y                          });                  }                    // Make                    string make;                    if (reader.GetTagValue(ExifLib.ExifTags.Make' out make) && make.Length > 0)                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_MakeTitleTextBlock_Text'                              Value = make                          });                  }                    // Model                    string model;                    if (reader.GetTagValue(ExifLib.ExifTags.Model' out model) && model.Length > 0)                  {                      Infos.Add(new Info()                          {                               Title = AppResources.InfoPage_ModelTitleTextBlock_Text'                              Value = model                          });                  }                    // Software                    string software;                    if (reader.GetTagValue(ExifLib.ExifTags.Software' out software) && software.Length > 0)                  {                      Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_SoftwareTitleTextBlock_Text'                              Value = software                          });                  }              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 225)              {                  // 720p                  Canvas.Width = 853;                  FreezeImage.Width = 853;              }              else              {                  Canvas.Width = 800;                  FreezeImage.Width = 800;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 225)              {                  // 720p                  Canvas.Width = 853;                  FreezeImage.Width = 853;              }              else              {                  Canvas.Width = 800;                  FreezeImage.Width = 800;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 225)              {                  // 720p                  Canvas.Width = 853;                  FreezeImage.Width = 853;              }              else              {                  Canvas.Width = 800;                  FreezeImage.Width = 800;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 225)              {                  // 720p                  Canvas.Width = 853;                  FreezeImage.Width = 853;              }              else              {                  Canvas.Width = 800;                  FreezeImage.Width = 800;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 225)              {                  // 720p                  Canvas.Width = 853;                  FreezeImage.Width = 853;              }              else              {                  Canvas.Width = 800;                  FreezeImage.Width = 800;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (Orientation.HasFlag(PageOrientation.LandscapeLeft))              {                  canvasAngle = _device.SensorRotationInDegrees - 90;              }              else if (Orientation.HasFlag(PageOrientation.LandscapeRight))              {                  canvasAngle = _device.SensorRotationInDegrees + 90;              }              else // PageOrientation.PortraitUp              {                  canvasAngle = _device.SensorRotationInDegrees;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (Orientation.HasFlag(PageOrientation.LandscapeLeft))              {                  canvasAngle = _device.SensorRotationInDegrees - 90;              }              else if (Orientation.HasFlag(PageOrientation.LandscapeRight))              {                  canvasAngle = _device.SensorRotationInDegrees + 90;              }              else // PageOrientation.PortraitUp              {                  canvasAngle = _device.SensorRotationInDegrees;              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.RenderTransform = new RotateTransform()              {                  CenterX = Canvas.Width / 2.0'                  CenterY = Canvas.Height / 2.0'                  Angle = canvasAngle              };
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.RenderTransform = new RotateTransform()              {                  CenterX = Canvas.Width / 2.0'                  CenterY = Canvas.Height / 2.0'                  Angle = canvasAngle              };
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains("RM-875") || deviceName.Contains("RM-876") || deviceName.Contains("RM-877"))              {                  captureResolution = new Windows.Foundation.Size(7712' 4352); // 16:9                  //captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3              }              else if (deviceName.Contains("RM-937") || deviceName.Contains("RM-938") || deviceName.Contains("RM-939"))              {                  captureResolution = new Windows.Foundation.Size(5376' 3024); // 16:9                  //captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3              }              else              {                  captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions(SENSOR_LOCATION).First();              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains("RM-875") || deviceName.Contains("RM-876") || deviceName.Contains("RM-877"))              {                  captureResolution = new Windows.Foundation.Size(7712' 4352); // 16:9                  //captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3              }              else if (deviceName.Contains("RM-937") || deviceName.Contains("RM-938") || deviceName.Contains("RM-939"))              {                  captureResolution = new Windows.Foundation.Size(5376' 3024); // 16:9                  //captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3              }              else              {                  captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions(SENSOR_LOCATION).First();              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains("RM-875") || deviceName.Contains("RM-876") || deviceName.Contains("RM-877"))              {                  captureResolution = new Windows.Foundation.Size(7712' 4352); // 16:9                  //captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3              }              else if (deviceName.Contains("RM-937") || deviceName.Contains("RM-938") || deviceName.Contains("RM-939"))              {                  captureResolution = new Windows.Foundation.Size(5376' 3024); // 16:9                  //captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3              }              else              {                  captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions(SENSOR_LOCATION).First();              }
Magic Number,MagnifierApp.Pages,ViewfinderPage,C:\repos\nokia-developer_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains("RM-875") || deviceName.Contains("RM-876") || deviceName.Contains("RM-877"))              {                  captureResolution = new Windows.Foundation.Size(7712' 4352); // 16:9                  //captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3              }              else if (deviceName.Contains("RM-937") || deviceName.Contains("RM-938") || deviceName.Contains("RM-939"))              {                  captureResolution = new Windows.Foundation.Size(5376' 3024); // 16:9                  //captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3              }              else              {                  captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions(SENSOR_LOCATION).First();              }
