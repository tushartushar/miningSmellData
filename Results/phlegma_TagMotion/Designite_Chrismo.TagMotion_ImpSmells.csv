Implementation smell,Namespace,Class,File,Method,Description
Long Method,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The method has 131 lines of code.
Complex Method,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,Sort,Cyclomatic complexity of the method is 18
Complex Method,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToTXT,Cyclomatic complexity of the method is 14
Complex Method,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveTags,Cyclomatic complexity of the method is 13
Complex Method,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,GetAllRecords,Cyclomatic complexity of the method is 10
Complex Method,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,ValidateTags,Cyclomatic complexity of the method is 10
Complex Method,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,ReadTags,Cyclomatic complexity of the method is 8
Complex Method,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,Copy,Cyclomatic complexity of the method is 9
Complex Method,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,Sort,Cyclomatic complexity of the method is 12
Complex Method,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,AutoTagFromFileName,Cyclomatic complexity of the method is 18
Complex Method,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,ReadDirectory,Cyclomatic complexity of the method is 11
Complex Method,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,QueryFreeDB,Cyclomatic complexity of the method is 10
Complex Method,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,Cyclomatic complexity of the method is 27
Complex Method,TagLib.Asf,ContentDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\ContentDescriptor.cs,Render,Cyclomatic complexity of the method is 17
Complex Method,TagLib.Asf,ContentDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\ContentDescriptor.cs,Parse,Cyclomatic complexity of the method is 19
Complex Method,TagLib.Asf,DescriptionRecord,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\DescriptionRecord.cs,Render,Cyclomatic complexity of the method is 20
Complex Method,TagLib.Asf,DescriptionRecord,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\DescriptionRecord.cs,Parse,Cyclomatic complexity of the method is 20
Complex Method,TagLib.Asf,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Tag.cs,Tag,Cyclomatic complexity of the method is 8
Complex Method,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,Find,Cyclomatic complexity of the method is 13
Complex Method,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,RFind,Cyclomatic complexity of the method is 12
Complex Method,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,StringTypeToEncoding,Cyclomatic complexity of the method is 8
Complex Method,TagLib,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\File.cs,Find,Cyclomatic complexity of the method is 10
Complex Method,TagLib,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Tag.cs,CopyTo,Cyclomatic complexity of the method is 18
Complex Method,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,Cyclomatic complexity of the method is 12
Complex Method,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Render,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,FieldData,Cyclomatic complexity of the method is 11
Complex Method,TagLib.Id3v2,FrameFactory,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameFactory.cs,CreateFrame,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,Cyclomatic complexity of the method is 19
Complex Method,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,Cyclomatic complexity of the method is 15
Complex Method,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,RenderFields,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,ParseRawData,Cyclomatic complexity of the method is 12
Complex Method,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,RenderFields,Cyclomatic complexity of the method is 12
Complex Method,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,SetTextFrame,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,Cyclomatic complexity of the method is 20
Complex Method,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,CopyTo,Cyclomatic complexity of the method is 11
Complex Method,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,SetData,Cyclomatic complexity of the method is 9
Complex Method,TagLib.Mpeg4,Box,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Box.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,Cyclomatic complexity of the method is 14
Complex Method,TagLib.Mpeg4,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\File.cs,Save,Cyclomatic complexity of the method is 11
Complex Method,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseTagAndProperties,Cyclomatic complexity of the method is 9
Complex Method,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,AudioHeader,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,Cyclomatic complexity of the method is 19
Complex Method,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,ReadTag,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Ogg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\File.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,Cyclomatic complexity of the method is 12
Complex Method,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Ogg,Paginator,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Paginator.cs,Paginate,Cyclomatic complexity of the method is 10
Complex Method,TagLib.Ogg,XiphComment,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\XiphComment.cs,SetField,Cyclomatic complexity of the method is 8
Complex Method,TagLib.Riff,AviHeaderList,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeaderList,Cyclomatic complexity of the method is 9
Complex Method,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,Cyclomatic complexity of the method is 11
Complex Method,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,GetTag,Cyclomatic complexity of the method is 20
Complex Method,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,Cyclomatic complexity of the method is 61
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,FillSettingsDLG,Cyclomatic complexity of the method is 10
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,ReadSourceDirectory,Cyclomatic complexity of the method is 19
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,Settings_Click,Cyclomatic complexity of the method is 25
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeView_AfterSelect,Cyclomatic complexity of the method is 15
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,Cyclomatic complexity of the method is 45
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,Copy_Click,Cyclomatic complexity of the method is 28
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,StoreImage_Click,Cyclomatic complexity of the method is 8
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,ExtractImage_Click,Cyclomatic complexity of the method is 17
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,Delete_Click,Cyclomatic complexity of the method is 33
Complex Method,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,PropertyGrid_ValueChanged,Cyclomatic complexity of the method is 37
Complex Method,Freedb,CDEntry,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\CDEntry.cs,Parse,Cyclomatic complexity of the method is 25
Complex Method,Freedb,FreedbHelper,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\FreedbHelper.cs,GetSites,Cyclomatic complexity of the method is 12
Complex Method,Freedb,FreedbHelper,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\FreedbHelper.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Freedb,FreedbHelper,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\FreedbHelper.cs,Query,Cyclomatic complexity of the method is 15
Complex Method,Freedb,FreedbHelper,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\FreedbHelper.cs,GetCategories,Cyclomatic complexity of the method is 8
Long Parameter List,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,ReadDirectory,The method has 7 parameters.
Long Parameter List,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,AudioHeader,The method has 5 parameters.
Long Parameter List,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The method has 5 parameters.
Long Parameter List,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,Get,The method has 5 parameters.
Long Parameter List,TagLib.Mpeg4,BoxFactory,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxFactory.cs,CreateBox,The method has 5 parameters.
Long Parameter List,TagLib.Mpeg4,BoxFactory,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxFactory.cs,CreateBox,The method has 5 parameters.
Long Parameter List,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The method has 5 parameters.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "	tWriter.WriteLine ("<style type=\"text/css\"><!--body {margin: 50px;}body' th' td' p' div' li {font-family: Helvetica' Verdana' Arial' sans-serif; font-size: 12px; color: #DCD581 ;}"); " is 184.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "	tWriter.WriteLine ("th {font-weight: bold;vertical-align: top;padding: 5px;text-align: left;background: #DCD581 ;border-right: 1px solid #000000;color: #000000;}"); " is 164.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "	tWriter.WriteLine ("td {vertical-align: top;padding: 5px;text-align: left;border-top: 1px solid #666666;border-right: 1px solid #666666;}"); " is 140.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "	tWriter.WriteLine ("a:link {color: #DCD581 ;text-decoration:none;}a:visited {color: #DCD581 ;text-decoration:none;}</style>"); " is 126.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "			tArtist = "<a href=http://www.discogs.com/label/" + tRecord.Artist.Replace (" "' "+").Replace ("("' "").Replace (")"' "").Replace ("-"' "%E2%80%93") + ">" + tRecord.Artist + "</a>"; " is 181.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "			tTitle = "<a href=http://www.discogs.com/label/" + tRecord.Artist.Replace (" "' "+").Replace ("("' "").Replace (")"' "").Replace ("-"' "%E2%80%93") + ">" + tRecord.Title + "</a>"; " is 179.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "			tYear = "<a href=http://www.discogs.com/label/" + tRecord.Artist.Replace (" "' "+").Replace ("("' "").Replace (")"' "").Replace ("-"' "%E2%80%93") + ">" + tRecord.Year.ToString () + "</a>"; " is 189.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "			tArtist = "<a href=http://www.discogs.com/artist/" + tRecord.Artist.Replace (" "' "+").Replace ("-"' "%E2%80%93") + ">" + tRecord.Artist + "</a>"; " is 146.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "			tTitle = "<a href=http://www.discogs.com/artist/" + tRecord.Artist.Replace (" "' "+").Replace ("-"' "%E2%80%93") + ">" + tRecord.Title + "</a>"; " is 144.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "			tYear = "<a href=http://www.discogs.com/artist/" + tRecord.Artist.Replace (" "' "+").Replace ("-"' "%E2%80%93") + ">" + tRecord.Year.ToString () + "</a>"; " is 154.
Long Statement,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveToHTML,The length of the statement  "		tWriter.WriteLine ("<tr><td>" + tCounter.ToString ("0000") + "</td><td>" + tArtist + "</td><td>" + tTitle + "</td><td>" + tYear + "</td></tr>"); " is 144.
Long Statement,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,GetVariableBitrate,The length of the statement  "	return (int)(_FileSize * 8.0 / (_Duration.Minutes * 60.0 + _Duration.Seconds + _Duration.Milliseconds / 1000.0) / 1000.0); " is 122.
Long Statement,Chrismo.TagMotion,File,C:\repos\phlegma_TagMotion\TagMotion\File.cs,Delete,The length of the statement  "		if (MessageBox.Show ("Do you really want to delete " + _Path' "File Deletion"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) != DialogResult.OK) " is 151.
Long Statement,Chrismo.TagMotion,File,C:\repos\phlegma_TagMotion\TagMotion\File.cs,Rename,The length of the statement  "		tNewFileName = pCounter > 0 ? tNewFileName.Replace (Settings.TITLE' this.RecordTitle + " " + pCounter.ToString ("0")) : tNewFileName.Replace (Settings.TITLE' this.RecordTitle); " is 176.
Long Statement,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,Delete,The length of the statement  "	DialogResult tAnswer = MessageBox.Show ("Do you really want to delete " + _Path' "Directory Deletion"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 156.
Long Statement,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,AutoTagFromFileName,The length of the statement  "							tValue = tFileName.Substring (tPosition' tFileName.Substring (tPosition).IndexOf (tFileStructure.Substring (tExpression.Length))); " is 130.
Long Statement,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,AutoTagFromFileName,The length of the statement  "						tNextSeperator = tFileStructure.Substring (tPosition + tExpression.Length' tFileStructure.Substring (tPosition + tExpression.Length).IndexOf ('%')); " is 148.
Long Statement,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,SaveTagPicturesToFile,The length of the statement  "			_Songs [0].SaveID3PictureToImage (_Songs [0].Pictures [i]' System.IO.Path.Combine (_Path' "TagPicture " + (i + 1) + ".jpg")); " is 125.
Long Statement,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The length of the statement  "	t = (int)((CDToc [_Songs.Count].Minute * 60) + CDToc [_Songs.Count].Second) - ((CDToc [0].Minute * 60) + CDToc [0].Second); " is 123.
Long Statement,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,TimeStamp,The length of the statement  "	return "[" + System.DateTime.Now.Year.ToString ("0000") + "/" + System.DateTime.Now.Month.ToString ("00") + "/" + System.DateTime.Now.Day.ToString ("00") + " - " + System.DateTime.Now.Hour.ToString ("00") + ":" + System.DateTime.Now.Minute.ToString ("00") + ":" + System.DateTime.Now.Second.ToString ("00") + "'" + System.DateTime.Now.Millisecond.ToString ("000") + "]"; " is 370.
Long Statement,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The length of the statement  "					header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes); " is 126.
Long Statement,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Equals,The length of the statement  "	return flags == other.flags && tag_size == other.tag_size && item_count == other.item_count && version == other.version; " is 120.
Long Statement,TagLib.Asf,HeaderObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderObject.cs,RemoveContentDescriptors,The length of the statement  "		if (children [i].Guid == Asf.Guid.AsfContentDescriptionObject || children [i].Guid == Asf.Guid.AsfExtendedContentDescriptionObject) " is 131.
Long Statement,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ContainsAt,The length of the statement  "	if (patternLength > this.data.Count || offset >= this.data.Count || patternOffset >= pattern.Count || patternLength <= 0 || offset < 0) " is 135.
Long Statement,TagLib,ByteVectorCollection,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVectorList.cs,Split,The length of the statement  "	for (int offset = vector.Find (pattern' 0' byteAlign); offset != -1 && (max < 1 || max > list.Count + 1); offset = vector.Find (pattern' offset + pattern.Count' byteAlign)) { " is 174.
Long Statement,TagLib,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\File.cs,Insert,The length of the statement  "		int bytes_read = file_stream.Read (about_to_overwrite' 0' buffer_length < about_to_overwrite.Length ? buffer_length : about_to_overwrite.Length); " is 145.
Long Statement,TagLib,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\File.cs,Create,The length of the statement  "		throw new UnsupportedFormatException (String.Format (CultureInfo.InvariantCulture' "{0} ({1})"' abstraction.Name' mimetype)); " is 125.
Long Statement,TagLib,Genres,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Genres.cs,StringToByte,The length of the statement  "	if (text != null && text.Length > 2 && text [0] == '(' && (last_pos = text.IndexOf (')')) != -1 && byte.TryParse (text.Substring (1' last_pos - 1)' out value)) " is 159.
Long Statement,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The length of the statement  "		IList<Block> old_blocks = ReadBlocks (ref metadata_start' out metadata_end' BlockMode.Blacklist' BlockType.XiphComment' BlockType.Picture); " is 139.
Long Statement,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The length of the statement  "			if (block.Type != BlockType.StreamInfo && block.Type != BlockType.XiphComment && block.Type != BlockType.Picture && block.Type != BlockType.Padding) " is 148.
Long Statement,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,ReadStart,The length of the statement  "	IList<Block> blocks = ReadBlocks (ref start' out end' BlockMode.Whitelist' BlockType.StreamInfo' BlockType.XiphComment' BlockType.Picture); " is 139.
Long Statement,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Render,The length of the statement  "		Flags &= ~(FrameFlags.Compression | FrameFlags.Encryption | FrameFlags.FileAlterPreservation | FrameFlags.GroupingIdentity | FrameFlags.ReadOnly | FrameFlags.TagAlterPreservation); " is 180.
Long Statement,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The length of the statement  "		ushort new_flags = (ushort)((((ushort)flags << 1) & 0xE000) | (((ushort)flags << 4) & 0x00C0) | (((ushort)flags >> 1) & 0x0020)); " is 129.
Long Statement,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,ParseRawData,The length of the statement  "		if (FrameId == FrameType.TCOM || FrameId == FrameType.TEXT || FrameId == FrameType.TOLY || FrameId == FrameType.TOPE || FrameId == FrameType.TPE1 || FrameId == FrameType.TPE2 || FrameId == FrameType.TPE3 || FrameId == FrameType.TPE4) { " is 235.
Long Statement,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Clone,The length of the statement  "	TextInformationFrame frame = (this is UserTextInformationFrame) ? new UserTextInformationFrame (null' encoding) : new TextInformationFrame (FrameId' encoding); " is 159.
Long Statement,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The length of the statement  "			frame = FrameFactory.CreateFrame (data' ref frame_data_position' header.MajorVersion' (header.Flags & HeaderFlags.Unsynchronisation) != 0); " is 139.
Long Statement,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,Equals,The length of the statement  "	return header_data == other.header_data && sample_rate == other.sample_rate && version == other.version && frames == other.frames; " is 130.
Long Statement,TagLib.Mpeg4,BoxFactory,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxFactory.cs,CreateBox,The length of the statement  "	if (parent.BoxType == BoxType.Stsd && parent.Box is IsoSampleDescriptionBox && index < (parent.Box as IsoSampleDescriptionBox).EntryCount) { " is 140.
Long Statement,TagLib.Mpeg4,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\File.cs,Save,The length of the statement  "		if (parser.UdtaTree == null || parser.UdtaTree.Length == 0 || parser.UdtaTree [parser.UdtaTree.Length - 1].BoxType != BoxType.Udta) { " is 133.
Long Statement,TagLib.Mpeg4,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\File.cs,Read,The length of the statement  "		if (udta_box != null && udta_box.GetChild (BoxType.Meta) != null && udta_box.GetChild (BoxType.Meta).GetChild (BoxType.Ilst) != null) " is 133.
Long Statement,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseBoxHeaders,The length of the statement  "		else if (header.BoxType == BoxType.Mdia || header.BoxType == BoxType.Minf || header.BoxType == BoxType.Stbl || header.BoxType == BoxType.Trak) { " is 144.
Long Statement,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseTag,The length of the statement  "		if (header.BoxType == BoxType.Moov || header.BoxType == BoxType.Mdia || header.BoxType == BoxType.Minf || header.BoxType == BoxType.Stbl || header.BoxType == BoxType.Trak) { " is 173.
Long Statement,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseTagAndProperties,The length of the statement  "		if (type == BoxType.Moov || type == BoxType.Mdia || type == BoxType.Minf || type == BoxType.Stbl || type == BoxType.Trak) { " is 123.
Long Statement,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseChunkOffsets,The length of the statement  "		else if (header.BoxType == BoxType.Moov || header.BoxType == BoxType.Mdia || header.BoxType == BoxType.Minf || header.BoxType == BoxType.Stbl || header.BoxType == BoxType.Trak) { " is 178.
Long Statement,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The length of the statement  "		low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1); " is 150.
Long Statement,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The length of the statement  "		low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3); " is 220.
Long Statement,TagLib.NonContainer,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\File.cs,Read,The length of the statement  "		properties = (propertiesStyle != ReadStyle.None) ? ReadProperties (InvariantStartPosition' InvariantEndPosition' propertiesStyle) : null; " is 137.
Long Statement,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The length of the statement  "			ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false); " is 126.
Long Statement,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,GetHashCode,The length of the statement  "		return (int)(LacingValues.GetHashCode () ^ version ^ (int)flags ^ (int)absolute_granular_position ^ stream_serial_number ^ page_sequence_number ^ size ^ data_size); " is 164.
Long Statement,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,Equals,The length of the statement  "	return packet_sizes == other.packet_sizes && version == other.version && flags == other.flags && absolute_granular_position == other.absolute_granular_position && stream_serial_number == other.stream_serial_number && page_sequence_number == other.page_sequence_number && size == other.size && data_size == other.data_size; " is 322.
Long Statement,TagLib.Ogg,Paginator,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Paginator.cs,Paginate,The length of the statement  "			pages.Add (new Page (page_packets' new PageHeader (first_header' index' first_packet_continued ? PageFlags.FirstPacketContinued : PageFlags.None))); " is 148.
Long Statement,TagLib.Ogg,Paginator,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Paginator.cs,Paginate,The length of the statement  "		pages.Add (new Page (page_packets' new PageHeader (first_header.StreamSerialNumber' index' first_packet_continued ? PageFlags.FirstPacketContinued : PageFlags.None))); " is 167.
Long Statement,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,GetDuration,The length of the statement  "	return header.sample_rate == 0 ? TimeSpan.Zero : TimeSpan.FromSeconds ((double)(lastGranularPosition - firstGranularPosition) / (double)header.sample_rate); " is 156.
Long Statement,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,GetHashCode,The length of the statement  "		return (int)(size ^ width ^ height ^ planes ^ bit_count ^ compression_id.ToUInt () ^ size_of_image ^ x_pixels_per_meter ^ y_pixels_per_meter ^ colors_used ^ colors_important); " is 175.
Long Statement,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,Equals,The length of the statement  "	return size == other.size && width == other.width && height == other.height && planes == other.planes && bit_count == other.bit_count && compression_id == other.compression_id && size_of_image == other.size_of_image && x_pixels_per_meter == other.x_pixels_per_meter && y_pixels_per_meter == other.y_pixels_per_meter && colors_used == other.colors_used && colors_important == other.colors_important; " is 398.
Long Statement,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,Equals,The length of the statement  "	return format_tag == other.format_tag && channels == other.channels && samples_per_second == other.samples_per_second && average_bytes_per_second == other.average_bytes_per_second && bits_per_sample == other.bits_per_sample; " is 224.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,MoveSplitter,The length of the statement  "		object propertyGridView = typeof(PropertyGrid).InvokeMember ("gridView"' BindingFlags.GetField | BindingFlags.NonPublic | BindingFlags.Instance' null' propertyGrid' null); " is 171.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,MoveSplitter,The length of the statement  "		propertyGridView.GetType ().InvokeMember ("MoveSplitterTo"' BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance' null' propertyGridView' new object[] { " is 174.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,FilterRecord,The length of the statement  "	bool tReturn = pRecord.Bitrate < Filter.Bitrate.Min || pRecord.Bitrate > Filter.Bitrate.Max || pRecord.Year < Filter.Year.Min || pRecord.Year > Filter.Year.Max || pRecord.DurationAsTimeSpan.TotalMinutes < Filter.Duration.Min || pRecord.DurationAsTimeSpan.TotalMinutes > Filter.Duration.Max; " is 290.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeView_AfterSelect,The length of the statement  "		_Collection.GetRecord (e.Node.Parent.Parent.Text).GetSong (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid); " is 120.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeView_AfterSelect,The length of the statement  "		_Collection.GetRecord (e.Node.Parent.Parent.Text).GetPicture (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid); " is 123.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeView_AfterSelect,The length of the statement  "		_Collection.GetRecord (e.Node.Parent.Parent.Text).GetInfo (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid); " is 120.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,AutoTag_Click,The length of the statement  "		MessageBox.Show ("An Error occured durion AutoTag." + Environment.NewLine + "Please verify your specified File Structure"' "Error"); " is 132.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,PropertyGrid_ValueChanged,The length of the statement  "		if (MessageBox.Show (String.Format ("Rename {0} Field of all Records to {1}?"' e.ChangedItem.Label' e.ChangedItem.Value)' "Rename"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) != DialogResult.Yes) { " is 237.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,PropertyGrid_ValueChanged,The length of the statement  "			if (MessageBox.Show (String.Format ("Rename Song Artists of all Songs to {0}' too?"' e.ChangedItem.Value' e.ChangedItem.Value)' "Rename"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) == DialogResult.Yes) { " is 243.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,SetStartText,The length of the statement  "		"Music doesn't lie. If there is something to be changed in this world' then it can only happen through music. (Jimmy Hendrix)"' " is 127.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,SetToolTips,The length of the statement  "	this.toolTip.SetToolTip (this.button_Settings' "Settings" + Environment.NewLine + Environment.NewLine + "Source:\t\t" + Settings.SourceDir + Environment.NewLine + "Destination:\t" + Settings.DestinationDir + Environment.NewLine + "File Structure:\t" + Settings.FileStructure + Environment.NewLine + "Info Filetypes:\t" + Settings.InfoTypes); " is 341.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,SetToolTips,The length of the statement  "	this.toolTip.SetToolTip (this.button_ReadSourceDirectory' "Read Source Directory" + Environment.NewLine + Environment.NewLine + Settings.SourceDir); " is 148.
Long Statement,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,SetToolTips,The length of the statement  "	this.toolTip.SetToolTip (this.button_Filter' "Filter" + Environment.NewLine + Environment.NewLine + "Bitrate:\t\t" + Filter.Bitrate.Min + " - " + Filter.Bitrate.Max + Environment.NewLine + "Year:\t\t" + Filter.Year.Min + " - " + Filter.Year.Max + Environment.NewLine + "Duration:\t" + Filter.Duration.Min + " - " + Filter.Duration.Max + Environment.NewLine + "Artist:\t" + Filter.Artist + Environment.NewLine + "Label:\t" + Filter.Label); " is 438.
Long Statement,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,Button_AddDestinationDir_Click,The length of the statement  "	this.ComboBox_DestinationDir.SelectedItem = this.ComboBox_DestinationDir.Items [this.ComboBox_DestinationDir.Items.Count - 1]; " is 126.
Long Statement,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,Button_AddFileStructure_Click,The length of the statement  "	this.ComboBox_FileStructure.SelectedItem = this.ComboBox_FileStructure.Items [this.ComboBox_FileStructure.Items.Count - 1]; " is 123.
Long Statement,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,Button_DeleteDestinationDir_Click,The length of the statement  "		this.ComboBox_DestinationDir.SelectedItem = this.ComboBox_DestinationDir.Items [this.ComboBox_DestinationDir.Items.Count - 1]; " is 126.
Long Statement,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,Button_DeleteFileStructure_Click,The length of the statement  "		this.ComboBox_FileStructure.SelectedItem = this.ComboBox_FileStructure.Items [this.ComboBox_FileStructure.Items.Count - 1]; " is 123.
Long Statement,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The length of the statement  "	this.LBQueryResults.Font = new System.Drawing.Font ("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The length of the statement  "	this.label_Header.Font = new System.Drawing.Font ("Arial"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 148.
Long Statement,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The length of the statement  "	this.BTNOkay.Font = new System.Drawing.Font ("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The length of the statement  "	this.BTNCancel.Font = new System.Drawing.Font ("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Complex Conditional,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ContainsAt,The conditional expression  "patternLength > this.data.Count || offset >= this.data.Count || patternOffset >= pattern.Count || patternLength <= 0 || offset < 0"  is complex.
Complex Conditional,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromStream,The conditional expression  "(bytes_read == stream.Length && stream.Length > 0) || (n < read_size && stream.Length <= 0)"  is complex.
Complex Conditional,TagLib,Genres,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Genres.cs,StringToByte,The conditional expression  "text != null && text.Length > 2 && text [0] == '(' && (last_pos = text.IndexOf (')')) != -1 && byte.TryParse (text.Substring (1' last_pos - 1)' out value)"  is complex.
Complex Conditional,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The conditional expression  "Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')"  is complex.
Complex Conditional,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The conditional expression  "Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')"  is complex.
Complex Conditional,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The conditional expression  "block.Type != BlockType.StreamInfo && block.Type != BlockType.XiphComment && block.Type != BlockType.Picture && block.Type != BlockType.Padding"  is complex.
Complex Conditional,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,ReadBlocks,The conditional expression  "(mode == BlockMode.Whitelist && found) || (mode == BlockMode.Blacklist && !found)"  is complex.
Complex Conditional,TagLib.Id3v2,FrameFactory,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameFactory.cs,CreateFrame,The conditional expression  "(c < 'A' || c > 'Z') && (c < '1' || c > '9')"  is complex.
Complex Conditional,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The conditional expression  "!toVersion && (id == FrameType.EQUA || id == FrameType.RVAD || id == FrameType.TRDA || id == FrameType.TSIZ)"  is complex.
Complex Conditional,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The conditional expression  "(id.Count != 4 && version > 2) || (id.Count != 3 && version == 2)"  is complex.
Complex Conditional,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,Get,The conditional expression  "lyr.Description == description && (language == null || language == lyr.Language) && type == lyr.Type"  is complex.
Complex Conditional,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,ParseRawData,The conditional expression  "FrameId == FrameType.TCOM || FrameId == FrameType.TEXT || FrameId == FrameType.TOLY || FrameId == FrameType.TOPE || FrameId == FrameType.TPE1 || FrameId == FrameType.TPE2 || FrameId == FrameType.TPE3 || FrameId == FrameType.TPE4"  is complex.
Complex Conditional,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,DataBoxes,The conditional expression  "mean_box == null || name_box == null || mean_box.Text != mean || name_box.Text != name"  is complex.
Complex Conditional,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,GetDashAtoms,The conditional expression  "mean_box == null || name_box == null || mean_box.Text != meanstring || name_box.Text != namestring"  is complex.
Complex Conditional,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,GetParentDashBox,The conditional expression  "mean_box == null || name_box == null || mean_box.Text != meanstring || name_box.Text != namestring"  is complex.
Complex Conditional,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseBoxHeaders,The conditional expression  "header.BoxType == BoxType.Mdia || header.BoxType == BoxType.Minf || header.BoxType == BoxType.Stbl || header.BoxType == BoxType.Trak"  is complex.
Complex Conditional,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseTag,The conditional expression  "header.BoxType == BoxType.Moov || header.BoxType == BoxType.Mdia || header.BoxType == BoxType.Minf || header.BoxType == BoxType.Stbl || header.BoxType == BoxType.Trak"  is complex.
Complex Conditional,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseTagAndProperties,The conditional expression  "type == BoxType.Moov || type == BoxType.Mdia || type == BoxType.Minf || type == BoxType.Stbl || type == BoxType.Trak"  is complex.
Complex Conditional,TagLib.Mpeg4,FileParser,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\FileParser.cs,ParseChunkOffsets,The conditional expression  "header.BoxType == BoxType.Moov || header.BoxType == BoxType.Mdia || header.BoxType == BoxType.Minf || header.BoxType == BoxType.Stbl || header.BoxType == BoxType.Trak"  is complex.
Virtual Method Call from Constructor,Freedb,QueryResultCollection,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\QueryResultCollection.cs,QueryResultCollection,The constructor "QueryResultCollection" calls a virtual method "AddRange".
Virtual Method Call from Constructor,Freedb,QueryResultCollection,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\QueryResultCollection.cs,QueryResultCollection,The constructor "QueryResultCollection" calls a virtual method "AddRange".
Virtual Method Call from Constructor,Freedb,SiteCollection,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\SiteCollection.cs,SiteCollection,The constructor "SiteCollection" calls a virtual method "AddRange".
Virtual Method Call from Constructor,Freedb,SiteCollection,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\SiteCollection.cs,SiteCollection,The constructor "SiteCollection" calls a virtual method "AddRange".
Virtual Method Call from Constructor,Freedb,TrackCollection,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\TrackCollection.cs,TrackCollection,The constructor "TrackCollection" calls a virtual method "AddRange".
Virtual Method Call from Constructor,Freedb,TrackCollection,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\TrackCollection.cs,TrackCollection,The constructor "TrackCollection" calls a virtual method "AddRange".
Empty Catch Block,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,AfterSelect,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion,Settings,C:\repos\phlegma_TagMotion\TagMotion\Settings.cs,Load,The method has an empty catch block.
Empty Catch Block,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The method has an empty catch block.
Empty Catch Block,TagLib.Ape,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Tag.cs,Parse,The method has an empty catch block.
Empty Catch Block,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Render,The method has an empty catch block.
Empty Catch Block,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The method has an empty catch block.
Empty Catch Block,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,ReadTag,The method has an empty catch block.
Empty Catch Block,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,ReadTagInfo,The method has an empty catch block.
Empty Catch Block,TagLib.NonContainer,StartTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\StartTag.cs,ReadTagInfo,The method has an empty catch block.
Empty Catch Block,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,MoveSplitter,The method has an empty catch block.
Empty Catch Block,Freedb,FreedbHelper,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\FreedbHelper.cs,Query,The method has an empty catch block.
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,UpdateForeColor,The following statement contains a magic number: if (_Filtered)  	_Node.ForeColor = Color.PaleGoldenrod;  else  	_Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 70' 0) : Color.FromArgb (120' 0' 0));  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,UpdateForeColor,The following statement contains a magic number: if (_Filtered)  	_Node.ForeColor = Color.PaleGoldenrod;  else  	_Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 70' 0) : Color.FromArgb (120' 0' 0));  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,UpdateForeColor,The following statement contains a magic number: _Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 70' 0) : Color.FromArgb (120' 0' 0));  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,UpdateForeColor,The following statement contains a magic number: _Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 70' 0) : Color.FromArgb (120' 0' 0));  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,GetVariableBitrate,The following statement contains a magic number: return (int)(_FileSize * 8.0 / (_Duration.Minutes * 60.0 + _Duration.Seconds + _Duration.Milliseconds / 1000.0) / 1000.0);  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,GetVariableBitrate,The following statement contains a magic number: return (int)(_FileSize * 8.0 / (_Duration.Minutes * 60.0 + _Duration.Seconds + _Duration.Milliseconds / 1000.0) / 1000.0);  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,GetVariableBitrate,The following statement contains a magic number: return (int)(_FileSize * 8.0 / (_Duration.Minutes * 60.0 + _Duration.Seconds + _Duration.Milliseconds / 1000.0) / 1000.0);  
Magic Number,Chrismo.TagMotion,Song,C:\repos\phlegma_TagMotion\TagMotion\File.cs,GetVariableBitrate,The following statement contains a magic number: return (int)(_FileSize * 8.0 / (_Duration.Minutes * 60.0 + _Duration.Seconds + _Duration.Milliseconds / 1000.0) / 1000.0);  
Magic Number,Chrismo.TagMotion,File,C:\repos\phlegma_TagMotion\TagMotion\File.cs,Rename,The following statement contains a magic number: while (tNewFileName.Length > 250)  	tNewFileName = tNewFileName.Substring (0' tNewFileName.Length - 1);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,UpdateForeColor,The following statement contains a magic number: if (_Filtered)  	_Node.ForeColor = Color.PaleGoldenrod;  else  	_Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 50' 0) : Color.FromArgb (100' 0' 0));  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,UpdateForeColor,The following statement contains a magic number: if (_Filtered)  	_Node.ForeColor = Color.PaleGoldenrod;  else  	_Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 50' 0) : Color.FromArgb (100' 0' 0));  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,UpdateForeColor,The following statement contains a magic number: _Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 50' 0) : Color.FromArgb (100' 0' 0));  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,UpdateForeColor,The following statement contains a magic number: _Node.ForeColor = (this.HasValidTags ? Color.FromArgb (0' 50' 0) : Color.FromArgb (100' 0' 0));  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,ReadDirectory,The following statement contains a magic number: foreach (string tPath in tPaths) {  	Info tInfo = new Info (tPath);  	this.FillInfoProperties (tInfo);  	_Infos.Add (tInfo);  	_Node.Nodes [2].Nodes.Add (tInfo.Node);  	tInfo.Node.Text = tInfo.Node.Text.Substring (this.Path.Length + 1);  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,ReadDirectory,The following statement contains a magic number: _Node.Nodes [2].Nodes.Add (tInfo.Node);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,ReadDirectory,The following statement contains a magic number: _Node.Nodes [2].Text += _Infos.Count;  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,ReadDirectory,The following statement contains a magic number: _Node.Nodes [2].Expand ();  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: CDToc [0].Second = 2;  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 0; i < _Songs.Count; i++) {  	tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  	_QueryPostfix += "+" + string.Format ("{0}"' tOffset);  	tDuration += _Songs [i].DurationAsTimeSpan;  	CDToc [i + 1].Minute = tDuration.Hours * 60 + tDuration.Minutes;  	CDToc [i + 1].Second = (int)(tDuration.Seconds + tDuration.Milliseconds / 1000.0);  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 0; i < _Songs.Count; i++) {  	tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  	_QueryPostfix += "+" + string.Format ("{0}"' tOffset);  	tDuration += _Songs [i].DurationAsTimeSpan;  	CDToc [i + 1].Minute = tDuration.Hours * 60 + tDuration.Minutes;  	CDToc [i + 1].Second = (int)(tDuration.Seconds + tDuration.Milliseconds / 1000.0);  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 0; i < _Songs.Count; i++) {  	tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  	_QueryPostfix += "+" + string.Format ("{0}"' tOffset);  	tDuration += _Songs [i].DurationAsTimeSpan;  	CDToc [i + 1].Minute = tDuration.Hours * 60 + tDuration.Minutes;  	CDToc [i + 1].Second = (int)(tDuration.Seconds + tDuration.Milliseconds / 1000.0);  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 0; i < _Songs.Count; i++) {  	tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  	_QueryPostfix += "+" + string.Format ("{0}"' tOffset);  	tDuration += _Songs [i].DurationAsTimeSpan;  	CDToc [i + 1].Minute = tDuration.Hours * 60 + tDuration.Minutes;  	CDToc [i + 1].Second = (int)(tDuration.Seconds + tDuration.Milliseconds / 1000.0);  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 0; i < _Songs.Count; i++) {  	tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  	_QueryPostfix += "+" + string.Format ("{0}"' tOffset);  	tDuration += _Songs [i].DurationAsTimeSpan;  	CDToc [i + 1].Minute = tDuration.Hours * 60 + tDuration.Minutes;  	CDToc [i + 1].Second = (int)(tDuration.Seconds + tDuration.Milliseconds / 1000.0);  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: tOffset = (((tDuration.Minutes * 60) + tDuration.Seconds) * 75) + tDuration.Milliseconds / 10;  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: CDToc [i + 1].Minute = tDuration.Hours * 60 + tDuration.Minutes;  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: CDToc [i + 1].Second = (int)(tDuration.Seconds + tDuration.Milliseconds / 1000.0);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 0; i < _Songs.Count; i++)  	n += (int)CDDBSum ((CDToc [i].Minute * 60) + CDToc [i].Second);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: n += (int)CDDBSum ((CDToc [i].Minute * 60) + CDToc [i].Second);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: t = (int)((CDToc [_Songs.Count].Minute * 60) + CDToc [_Songs.Count].Second) - ((CDToc [0].Minute * 60) + CDToc [0].Second);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: t = (int)((CDToc [_Songs.Count].Minute * 60) + CDToc [_Songs.Count].Second) - ((CDToc [0].Minute * 60) + CDToc [0].Second);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,GetDiscID,The following statement contains a magic number: for (int i = 3; i >= 0; i--)  	tDiscID += tIDString [i];  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,CDDBSum,The following statement contains a magic number: while (n > 0) {  	tReturn = tReturn + (ulong)(n % 10);  	n /= 10;  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,CDDBSum,The following statement contains a magic number: while (n > 0) {  	tReturn = tReturn + (ulong)(n % 10);  	n /= 10;  }  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,CDDBSum,The following statement contains a magic number: tReturn = tReturn + (ulong)(n % 10);  
Magic Number,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,CDDBSum,The following statement contains a magic number: n /= 10;  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1073741824) {  	Decimal size = Decimal.Divide (pBytes' 1073741824);  	sBytes = String.Format ("{0:##.##} GB"' size);  }  else if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1048576) {  	Decimal size = Decimal.Divide (pBytes' 1048576);  	sBytes = String.Format ("{0:##.##} MB"' size);  }  else if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes >= 1024) {  	Decimal size = Decimal.Divide (pBytes' 1024);  	sBytes = String.Format ("{0:##.##} KB"' size);  }  else if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,Chrismo.TagMotion,Utilities,C:\repos\phlegma_TagMotion\TagMotion\Utilities.cs,GetSizeAsString,The following statement contains a magic number: if (pBytes > 0 & pBytes < 1024) {  	Decimal size = pBytes;  	sBytes = String.Format ("{0:##.##} Bytes"' size);  }  else  	sBytes = "0 Bytes";  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,SetStreamLength,The following statement contains a magic number: duration = TimeSpan.FromSeconds (((double)this.stream_length) * 8.0 / ((double)this.audiobitrate));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer.Count < 3)  	return false;  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  			// 0xFFF  			try {  				BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  				// 12 bits sync header   				int sync = bits.ReadInt32 (12);  				// 1 bit mpeg 2/4  				int id = bits.ReadInt32 (1);  				// 2 bits layer  				int layer = bits.ReadInt32 (2);  				// 1 bit protection absent    				int protectionabsent = bits.ReadInt32 (1);  				// 2 bits profile object type  				int pot = bits.ReadInt32 (2);  				// 4 bits sampling frequency index                              				int samplerateindex = bits.ReadInt32 (4);  				if (samplerateindex >= sample_rates.Length)  					return false;  				long samplerate = sample_rates [samplerateindex];  				// 1 bit private bit  				bits.ReadInt32 (1);  				// 3 bits channel configuration  				int channelconfigindex = bits.ReadInt32 (3);  				if (channelconfigindex >= channels.Length)  					return false;  				// 4 copyright bits  				int copyrights = bits.ReadInt32 (4);  				// 13 bits frame length  				long framelength = bits.ReadInt32 (13);  				// double check framelength  				if (framelength < 7)  					return false;  				// 11 bits buffer fullness  				int bufferfullness = bits.ReadInt32 (11);  				// 2 bits number of raw data blocks in frame  				int numberofframes = bits.ReadInt32 (2) + 1;  				long numberofsamples = numberofframes * 1024;  				long bitrate = framelength * 8 * samplerate / numberofsamples;  				header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: file.Seek (position + 3);  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: buffer = buffer.Mid (buffer.Count - 3);  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  		// 0xFFF  		try {  			BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  			// 12 bits sync header   			int sync = bits.ReadInt32 (12);  			// 1 bit mpeg 2/4  			int id = bits.ReadInt32 (1);  			// 2 bits layer  			int layer = bits.ReadInt32 (2);  			// 1 bit protection absent    			int protectionabsent = bits.ReadInt32 (1);  			// 2 bits profile object type  			int pot = bits.ReadInt32 (2);  			// 4 bits sampling frequency index                              			int samplerateindex = bits.ReadInt32 (4);  			if (samplerateindex >= sample_rates.Length)  				return false;  			long samplerate = sample_rates [samplerateindex];  			// 1 bit private bit  			bits.ReadInt32 (1);  			// 3 bits channel configuration  			int channelconfigindex = bits.ReadInt32 (3);  			if (channelconfigindex >= channels.Length)  				return false;  			// 4 copyright bits  			int copyrights = bits.ReadInt32 (4);  			// 13 bits frame length  			long framelength = bits.ReadInt32 (13);  			// double check framelength  			if (framelength < 7)  				return false;  			// 11 bits buffer fullness  			int bufferfullness = bits.ReadInt32 (11);  			// 2 bits number of raw data blocks in frame  			int numberofframes = bits.ReadInt32 (2) + 1;  			long numberofsamples = numberofframes * 1024;  			long bitrate = framelength * 8 * samplerate / numberofsamples;  			header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] >= 0xF0)  	// 0xFFF  	try {  		BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  		// 12 bits sync header   		int sync = bits.ReadInt32 (12);  		// 1 bit mpeg 2/4  		int id = bits.ReadInt32 (1);  		// 2 bits layer  		int layer = bits.ReadInt32 (2);  		// 1 bit protection absent    		int protectionabsent = bits.ReadInt32 (1);  		// 2 bits profile object type  		int pot = bits.ReadInt32 (2);  		// 4 bits sampling frequency index                              		int samplerateindex = bits.ReadInt32 (4);  		if (samplerateindex >= sample_rates.Length)  			return false;  		long samplerate = sample_rates [samplerateindex];  		// 1 bit private bit  		bits.ReadInt32 (1);  		// 3 bits channel configuration  		int channelconfigindex = bits.ReadInt32 (3);  		if (channelconfigindex >= channels.Length)  			return false;  		// 4 copyright bits  		int copyrights = bits.ReadInt32 (4);  		// 13 bits frame length  		long framelength = bits.ReadInt32 (13);  		// double check framelength  		if (framelength < 7)  			return false;  		// 11 bits buffer fullness  		int bufferfullness = bits.ReadInt32 (11);  		// 2 bits number of raw data blocks in frame  		int numberofframes = bits.ReadInt32 (2) + 1;  		long numberofsamples = numberofframes * 1024;  		long bitrate = framelength * 8 * samplerate / numberofsamples;  		header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: try {  	BitStream bits = new BitStream (buffer.Mid (i' 7).Data);  	// 12 bits sync header   	int sync = bits.ReadInt32 (12);  	// 1 bit mpeg 2/4  	int id = bits.ReadInt32 (1);  	// 2 bits layer  	int layer = bits.ReadInt32 (2);  	// 1 bit protection absent    	int protectionabsent = bits.ReadInt32 (1);  	// 2 bits profile object type  	int pot = bits.ReadInt32 (2);  	// 4 bits sampling frequency index                              	int samplerateindex = bits.ReadInt32 (4);  	if (samplerateindex >= sample_rates.Length)  		return false;  	long samplerate = sample_rates [samplerateindex];  	// 1 bit private bit  	bits.ReadInt32 (1);  	// 3 bits channel configuration  	int channelconfigindex = bits.ReadInt32 (3);  	if (channelconfigindex >= channels.Length)  		return false;  	// 4 copyright bits  	int copyrights = bits.ReadInt32 (4);  	// 13 bits frame length  	long framelength = bits.ReadInt32 (13);  	// double check framelength  	if (framelength < 7)  		return false;  	// 11 bits buffer fullness  	int bufferfullness = bits.ReadInt32 (11);  	// 2 bits number of raw data blocks in frame  	int numberofframes = bits.ReadInt32 (2) + 1;  	long numberofsamples = numberofframes * 1024;  	long bitrate = framelength * 8 * samplerate / numberofsamples;  	header = new AudioHeader (channels [channelconfigindex]' (int)bitrate' (int)samplerate' (int)numberofsamples' numberofframes);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Aac,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\AudioHeader.cs,Find,The following statement contains a magic number: if (framelength < 7)  	return false;  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: Debug.Assert (buffer.Length == 7' "buffer.Length == 7"' "buffer size invalid");  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: if (buffer.Length != 7)  	throw new ArgumentException ("Buffer size must be 7 bytes");  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: bits = new BitArray (buffer.Length * 8);  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++) {  	for (int y = 0; y < 8; y++) {  		bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  	}  }  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++) {  	for (int y = 0; y < 8; y++) {  		bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  	}  }  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++) {  	for (int y = 0; y < 8; y++) {  		bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  	}  }  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  }  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  }  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  }  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,BitStream,The following statement contains a magic number: bits [i * 8 + y] = ((buffer [i] & (1 << (7 - y))) > 0);  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,ReadInt32,The following statement contains a magic number: Debug.Assert (numberOfBits <= 32' "numberOfBits <= 32");  
Magic Number,TagLib.Aac,BitStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aac\BitStream.cs,ReadInt32,The following statement contains a magic number: if (numberOfBits > 32)  	throw new ArgumentException ("Number of bits to read must be <= 32");  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Add the ID3 chunk and ID32 tag to the vector  	if (tag != null) {  		ByteVector tag_data = tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID3 ");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  			data.Add (tag_data);  		}  	}  	// Read the file to determine the current AIFF  	// size and the area tagging is in.  	uint aiff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out aiff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start + 8);  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed update the aiff size.  	if (data.Count - length != 0 && tag_start <= aiff_size) {  		// Depending' if a Tag has been added or removed'   		// the length needs to be adjusted  		if (tag == null) {  			length -= 16;  		}  		else {  			length -= 8;  		}  		Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  	}  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag != null) {  	ByteVector tag_data = tag.Render ();  	if (tag_data.Count > 10) {  		if (tag_data.Count % 2 == 1)  			tag_data.Add (0);  		data.Add ("ID3 ");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  		data.Add (tag_data);  	}  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag != null) {  	ByteVector tag_data = tag.Render ();  	if (tag_data.Count > 10) {  		if (tag_data.Count % 2 == 1)  			tag_data.Add (0);  		data.Add ("ID3 ");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  		data.Add (tag_data);  	}  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag_data.Count > 10) {  	if (tag_data.Count % 2 == 1)  		tag_data.Add (0);  	data.Add ("ID3 ");  	data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  	data.Add (tag_data);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag_data.Count > 10) {  	if (tag_data.Count % 2 == 1)  		tag_data.Add (0);  	data.Add ("ID3 ");  	data.Add (ByteVector.FromUInt ((uint)tag_data.Count' true));  	data.Add (tag_data);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag_data.Count % 2 == 1)  	tag_data.Add (0);  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag_start < 12 || tag_end < tag_start)  	tag_start = tag_end = Length;  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (data.Count - length != 0 && tag_start <= aiff_size) {  	// Depending' if a Tag has been added or removed'   	// the length needs to be adjusted  	if (tag == null) {  		length -= 16;  	}  	else {  		length -= 8;  	}  	Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (data.Count - length != 0 && tag_start <= aiff_size) {  	// Depending' if a Tag has been added or removed'   	// the length needs to be adjusted  	if (tag == null) {  		length -= 16;  	}  	else {  		length -= 8;  	}  	Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (data.Count - length != 0 && tag_start <= aiff_size) {  	// Depending' if a Tag has been added or removed'   	// the length needs to be adjusted  	if (tag == null) {  		length -= 16;  	}  	else {  		length -= 8;  	}  	Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (data.Count - length != 0 && tag_start <= aiff_size) {  	// Depending' if a Tag has been added or removed'   	// the length needs to be adjusted  	if (tag == null) {  		length -= 16;  	}  	else {  		length -= 8;  	}  	Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag == null) {  	length -= 16;  }  else {  	length -= 8;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: if (tag == null) {  	length -= 16;  }  else {  	length -= 8;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: length -= 16;  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: length -= 8;  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Save,The following statement contains a magic number: Insert (ByteVector.FromUInt ((uint)(aiff_size + data.Count - length)' true)' 4' 4);  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,GetTag,The following statement contains a magic number: switch (type) {  case TagTypes.Id3v2:  	if (tag == null && create) {  		tag = new Id3v2.Tag ();  		tag.Version = 2;  	}  	id32_tag = tag;  	break;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,GetTag,The following statement contains a magic number: if (tag == null && create) {  	tag = new Id3v2.Tag ();  	tag.Version = 2;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,GetTag,The following statement contains a magic number: tag.Version = 2;  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: if (ReadBlock (4) != FileIdentifier)  	throw new CorruptFileException ("File does not begin with AIFF identifier");  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: aiff_size = ReadBlock (4).ToUInt (true);  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: Seek (sound_chunk_pos + 4);  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: if (id3_chunk_pos > -1) {  	if (read_tags && tag == null) {  		tag = new Id3v2.Tag (this' id3_chunk_pos + 8);  	}  	// Get the length of the tag out of the ID3 chunk  	Seek (id3_chunk_pos + 4);  	uint tag_size = ReadBlock (4).ToUInt (true) + 8;  	tag_start = InvariantStartPosition = id3_chunk_pos;  	tag_end = InvariantEndPosition = tag_start + tag_size;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: if (id3_chunk_pos > -1) {  	if (read_tags && tag == null) {  		tag = new Id3v2.Tag (this' id3_chunk_pos + 8);  	}  	// Get the length of the tag out of the ID3 chunk  	Seek (id3_chunk_pos + 4);  	uint tag_size = ReadBlock (4).ToUInt (true) + 8;  	tag_start = InvariantStartPosition = id3_chunk_pos;  	tag_end = InvariantEndPosition = tag_start + tag_size;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: if (id3_chunk_pos > -1) {  	if (read_tags && tag == null) {  		tag = new Id3v2.Tag (this' id3_chunk_pos + 8);  	}  	// Get the length of the tag out of the ID3 chunk  	Seek (id3_chunk_pos + 4);  	uint tag_size = ReadBlock (4).ToUInt (true) + 8;  	tag_start = InvariantStartPosition = id3_chunk_pos;  	tag_end = InvariantEndPosition = tag_start + tag_size;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: if (id3_chunk_pos > -1) {  	if (read_tags && tag == null) {  		tag = new Id3v2.Tag (this' id3_chunk_pos + 8);  	}  	// Get the length of the tag out of the ID3 chunk  	Seek (id3_chunk_pos + 4);  	uint tag_size = ReadBlock (4).ToUInt (true) + 8;  	tag_start = InvariantStartPosition = id3_chunk_pos;  	tag_end = InvariantEndPosition = tag_start + tag_size;  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: if (read_tags && tag == null) {  	tag = new Id3v2.Tag (this' id3_chunk_pos + 8);  }  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: tag = new Id3v2.Tag (this' id3_chunk_pos + 8);  
Magic Number,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,Read,The following statement contains a magic number: Seek (id3_chunk_pos + 4);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: channels = data.Mid (8' 2).ToUShort (true);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: channels = data.Mid (8' 2).ToUShort (true);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: total_frames = data.Mid (10' 4).ToULong (true);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: total_frames = data.Mid (10' 4).ToULong (true);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: bits_per_sample = data.Mid (14' 2).ToUShort (true);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: bits_per_sample = data.Mid (14' 2).ToUShort (true);  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 44100;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0E) {  	sample_rate = 44100;  }  else if (sample_rate_indicator == 0x0D) {  	sample_rate = 22050;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 11025;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0E) {  	sample_rate = 44100;  }  else if (sample_rate_indicator == 0x0D) {  	sample_rate = 22050;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 11025;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0E) {  	sample_rate = 44100;  }  else if (sample_rate_indicator == 0x0D) {  	sample_rate = 22050;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 11025;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 44100;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 22050;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 11025;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 22050;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 11025;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 22050;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0C) {  	sample_rate = 11025;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 11025;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0E) {  	sample_rate = 48000;  }  else if (sample_rate_indicator == 0x0D) {  	sample_rate = 24000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0E) {  	sample_rate = 48000;  }  else if (sample_rate_indicator == 0x0D) {  	sample_rate = 24000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 48000;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 24000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 24000;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 32000;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 16000;  }  else if (sample_rate_indicator == 0x0B) {  	sample_rate = 8000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 32000;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 16000;  }  else if (sample_rate_indicator == 0x0B) {  	sample_rate = 8000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 32000;  }  else if (sample_rate_indicator == 0x0C) {  	sample_rate = 16000;  }  else if (sample_rate_indicator == 0x0B) {  	sample_rate = 8000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 32000;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0C) {  	sample_rate = 16000;  }  else if (sample_rate_indicator == 0x0B) {  	sample_rate = 8000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0C) {  	sample_rate = 16000;  }  else if (sample_rate_indicator == 0x0B) {  	sample_rate = 8000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 16000;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0B) {  	sample_rate = 8000;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 8000;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0D) {  	sample_rate = 22255;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 22255;  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (sample_rate_indicator == 0x0C) {  	sample_rate = 11127;  }  
Magic Number,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 11127;  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: version = data.Mid (8' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: version = data.Mid (8' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: tag_size = data.Mid (12' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: tag_size = data.Mid (12' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: item_count = data.Mid (16' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: item_count = data.Mid (16' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: flags = (FooterFlags)data.Mid (20' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Footer,The following statement contains a magic number: flags = (FooterFlags)data.Mid (20' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Footer.cs,Render,The following statement contains a magic number: v.Add (ByteVector.FromUInt (2000' false));  
Magic Number,TagLib.Ape,Item,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Item.cs,Parse,The following statement contains a magic number: if (data.Count < offset + 11)  	throw new CorruptFileException ("Not enough data for APE Item");  
Magic Number,TagLib.Ape,Item,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Item.cs,Parse,The following statement contains a magic number: Type = (ItemType)((flags >> 1) & 3);  
Magic Number,TagLib.Ape,Item,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Item.cs,Parse,The following statement contains a magic number: key = data.ToString (StringType.UTF8' offset + 8' pos - offset - 8);  
Magic Number,TagLib.Ape,Item,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Item.cs,Parse,The following statement contains a magic number: key = data.ToString (StringType.UTF8' offset + 8' pos - offset - 8);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = data.Mid (4' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = data.Mid (4' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: compression_level = (CompressionLevel)data.Mid (52' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: compression_level = (CompressionLevel)data.Mid (52' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: blocks_per_frame = data.Mid (56' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: blocks_per_frame = data.Mid (56' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: final_frame_blocks = data.Mid (60' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: final_frame_blocks = data.Mid (60' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: total_frames = data.Mid (64' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: total_frames = data.Mid (64' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: bits_per_sample = data.Mid (68' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: bits_per_sample = data.Mid (68' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: channels = data.Mid (70' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: channels = data.Mid (70' 2).ToUShort (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = data.Mid (72' 4).ToUInt (false);  
Magic Number,TagLib.Ape,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = data.Mid (72' 4).ToUInt (false);  
Magic Number,TagLib.Ape,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Tag.cs,Parse,The following statement contains a magic number: try {  	// 11 bytes is the minimum size for an APE item  	for (uint i = 0; i < footer.ItemCount && pos <= data.Count - 11; i++) {  		Item item = new Item (data' pos);  		SetItem (item);  		pos += item.Size;  	}  }  catch (CorruptFileException) {  	// A corrupt item was encountered' considered  	// the tag finished with what has been read.  }  
Magic Number,TagLib.Ape,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ape\Tag.cs,Parse,The following statement contains a magic number: for (uint i = 0; i < footer.ItemCount && pos <= data.Count - 11; i++) {  	Item item = new Item (data' pos);  	SetItem (item);  	pos += item.Size;  }  
Magic Number,TagLib.Asf,ContentDescriptionObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\ContentDescriptionObject.cs,ContentDescriptionObject,The following statement contains a magic number: if (OriginalSize < 34)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,ExtendedContentDescriptionObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\ExtendedContentDescriptionObject.cs,ExtendedContentDescriptionObject,The following statement contains a magic number: if (OriginalSize < 26)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\File.cs,ReadWord,The following statement contains a magic number: return ReadBlock (2).ToUShort (false);  
Magic Number,TagLib.Asf,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\File.cs,ReadDWord,The following statement contains a magic number: return ReadBlock (4).ToUInt (false);  
Magic Number,TagLib.Asf,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\File.cs,ReadQWord,The following statement contains a magic number: return ReadBlock (8).ToULong (false);  
Magic Number,TagLib.Asf,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\File.cs,ReadGuid,The following statement contains a magic number: return new System.Guid (ReadBlock (16).Data);  
Magic Number,TagLib.Asf,FilePropertiesObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\FilePropertiesObject.cs,FilePropertiesObject,The following statement contains a magic number: if (OriginalSize < 104)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,HeaderExtensionObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderExtensionObject.cs,HeaderExtensionObject,The following statement contains a magic number: if (file.ReadWord () != 6)  	throw new CorruptFileException ("Invalid reserved WORD. Expected '6'.");  
Magic Number,TagLib.Asf,HeaderExtensionObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderExtensionObject.cs,HeaderExtensionObject,The following statement contains a magic number: position += 0x170 / 8;  
Magic Number,TagLib.Asf,HeaderExtensionObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderExtensionObject.cs,Render,The following statement contains a magic number: output.Insert (0' RenderWord (6));  
Magic Number,TagLib.Asf,HeaderObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderObject.cs,HeaderObject,The following statement contains a magic number: if (OriginalSize < 26)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,HeaderObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderObject.cs,HeaderObject,The following statement contains a magic number: reserved = file.ReadBlock (2);  
Magic Number,TagLib.Asf,HeaderObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\HeaderObject.cs,Render,The following statement contains a magic number: if (size_diff != 0) {  	PaddingObject obj = new PaddingObject ((uint)(size_diff > 0 ? 4096 : -size_diff));  	output.Add (obj.Render ());  	child_count++;  }  
Magic Number,TagLib.Asf,MetadataLibraryObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\MetadataLibraryObject.cs,MetadataLibraryObject,The following statement contains a magic number: if (OriginalSize < 26)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,Object,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Object.cs,Object,The following statement contains a magic number: if (position < 0 || position > file.Length - 24)  	throw new ArgumentOutOfRangeException ("position");  
Magic Number,TagLib.Asf,PaddingObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\PaddingObject.cs,PaddingObject,The following statement contains a magic number: if (OriginalSize < 24)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,PaddingObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\PaddingObject.cs,Render,The following statement contains a magic number: return Render (new ByteVector ((int)(size - 24)));  
Magic Number,TagLib.Asf,StreamPropertiesObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\StreamPropertiesObject.cs,StreamPropertiesObject,The following statement contains a magic number: if (OriginalSize < 78)  	throw new CorruptFileException ("Object size too small.");  
Magic Number,TagLib.Asf,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Tag.cs,PictureFromData,The following statement contains a magic number: if (data.Count < 9)  	return null;  
Magic Number,TagLib.Asf,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Tag.cs,PictureFromData,The following statement contains a magic number: offset += 4;  
Magic Number,TagLib.Asf,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Tag.cs,PictureFromData,The following statement contains a magic number: offset = found + 2;  
Magic Number,TagLib.Asf,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Tag.cs,PictureFromData,The following statement contains a magic number: found = data.Find (ByteVector.TextDelimiter (StringType.UTF16LE)' offset' 2);  
Magic Number,TagLib.Asf,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\Tag.cs,PictureFromData,The following statement contains a magic number: offset = found + 2;  
Magic Number,TagLib.Asf,UnknownObject,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Asf\UnknownObject.cs,UnknownObject,The following statement contains a magic number: data = file.ReadBlock ((int)(OriginalSize - 24));  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,Find,The following statement contains a magic number: for (int i = 0; i < 256; ++i)  	last_occurrence [i] = pattern.Count;  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,RFind,The following statement contains a magic number: for (int i = 0; i < 256; ++i)  	first_occurrence [i] = pattern.Count;  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ToUInt,The following statement contains a magic number: for (int i = 0; i <= last; i++) {  	int offset = mostSignificantByteFirst ? last - i : i;  	sum |= (uint)this [i] << (offset * 8);  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ToUInt,The following statement contains a magic number: sum |= (uint)this [i] << (offset * 8);  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ToUShort,The following statement contains a magic number: for (int i = 0; i <= last; i++) {  	int offset = mostSignificantByteFirst ? last - i : i;  	sum |= (ushort)(this [i] << (offset * 8));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ToUShort,The following statement contains a magic number: sum |= (ushort)(this [i] << (offset * 8));  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ToULong,The following statement contains a magic number: for (int i = 0; i <= last; i++) {  	int offset = mostSignificantByteFirst ? last - i : i;  	sum |= (ulong)this [i] << (offset * 8);  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,ToULong,The following statement contains a magic number: sum |= (ulong)this [i] << (offset * 8);  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUInt,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int offset = mostSignificantByteFirst ? 3 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUInt,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int offset = mostSignificantByteFirst ? 3 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUInt,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int offset = mostSignificantByteFirst ? 3 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUInt,The following statement contains a magic number: vector.Add ((byte)(value >> (offset * 8) & 0xFF));  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUShort,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	int offset = mostSignificantByteFirst ? 1 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUShort,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	int offset = mostSignificantByteFirst ? 1 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromUShort,The following statement contains a magic number: vector.Add ((byte)(value >> (offset * 8) & 0xFF));  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromULong,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	int offset = mostSignificantByteFirst ? 7 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromULong,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	int offset = mostSignificantByteFirst ? 7 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromULong,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	int offset = mostSignificantByteFirst ? 7 - i : i;  	vector.Add ((byte)(value >> (offset * 8) & 0xFF));  }  
Magic Number,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,FromULong,The following statement contains a magic number: vector.Add ((byte)(value >> (offset * 8) & 0xFF));  
Magic Number,TagLib,Genres,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Genres.cs,AudioToIndex,The following statement contains a magic number: return 255;  
Magic Number,TagLib,Genres,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Genres.cs,VideoToIndex,The following statement contains a magic number: return 255;  
Magic Number,TagLib,Genres,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Genres.cs,StringToByte,The following statement contains a magic number: if (text != null && text.Length > 2 && text [0] == '(' && (last_pos = text.IndexOf (')')) != -1 && byte.TryParse (text.Substring (1' last_pos - 1)' out value))  	return value;  
Magic Number,TagLib,Genres,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Genres.cs,StringToByte,The following statement contains a magic number: return 255;  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')) {  	mimetype = "image/png";  	ext = "png";  }  else if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')) {  	mimetype = "image/png";  	ext = "png";  }  else if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')) {  	mimetype = "image/png";  	ext = "png";  }  else if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')) {  	mimetype = "image/png";  	ext = "png";  }  else if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')) {  	mimetype = "image/png";  	ext = "png";  }  else if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 4 && (Data [1] == 'P' && Data [2] == 'N' && Data [3] == 'G')) {  	mimetype = "image/png";  	ext = "png";  }  else if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 3 && (Data [0] == 'G' && Data [1] == 'I' && Data [2] == 'F')) {  	mimetype = "image/gif";  	ext = "gif";  }  else if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Picture.cs,FillInMimeFromData,The following statement contains a magic number: if (Data.Count >= 2 && (Data [0] == 'B' && Data [1] == 'M')) {  	mimetype = "image/bmp";  	ext = "bmp";  }  
Magic Number,TagLib.Flac,BlockHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\BlockHeader.cs,BlockHeader,The following statement contains a magic number: block_size = data.Mid (1' 3).ToUInt ();  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The following statement contains a magic number: try {  	// Update the tags at the beginning of the file.  	long metadata_start = StartTag.Write ();  	long metadata_end;  	// Get all the blocks' but don't read the data for ones  	// we're filling with stored data.  	IList<Block> old_blocks = ReadBlocks (ref metadata_start' out metadata_end' BlockMode.Blacklist' BlockType.XiphComment' BlockType.Picture);  	// Create new vorbis comments is they don't exist.  	GetTag (TagTypes.Xiph' true);  	// Create new blocks and add the basics.  	List<Block> new_blocks = new List<Block> ();  	new_blocks.Add (old_blocks [0]);  	// Add blocks we don't deal with from the file.  	foreach (Block block in old_blocks)  		if (block.Type != BlockType.StreamInfo && block.Type != BlockType.XiphComment && block.Type != BlockType.Picture && block.Type != BlockType.Padding)  			new_blocks.Add (block);  	new_blocks.Add (new Block (BlockType.XiphComment' (GetTag (TagTypes.Xiph' true) as Ogg.XiphComment).Render (false)));  	foreach (IPicture picture in metadata.Pictures) {  		if (picture == null)  			continue;  		new_blocks.Add (new Block (BlockType.Picture' new Picture (picture).Render ()));  	}  	// Get the length of the blocks.  	long length = 0;  	foreach (Block block in new_blocks)  		length += block.TotalSize;  	// Find the padding size to avoid trouble. If that fails  	// make some.  	long padding_size = metadata_end - metadata_start - BlockHeader.Size - length;  	if (padding_size < 0)  		padding_size = 1024 * 4;  	// Add a padding block.  	if (padding_size != 0)  		new_blocks.Add (new Block (BlockType.Padding' new ByteVector ((int)padding_size)));  	// Render the blocks.  	ByteVector block_data = new ByteVector ();  	for (int i = 0; i < new_blocks.Count; i++)  		block_data.Add (new_blocks [i].Render (i == new_blocks.Count - 1));  	// Update the blocks.  	Insert (block_data' metadata_start' metadata_end - metadata_start);  	// Update the tags at the end of the file.  	EndTag.Write ();  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The following statement contains a magic number: try {  	// Update the tags at the beginning of the file.  	long metadata_start = StartTag.Write ();  	long metadata_end;  	// Get all the blocks' but don't read the data for ones  	// we're filling with stored data.  	IList<Block> old_blocks = ReadBlocks (ref metadata_start' out metadata_end' BlockMode.Blacklist' BlockType.XiphComment' BlockType.Picture);  	// Create new vorbis comments is they don't exist.  	GetTag (TagTypes.Xiph' true);  	// Create new blocks and add the basics.  	List<Block> new_blocks = new List<Block> ();  	new_blocks.Add (old_blocks [0]);  	// Add blocks we don't deal with from the file.  	foreach (Block block in old_blocks)  		if (block.Type != BlockType.StreamInfo && block.Type != BlockType.XiphComment && block.Type != BlockType.Picture && block.Type != BlockType.Padding)  			new_blocks.Add (block);  	new_blocks.Add (new Block (BlockType.XiphComment' (GetTag (TagTypes.Xiph' true) as Ogg.XiphComment).Render (false)));  	foreach (IPicture picture in metadata.Pictures) {  		if (picture == null)  			continue;  		new_blocks.Add (new Block (BlockType.Picture' new Picture (picture).Render ()));  	}  	// Get the length of the blocks.  	long length = 0;  	foreach (Block block in new_blocks)  		length += block.TotalSize;  	// Find the padding size to avoid trouble. If that fails  	// make some.  	long padding_size = metadata_end - metadata_start - BlockHeader.Size - length;  	if (padding_size < 0)  		padding_size = 1024 * 4;  	// Add a padding block.  	if (padding_size != 0)  		new_blocks.Add (new Block (BlockType.Padding' new ByteVector ((int)padding_size)));  	// Render the blocks.  	ByteVector block_data = new ByteVector ();  	for (int i = 0; i < new_blocks.Count; i++)  		block_data.Add (new_blocks [i].Render (i == new_blocks.Count - 1));  	// Update the blocks.  	Insert (block_data' metadata_start' metadata_end - metadata_start);  	// Update the tags at the end of the file.  	EndTag.Write ();  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The following statement contains a magic number: if (padding_size < 0)  	padding_size = 1024 * 4;  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The following statement contains a magic number: if (padding_size < 0)  	padding_size = 1024 * 4;  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The following statement contains a magic number: padding_size = 1024 * 4;  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,Save,The following statement contains a magic number: padding_size = 1024 * 4;  
Magic Number,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,ReadBlocks,The following statement contains a magic number: end = start = start_position + 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: if (data.Count < 32)  	throw new CorruptFileException ("Data must be at least 32 bytes long");  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: type = (PictureType)data.Mid (pos' 4).ToUInt ();  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: width = (int)data.Mid (pos' 4).ToUInt ();  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: height = (int)data.Mid (pos' 4).ToUInt ();  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: color_depth = (int)data.Mid (pos' 4).ToUInt ();  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: indexed_colors = (int)data.Mid (pos' 4).ToUInt ();  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,Picture,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\Picture.cs,Picture,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Flac,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (data.Count < 18)  	throw new CorruptFileException ("Not enough data in FLAC header.");  
Magic Number,TagLib.Flac,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\StreamHeader.cs,StreamHeader,The following statement contains a magic number: this.flags = data.Mid (10' 4).ToUInt (true);  
Magic Number,TagLib.Flac,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\StreamHeader.cs,StreamHeader,The following statement contains a magic number: this.flags = data.Mid (10' 4).ToUInt (true);  
Magic Number,TagLib.Flac,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\StreamHeader.cs,StreamHeader,The following statement contains a magic number: low_length = data.Mid (14' 4).ToUInt (true);  
Magic Number,TagLib.Flac,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\StreamHeader.cs,StreamHeader,The following statement contains a magic number: low_length = data.Mid (14' 4).ToUInt (true);  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Render,The following statement contains a magic number: data.Add (string_handler.Render (title).Resize (30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Render,The following statement contains a magic number: data.Add (string_handler.Render (artist).Resize (30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Render,The following statement contains a magic number: data.Add (string_handler.Render (album).Resize (30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Render,The following statement contains a magic number: data.Add (string_handler.Render (year).Resize (4));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Render,The following statement contains a magic number: data.Add (string_handler.Render (comment).Resize (28));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: title = string_handler.Parse (data.Mid (3' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: title = string_handler.Parse (data.Mid (3' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: artist = string_handler.Parse (data.Mid (33' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: artist = string_handler.Parse (data.Mid (33' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: album = string_handler.Parse (data.Mid (63' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: album = string_handler.Parse (data.Mid (63' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: year = string_handler.Parse (data.Mid (93' 4));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: year = string_handler.Parse (data.Mid (93' 4));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: if (data [125] == 0 && data [126] != 0) {  	// ID3v1.1 detected  	comment = string_handler.Parse (data.Mid (97' 28));  	track = data [126];  }  else {  	comment = string_handler.Parse (data.Mid (97' 30));  }  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: comment = string_handler.Parse (data.Mid (97' 28));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: comment = string_handler.Parse (data.Mid (97' 28));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: track = data [126];  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: comment = string_handler.Parse (data.Mid (97' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: comment = string_handler.Parse (data.Mid (97' 30));  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Parse,The following statement contains a magic number: genre = data [127];  
Magic Number,TagLib.Id3v1,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v1\Tag.cs,Clear,The following statement contains a magic number: genre = 255;  
Magic Number,TagLib.Id3v2,ExtendedHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\ExtendedHeader.cs,Parse,The following statement contains a magic number: size = SynchData.ToUInt (data.Mid (0' 4));  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: major_version = data [3];  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: revision_number = data [4];  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: flags = (HeaderFlags)data [5];  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (major_version == 2 && ((int)flags & 127) != 0)  	throw new CorruptFileException ("Invalid flags set on version 2 tag.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (major_version == 2 && ((int)flags & 127) != 0)  	throw new CorruptFileException ("Invalid flags set on version 2 tag.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (major_version == 3 && ((int)flags & 15) != 0)  	throw new CorruptFileException ("Invalid flags set on version 3 tag.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (major_version == 3 && ((int)flags & 15) != 0)  	throw new CorruptFileException ("Invalid flags set on version 3 tag.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (major_version == 4 && ((int)flags & 7) != 0)  	throw new CorruptFileException ("Invalid flags set on version 4 tag.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (major_version == 4 && ((int)flags & 7) != 0)  	throw new CorruptFileException ("Invalid flags set on version 4 tag.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: for (int i = 6; i < 10; i++)  	if (data [i] >= 128)  		throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: for (int i = 6; i < 10; i++)  	if (data [i] >= 128)  		throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: for (int i = 6; i < 10; i++)  	if (data [i] >= 128)  		throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: if (data [i] >= 128)  	throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: tag_size = SynchData.ToUInt (data.Mid (6' 4));  
Magic Number,TagLib.Id3v2,Footer,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Footer.cs,Footer,The following statement contains a magic number: tag_size = SynchData.ToUInt (data.Mid (6' 4));  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Frame,The following statement contains a magic number: if (data.Count < ((version < 3) ? 3 : 4))  	throw new ArgumentException ("Data contains an incomplete identifier."' "data");  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Frame,The following statement contains a magic number: if (data.Count < ((version < 3) ? 3 : 4))  	throw new ArgumentException ("Data contains an incomplete identifier."' "data");  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Frame,The following statement contains a magic number: if (data.Count < ((version < 3) ? 3 : 4))  	throw new ArgumentException ("Data contains an incomplete identifier."' "data");  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Render,The following statement contains a magic number: if (version < 4)  	Flags &= ~(FrameFlags.DataLengthIndicator | FrameFlags.Unsynchronisation);  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Render,The following statement contains a magic number: if (version < 3)  	Flags &= ~(FrameFlags.Compression | FrameFlags.Encryption | FrameFlags.FileAlterPreservation | FrameFlags.GroupingIdentity | FrameFlags.ReadOnly | FrameFlags.TagAlterPreservation);  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,CorrectEncoding,The following statement contains a magic number: return (version < 4 && type == StringType.UTF8) ? StringType.UTF16 : type;  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,FieldData,The following statement contains a magic number: if ((Flags & (FrameFlags.Compression | FrameFlags.DataLengthIndicator)) != 0) {  	data_offset += 4;  	data_length -= 4;  }  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,FieldData,The following statement contains a magic number: if ((Flags & (FrameFlags.Compression | FrameFlags.DataLengthIndicator)) != 0) {  	data_offset += 4;  	data_length -= 4;  }  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,FieldData,The following statement contains a magic number: data_offset += 4;  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,FieldData,The following statement contains a magic number: data_length -= 4;  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Clone,The following statement contains a magic number: return FrameFactory.CreateFrame (Render (4)' ref index' 4' false);  
Magic Number,TagLib.Id3v2,Frame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frame.cs,Clone,The following statement contains a magic number: return FrameFactory.CreateFrame (Render (4)' ref index' 4' false);  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (version < 2 || version > 4)  	throw new CorruptFileException ("Unsupported tag version.");  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (version < 2 || version > 4)  	throw new CorruptFileException ("Unsupported tag version.");  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (data.Count < (version == 2 ? 3 : 4))  	throw new CorruptFileException ("Data must contain at least a frame ID.");  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (data.Count < (version == 2 ? 3 : 4))  	throw new CorruptFileException ("Data must contain at least a frame ID.");  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (data.Count < (version == 2 ? 3 : 4))  	throw new CorruptFileException ("Data must contain at least a frame ID.");  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: switch (version) {  case 2:  	// Set the frame ID -- the first three bytes  	frame_id = ConvertId (data.Mid (0' 3)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 6)  		return;  	frame_size = data.Mid (3' 3).ToUInt ();  	return;  case 3:  	// Set the frame ID -- the first four bytes  	frame_id = ConvertId (data.Mid (0' 4)' version' false);  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	// Store the flags internally as version 2.4.  	frame_size = data.Mid (4' 4).ToUInt ();  	flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  	return;  case 4:  	// Set the frame ID -- the first four bytes  	frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  	// If the full header information was not passed  	// in' do not continue to the steps to parse the  	// frame size and flags.  	if (data.Count < 10)  		return;  	frame_size = SynchData.ToUInt (data.Mid (4' 4));  	flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  	return;  default:  	throw new CorruptFileException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_id = ConvertId (data.Mid (0' 3)' version' false);  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (data.Count < 6)  	return;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_size = data.Mid (3' 3).ToUInt ();  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_size = data.Mid (3' 3).ToUInt ();  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_id = ConvertId (data.Mid (0' 4)' version' false);  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (data.Count < 10)  	return;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_size = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_size = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)(((data [8] << 7) & 0x7000) | ((data [9] >> 4) & 0x000C) | ((data [9] << 1) & 0x0040));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_id = new ReadOnlyByteVector (data.Mid (0' 4));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: if (data.Count < 10)  	return;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_size = SynchData.ToUInt (data.Mid (4' 4));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: frame_size = SynchData.ToUInt (data.Mid (4' 4));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,FrameHeader,The following statement contains a magic number: flags = (FrameFlags)data.Mid (8' 2).ToUShort ();  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The following statement contains a magic number: switch (version) {  case 2:  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size).Mid (1' 3));  	return data;  case 3:  	ushort new_flags = (ushort)((((ushort)flags << 1) & 0xE000) | (((ushort)flags << 4) & 0x00C0) | (((ushort)flags >> 1) & 0x0020));  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort (new_flags));  	return data;  case 4:  	data.Add (id);  	data.Add (SynchData.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort ((ushort)flags));  	return data;  default:  	throw new NotImplementedException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The following statement contains a magic number: switch (version) {  case 2:  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size).Mid (1' 3));  	return data;  case 3:  	ushort new_flags = (ushort)((((ushort)flags << 1) & 0xE000) | (((ushort)flags << 4) & 0x00C0) | (((ushort)flags >> 1) & 0x0020));  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort (new_flags));  	return data;  case 4:  	data.Add (id);  	data.Add (SynchData.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort ((ushort)flags));  	return data;  default:  	throw new NotImplementedException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The following statement contains a magic number: switch (version) {  case 2:  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size).Mid (1' 3));  	return data;  case 3:  	ushort new_flags = (ushort)((((ushort)flags << 1) & 0xE000) | (((ushort)flags << 4) & 0x00C0) | (((ushort)flags >> 1) & 0x0020));  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort (new_flags));  	return data;  case 4:  	data.Add (id);  	data.Add (SynchData.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort ((ushort)flags));  	return data;  default:  	throw new NotImplementedException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The following statement contains a magic number: switch (version) {  case 2:  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size).Mid (1' 3));  	return data;  case 3:  	ushort new_flags = (ushort)((((ushort)flags << 1) & 0xE000) | (((ushort)flags << 4) & 0x00C0) | (((ushort)flags >> 1) & 0x0020));  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort (new_flags));  	return data;  case 4:  	data.Add (id);  	data.Add (SynchData.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort ((ushort)flags));  	return data;  default:  	throw new NotImplementedException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The following statement contains a magic number: switch (version) {  case 2:  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size).Mid (1' 3));  	return data;  case 3:  	ushort new_flags = (ushort)((((ushort)flags << 1) & 0xE000) | (((ushort)flags << 4) & 0x00C0) | (((ushort)flags >> 1) & 0x0020));  	data.Add (id);  	data.Add (ByteVector.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort (new_flags));  	return data;  case 4:  	data.Add (id);  	data.Add (SynchData.FromUInt (frame_size));  	data.Add (ByteVector.FromUShort ((ushort)flags));  	return data;  default:  	throw new NotImplementedException ("Unsupported tag version.");  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Render,The following statement contains a magic number: data.Add (ByteVector.FromUInt (frame_size).Mid (1' 3));  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Size,The following statement contains a magic number: return (uint)(version < 3 ? 6 : 10);  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Size,The following statement contains a magic number: return (uint)(version < 3 ? 6 : 10);  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,Size,The following statement contains a magic number: return (uint)(version < 3 ? 6 : 10);  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if (version >= 4) {  	ReadOnlyByteVector outid = id as ReadOnlyByteVector;  	return outid != null ? outid : new ReadOnlyByteVector (id);  }  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if (id == null || version < 2)  	return null;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if (version == 2)  	for (int i = 0; i < version2_frames.GetLength (0); i++) {  		if (!version2_frames [i' toVersion ? 1 : 0].Equals (id))  			continue;  		return version2_frames [i' toVersion ? 0 : 1];  	}  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if (version == 3)  	for (int i = 0; i < version3_frames.GetLength (0); i++) {  		if (!version3_frames [i' toVersion ? 1 : 0].Equals (id))  			continue;  		return version3_frames [i' toVersion ? 0 : 1];  	}  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if ((id.Count != 4 && version > 2) || (id.Count != 3 && version == 2))  	return null;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if ((id.Count != 4 && version > 2) || (id.Count != 3 && version == 2))  	return null;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if ((id.Count != 4 && version > 2) || (id.Count != 3 && version == 2))  	return null;  
Magic Number,TagLib.Id3v2,FrameHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\FrameHeader.cs,ConvertId,The following statement contains a magic number: if ((id.Count != 4 && version > 2) || (id.Count != 3 && version == 2))  	return null;  
Magic Number,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,ParseFields,The following statement contains a magic number: if (data.Count < 5)  	throw new CorruptFileException ("A picture frame must contain at least 5 bytes.");  
Magic Number,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,ParseRawData,The following statement contains a magic number: if (raw_version > 2) {  	offset = raw_data.Find (ByteVector.TextDelimiter (StringType.Latin1)' pos);  	if (offset < pos)  		return;  	mime_type = raw_data.ToString (StringType.Latin1' pos' offset - pos);  	pos = offset + 1;  }  else {  	ByteVector ext = raw_data.Mid (pos' 3);  	if (ext == "JPG")  		mime_type = "image/jpeg";  	else if (ext == "PNG")  		mime_type = "image/png";  	else  		mime_type = "image/unknown";  	pos += 3;  }  
Magic Number,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,ParseRawData,The following statement contains a magic number: if (raw_version > 2) {  	offset = raw_data.Find (ByteVector.TextDelimiter (StringType.Latin1)' pos);  	if (offset < pos)  		return;  	mime_type = raw_data.ToString (StringType.Latin1' pos' offset - pos);  	pos = offset + 1;  }  else {  	ByteVector ext = raw_data.Mid (pos' 3);  	if (ext == "JPG")  		mime_type = "image/jpeg";  	else if (ext == "PNG")  		mime_type = "image/png";  	else  		mime_type = "image/unknown";  	pos += 3;  }  
Magic Number,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,ParseRawData,The following statement contains a magic number: if (raw_version > 2) {  	offset = raw_data.Find (ByteVector.TextDelimiter (StringType.Latin1)' pos);  	if (offset < pos)  		return;  	mime_type = raw_data.ToString (StringType.Latin1' pos' offset - pos);  	pos = offset + 1;  }  else {  	ByteVector ext = raw_data.Mid (pos' 3);  	if (ext == "JPG")  		mime_type = "image/jpeg";  	else if (ext == "PNG")  		mime_type = "image/png";  	else  		mime_type = "image/unknown";  	pos += 3;  }  
Magic Number,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,ParseRawData,The following statement contains a magic number: pos += 3;  
Magic Number,TagLib.Id3v2,AttachedPictureFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\AttachedPictureFrame.cs,RenderFields,The following statement contains a magic number: if (version == 2) {  	switch (MimeType) {  	case "image/png":  		data.Add ("PNG");  		break;  	case "image/jpeg":  		data.Add ("JPG");  		break;  	default:  		data.Add ("XXX");  		break;  	}  }  else {  	data.Add (ByteVector.FromString (MimeType' StringType.Latin1));  	data.Add (ByteVector.TextDelimiter (StringType.Latin1));  }  
Magic Number,TagLib.Id3v2,CommentsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\CommentsFrame.cs,GetPreferred,The following statement contains a magic number: foreach (Frame frame in tag.GetFrames (FrameType.COMM)) {  	CommentsFrame comm = frame as CommentsFrame;  	if (comm == null)  		continue;  	if (skip_itunes && comm.Description.StartsWith ("iTun"))  		continue;  	bool same_name = comm.Description == description;  	bool same_lang = comm.Language == language;  	if (same_name && same_lang)  		return comm;  	int value = same_lang ? 2 : same_name ? 1 : 0;  	if (value <= best_value)  		continue;  	best_value = value;  	best_frame = comm;  }  
Magic Number,TagLib.Id3v2,CommentsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\CommentsFrame.cs,ParseFields,The following statement contains a magic number: if (data.Count < 4)  	throw new CorruptFileException ("Not enough bytes in field.");  
Magic Number,TagLib.Id3v2,CommentsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\CommentsFrame.cs,ParseFields,The following statement contains a magic number: language = data.ToString (StringType.Latin1' 1' 3);  
Magic Number,TagLib.Id3v2,GeneralEncapsulatedObjectFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\GeneralEncapsulatedObjectFrame.cs,ParseFields,The following statement contains a magic number: if (data.Count < 4)  	throw new CorruptFileException ("An object frame must contain at least 4 bytes.");  
Magic Number,TagLib.Id3v2,PlayCountFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\PlayCountFrame.cs,RenderFields,The following statement contains a magic number: while (data.Count > 4 && data [0] == 0)  	data.RemoveAt (0);  
Magic Number,TagLib.Id3v2,PopularimeterFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\PopularimeterFrame.cs,ParseFields,The following statement contains a magic number: play_count = data.Mid (index + 2).ToULong ();  
Magic Number,TagLib.Id3v2,PrivateFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\PrivateFrame.cs,ParseFields,The following statement contains a magic number: if (l.Count == 2) {  	this.owner = l [0].ToString (StringType.Latin1);  	this.data = l [1];  }  
Magic Number,TagLib.Id3v2,PrivateFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\PrivateFrame.cs,RenderFields,The following statement contains a magic number: if (version < 3)  	throw new NotImplementedException ();  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,ParseFields,The following statement contains a magic number: while (pos <= data.Count - 4) {  	int type = data [pos++];  	unchecked {  		channels [type].VolumeAdjustmentIndex = (short)data.Mid (pos' 2).ToUShort ();  	}  	pos += 2;  	int bytes = BitsToBytes (data [pos++]);  	if (data.Count < pos + bytes)  		throw new CorruptFileException ("Insufficient peak data.");  	channels [type].PeakVolumeIndex = data.Mid (pos' bytes).ToULong ();  	pos += bytes;  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,ParseFields,The following statement contains a magic number: while (pos <= data.Count - 4) {  	int type = data [pos++];  	unchecked {  		channels [type].VolumeAdjustmentIndex = (short)data.Mid (pos' 2).ToUShort ();  	}  	pos += 2;  	int bytes = BitsToBytes (data [pos++]);  	if (data.Count < pos + bytes)  		throw new CorruptFileException ("Insufficient peak data.");  	channels [type].PeakVolumeIndex = data.Mid (pos' bytes).ToULong ();  	pos += bytes;  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,ParseFields,The following statement contains a magic number: while (pos <= data.Count - 4) {  	int type = data [pos++];  	unchecked {  		channels [type].VolumeAdjustmentIndex = (short)data.Mid (pos' 2).ToUShort ();  	}  	pos += 2;  	int bytes = BitsToBytes (data [pos++]);  	if (data.Count < pos + bytes)  		throw new CorruptFileException ("Insufficient peak data.");  	channels [type].PeakVolumeIndex = data.Mid (pos' bytes).ToULong ();  	pos += bytes;  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,ParseFields,The following statement contains a magic number: unchecked {  	channels [type].VolumeAdjustmentIndex = (short)data.Mid (pos' 2).ToUShort ();  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,ParseFields,The following statement contains a magic number: channels [type].VolumeAdjustmentIndex = (short)data.Mid (pos' 2).ToUShort ();  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,ParseFields,The following statement contains a magic number: pos += 2;  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,RenderFields,The following statement contains a magic number: for (byte i = 0; i < 9; i++) {  	if (!channels [i].IsSet)  		continue;  	data.Add (i);  	unchecked {  		data.Add (ByteVector.FromUShort ((ushort)channels [i].VolumeAdjustmentIndex));  	}  	byte bits = 0;  	for (byte j = 0; j < 64; j++)  		if ((channels [i].PeakVolumeIndex & (1UL << j)) != 0)  			bits = (byte)(j + 1);  	data.Add (bits);  	if (bits > 0)  		data.Add (ByteVector.FromULong (channels [i].PeakVolumeIndex).Mid (8 - BitsToBytes (bits)));  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,RenderFields,The following statement contains a magic number: for (byte i = 0; i < 9; i++) {  	if (!channels [i].IsSet)  		continue;  	data.Add (i);  	unchecked {  		data.Add (ByteVector.FromUShort ((ushort)channels [i].VolumeAdjustmentIndex));  	}  	byte bits = 0;  	for (byte j = 0; j < 64; j++)  		if ((channels [i].PeakVolumeIndex & (1UL << j)) != 0)  			bits = (byte)(j + 1);  	data.Add (bits);  	if (bits > 0)  		data.Add (ByteVector.FromULong (channels [i].PeakVolumeIndex).Mid (8 - BitsToBytes (bits)));  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,RenderFields,The following statement contains a magic number: for (byte i = 0; i < 9; i++) {  	if (!channels [i].IsSet)  		continue;  	data.Add (i);  	unchecked {  		data.Add (ByteVector.FromUShort ((ushort)channels [i].VolumeAdjustmentIndex));  	}  	byte bits = 0;  	for (byte j = 0; j < 64; j++)  		if ((channels [i].PeakVolumeIndex & (1UL << j)) != 0)  			bits = (byte)(j + 1);  	data.Add (bits);  	if (bits > 0)  		data.Add (ByteVector.FromULong (channels [i].PeakVolumeIndex).Mid (8 - BitsToBytes (bits)));  }  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,RenderFields,The following statement contains a magic number: for (byte j = 0; j < 64; j++)  	if ((channels [i].PeakVolumeIndex & (1UL << j)) != 0)  		bits = (byte)(j + 1);  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,RenderFields,The following statement contains a magic number: if (bits > 0)  	data.Add (ByteVector.FromULong (channels [i].PeakVolumeIndex).Mid (8 - BitsToBytes (bits)));  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,RenderFields,The following statement contains a magic number: data.Add (ByteVector.FromULong (channels [i].PeakVolumeIndex).Mid (8 - BitsToBytes (bits)));  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,Clone,The following statement contains a magic number: for (int i = 0; i < 9; i++)  	frame.channels [i] = channels [i];  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,BitsToBytes,The following statement contains a magic number: return i % 8 == 0 ? i / 8 : (i - i % 8) / 8 + 1;  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,BitsToBytes,The following statement contains a magic number: return i % 8 == 0 ? i / 8 : (i - i % 8) / 8 + 1;  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,BitsToBytes,The following statement contains a magic number: return i % 8 == 0 ? i / 8 : (i - i % 8) / 8 + 1;  
Magic Number,TagLib.Id3v2,RelativeVolumeFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\RelativeVolumeFrame.cs,BitsToBytes,The following statement contains a magic number: return i % 8 == 0 ? i / 8 : (i - i % 8) / 8 + 1;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: foreach (Frame f in tag) {  	SynchronisedLyricsFrame cf = f as SynchronisedLyricsFrame;  	if (cf == null)  		continue;  	int value = 0;  	if (cf.Language == language)  		value += 4;  	if (cf.Description == description)  		value += 2;  	if (cf.Type == type)  		value += 1;  	if (value == 7)  		return cf;  	if (value <= best_value)  		continue;  	best_value = value;  	best_frame = cf;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: foreach (Frame f in tag) {  	SynchronisedLyricsFrame cf = f as SynchronisedLyricsFrame;  	if (cf == null)  		continue;  	int value = 0;  	if (cf.Language == language)  		value += 4;  	if (cf.Description == description)  		value += 2;  	if (cf.Type == type)  		value += 1;  	if (value == 7)  		return cf;  	if (value <= best_value)  		continue;  	best_value = value;  	best_frame = cf;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: foreach (Frame f in tag) {  	SynchronisedLyricsFrame cf = f as SynchronisedLyricsFrame;  	if (cf == null)  		continue;  	int value = 0;  	if (cf.Language == language)  		value += 4;  	if (cf.Description == description)  		value += 2;  	if (cf.Type == type)  		value += 1;  	if (value == 7)  		return cf;  	if (value <= best_value)  		continue;  	best_value = value;  	best_frame = cf;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: if (cf.Language == language)  	value += 4;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: value += 4;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: if (cf.Description == description)  	value += 2;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: value += 2;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: if (value == 7)  	return cf;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: if (data.Count < 6)  	throw new CorruptFileException ("Not enough bytes in field.");  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: language = data.ToString (StringType.Latin1' 1' 3);  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: timestamp_format = (TimestampFormat)data [4];  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: lyrics_type = (SynchedTextType)data [5];  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: description = data.ToString (encoding' 6' delim_index - 6);  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: description = data.ToString (encoding' 6' delim_index - 6);  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: while (offset + delim.Count + 4 < data.Count) {  	delim_index = data.Find (delim' offset' delim.Count);  	if (delim_index < offset)  		throw new CorruptFileException ("Text delimiter expected.");  	string text = data.ToString (encoding' offset' delim_index - offset);  	offset = delim_index + delim.Count;  	if (offset + 4 > data.Count)  		break;  	l.Add (new SynchedText (data.Mid (offset' 4).ToUInt ()' text));  	offset += 4;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: while (offset + delim.Count + 4 < data.Count) {  	delim_index = data.Find (delim' offset' delim.Count);  	if (delim_index < offset)  		throw new CorruptFileException ("Text delimiter expected.");  	string text = data.ToString (encoding' offset' delim_index - offset);  	offset = delim_index + delim.Count;  	if (offset + 4 > data.Count)  		break;  	l.Add (new SynchedText (data.Mid (offset' 4).ToUInt ()' text));  	offset += 4;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: while (offset + delim.Count + 4 < data.Count) {  	delim_index = data.Find (delim' offset' delim.Count);  	if (delim_index < offset)  		throw new CorruptFileException ("Text delimiter expected.");  	string text = data.ToString (encoding' offset' delim_index - offset);  	offset = delim_index + delim.Count;  	if (offset + 4 > data.Count)  		break;  	l.Add (new SynchedText (data.Mid (offset' 4).ToUInt ()' text));  	offset += 4;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: while (offset + delim.Count + 4 < data.Count) {  	delim_index = data.Find (delim' offset' delim.Count);  	if (delim_index < offset)  		throw new CorruptFileException ("Text delimiter expected.");  	string text = data.ToString (encoding' offset' delim_index - offset);  	offset = delim_index + delim.Count;  	if (offset + 4 > data.Count)  		break;  	l.Add (new SynchedText (data.Mid (offset' 4).ToUInt ()' text));  	offset += 4;  }  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: if (offset + 4 > data.Count)  	break;  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: l.Add (new SynchedText (data.Mid (offset' 4).ToUInt ()' text));  
Magic Number,TagLib.Id3v2,SynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\SynchronizedLyricsFrame.cs,ParseFields,The following statement contains a magic number: offset += 4;  
Magic Number,TagLib.Id3v2,TermsOfUseFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TermsOfUseFrame.cs,ParseFields,The following statement contains a magic number: if (data.Count < 4)  	throw new CorruptFileException ("Not enough bytes in field.");  
Magic Number,TagLib.Id3v2,TermsOfUseFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TermsOfUseFrame.cs,ParseFields,The following statement contains a magic number: language = data.ToString (StringType.Latin1' 1' 3);  
Magic Number,TagLib.Id3v2,TermsOfUseFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TermsOfUseFrame.cs,ParseFields,The following statement contains a magic number: text = data.ToString (encoding' 4' data.Count - 4);  
Magic Number,TagLib.Id3v2,TermsOfUseFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TermsOfUseFrame.cs,ParseFields,The following statement contains a magic number: text = data.ToString (encoding' 4' data.Count - 4);  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (version != 3 || FrameId != FrameType.TDRC)  	return base.Render (version);  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (text.Length < 10 || text [4] != '-' || text [7] != '-')  	return base.Render (version);  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (text.Length < 10 || text [4] != '-' || text [7] != '-')  	return base.Render (version);  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (text.Length < 10 || text [4] != '-' || text [7] != '-')  	return base.Render (version);  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (0' 4)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (5' 2) + text.Substring (8' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (5' 2) + text.Substring (8' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (5' 2) + text.Substring (8' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (5' 2) + text.Substring (8' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (text.Length < 16 || text [10] != 'T' || text [13] != ':')  	return output;  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (text.Length < 16 || text [10] != 'T' || text [13] != ':')  	return output;  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: if (text.Length < 16 || text [10] != 'T' || text [13] != ':')  	return output;  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (11' 2) + text.Substring (14' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (11' 2) + text.Substring (14' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (11' 2) + text.Substring (14' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Render,The following statement contains a magic number: f.Text = new string[] {  	text.Substring (11' 2) + text.Substring (14' 2)  };  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,Get,The following statement contains a magic number: if (ident.Count != 4)  	throw new ArgumentException ("Identifier must be four bytes long."' "ident");  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,ParseRawData,The following statement contains a magic number: if (raw_version > 3 || FrameId == FrameType.TXXX) {  	field_list.AddRange (data.ToStrings (encoding' 1));  }  else if (data.Count > 1 && !data.Mid (1' delim.Count).Equals (delim)) {  	string value = data.ToString (encoding' 1' data.Count - 1);  	// Truncate values containing NULL bytes  	int null_index = value.IndexOf ('\x00');  	if (null_index >= 0) {  		value = value.Substring (0' null_index);  	}  	if (FrameId == FrameType.TCOM || FrameId == FrameType.TEXT || FrameId == FrameType.TOLY || FrameId == FrameType.TOPE || FrameId == FrameType.TPE1 || FrameId == FrameType.TPE2 || FrameId == FrameType.TPE3 || FrameId == FrameType.TPE4) {  		field_list.AddRange (value.Split ('/'));  	}  	else if (FrameId == FrameType.TCON) {  		while (value.Length > 1 && value [0] == '(') {  			int closing = value.IndexOf (')');  			if (closing < 0)  				break;  			string number = value.Substring (1' closing - 1);  			field_list.Add (number);  			value = value.Substring (closing + 1).TrimStart ('/'' ' ');  			string text = Genres.IndexToAudio (number);  			if (text != null && value.StartsWith (text))  				value = value.Substring (text.Length).TrimStart ('/'' ' ');  		}  		if (value.Length > 0)  			field_list.AddRange (value.Split (new char[] {  				'/'  			}));  	}  	else {  		field_list.Add (value);  	}  }  
Magic Number,TagLib.Id3v2,TextInformationFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\TextIdentificationFrame.cs,RenderFields,The following statement contains a magic number: if (version > 3 || txxx) {  	if (txxx) {  		if (text.Length == 0)  			text = new string[] {  				null'  				null  			};  		else if (text.Length == 1)  			text = new string[] {  				text [0]'  				null  			};  	}  	for (int i = 0; i < text.Length; i++) {  		// Since the field list is null  		// delimited' if this is not the first  		// element in the list' append the  		// appropriate delimiter for this  		// encoding.  		if (i != 0)  			v.Add (ByteVector.TextDelimiter (encoding));  		if (text [i] != null)  			v.Add (ByteVector.FromString (text [i]' encoding));  	}  }  else if (FrameId == FrameType.TCON) {  	byte id;  	bool prev_value_indexed = true;  	StringBuilder data = new StringBuilder ();  	foreach (string s in text) {  		if (!prev_value_indexed) {  			data.Append ("/").Append (s);  			continue;  		}  		if (prev_value_indexed = byte.TryParse (s' out id))  			data.AppendFormat (CultureInfo.InvariantCulture' "({0})"' id);  		else  			data.Append (s);  	}  	v.Add (ByteVector.FromString (data.ToString ()' encoding));  }  else {  	v.Add (ByteVector.FromString (string.Join ("/"' text)' encoding));  }  
Magic Number,TagLib.Id3v2,UniqueFileIdentifierFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\UniqueFileIdentifierFrame.cs,ParseFields,The following statement contains a magic number: if (fields.Count != 2)  	return;  
Magic Number,TagLib.Id3v2,UnsynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\UnsynchronisedLyricsFrame.cs,GetPreferred,The following statement contains a magic number: foreach (Frame frame in tag.GetFrames (FrameType.USLT)) {  	UnsynchronisedLyricsFrame uslt = frame as UnsynchronisedLyricsFrame;  	if (uslt == null)  		continue;  	bool same_name = uslt.Description == description;  	bool same_lang = uslt.Language == language;  	if (same_name && same_lang)  		return uslt;  	int value = same_lang ? 2 : same_name ? 1 : 0;  	if (value <= best_value)  		continue;  	best_value = value;  	best_frame = uslt;  }  
Magic Number,TagLib.Id3v2,UnsynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\UnsynchronisedLyricsFrame.cs,ParseFields,The following statement contains a magic number: if (data.Count < 4)  	throw new CorruptFileException ("Not enough bytes in field.");  
Magic Number,TagLib.Id3v2,UnsynchronisedLyricsFrame,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Frames\UnsynchronisedLyricsFrame.cs,ParseFields,The following statement contains a magic number: language = data.ToString (StringType.Latin1' 1' 3);  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: major_version = data [3];  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: revision_number = data [4];  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: flags = (HeaderFlags)data [5];  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (major_version == 2 && ((int)flags & 127) != 0)  	throw new CorruptFileException ("Invalid flags set on version 2 tag.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (major_version == 2 && ((int)flags & 127) != 0)  	throw new CorruptFileException ("Invalid flags set on version 2 tag.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (major_version == 3 && ((int)flags & 15) != 0)  	throw new CorruptFileException ("Invalid flags set on version 3 tag.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (major_version == 3 && ((int)flags & 15) != 0)  	throw new CorruptFileException ("Invalid flags set on version 3 tag.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (major_version == 4 && ((int)flags & 7) != 0)  	throw new CorruptFileException ("Invalid flags set on version 4 tag.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (major_version == 4 && ((int)flags & 7) != 0)  	throw new CorruptFileException ("Invalid flags set on version 4 tag.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: for (int i = 6; i < 10; i++)  	if (data [i] >= 128)  		throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: for (int i = 6; i < 10; i++)  	if (data [i] >= 128)  		throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: for (int i = 6; i < 10; i++)  	if (data [i] >= 128)  		throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: if (data [i] >= 128)  	throw new CorruptFileException ("One of the bytes in the header was greater than the allowed 128.");  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: tag_size = SynchData.ToUInt (data.Mid (6' 4));  
Magic Number,TagLib.Id3v2,Header,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Header.cs,Header,The following statement contains a magic number: tag_size = SynchData.ToUInt (data.Mid (6' 4));  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,ToUInt,The following statement contains a magic number: for (int i = 0; i <= last; i++)  	sum |= (uint)(data [i] & 0x7f) << ((last - i) * 7);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,ToUInt,The following statement contains a magic number: sum |= (uint)(data [i] & 0x7f) << ((last - i) * 7);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,FromUInt,The following statement contains a magic number: if ((value >> 28) != 0)  	throw new ArgumentOutOfRangeException ("value"' "value must be less than 268435456.");  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,FromUInt,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	v [i] = (byte)(value >> ((3 - i) * 7) & 0x7f);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,FromUInt,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	v [i] = (byte)(value >> ((3 - i) * 7) & 0x7f);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,FromUInt,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	v [i] = (byte)(value >> ((3 - i) * 7) & 0x7f);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,FromUInt,The following statement contains a magic number: v [i] = (byte)(value >> ((3 - i) * 7) & 0x7f);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,FromUInt,The following statement contains a magic number: v [i] = (byte)(value >> ((3 - i) * 7) & 0x7f);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,UnsynchByteVector,The following statement contains a magic number: for (int i = data.Count - 2; i >= 0; i--)  	if (data [i] == 0xFF && (data [i + 1] == 0 || (data [i + 1] & 0xE0) != 0))  		data.Insert (i + 1' 0);  
Magic Number,TagLib.Id3v2,SynchData,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\SynchData.cs,ResynchByteVector,The following statement contains a magic number: for (int i = data.Count - 2; i >= 0; i--)  	if (data [i] == 0xFF && data [i + 1] == 0)  		data.RemoveAt (i + 1);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,GetFrames,The following statement contains a magic number: if (ident.Count != 4)  	throw new ArgumentException ("Identifier must be four bytes long."' "ident");  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,GetFrames,The following statement contains a magic number: if (ident.Count != 4)  	throw new ArgumentException ("Identifier must be four bytes long."' "ident");  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,RemoveFrames,The following statement contains a magic number: if (ident.Count != 4)  	throw new ArgumentException ("Identifier must be four bytes long."' "ident");  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,SetTextFrame,The following statement contains a magic number: if (ident.Count != 4)  	throw new ArgumentException ("Identifier must be four bytes long."' "ident");  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,SetNumberFrame,The following statement contains a magic number: if (ident.Count != 4)  	throw new ArgumentException ("Identifier must be four bytes long."' "ident");  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Render,The following statement contains a magic number: header.MajorVersion = has_footer ? (byte)4 : Version;  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Render,The following statement contains a magic number: if (!has_footer)  	tag_data.Add (new ByteVector ((int)((tag_data.Count < header.TagSize) ? (header.TagSize - tag_data.Count) : 1024)));  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Render,The following statement contains a magic number: tag_data.Add (new ByteVector ((int)((tag_data.Count < header.TagSize) ? (header.TagSize - tag_data.Count) : 1024)));  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: while (frame_data_position < frame_data_length - FrameHeader.Size (header.MajorVersion)) {  	// If the next data is position is 0' assume  	// that we've hit the padding portion of the  	// frame data.  	if (data [frame_data_position] == 0)  		break;  	Frame frame = null;  	try {  		frame = FrameFactory.CreateFrame (data' ref frame_data_position' header.MajorVersion' (header.Flags & HeaderFlags.Unsynchronisation) != 0);  	}  	catch (NotImplementedException) {  		continue;  	}  	if (frame == null)  		break;  	// Only add frames that contain data.  	if (frame.Size == 0)  		continue;  	AddFrame (frame);  	// If the tag is version 4' no post-processing  	// is needed.  	if (header.MajorVersion == 4)  		continue;  	// Load up the first instance of each' for  	// post-processing.  	if (tdrc == null && frame.FrameId.Equals (FrameType.TDRC)) {  		tdrc = frame as TextInformationFrame;  	}  	else if (tyer == null && frame.FrameId.Equals (FrameType.TYER)) {  		tyer = frame as TextInformationFrame;  	}  	else if (tdat == null && frame.FrameId.Equals (FrameType.TDAT)) {  		tdat = frame as TextInformationFrame;  	}  	else if (time == null && frame.FrameId.Equals (FrameType.TIME)) {  		time = frame as TextInformationFrame;  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (header.MajorVersion == 4)  	continue;  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdrc == null || tdat == null || tdrc.ToString ().Length > 4) {  	return;  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (year.Length != 4)  	return;  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat != null) {  	string tdat_text = tdat.ToString ();  	if (tdat_text.Length == 4) {  		tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  		// Add the time  		if (time != null) {  			string time_text = time.ToString ();  			if (time_text.Length == 4)  				tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  			RemoveFrames (FrameType.TIME);  		}  	}  	RemoveFrames (FrameType.TDAT);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (tdat_text.Length == 4) {  	tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  	// Add the time  	if (time != null) {  		string time_text = time.ToString ();  		if (time_text.Length == 4)  			tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  		RemoveFrames (FrameType.TIME);  	}  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: tdrc_text.Append ("-").Append (tdat_text' 0' 2).Append ("-").Append (tdat_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time != null) {  	string time_text = time.ToString ();  	if (time_text.Length == 4)  		tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  	RemoveFrames (FrameType.TIME);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time != null) {  	string time_text = time.ToString ();  	if (time_text.Length == 4)  		tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  	RemoveFrames (FrameType.TIME);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time != null) {  	string time_text = time.ToString ();  	if (time_text.Length == 4)  		tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  	RemoveFrames (FrameType.TIME);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time != null) {  	string time_text = time.ToString ();  	if (time_text.Length == 4)  		tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  	RemoveFrames (FrameType.TIME);  }  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time_text.Length == 4)  	tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time_text.Length == 4)  	tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time_text.Length == 4)  	tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: if (time_text.Length == 4)  	tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.Id3v2,Tag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Id3v2\Tag.cs,Parse,The following statement contains a magic number: tdrc_text.Append ("T").Append (time_text' 0' 2).Append (":").Append (time_text' 2' 2);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = data [3] & 15;  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = data [3] & 15;  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: if (version >= 7) {  	frames = data.Mid (4' 4).ToUInt (false);  	uint flags = data.Mid (8' 4).ToUInt (false);  	sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  	header_data = 0;  }  else {  	header_data = data.Mid (0' 4).ToUInt (false);  	version = (int)((header_data >> 11) & 0x03ff);  	sample_rate = 44100;  	frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  }  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: frames = data.Mid (4' 4).ToUInt (false);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: frames = data.Mid (4' 4).ToUInt (false);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = sftable [(int)(((flags >> 17) & 1) * 2 + ((flags >> 16) & 1))];  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: header_data = data.Mid (0' 4).ToUInt (false);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = (int)((header_data >> 11) & 0x03ff);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: sample_rate = 44100;  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  
Magic Number,TagLib.MusePack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpc\StreamHeader.cs,StreamHeader,The following statement contains a magic number: frames = data.Mid (4' version >= 5 ? 4 : 2).ToUInt (false);  
Magic Number,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,FixId,The following statement contains a magic number: if (id.Count == 4) {  	ReadOnlyByteVector roid = id as ReadOnlyByteVector;  	if (roid != null)  		return roid;  	return new ReadOnlyByteVector (id);  }  
Magic Number,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,FixId,The following statement contains a magic number: if (id.Count == 3)  	return new ReadOnlyByteVector (0xa9' id [0]' id [1]' id [2]);  
Magic Number,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,FixId,The following statement contains a magic number: if (id.Count == 3)  	return new ReadOnlyByteVector (0xa9' id [0]' id [1]' id [2]);  
Magic Number,TagLib.Mpeg4,AppleTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\AppleTag.cs,FixId,The following statement contains a magic number: return new ReadOnlyByteVector (0xa9' id [0]' id [1]' id [2]);  
Magic Number,TagLib.Mpeg4,Box,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Box.cs,Render,The following statement contains a magic number: if (free_found || BoxType == Mpeg4.BoxType.Meta) {  	long size_difference = DataSize - output.Count;  	// If we have room for free space' add it so we  	// don't have to resize the file.  	if (header.DataSize != 0 && size_difference >= 8)  		output.Add ((new IsoFreeSpaceBox (size_difference)).Render ());  	// If we're getting bigger' get a lot bigger so  	// we might not have to again.  	else  		output.Add ((new IsoFreeSpaceBox (2048)).Render ());  }  
Magic Number,TagLib.Mpeg4,Box,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Box.cs,Render,The following statement contains a magic number: if (free_found || BoxType == Mpeg4.BoxType.Meta) {  	long size_difference = DataSize - output.Count;  	// If we have room for free space' add it so we  	// don't have to resize the file.  	if (header.DataSize != 0 && size_difference >= 8)  		output.Add ((new IsoFreeSpaceBox (size_difference)).Render ());  	// If we're getting bigger' get a lot bigger so  	// we might not have to again.  	else  		output.Add ((new IsoFreeSpaceBox (2048)).Render ());  }  
Magic Number,TagLib.Mpeg4,Box,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Box.cs,Render,The following statement contains a magic number: if (header.DataSize != 0 && size_difference >= 8)  	output.Add ((new IsoFreeSpaceBox (size_difference)).Render ());  // If we're getting bigger' get a lot bigger so  // we might not have to again.  else  	output.Add ((new IsoFreeSpaceBox (2048)).Render ());  
Magic Number,TagLib.Mpeg4,Box,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Box.cs,Render,The following statement contains a magic number: if (header.DataSize != 0 && size_difference >= 8)  	output.Add ((new IsoFreeSpaceBox (size_difference)).Render ());  // If we're getting bigger' get a lot bigger so  // we might not have to again.  else  	output.Add ((new IsoFreeSpaceBox (2048)).Render ());  
Magic Number,TagLib.Mpeg4,Box,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Box.cs,Render,The following statement contains a magic number: output.Add ((new IsoFreeSpaceBox (2048)).Render ());  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] == 3) {  	// We have a descriptor tag. Check that it's at  	// least 20 long.  	if (ReadLength (box_data' ref offset) < 20)  		throw new CorruptFileException ("Insufficient data present.");  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  	stream_priority = box_data [offset++];  }  else {  	// The tag wasn't found' so the next two byte  	// are the ID' and after that' business as  	// usual.  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  }  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] == 3) {  	// We have a descriptor tag. Check that it's at  	// least 20 long.  	if (ReadLength (box_data' ref offset) < 20)  		throw new CorruptFileException ("Insufficient data present.");  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  	stream_priority = box_data [offset++];  }  else {  	// The tag wasn't found' so the next two byte  	// are the ID' and after that' business as  	// usual.  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  }  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] == 3) {  	// We have a descriptor tag. Check that it's at  	// least 20 long.  	if (ReadLength (box_data' ref offset) < 20)  		throw new CorruptFileException ("Insufficient data present.");  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  	stream_priority = box_data [offset++];  }  else {  	// The tag wasn't found' so the next two byte  	// are the ID' and after that' business as  	// usual.  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  }  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] == 3) {  	// We have a descriptor tag. Check that it's at  	// least 20 long.  	if (ReadLength (box_data' ref offset) < 20)  		throw new CorruptFileException ("Insufficient data present.");  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  	stream_priority = box_data [offset++];  }  else {  	// The tag wasn't found' so the next two byte  	// are the ID' and after that' business as  	// usual.  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  }  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] == 3) {  	// We have a descriptor tag. Check that it's at  	// least 20 long.  	if (ReadLength (box_data' ref offset) < 20)  		throw new CorruptFileException ("Insufficient data present.");  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  	stream_priority = box_data [offset++];  }  else {  	// The tag wasn't found' so the next two byte  	// are the ID' and after that' business as  	// usual.  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  }  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] == 3) {  	// We have a descriptor tag. Check that it's at  	// least 20 long.  	if (ReadLength (box_data' ref offset) < 20)  		throw new CorruptFileException ("Insufficient data present.");  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  	stream_priority = box_data [offset++];  }  else {  	// The tag wasn't found' so the next two byte  	// are the ID' and after that' business as  	// usual.  	es_id = box_data.Mid (offset' 2).ToUShort ();  	offset += 2;  }  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (ReadLength (box_data' ref offset) < 20)  	throw new CorruptFileException ("Insufficient data present.");  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: es_id = box_data.Mid (offset' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: offset += 2;  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: es_id = box_data.Mid (offset' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: offset += 2;  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] != 4)  	throw new CorruptFileException ("Could not identify decoder configuration descriptor.");  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (ReadLength (box_data' ref offset) < 15)  	throw new CorruptFileException ("Could not read data. Too small.");  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: buffer_size_db = box_data.Mid (offset' 3).ToUInt ();  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: offset += 3;  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: max_bitrate = box_data.Mid (offset' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: offset += 4;  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: average_bitrate = box_data.Mid (offset' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: offset += 4;  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,AppleElementaryStreamDescriptor,The following statement contains a magic number: if (box_data [offset++] != 5)  	throw new CorruptFileException ("Could not identify decoder specific descriptor.");  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,ReadLength,The following statement contains a magic number: do {  	b = data [offset++];  	length = (uint)(length << 7) | (uint)(b & 0x7f);  }  while ((b & 0x80) != 0 && offset <= end);  
Magic Number,TagLib.Mpeg4,AppleElementaryStreamDescriptor,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\AppleElementaryStreamDescriptor.cs,ReadLength,The following statement contains a magic number: length = (uint)(length << 7) | (uint)(b & 0x7f);  
Magic Number,TagLib.Mpeg4,FullBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\FullBox.cs,FullBox,The following statement contains a magic number: flags = header_data.Mid (1' 3).ToUInt ();  
Magic Number,TagLib.Mpeg4,FullBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\FullBox.cs,Render,The following statement contains a magic number: output.Add (ByteVector.FromUInt (flags).Mid (1' 3));  
Magic Number,TagLib.Mpeg4,IsoAudioSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoAudioSampleEntry.cs,IsoAudioSampleEntry,The following statement contains a magic number: file.Seek (base.DataPosition + 8);  
Magic Number,TagLib.Mpeg4,IsoAudioSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoAudioSampleEntry.cs,IsoAudioSampleEntry,The following statement contains a magic number: channel_count = file.ReadBlock (2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoAudioSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoAudioSampleEntry.cs,IsoAudioSampleEntry,The following statement contains a magic number: sample_size = file.ReadBlock (2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoAudioSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoAudioSampleEntry.cs,IsoAudioSampleEntry,The following statement contains a magic number: file.Seek (base.DataPosition + 16);  
Magic Number,TagLib.Mpeg4,IsoAudioSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoAudioSampleEntry.cs,IsoAudioSampleEntry,The following statement contains a magic number: sample_rate = file.ReadBlock (4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: offsets = new ulong[(int)box_data.Mid (0' 4).ToUInt ()];  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: for (int i = 0; i < offsets.Length; i++)  	offsets [i] = box_data.Mid (4 + i * 8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: for (int i = 0; i < offsets.Length; i++)  	offsets [i] = box_data.Mid (4 + i * 8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: for (int i = 0; i < offsets.Length; i++)  	offsets [i] = box_data.Mid (4 + i * 8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: offsets [i] = box_data.Mid (4 + i * 8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: offsets [i] = box_data.Mid (4 + i * 8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoChunkLargeOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkLargeOffsetBox.cs,IsoChunkLargeOffsetBox,The following statement contains a magic number: offsets [i] = box_data.Mid (4 + i * 8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: offsets = new uint[(int)box_data.Mid (0' 4).ToUInt ()];  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: for (int i = 0; i < offsets.Length; i++)  	offsets [i] = box_data.Mid (4 + i * 4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: for (int i = 0; i < offsets.Length; i++)  	offsets [i] = box_data.Mid (4 + i * 4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: for (int i = 0; i < offsets.Length; i++)  	offsets [i] = box_data.Mid (4 + i * 4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: offsets [i] = box_data.Mid (4 + i * 4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: offsets [i] = box_data.Mid (4 + i * 4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoChunkOffsetBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoChunkOffsetBox.cs,IsoChunkOffsetBox,The following statement contains a magic number: offsets [i] = box_data.Mid (4 + i * 4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: file.Seek (DataPosition + 4);  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: handler_type = box_data.Mid (0' 4);  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: if (end < 16)  	end = box_data.Count;  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: name = box_data.ToString (StringType.UTF8' 16' end - 16);  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: name = box_data.ToString (StringType.UTF8' 16' end - 16);  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: if (handlerType.Count < 4)  	throw new ArgumentException ("The handler type must be four bytes long."' "handlerType");  
Magic Number,TagLib.Mpeg4,IsoHandlerBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoHandlerBox.cs,IsoHandlerBox,The following statement contains a magic number: this.handler_type = handlerType.Mid (0' 4);  
Magic Number,TagLib.Mpeg4,IsoMetaBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMetaBox.cs,IsoMetaBox,The following statement contains a magic number: if (handlerType.Count < 4)  	throw new ArgumentException ("The handler type must be four bytes long."' "handlerType");  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (Version == 1) {  	// Read version one (large integers).  	data = file.ReadBlock (Math.Min (28' bytes_remaining));  	if (data.Count >= 8)  		creation_time = data.Mid (0' 8).ToULong ();  	if (data.Count >= 16)  		modification_time = data.Mid (8' 8).ToULong ();  	if (data.Count >= 20)  		timescale = data.Mid (16' 4).ToUInt ();  	if (data.Count >= 28)  		duration = data.Mid (20' 8).ToULong ();  	bytes_remaining -= 28;  }  else {  	// Read version zero (normal integers).  	data = file.ReadBlock (Math.Min (16' bytes_remaining));  	if (data.Count >= 4)  		creation_time = data.Mid (0' 4).ToUInt ();  	if (data.Count >= 8)  		modification_time = data.Mid (4' 4).ToUInt ();  	if (data.Count >= 12)  		timescale = data.Mid (8' 4).ToUInt ();  	if (data.Count >= 16)  		duration = data.Mid (12' 4).ToUInt ();  	bytes_remaining -= 16;  }  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: data = file.ReadBlock (Math.Min (28' bytes_remaining));  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 8)  	creation_time = data.Mid (0' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 8)  	creation_time = data.Mid (0' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: creation_time = data.Mid (0' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 16)  	modification_time = data.Mid (8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 16)  	modification_time = data.Mid (8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 16)  	modification_time = data.Mid (8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: modification_time = data.Mid (8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: modification_time = data.Mid (8' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 20)  	timescale = data.Mid (16' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 20)  	timescale = data.Mid (16' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 20)  	timescale = data.Mid (16' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: timescale = data.Mid (16' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: timescale = data.Mid (16' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 28)  	duration = data.Mid (20' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 28)  	duration = data.Mid (20' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 28)  	duration = data.Mid (20' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: duration = data.Mid (20' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: duration = data.Mid (20' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: bytes_remaining -= 28;  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: data = file.ReadBlock (Math.Min (16' bytes_remaining));  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 4)  	creation_time = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 4)  	creation_time = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: creation_time = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 8)  	modification_time = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 8)  	modification_time = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 8)  	modification_time = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: modification_time = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: modification_time = data.Mid (4' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 12)  	timescale = data.Mid (8' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 12)  	timescale = data.Mid (8' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 12)  	timescale = data.Mid (8' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: timescale = data.Mid (8' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: timescale = data.Mid (8' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 16)  	duration = data.Mid (12' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 16)  	duration = data.Mid (12' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 16)  	duration = data.Mid (12' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: duration = data.Mid (12' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: duration = data.Mid (12' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: bytes_remaining -= 16;  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: data = file.ReadBlock (Math.Min (6' bytes_remaining));  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 4)  	rate = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 4)  	rate = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: rate = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 6)  	volume = data.Mid (4' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 6)  	volume = data.Mid (4' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 6)  	volume = data.Mid (4' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: volume = data.Mid (4' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: volume = data.Mid (4' 2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: file.Seek (file.Tell + 70);  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: bytes_remaining -= 76;  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: data = file.ReadBlock (Math.Min (4' bytes_remaining));  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 4)  	next_track_id = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: if (data.Count >= 4)  	next_track_id = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoMovieHeaderBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoMovieHeaderBox.cs,IsoMovieHeaderBox,The following statement contains a magic number: next_track_id = data.Mid (0' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoSampleDescriptionBox,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoSampleDescriptionBox.cs,IsoSampleDescriptionBox,The following statement contains a magic number: entry_count = file.ReadBlock (4).ToUInt ();  
Magic Number,TagLib.Mpeg4,IsoSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoSampleEntry.cs,IsoSampleEntry,The following statement contains a magic number: file.Seek (base.DataPosition + 6);  
Magic Number,TagLib.Mpeg4,IsoSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoSampleEntry.cs,IsoSampleEntry,The following statement contains a magic number: data_reference_index = file.ReadBlock (2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoVisualSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoVisualSampleEntry.cs,IsoVisualSampleEntry,The following statement contains a magic number: file.Seek (base.DataPosition + 16);  
Magic Number,TagLib.Mpeg4,IsoVisualSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoVisualSampleEntry.cs,IsoVisualSampleEntry,The following statement contains a magic number: width = file.ReadBlock (2).ToUShort ();  
Magic Number,TagLib.Mpeg4,IsoVisualSampleEntry,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\Boxes\IsoVisualSampleEntry.cs,IsoVisualSampleEntry,The following statement contains a magic number: height = file.ReadBlock (2).ToUShort ();  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (data.Count < 8 + offset)  	throw new CorruptFileException ("Not enough data in box header.");  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: header_size = 8;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: box_size = data.Mid (offset' 4).ToUInt ();  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: box_type = data.Mid (offset + 4' 4);  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: box_type = data.Mid (offset + 4' 4);  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_size == 1) {  	if (data.Count < 8 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 8;  	box_size = data.Mid (offset' 8).ToULong ();  	offset += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_size == 1) {  	if (data.Count < 8 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 8;  	box_size = data.Mid (offset' 8).ToULong ();  	offset += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_size == 1) {  	if (data.Count < 8 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 8;  	box_size = data.Mid (offset' 8).ToULong ();  	offset += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_size == 1) {  	if (data.Count < 8 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 8;  	box_size = data.Mid (offset' 8).ToULong ();  	offset += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (data.Count < 8 + offset)  	throw new CorruptFileException ("Not enough data in box header.");  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: header_size += 8;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: box_size = data.Mid (offset' 8).ToULong ();  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: offset += 8;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_type == Mpeg4.BoxType.Uuid) {  	if (data.Count < 16 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 16;  	extended_type = data.Mid (offset' 16);  }  else  	extended_type = null;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_type == Mpeg4.BoxType.Uuid) {  	if (data.Count < 16 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 16;  	extended_type = data.Mid (offset' 16);  }  else  	extended_type = null;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (box_type == Mpeg4.BoxType.Uuid) {  	if (data.Count < 16 + offset)  		throw new CorruptFileException ("Not enough data in box header.");  	header_size += 16;  	extended_type = data.Mid (offset' 16);  }  else  	extended_type = null;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (data.Count < 16 + offset)  	throw new CorruptFileException ("Not enough data in box header.");  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: header_size += 16;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: extended_type = data.Mid (offset' 16);  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (type.Count != 4)  	throw new ArgumentException ("Box type must be 4 bytes in length."' "type");  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: box_size = header_size = 8;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: if (extendedType.Count != 16)  	throw new ArgumentException ("Extended type must be 16 bytes in length."' "extendedType");  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,BoxHeader,The following statement contains a magic number: box_size = header_size = 24;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if ((header_size == 8 || header_size == 24) && box_size > uint.MaxValue) {  	header_size += 8;  	box_size += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if ((header_size == 8 || header_size == 24) && box_size > uint.MaxValue) {  	header_size += 8;  	box_size += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if ((header_size == 8 || header_size == 24) && box_size > uint.MaxValue) {  	header_size += 8;  	box_size += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if ((header_size == 8 || header_size == 24) && box_size > uint.MaxValue) {  	header_size += 8;  	box_size += 8;  }  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: header_size += 8;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: box_size += 8;  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if (header_size == 16 || header_size == 32)  	output.Add (ByteVector.FromULong (box_size));  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if (header_size == 16 || header_size == 32)  	output.Add (ByteVector.FromULong (box_size));  
Magic Number,TagLib.Mpeg4,BoxHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\BoxHeader.cs,Render,The following statement contains a magic number: if (header_size >= 24)  	output.Add (extended_type);  
Magic Number,TagLib.Mpeg4,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\File.cs,Save,The following statement contains a magic number: try {  	FileParser parser = new FileParser (this);  	parser.ParseBoxHeaders ();  	InvariantStartPosition = parser.MdatStartPosition;  	InvariantEndPosition = parser.MdatEndPosition;  	long size_change = 0;  	long write_position = 0;  	ByteVector tag_data = udta_box.Render ();  	// If we don't have a "udta" box to overwrite...  	if (parser.UdtaTree == null || parser.UdtaTree.Length == 0 || parser.UdtaTree [parser.UdtaTree.Length - 1].BoxType != BoxType.Udta) {  		// Stick the box at the end of the moov box.  		BoxHeader moov_header = parser.MoovTree [parser.MoovTree.Length - 1];  		size_change = tag_data.Count;  		write_position = moov_header.Position + moov_header.TotalBoxSize;  		Insert (tag_data' write_position' 0);  		// Overwrite the parent box sizes.  		for (int i = parser.MoovTree.Length - 1; i >= 0; i--)  			size_change = parser.MoovTree [i].Overwrite (this' size_change);  	}  	else {  		// Overwrite the old box.  		BoxHeader udta_header = parser.UdtaTree [parser.UdtaTree.Length - 1];  		size_change = tag_data.Count - udta_header.TotalBoxSize;  		write_position = udta_header.Position;  		Insert (tag_data' write_position' udta_header.TotalBoxSize);  		// Overwrite the parent box sizes.  		for (int i = parser.UdtaTree.Length - 2; i >= 0; i--)  			size_change = parser.UdtaTree [i].Overwrite (this' size_change);  	}  	// If we've had a size change' we may need to adjust  	// chunk offsets.  	if (size_change != 0) {  		// We may have moved the offset boxes' so we  		// need to reread.  		parser.ParseChunkOffsets ();  		InvariantStartPosition = parser.MdatStartPosition;  		InvariantEndPosition = parser.MdatEndPosition;  		foreach (Box box in parser.ChunkOffsetBoxes) {  			IsoChunkLargeOffsetBox co64 = box as IsoChunkLargeOffsetBox;  			if (co64 != null) {  				co64.Overwrite (this' size_change' write_position);  				continue;  			}  			IsoChunkOffsetBox stco = box as IsoChunkOffsetBox;  			if (stco != null) {  				stco.Overwrite (this' size_change' write_position);  				continue;  			}  		}  	}  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = File.AccessMode.Closed;  }  
Magic Number,TagLib.Mpeg4,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\File.cs,Save,The following statement contains a magic number: if (parser.UdtaTree == null || parser.UdtaTree.Length == 0 || parser.UdtaTree [parser.UdtaTree.Length - 1].BoxType != BoxType.Udta) {  	// Stick the box at the end of the moov box.  	BoxHeader moov_header = parser.MoovTree [parser.MoovTree.Length - 1];  	size_change = tag_data.Count;  	write_position = moov_header.Position + moov_header.TotalBoxSize;  	Insert (tag_data' write_position' 0);  	// Overwrite the parent box sizes.  	for (int i = parser.MoovTree.Length - 1; i >= 0; i--)  		size_change = parser.MoovTree [i].Overwrite (this' size_change);  }  else {  	// Overwrite the old box.  	BoxHeader udta_header = parser.UdtaTree [parser.UdtaTree.Length - 1];  	size_change = tag_data.Count - udta_header.TotalBoxSize;  	write_position = udta_header.Position;  	Insert (tag_data' write_position' udta_header.TotalBoxSize);  	// Overwrite the parent box sizes.  	for (int i = parser.UdtaTree.Length - 2; i >= 0; i--)  		size_change = parser.UdtaTree [i].Overwrite (this' size_change);  }  
Magic Number,TagLib.Mpeg4,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg4\File.cs,Save,The following statement contains a magic number: for (int i = parser.UdtaTree.Length - 2; i >= 0; i--)  	size_change = parser.UdtaTree [i].Overwrite (this' size_change);  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,AudioHeader,The following statement contains a magic number: if (data.Count < 4)  	throw new CorruptFileException ("Insufficient header length.");  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,AudioHeader,The following statement contains a magic number: if (((flags >> 12) & 0x0F) == 0x0F)  	throw new CorruptFileException ("Header uses invalid bitrate index.");  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,AudioHeader,The following statement contains a magic number: if (((flags >> 10) & 0x03) == 0x03)  	throw new CorruptFileException ("Invalid sample rate.");  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,AudioHeader,The following statement contains a magic number: if (xing_data.Count == 16 && xing_data.StartsWith (XingHeader.FileIdentifier))  	xing_header = new XingHeader (xing_data);  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,AudioHeader,The following statement contains a magic number: if (vbri_data.Count == 24 && vbri_data.StartsWith (VBRIHeader.FileIdentifier))  	vbri_header = new VBRIHeader (vbri_data);  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer.Count < 3)  	return false;  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  			try {  				header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  			try {  				header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  			try {  				header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  			try {  				header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: do {  	file.Seek (position + 3);  	buffer = buffer.Mid (buffer.Count - 3);  	buffer.Add (file.ReadBlock ((int)File.BufferSize));  	for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  		if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  			try {  				header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  				return true;  			}  			catch (CorruptFileException) {  			}  	position += File.BufferSize;  }  while (buffer.Count > 3 && (length < 0 || position < end));  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: file.Seek (position + 3);  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: buffer = buffer.Mid (buffer.Count - 3);  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  		try {  			header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: for (int i = 0; i < buffer.Count - 3 && (length < 0 || position + i < end); i++)  	if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  		try {  			header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  			return true;  		}  		catch (CorruptFileException) {  		}  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: if (buffer [i] == 0xFF && buffer [i + 1] > 0xE0)  	try {  		header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  		return true;  	}  	catch (CorruptFileException) {  	}  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: try {  	header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  	return true;  }  catch (CorruptFileException) {  }  
Magic Number,TagLib.Mpeg,AudioHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\AudioHeader.cs,Find,The following statement contains a magic number: header = new AudioHeader (buffer.Mid (i' 4)' file' position + i);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadEnd,The following statement contains a magic number: end_time = ReadTimestamp (end + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,GetMarker,The following statement contains a magic number: if (identifier.Count == 4 && identifier.StartsWith (MarkerStart))  	return (Marker)identifier [3];  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,GetMarker,The following statement contains a magic number: if (identifier.Count == 4 && identifier.StartsWith (MarkerStart))  	return (Marker)identifier [3];  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,GetMarker,The following statement contains a magic number: return (Marker)identifier [3];  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: for (int i = 0; i < sanity_limit && (start_time == null || !audio_found || !video_found); i++) {  	Marker marker = FindMarker (ref position);  	switch (marker) {  	case Marker.SystemSyncPacket:  		ReadSystemSyncPacket (ref position);  		break;  	case Marker.SystemPacket:  	case Marker.PaddingPacket:  		Seek (position + 4);  		position += ReadBlock (2).ToUShort () + 6;  		break;  	case Marker.VideoPacket:  		ReadVideoPacket (ref position);  		break;  	case Marker.AudioPacket:  		ReadAudioPacket (ref position);  		break;  	case Marker.EndOfStream:  		return;  	default:  		position += 4;  		break;  	}  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: for (int i = 0; i < sanity_limit && (start_time == null || !audio_found || !video_found); i++) {  	Marker marker = FindMarker (ref position);  	switch (marker) {  	case Marker.SystemSyncPacket:  		ReadSystemSyncPacket (ref position);  		break;  	case Marker.SystemPacket:  	case Marker.PaddingPacket:  		Seek (position + 4);  		position += ReadBlock (2).ToUShort () + 6;  		break;  	case Marker.VideoPacket:  		ReadVideoPacket (ref position);  		break;  	case Marker.AudioPacket:  		ReadAudioPacket (ref position);  		break;  	case Marker.EndOfStream:  		return;  	default:  		position += 4;  		break;  	}  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: for (int i = 0; i < sanity_limit && (start_time == null || !audio_found || !video_found); i++) {  	Marker marker = FindMarker (ref position);  	switch (marker) {  	case Marker.SystemSyncPacket:  		ReadSystemSyncPacket (ref position);  		break;  	case Marker.SystemPacket:  	case Marker.PaddingPacket:  		Seek (position + 4);  		position += ReadBlock (2).ToUShort () + 6;  		break;  	case Marker.VideoPacket:  		ReadVideoPacket (ref position);  		break;  	case Marker.AudioPacket:  		ReadAudioPacket (ref position);  		break;  	case Marker.EndOfStream:  		return;  	default:  		position += 4;  		break;  	}  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: for (int i = 0; i < sanity_limit && (start_time == null || !audio_found || !video_found); i++) {  	Marker marker = FindMarker (ref position);  	switch (marker) {  	case Marker.SystemSyncPacket:  		ReadSystemSyncPacket (ref position);  		break;  	case Marker.SystemPacket:  	case Marker.PaddingPacket:  		Seek (position + 4);  		position += ReadBlock (2).ToUShort () + 6;  		break;  	case Marker.VideoPacket:  		ReadVideoPacket (ref position);  		break;  	case Marker.AudioPacket:  		ReadAudioPacket (ref position);  		break;  	case Marker.EndOfStream:  		return;  	default:  		position += 4;  		break;  	}  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: switch (marker) {  case Marker.SystemSyncPacket:  	ReadSystemSyncPacket (ref position);  	break;  case Marker.SystemPacket:  case Marker.PaddingPacket:  	Seek (position + 4);  	position += ReadBlock (2).ToUShort () + 6;  	break;  case Marker.VideoPacket:  	ReadVideoPacket (ref position);  	break;  case Marker.AudioPacket:  	ReadAudioPacket (ref position);  	break;  case Marker.EndOfStream:  	return;  default:  	position += 4;  	break;  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: switch (marker) {  case Marker.SystemSyncPacket:  	ReadSystemSyncPacket (ref position);  	break;  case Marker.SystemPacket:  case Marker.PaddingPacket:  	Seek (position + 4);  	position += ReadBlock (2).ToUShort () + 6;  	break;  case Marker.VideoPacket:  	ReadVideoPacket (ref position);  	break;  case Marker.AudioPacket:  	ReadAudioPacket (ref position);  	break;  case Marker.EndOfStream:  	return;  default:  	position += 4;  	break;  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: switch (marker) {  case Marker.SystemSyncPacket:  	ReadSystemSyncPacket (ref position);  	break;  case Marker.SystemPacket:  case Marker.PaddingPacket:  	Seek (position + 4);  	position += ReadBlock (2).ToUShort () + 6;  	break;  case Marker.VideoPacket:  	ReadVideoPacket (ref position);  	break;  case Marker.AudioPacket:  	ReadAudioPacket (ref position);  	break;  case Marker.EndOfStream:  	return;  default:  	position += 4;  	break;  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: switch (marker) {  case Marker.SystemSyncPacket:  	ReadSystemSyncPacket (ref position);  	break;  case Marker.SystemPacket:  case Marker.PaddingPacket:  	Seek (position + 4);  	position += ReadBlock (2).ToUShort () + 6;  	break;  case Marker.VideoPacket:  	ReadVideoPacket (ref position);  	break;  case Marker.AudioPacket:  	ReadAudioPacket (ref position);  	break;  case Marker.EndOfStream:  	return;  default:  	position += 4;  	break;  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: Seek (position + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: position += ReadBlock (2).ToUShort () + 6;  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: position += ReadBlock (2).ToUShort () + 6;  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemFile,The following statement contains a magic number: position += 4;  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadAudioPacket,The following statement contains a magic number: Seek (position + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadAudioPacket,The following statement contains a magic number: if (!audio_found)  	audio_found = AudioHeader.Find (out audio_header' this' position + 15' length - 9);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadAudioPacket,The following statement contains a magic number: if (!audio_found)  	audio_found = AudioHeader.Find (out audio_header' this' position + 15' length - 9);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadAudioPacket,The following statement contains a magic number: audio_found = AudioHeader.Find (out audio_header' this' position + 15' length - 9);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadAudioPacket,The following statement contains a magic number: audio_found = AudioHeader.Find (out audio_header' this' position + 15' length - 9);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: Seek (position + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: while (!video_found && offset < position + length)  	if (FindMarker (ref offset) == Marker.VideoSyncPacket) {  		video_header = new VideoHeader (this' offset + 4);  		video_found = true;  	}  	else {  		// advance the offset by 6 bytes' so the next iteration of the  		// loop won't find the same marker and get stuck.  6 bytes because findMarker is a  		// generic find that could get both PES packets and Stream packets' the smallest  		// posible pes packet with a size =0 would be 6 bytes.  		offset += 6;  	}  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: while (!video_found && offset < position + length)  	if (FindMarker (ref offset) == Marker.VideoSyncPacket) {  		video_header = new VideoHeader (this' offset + 4);  		video_found = true;  	}  	else {  		// advance the offset by 6 bytes' so the next iteration of the  		// loop won't find the same marker and get stuck.  6 bytes because findMarker is a  		// generic find that could get both PES packets and Stream packets' the smallest  		// posible pes packet with a size =0 would be 6 bytes.  		offset += 6;  	}  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: if (FindMarker (ref offset) == Marker.VideoSyncPacket) {  	video_header = new VideoHeader (this' offset + 4);  	video_found = true;  }  else {  	// advance the offset by 6 bytes' so the next iteration of the  	// loop won't find the same marker and get stuck.  6 bytes because findMarker is a  	// generic find that could get both PES packets and Stream packets' the smallest  	// posible pes packet with a size =0 would be 6 bytes.  	offset += 6;  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: if (FindMarker (ref offset) == Marker.VideoSyncPacket) {  	video_header = new VideoHeader (this' offset + 4);  	video_found = true;  }  else {  	// advance the offset by 6 bytes' so the next iteration of the  	// loop won't find the same marker and get stuck.  6 bytes because findMarker is a  	// generic find that could get both PES packets and Stream packets' the smallest  	// posible pes packet with a size =0 would be 6 bytes.  	offset += 6;  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: video_header = new VideoHeader (this' offset + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadVideoPacket,The following statement contains a magic number: offset += 6;  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: Seek (position + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: if ((version_info & 0xF0) == 0x20) {  	version = Version.Version1;  	packet_size = 12;  }  else if ((version_info & 0xC0) == 0x40) {  	version = Version.Version2;  	Seek (position + 13);  	packet_size = 14 + (ReadBlock (1) [0] & 0x07);  }  else  	throw new UnsupportedFormatException ("Unknown MPEG version.");  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: if ((version_info & 0xF0) == 0x20) {  	version = Version.Version1;  	packet_size = 12;  }  else if ((version_info & 0xC0) == 0x40) {  	version = Version.Version2;  	Seek (position + 13);  	packet_size = 14 + (ReadBlock (1) [0] & 0x07);  }  else  	throw new UnsupportedFormatException ("Unknown MPEG version.");  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: if ((version_info & 0xF0) == 0x20) {  	version = Version.Version1;  	packet_size = 12;  }  else if ((version_info & 0xC0) == 0x40) {  	version = Version.Version2;  	Seek (position + 13);  	packet_size = 14 + (ReadBlock (1) [0] & 0x07);  }  else  	throw new UnsupportedFormatException ("Unknown MPEG version.");  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: packet_size = 12;  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: if ((version_info & 0xC0) == 0x40) {  	version = Version.Version2;  	Seek (position + 13);  	packet_size = 14 + (ReadBlock (1) [0] & 0x07);  }  else  	throw new UnsupportedFormatException ("Unknown MPEG version.");  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: if ((version_info & 0xC0) == 0x40) {  	version = Version.Version2;  	Seek (position + 13);  	packet_size = 14 + (ReadBlock (1) [0] & 0x07);  }  else  	throw new UnsupportedFormatException ("Unknown MPEG version.");  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: Seek (position + 13);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: packet_size = 14 + (ReadBlock (1) [0] & 0x07);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: if (start_time == null)  	start_time = ReadTimestamp (position + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadSystemSyncPacket,The following statement contains a magic number: start_time = ReadTimestamp (position + 4);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: if (version == Version.Version1) {  	ByteVector data = ReadBlock (5);  	high = (double)((data [0] >> 3) & 0x01);  	low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  }  else {  	ByteVector data = ReadBlock (6);  	high = (double)((data [0] & 0x20) >> 5);  	low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  }  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: high = (double)((data [0] >> 3) & 0x01);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] >> 1) & 0x03) << 30) | (uint)(data [1] << 22) | (uint)((data [2] >> 1) << 15) | (uint)(data [3] << 7) | (uint)(data [4] << 1);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: high = (double)((data [0] & 0x20) >> 5);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: low = ((uint)((data [0] & 0x18) >> 3) << 30) | (uint)((data [0] & 0x03) << 28) | (uint)(data [1] << 20) | (uint)((data [2] & 0xF8) << 12) | (uint)((data [2] & 0x03) << 13) | (uint)(data [3] << 5) | (uint)(data [4] >> 3);  
Magic Number,TagLib.Mpeg,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\File.cs,ReadTimestamp,The following statement contains a magic number: return (((high * 0x10000) * 0x10000) + low) / 90000.0;  
Magic Number,TagLib.Mpeg,VBRIHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VBRIHeader.cs,VBRIHeader,The following statement contains a magic number: size = data.Mid (position' 4).ToUInt ();  
Magic Number,TagLib.Mpeg,VBRIHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VBRIHeader.cs,VBRIHeader,The following statement contains a magic number: position += 4;  
Magic Number,TagLib.Mpeg,VBRIHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VBRIHeader.cs,VBRIHeader,The following statement contains a magic number: frames = data.Mid (position' 4).ToUInt ();  
Magic Number,TagLib.Mpeg,VBRIHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VBRIHeader.cs,VBRIHeader,The following statement contains a magic number: position += 4;  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: if (data.Count < 7)  	throw new CorruptFileException ("Insufficient data in header.");  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: width = data.Mid (0' 2).ToUShort () >> 4;  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: width = data.Mid (0' 2).ToUShort () >> 4;  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: height = data.Mid (1' 2).ToUShort () & 0x0FFF;  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: frame_rate_index = data [3] & 0x0F;  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: bitrate = (int)((data.Mid (4' 3).ToUInt () >> 6) & 0x3FFFF);  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: bitrate = (int)((data.Mid (4' 3).ToUInt () >> 6) & 0x3FFFF);  
Magic Number,TagLib.Mpeg,VideoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\VideoHeader.cs,VideoHeader,The following statement contains a magic number: bitrate = (int)((data.Mid (4' 3).ToUInt () >> 6) & 0x3FFFF);  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((data [7] & 0x01) != 0) {  	frames = data.Mid (position' 4).ToUInt ();  	position += 4;  }  else  	frames = 0;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((data [7] & 0x01) != 0) {  	frames = data.Mid (position' 4).ToUInt ();  	position += 4;  }  else  	frames = 0;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((data [7] & 0x01) != 0) {  	frames = data.Mid (position' 4).ToUInt ();  	position += 4;  }  else  	frames = 0;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: frames = data.Mid (position' 4).ToUInt ();  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: position += 4;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((data [7] & 0x02) != 0) {  	size = data.Mid (position' 4).ToUInt ();  	position += 4;  }  else  	size = 0;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((data [7] & 0x02) != 0) {  	size = data.Mid (position' 4).ToUInt ();  	position += 4;  }  else  	size = 0;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: if ((data [7] & 0x02) != 0) {  	size = data.Mid (position' 4).ToUInt ();  	position += 4;  }  else  	size = 0;  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: size = data.Mid (position' 4).ToUInt ();  
Magic Number,TagLib.Mpeg,XingHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Mpeg\XingHeader.cs,XingHeader,The following statement contains a magic number: position += 4;  
Magic Number,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,AddTag,The following statement contains a magic number: if (type == TagTypes.Id3v1) {  	tag = new TagLib.Id3v1.Tag ();  }  else if (type == TagTypes.Id3v2) {  	Id3v2.Tag tag32 = new Id3v2.Tag ();  	tag32.Version = 4;  	tag32.Flags |= Id3v2.HeaderFlags.FooterPresent;  	tag = tag32;  }  else if (type == TagTypes.Ape) {  	tag = new TagLib.Ape.Tag ();  }  
Magic Number,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,AddTag,The following statement contains a magic number: if (type == TagTypes.Id3v2) {  	Id3v2.Tag tag32 = new Id3v2.Tag ();  	tag32.Version = 4;  	tag32.Flags |= Id3v2.HeaderFlags.FooterPresent;  	tag = tag32;  }  else if (type == TagTypes.Ape) {  	tag = new TagLib.Ape.Tag ();  }  
Magic Number,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,AddTag,The following statement contains a magic number: tag32.Version = 4;  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,Render,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	data [i + 22] = checksum [i];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,Render,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	data [i + 22] = checksum [i];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,Render,The following statement contains a magic number: data [i + 22] = checksum [i];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: while (position < file.Length - 27) {  	PageHeader header = new PageHeader (file' position);  	int size = (int)(header.Size + header.DataSize);  	if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  		file.Seek (position);  		ByteVector page_data = file.ReadBlock (size);  		ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  		for (int i = 18; i < 22; i++)  			page_data [i] = new_data [i - 18];  		for (int i = 22; i < 26; i++)  			page_data [i] = 0;  		new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  		file.Seek (position + 18);  		file.WriteBlock (new_data);  	}  	position += size;  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  	file.Seek (position);  	ByteVector page_data = file.ReadBlock (size);  	ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  	for (int i = 18; i < 22; i++)  		page_data [i] = new_data [i - 18];  	for (int i = 22; i < 26; i++)  		page_data [i] = 0;  	new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  	file.Seek (position + 18);  	file.WriteBlock (new_data);  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  	file.Seek (position);  	ByteVector page_data = file.ReadBlock (size);  	ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  	for (int i = 18; i < 22; i++)  		page_data [i] = new_data [i - 18];  	for (int i = 22; i < 26; i++)  		page_data [i] = 0;  	new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  	file.Seek (position + 18);  	file.WriteBlock (new_data);  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  	file.Seek (position);  	ByteVector page_data = file.ReadBlock (size);  	ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  	for (int i = 18; i < 22; i++)  		page_data [i] = new_data [i - 18];  	for (int i = 22; i < 26; i++)  		page_data [i] = 0;  	new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  	file.Seek (position + 18);  	file.WriteBlock (new_data);  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  	file.Seek (position);  	ByteVector page_data = file.ReadBlock (size);  	ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  	for (int i = 18; i < 22; i++)  		page_data [i] = new_data [i - 18];  	for (int i = 22; i < 26; i++)  		page_data [i] = 0;  	new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  	file.Seek (position + 18);  	file.WriteBlock (new_data);  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  	file.Seek (position);  	ByteVector page_data = file.ReadBlock (size);  	ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  	for (int i = 18; i < 22; i++)  		page_data [i] = new_data [i - 18];  	for (int i = 22; i < 26; i++)  		page_data [i] = 0;  	new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  	file.Seek (position + 18);  	file.WriteBlock (new_data);  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: if (shiftTable.ContainsKey (header.StreamSerialNumber) && shiftTable [header.StreamSerialNumber] != 0) {  	file.Seek (position);  	ByteVector page_data = file.ReadBlock (size);  	ByteVector new_data = ByteVector.FromUInt ((uint)(header.PageSequenceNumber + shiftTable [header.StreamSerialNumber])' false);  	for (int i = 18; i < 22; i++)  		page_data [i] = new_data [i - 18];  	for (int i = 22; i < 26; i++)  		page_data [i] = 0;  	new_data.Add (ByteVector.FromUInt (page_data.Checksum' false));  	file.Seek (position + 18);  	file.WriteBlock (new_data);  }  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: for (int i = 18; i < 22; i++)  	page_data [i] = new_data [i - 18];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: for (int i = 18; i < 22; i++)  	page_data [i] = new_data [i - 18];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: for (int i = 18; i < 22; i++)  	page_data [i] = new_data [i - 18];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: page_data [i] = new_data [i - 18];  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: for (int i = 22; i < 26; i++)  	page_data [i] = 0;  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: for (int i = 22; i < 26; i++)  	page_data [i] = 0;  
Magic Number,TagLib.Ogg,Page,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Page.cs,OverwriteSequenceNumbers,The following statement contains a magic number: file.Seek (position + 18);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: if (position < 0 || position > file.Length - 27)  	throw new ArgumentOutOfRangeException ("position");  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: if (data.Count < 27 || !data.StartsWith ("OggS"))  	throw new CorruptFileException ("Error reading page header");  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: version = data [4];  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: this.flags = (PageFlags)data [5];  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: absolute_granular_position = data.Mid (6' 8).ToULong (false);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: absolute_granular_position = data.Mid (6' 8).ToULong (false);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: stream_serial_number = data.Mid (14' 4).ToUInt (false);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: stream_serial_number = data.Mid (14' 4).ToUInt (false);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: page_sequence_number = data.Mid (18' 4).ToUInt (false);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: page_sequence_number = data.Mid (18' 4).ToUInt (false);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: size = (uint)(27 + page_segment_count);  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: for (int i = 0; i < page_segment_count; i++) {  	data_size += page_segments [i];  	packet_size += page_segments [i];  	if (page_segments [i] < 255) {  		packet_sizes.Add (packet_size);  		packet_size = 0;  	}  }  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,PageHeader,The following statement contains a magic number: if (page_segments [i] < 255) {  	packet_sizes.Add (packet_size);  	packet_size = 0;  }  
Magic Number,TagLib.Ogg,PageHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\PageHeader.cs,Render,The following statement contains a magic number: data.Add (new ByteVector (4' 0));  
Magic Number,TagLib.Ogg,XiphComment,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\XiphComment.cs,Parse,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Ogg,XiphComment,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\XiphComment.cs,Parse,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Ogg,XiphComment,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\XiphComment.cs,Parse,The following statement contains a magic number: for (int i = 0; i < comment_fields; i++) {  	// Each comment field is in the format  	// "KEY=value" in a UTF8 string and has 4 bytes  	// before the text starts that gives the length.  	int comment_length = (int)data.Mid (pos' 4).ToUInt (false);  	pos += 4;  	string comment = data.ToString (StringType.UTF8' pos' comment_length);  	pos += comment_length;  	int comment_separator_position = comment.IndexOf ('=');  	if (comment_separator_position < 0)  		continue;  	string key = comment.Substring (0' comment_separator_position).ToUpper (CultureInfo.InvariantCulture);  	string value = comment.Substring (comment_separator_position + 1);  	string[] values;  	if (field_list.TryGetValue (key' out values)) {  		Array.Resize<string> (ref values' values.Length + 1);  		values [values.Length - 1] = value;  		field_list [key] = values;  	}  	else {  		SetField (key' value);  	}  }  
Magic Number,TagLib.Ogg,XiphComment,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\XiphComment.cs,Parse,The following statement contains a magic number: for (int i = 0; i < comment_fields; i++) {  	// Each comment field is in the format  	// "KEY=value" in a UTF8 string and has 4 bytes  	// before the text starts that gives the length.  	int comment_length = (int)data.Mid (pos' 4).ToUInt (false);  	pos += 4;  	string comment = data.ToString (StringType.UTF8' pos' comment_length);  	pos += comment_length;  	int comment_separator_position = comment.IndexOf ('=');  	if (comment_separator_position < 0)  		continue;  	string key = comment.Substring (0' comment_separator_position).ToUpper (CultureInfo.InvariantCulture);  	string value = comment.Substring (comment_separator_position + 1);  	string[] values;  	if (field_list.TryGetValue (key' out values)) {  		Array.Resize<string> (ref values' values.Length + 1);  		values [values.Length - 1] = value;  		field_list [key] = values;  	}  	else {  		SetField (key' value);  	}  }  
Magic Number,TagLib.Ogg,XiphComment,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\XiphComment.cs,Parse,The following statement contains a magic number: pos += 4;  
Magic Number,TagLib.Ogg.Codecs,Theora,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Theora.cs,ReadPacket,The following statement contains a magic number: if (comment_data == null) {  	if (type == 0x80)  		header = new HeaderPacket (packet);  	else if (type == 0x81)  		comment_data = packet.Mid (7);  	else  		return true;  }  
Magic Number,TagLib.Ogg.Codecs,Theora,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Theora.cs,ReadPacket,The following statement contains a magic number: if (type == 0x80)  	header = new HeaderPacket (packet);  else if (type == 0x81)  	comment_data = packet.Mid (7);  else  	return true;  
Magic Number,TagLib.Ogg.Codecs,Theora,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Theora.cs,ReadPacket,The following statement contains a magic number: if (type == 0x81)  	comment_data = packet.Mid (7);  else  	return true;  
Magic Number,TagLib.Ogg.Codecs,Theora,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Theora.cs,ReadPacket,The following statement contains a magic number: comment_data = packet.Mid (7);  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: if (comment_data == null) {  	if (type == 1)  		header = new HeaderPacket (packet);  	else if (type == 3)  		comment_data = packet.Mid (7);  	else  		return true;  }  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: if (comment_data == null) {  	if (type == 1)  		header = new HeaderPacket (packet);  	else if (type == 3)  		comment_data = packet.Mid (7);  	else  		return true;  }  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: if (type == 1)  	header = new HeaderPacket (packet);  else if (type == 3)  	comment_data = packet.Mid (7);  else  	return true;  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: if (type == 1)  	header = new HeaderPacket (packet);  else if (type == 3)  	comment_data = packet.Mid (7);  else  	return true;  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: if (type == 3)  	comment_data = packet.Mid (7);  else  	return true;  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: if (type == 3)  	comment_data = packet.Mid (7);  else  	return true;  
Magic Number,TagLib.Ogg.Codecs,Vorbis,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Ogg\Codecs\Vorbis.cs,ReadPacket,The following statement contains a magic number: comment_data = packet.Mid (7);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: if (offset + 40 > data.Count)  	throw new CorruptFileException ("Expected 40 bytes.");  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: microseconds_per_frame = data.Mid (offset' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: max_bytes_per_second = data.Mid (offset + 4' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: max_bytes_per_second = data.Mid (offset + 4' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: flags = data.Mid (offset + 12' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: flags = data.Mid (offset + 12' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: total_frames = data.Mid (offset + 16' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: total_frames = data.Mid (offset + 16' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: initial_frames = data.Mid (offset + 20' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: initial_frames = data.Mid (offset + 20' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: streams = data.Mid (offset + 24' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: streams = data.Mid (offset + 24' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: suggested_buffer_size = data.Mid (offset + 28' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: suggested_buffer_size = data.Mid (offset + 28' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: width = data.Mid (offset + 32' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: width = data.Mid (offset + 32' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: height = data.Mid (offset + 36' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviHeaderList.cs,AviHeader,The following statement contains a magic number: height = data.Mid (offset + 36' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: while (pos + 8 < data.Count) {  	ByteVector id = data.Mid (pos' 4);  	int block_length = (int)data.Mid (pos + 4' 4).ToUInt (false);  	if (id == "strh" && stream == null) {  		AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  		if (stream_header.Type == "vids")  			stream = new AviVideoStream (stream_header);  		else if (stream_header.Type == "auds")  			stream = new AviAudioStream (stream_header);  	}  	else if (stream != null) {  		stream.ParseItem (id' data' pos + 8' block_length);  	}  	pos += block_length + 8;  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: if (id == "strh" && stream == null) {  	AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  	if (stream_header.Type == "vids")  		stream = new AviVideoStream (stream_header);  	else if (stream_header.Type == "auds")  		stream = new AviAudioStream (stream_header);  }  else if (stream != null) {  	stream.ParseItem (id' data' pos + 8' block_length);  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: if (id == "strh" && stream == null) {  	AviStreamHeader stream_header = new AviStreamHeader (data' pos + 8);  	if (stream_header.Type == "vids")  		stream = new AviVideoStream (stream_header);  	else if (stream_header.Type == "auds")  		stream = new AviAudioStream (stream_header);  }  else if (stream != null) {  	stream.ParseItem (id' data' pos + 8' block_length);  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: if (stream != null) {  	stream.ParseItem (id' data' pos + 8' block_length);  }  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: stream.ParseItem (id' data' pos + 8' block_length);  
Magic Number,TagLib.Riff,AviStream,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,ParseStreamList,The following statement contains a magic number: pos += block_length + 8;  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: if (offset + 56 > data.Count)  	throw new CorruptFileException ("Expected 56 bytes.");  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: type = data.Mid (offset' 4);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: handler = data.Mid (offset + 4' 4);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: handler = data.Mid (offset + 4' 4);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: flags = data.Mid (offset + 8' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: flags = data.Mid (offset + 8' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: priority = data.Mid (offset + 12' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: priority = data.Mid (offset + 12' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: initial_frames = data.Mid (offset + 16' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: initial_frames = data.Mid (offset + 16' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: scale = data.Mid (offset + 20' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: scale = data.Mid (offset + 20' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: rate = data.Mid (offset + 24' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: rate = data.Mid (offset + 24' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: start = data.Mid (offset + 28' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: start = data.Mid (offset + 28' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: length = data.Mid (offset + 32' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: length = data.Mid (offset + 32' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: suggested_buffer_size = data.Mid (offset + 36' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: suggested_buffer_size = data.Mid (offset + 36' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: quality = data.Mid (offset + 40' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: quality = data.Mid (offset + 40' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: sample_size = data.Mid (offset + 44' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: sample_size = data.Mid (offset + 44' 4).ToUInt (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: left = data.Mid (offset + 48' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: left = data.Mid (offset + 48' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: top = data.Mid (offset + 50' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: top = data.Mid (offset + 50' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: right = data.Mid (offset + 52' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: right = data.Mid (offset + 52' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: bottom = data.Mid (offset + 54' 2).ToUShort (false);  
Magic Number,TagLib.Riff,AviStreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\AviStream.cs,AviStreamHeader,The following statement contains a magic number: bottom = data.Mid (offset + 54' 2).ToUShort (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: if (offset + 40 > data.Count)  	throw new CorruptFileException ("Expected 40 bytes.");  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: size = data.Mid (offset + 0' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: width = data.Mid (offset + 4' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: width = data.Mid (offset + 4' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: height = data.Mid (offset + 8' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: height = data.Mid (offset + 8' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: planes = data.Mid (offset + 12' 2).ToUShort (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: planes = data.Mid (offset + 12' 2).ToUShort (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: bit_count = data.Mid (offset + 14' 2).ToUShort (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: bit_count = data.Mid (offset + 14' 2).ToUShort (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: compression_id = data.Mid (offset + 16' 4);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: compression_id = data.Mid (offset + 16' 4);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: size_of_image = data.Mid (offset + 20' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: size_of_image = data.Mid (offset + 20' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: x_pixels_per_meter = data.Mid (offset + 24' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: x_pixels_per_meter = data.Mid (offset + 24' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: y_pixels_per_meter = data.Mid (offset + 28' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: y_pixels_per_meter = data.Mid (offset + 28' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: colors_used = data.Mid (offset + 32' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: colors_used = data.Mid (offset + 32' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: colors_important = data.Mid (offset + 36' 4).ToUInt (false);  
Magic Number,TagLib.Riff,BitmapInfoHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\BitmapInfoHeader.cs,BitmapInfoHeader,The following statement contains a magic number: colors_important = data.Mid (offset + 36' 4).ToUInt (false);  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Render,The following statement contains a magic number: data.Add (ByteVector.FromString (title' StringType.Latin1).Resize (32' 0x20));  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Render,The following statement contains a magic number: data.Add (ByteVector.FromString (artist' StringType.Latin1).Resize (28' 0x20));  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Render,The following statement contains a magic number: data.Add (ByteVector.FromString (year' StringType.Latin1).Resize (4' 0x20));  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Render,The following statement contains a magic number: data.Add (ByteVector.FromString (comment' StringType.Latin1).Resize (48' 0x20));  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Render,The following statement contains a magic number: data.Add (ByteVector.FromString (genre' StringType.Latin1).Resize (3' 0x20));  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: title = data.ToString (StringType.Latin1' 0' 32).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: artist = data.ToString (StringType.Latin1' 32' 28).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: artist = data.ToString (StringType.Latin1' 32' 28).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: year = data.ToString (StringType.Latin1' 60' 4).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: year = data.ToString (StringType.Latin1' 60' 4).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: comment = data.ToString (StringType.Latin1' 64' 48).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: comment = data.ToString (StringType.Latin1' 64' 48).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: genre = data.ToString (StringType.Latin1' 112' 3).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: genre = data.ToString (StringType.Latin1' 112' 3).Trim ();  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: extra_data = data.Mid (115' 6);  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Parse,The following statement contains a magic number: extra_data = data.Mid (115' 6);  
Magic Number,TagLib.Riff,DivXTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\DivXTag.cs,Clear,The following statement contains a magic number: extra_data = new ByteVector (6);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: try {  	ByteVector data = new ByteVector ();  	// Enclose the Id3v2 tag in an "ID32" item and  	// embed it as the first tag.  	if (id32_tag != null) {  		ByteVector tag_data = id32_tag.Render ();  		if (tag_data.Count > 10) {  			if (tag_data.Count % 2 == 1)  				tag_data.Add (0);  			data.Add ("ID32");  			data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  			data.Add (tag_data);  		}  	}  	// Embed "INFO" as the second tag.  	if (info_tag != null)  		data.Add (info_tag.RenderEnclosed ());  	// Embed "MID " as the third tag.  	if (mid_tag != null)  		data.Add (mid_tag.RenderEnclosed ());  	// Embed the DivX tag in "IDVX and embed it as  	// the fourth tag.  	if (divx_tag != null && !divx_tag.IsEmpty) {  		ByteVector tag_data = divx_tag.Render ();  		data.Add ("IDVX");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  	// Read the file to determine the current RIFF  	// size and the area tagging does in.  	uint riff_size;  	long tag_start' tag_end;  	Read (false' ReadStyle.None' out riff_size' out tag_start' out tag_end);  	// If tagging info cannot be found' place it at  	// the end of the file.  	if (tag_start < 12 || tag_end < tag_start)  		tag_start = tag_end = Length;  	int length = (int)(tag_end - tag_start);  	// If the tag isn't at the end of the file'  	// try appending using padding to improve  	// write time now or for subsequent writes.  	if (tag_end != Length) {  		int padding_size = length - data.Count - 8;  		if (padding_size < 0)  			padding_size = 1024;  		data.Add ("JUNK");  		data.Add (ByteVector.FromUInt ((uint)padding_size' false));  		data.Add (new ByteVector (padding_size));  	}  	// Insert the tagging data.  	Insert (data' tag_start' length);  	// If the data size changed' and the tagging  	// data is within the RIFF portion of the file'  	// update the riff size.  	if (data.Count - length != 0 && tag_start <= riff_size)  		Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  	// Update the tag types.  	TagTypesOnDisk = TagTypes;  }  finally {  	Mode = AccessMode.Closed;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (id32_tag != null) {  	ByteVector tag_data = id32_tag.Render ();  	if (tag_data.Count > 10) {  		if (tag_data.Count % 2 == 1)  			tag_data.Add (0);  		data.Add ("ID32");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (id32_tag != null) {  	ByteVector tag_data = id32_tag.Render ();  	if (tag_data.Count > 10) {  		if (tag_data.Count % 2 == 1)  			tag_data.Add (0);  		data.Add ("ID32");  		data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  		data.Add (tag_data);  	}  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (tag_data.Count > 10) {  	if (tag_data.Count % 2 == 1)  		tag_data.Add (0);  	data.Add ("ID32");  	data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  	data.Add (tag_data);  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (tag_data.Count > 10) {  	if (tag_data.Count % 2 == 1)  		tag_data.Add (0);  	data.Add ("ID32");  	data.Add (ByteVector.FromUInt ((uint)tag_data.Count' false));  	data.Add (tag_data);  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (tag_data.Count % 2 == 1)  	tag_data.Add (0);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (tag_start < 12 || tag_end < tag_start)  	tag_start = tag_end = Length;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (tag_end != Length) {  	int padding_size = length - data.Count - 8;  	if (padding_size < 0)  		padding_size = 1024;  	data.Add ("JUNK");  	data.Add (ByteVector.FromUInt ((uint)padding_size' false));  	data.Add (new ByteVector (padding_size));  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (tag_end != Length) {  	int padding_size = length - data.Count - 8;  	if (padding_size < 0)  		padding_size = 1024;  	data.Add ("JUNK");  	data.Add (ByteVector.FromUInt ((uint)padding_size' false));  	data.Add (new ByteVector (padding_size));  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (padding_size < 0)  	padding_size = 1024;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: padding_size = 1024;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (data.Count - length != 0 && tag_start <= riff_size)  	Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: if (data.Count - length != 0 && tag_start <= riff_size)  	Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Save,The following statement contains a magic number: Insert (ByteVector.FromUInt ((uint)(riff_size + data.Count - length)' false)' 4' 4);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,GetTag,The following statement contains a magic number: switch (type) {  case TagTypes.Id3v2:  	if (id32_tag == null && create) {  		id32_tag = new Id3v2.Tag ();  		id32_tag.Version = 4;  		id32_tag.Flags |= Id3v2.HeaderFlags.FooterPresent;  		this.tag.CopyTo (id32_tag' true);  	}  	tag = id32_tag;  	break;  case TagTypes.RiffInfo:  	if (info_tag == null && create) {  		info_tag = new InfoTag ();  		this.tag.CopyTo (info_tag' true);  	}  	tag = info_tag;  	break;  case TagTypes.MovieId:  	if (mid_tag == null && create) {  		mid_tag = new MovieIdTag ();  		this.tag.CopyTo (mid_tag' true);  	}  	tag = mid_tag;  	break;  case TagTypes.DivX:  	if (divx_tag == null && create) {  		divx_tag = new DivXTag ();  		this.tag.CopyTo (divx_tag' true);  	}  	tag = divx_tag;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,GetTag,The following statement contains a magic number: if (id32_tag == null && create) {  	id32_tag = new Id3v2.Tag ();  	id32_tag.Version = 4;  	id32_tag.Flags |= Id3v2.HeaderFlags.FooterPresent;  	this.tag.CopyTo (id32_tag' true);  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,GetTag,The following statement contains a magic number: id32_tag.Version = 4;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (ReadBlock (4) != FileIdentifier)  	throw new CorruptFileException ("File does not begin with RIFF identifier");  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: riff_size = ReadBlock (4).ToUInt (false);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: do {  	bool tag_found = false;  	Seek (position);  	string fourcc = ReadBlock (4).ToString (StringType.UTF8);  	size = ReadBlock (4).ToUInt (false);  	switch (fourcc) {  	// "fmt " is used by Wave files to hold the  	// WaveFormatEx structure.  	case "fmt ":  		if (style == ReadStyle.None || stream_format != "WAVE")  			break;  		Seek (position + 8);  		codecs = new ICodec[] {  			new WaveFormatEx (ReadBlock (18)' 0)  		};  		break;  	// "data" contains the audio data for wave  	// files. It's contents represent the invariant  	// portion of the file and is used to determine  	// the duration of a file. It should always  	// appear after "fmt ".  	case "data":  		if (stream_format != "WAVE")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  			break;  		duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  		break;  	// Lists are used to store a variety of data  	// collections. Read the type and act on it.  	case "LIST": {  		switch (ReadBlock (4).ToString (StringType.UTF8)) {  		// "hdlr" is used by AVI files to hold  		// a media header and BitmapInfoHeader  		// and WaveFormatEx structures.  		case "hdrl":  			if (style == ReadStyle.None || stream_format != "AVI ")  				continue;  			AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  			duration = header_list.Header.Duration;  			codecs = header_list.Codecs;  			break;  		// "INFO" is a tagging format handled by  		// the InfoTag class.  		case "INFO":  			if (read_tags && info_tag == null)  				info_tag = new InfoTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "MID " is a tagging format handled by  		// the MovieIdTag class.  		case "MID ":  			if (read_tags && mid_tag == null)  				mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  			tag_found = true;  			break;  		// "movi" contains the media data for  		// and AVI and its contents represent  		// the invariant portion of the file.  		case "movi":  			if (stream_format != "AVI ")  				break;  			InvariantStartPosition = position;  			InvariantEndPosition = position + size;  			break;  		}  		break;  	}  	// "ID32" is a custom box for this format that  	// contains an ID3v2 tag.  	case "ID32":  		if (read_tags && id32_tag == null)  			id32_tag = new Id3v2.Tag (this' position + 8);  		tag_found = true;  		break;  	// "IDVX" is used by DivX and holds an ID3v1-  	// style tag.  	case "IDVX":  		if (read_tags && divx_tag == null)  			divx_tag = new DivXTag (this' position + 8);  		tag_found = true;  		break;  	// "JUNK" is a padding element that could be  	// associated with tag data.  	case "JUNK":  		if (tag_end == position)  			tag_end = position + 8 + size;  		break;  	}  	// Determine the region of the file that  	// contains tags.  	if (tag_found) {  		if (tag_start == -1) {  			tag_start = position;  			tag_end = position + 8 + size;  		}  		else if (tag_end == position) {  			tag_end = position + 8 + size;  		}  	}  	// Move to the next item.  }  while ((position += 8 + size) + 8 < length);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: size = ReadBlock (4).ToUInt (false);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: Seek (position + 8);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: codecs = new ICodec[] {  	new WaveFormatEx (ReadBlock (18)' 0)  };  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (read_tags && info_tag == null)  	info_tag = new InfoTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (read_tags && info_tag == null)  	info_tag = new InfoTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: info_tag = new InfoTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: info_tag = new InfoTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (read_tags && mid_tag == null)  	mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (read_tags && mid_tag == null)  	mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (read_tags && id32_tag == null)  	id32_tag = new Id3v2.Tag (this' position + 8);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: id32_tag = new Id3v2.Tag (this' position + 8);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (read_tags && divx_tag == null)  	divx_tag = new DivXTag (this' position + 8);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: divx_tag = new DivXTag (this' position + 8);  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (tag_end == position)  	tag_end = position + 8 + size;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: tag_end = position + 8 + size;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (tag_found) {  	if (tag_start == -1) {  		tag_start = position;  		tag_end = position + 8 + size;  	}  	else if (tag_end == position) {  		tag_end = position + 8 + size;  	}  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (tag_found) {  	if (tag_start == -1) {  		tag_start = position;  		tag_end = position + 8 + size;  	}  	else if (tag_end == position) {  		tag_end = position + 8 + size;  	}  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (tag_start == -1) {  	tag_start = position;  	tag_end = position + 8 + size;  }  else if (tag_end == position) {  	tag_end = position + 8 + size;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (tag_start == -1) {  	tag_start = position;  	tag_end = position + 8 + size;  }  else if (tag_end == position) {  	tag_end = position + 8 + size;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: tag_end = position + 8 + size;  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: if (tag_end == position) {  	tag_end = position + 8 + size;  }  
Magic Number,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following statement contains a magic number: tag_end = position + 8 + size;  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Render,The following statement contains a magic number: foreach (ByteVector id in Keys)  	foreach (ByteVector value in this [id]) {  		if (value.Count == 0)  			continue;  		data.Add (id);  		data.Add (ByteVector.FromUInt ((uint)value.Count' false));  		data.Add (value);  		if (value.Count % 2 == 1)  			data.Add (0);  	}  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Render,The following statement contains a magic number: foreach (ByteVector value in this [id]) {  	if (value.Count == 0)  		continue;  	data.Add (id);  	data.Add (ByteVector.FromUInt ((uint)value.Count' false));  	data.Add (value);  	if (value.Count % 2 == 1)  		data.Add (0);  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Render,The following statement contains a magic number: if (value.Count % 2 == 1)  	data.Add (0);  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,RenderEnclosed,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,RenderEnclosed,The following statement contains a magic number: if (data.Count <= 8)  	return new ByteVector ();  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,RenderEnclosed,The following statement contains a magic number: header.Add (ByteVector.FromUInt ((uint)(data.Count + 4)' false));  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,GetValues,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,GetValuesAsStrings,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,GetValuesAsStringCollection,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,GetValueAsUInt,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,RemoveValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: while (offset + 8 < data.Count) {  	ByteVector id = data.Mid (offset' 4);  	int length = (int)data.Mid (offset + 4' 4).ToUInt (false);  	if (!ContainsKey (id))  		Add (id' new ByteVectorCollection ());  	this [id].Add (data.Mid (offset + 8' length));  	if (length % 2 == 1)  		length++;  	offset += 8 + length;  }  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: this [id].Add (data.Mid (offset + 8' length));  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: if (length % 2 == 1)  	length++;  
Magic Number,TagLib.Riff,List,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\List.cs,Parse,The following statement contains a magic number: offset += 8 + length;  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,RenderEnclosed,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,GetValues,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,GetValuesAsStrings,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,GetValueAsUInt,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,SetValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,ListTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\ListTag.cs,RemoveValue,The following statement contains a magic number: if (id.Count != 4)  	throw new ArgumentException ("ID must be 4 bytes long."' "id");  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: if (offset + 16 > data.Count)  	throw new CorruptFileException ("Expected 16 bytes.");  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: format_tag = data.Mid (offset' 2).ToUShort (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: channels = data.Mid (offset + 2' 2).ToUShort (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: channels = data.Mid (offset + 2' 2).ToUShort (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: samples_per_second = data.Mid (offset + 4' 4).ToUInt (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: samples_per_second = data.Mid (offset + 4' 4).ToUInt (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: average_bytes_per_second = data.Mid (offset + 8' 4).ToUInt (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: average_bytes_per_second = data.Mid (offset + 8' 4).ToUInt (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: bits_per_sample = data.Mid (offset + 14' 2).ToUShort (false);  
Magic Number,TagLib.Riff,WaveFormatEx,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\WaveFormatEx.cs,WaveFormatEx,The following statement contains a magic number: bits_per_sample = data.Mid (offset + 14' 2).ToUShort (false);  
Magic Number,TagLib.WavPack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\WavPack\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = data.Mid (8' 2).ToUShort (false);  
Magic Number,TagLib.WavPack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\WavPack\StreamHeader.cs,StreamHeader,The following statement contains a magic number: version = data.Mid (8' 2).ToUShort (false);  
Magic Number,TagLib.WavPack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\WavPack\StreamHeader.cs,StreamHeader,The following statement contains a magic number: flags = data.Mid (24' 4).ToUInt (false);  
Magic Number,TagLib.WavPack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\WavPack\StreamHeader.cs,StreamHeader,The following statement contains a magic number: flags = data.Mid (24' 4).ToUInt (false);  
Magic Number,TagLib.WavPack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\WavPack\StreamHeader.cs,StreamHeader,The following statement contains a magic number: samples = data.Mid (12' 4).ToUInt (false);  
Magic Number,TagLib.WavPack,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\WavPack\StreamHeader.cs,StreamHeader,The following statement contains a magic number: samples = data.Mid (12' 4).ToUInt (false);  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,FillTreeview,The following statement contains a magic number: try {  	if (this.InvokeRequired)  		this.Invoke (new MethodInvoker (FillTreeview));  	else {  		this.TreeView.Nodes.Clear ();  		this.TreeView.Nodes.Add (_Collection.Node);  		this.MoveSplitter (this.PropertyGrid' this.PropertyGrid.Width / 4);  		this.Statusbar.Text = Settings.SourceDir + " read.";  		this.TreeView.Focus ();  		_SelectedNode = this.TreeView.SelectedNode;  	}  }  catch (Exception ex) {  	MessageBox.Show ("Exception :: " + ex.GetType () + Environment.NewLine + "Message: " + ex.Message);  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,FillTreeview,The following statement contains a magic number: if (this.InvokeRequired)  	this.Invoke (new MethodInvoker (FillTreeview));  else {  	this.TreeView.Nodes.Clear ();  	this.TreeView.Nodes.Add (_Collection.Node);  	this.MoveSplitter (this.PropertyGrid' this.PropertyGrid.Width / 4);  	this.Statusbar.Text = Settings.SourceDir + " read.";  	this.TreeView.Focus ();  	_SelectedNode = this.TreeView.SelectedNode;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,FillTreeview,The following statement contains a magic number: this.MoveSplitter (this.PropertyGrid' this.PropertyGrid.Width / 4);  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [2].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [3].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [4].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [5].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [6].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [2].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [3].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [4].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [5].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [6].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [2].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [3].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [4].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [5].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [6].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [2].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [3].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [4].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [5].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [6].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [2].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [3].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [4].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [5].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [6].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [2].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [3].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [4].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [5].Visible = false;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following statement contains a magic number: this.contextMenu.Items [6].Visible = true;  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,OnKeyPress,The following statement contains a magic number: switch (e.KeyChar) {  case (char)10:  case (char)13:  	if (tSelectedNode.IsExpanded)  		tSelectedNode.Collapse (true);  	else  		tSelectedNode.Expand ();  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,OnKeyPress,The following statement contains a magic number: switch (e.KeyChar) {  case (char)10:  case (char)13:  	if (tSelectedNode.IsExpanded)  		tSelectedNode.Collapse (true);  	else  		tSelectedNode.Expand ();  	break;  }  
Magic Number,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,TextBox_InfoFileTypes_Leave,The following statement contains a magic number: foreach (string tExtension in tExtensions)  	tValidInfoTypes &= tExtension.StartsWith ("*.") && tExtension.Length > 2 && tExtension.LastIndexOf ("*") == 0;  
Magic Number,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,TextBox_InfoFileTypes_Leave,The following statement contains a magic number: tValidInfoTypes &= tExtension.StartsWith ("*.") && tExtension.Length > 2 && tExtension.LastIndexOf ("*") == 0;  
Magic Number,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,TextBox_InfoFileTypes_Leave,The following statement contains a magic number: if (tValidInfoTypes == false) {  	this.TextBox_InfoFileTypes.Focus ();  	this.TextBox_InfoFileTypes.SelectAll ();  	this.toolTip.Show ("Structure: *.cue|*.nfo|*.txt"' this.TextBox_InfoFileTypes' 10000);  }  else  	_LeaveAllowed = true;  
Magic Number,Chrismo.TagMotion.Forms,SettingsDialog,C:\repos\phlegma_TagMotion\TagMotion\Forms\SettingsDialog.cs,TextBox_InfoFileTypes_Leave,The following statement contains a magic number: this.toolTip.Show ("Structure: *.cue|*.nfo|*.txt"' this.TextBox_InfoFileTypes' 10000);  
Magic Number,Freedb,CDEntry,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\CDEntry.cs,Parse,The following statement contains a magic number: if (slash == -1) {  	this.m_Title = m_Artist;  }  else {  	string titleArtist = m_Artist;  	this.m_Artist = titleArtist.Substring (0' slash);  	slash += 3;  	// move past " / "  	this.m_Title = titleArtist.Substring (slash);  }  
Magic Number,Freedb,CDEntry,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\CDEntry.cs,Parse,The following statement contains a magic number: slash += 3;  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.LBQueryResults.ItemHeight = 14;  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.LBQueryResults.Location = new System.Drawing.Point (12' 80);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.LBQueryResults.Location = new System.Drawing.Point (12' 80);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.LBQueryResults.Size = new System.Drawing.Size (541' 144);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.LBQueryResults.Size = new System.Drawing.Size (541' 144);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.label_Header.Location = new System.Drawing.Point (12' 9);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.label_Header.Location = new System.Drawing.Point (12' 9);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.label_Header.Size = new System.Drawing.Size (541' 57);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.label_Header.Size = new System.Drawing.Size (541' 57);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNOkay.Location = new System.Drawing.Point (382' 236);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNOkay.Location = new System.Drawing.Point (382' 236);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNOkay.Size = new System.Drawing.Size (100' 30);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNOkay.Size = new System.Drawing.Size (100' 30);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNOkay.TabIndex = 81;  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNCancel.Location = new System.Drawing.Point (85' 236);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNCancel.Location = new System.Drawing.Point (85' 236);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNCancel.Size = new System.Drawing.Size (100' 30);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNCancel.Size = new System.Drawing.Size (100' 30);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.BTNCancel.TabIndex = 82;  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (565' 278);  
Magic Number,Freedb,DLGSelectQueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\DLGSelectQueryResult.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (565' 278);  
Magic Number,Freedb,QueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\QueryResult.cs,Parse,The following statement contains a magic number: try {  	queryResult.Trim ();  	int secondIndex = 0;  	// get first white space  	int index = queryResult.IndexOf (' ');  	//if we are parsing a matched queryresult there is no responsecode so skip it  	if (!match) {  		_ResponseCode = queryResult.Substring (0' index);  		index++;  		secondIndex = queryResult.IndexOf (' '' index);  	}  	else {  		secondIndex = index;  		index = 0;  	}  	_Genre = queryResult.Substring (index' secondIndex - index);  	index = secondIndex;  	index++;  	secondIndex = queryResult.IndexOf (' '' index);  	_DiscID = queryResult.Substring (index' secondIndex - index);  	index = secondIndex;  	index++;  	secondIndex = queryResult.IndexOf ('/'' index);  	_Artist = queryResult.Substring (index' secondIndex - index - 1);  	// -1 because there is a space at the end of artist  	index = secondIndex;  	index += 2;  	//skip past / and space  	_Title = queryResult.Substring (index);  	return true;  }  catch {  	return false;  }  
Magic Number,Freedb,QueryResult,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\QueryResult.cs,Parse,The following statement contains a magic number: index += 2;  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: if (values.Length < 5)  	return false;  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: m_Port = values [2];  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: if (values [3].Trim () != "-")  	m_AdditionalAddressInfo = values [3];  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: if (values [3].Trim () != "-")  	m_AdditionalAddressInfo = values [3];  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: m_AdditionalAddressInfo = values [3];  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: m_Latitude = values [4];  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: m_Longitude = values [5];  
Magic Number,Freedb,Site,C:\repos\phlegma_TagMotion\TagMotion\FreeDB\Site.cs,Parse,The following statement contains a magic number: for (int i = 6; i < values.Length; i++) {  	m_Description += values [i];  	m_Description += " ";  }  
Missing Default,Chrismo.TagMotion,Collection,C:\repos\phlegma_TagMotion\TagMotion\Collection.cs,SaveTags,The following switch statement is missing a default case: switch (pField) {  case "Artist":  	tRecord.Artist = _Artist;  	break;  case "Label":  	tRecord.Label = _Label;  	break;  case "Comment":  	tRecord.Comment = _Comment;  	break;  case "Genre":  	tRecord.Genre = _Genre;  	break;  }  
Missing Default,Chrismo.TagMotion,Record,C:\repos\phlegma_TagMotion\TagMotion\Record.cs,Sort,The following switch statement is missing a default case: switch (pSortType) {  case SortType.Year:  	_Songs.Sort (tComparer.SortByYear);  	break;  case SortType.Artist:  	_Songs.Sort (tComparer.SortByArtist);  	break;  case SortType.Comment:  	_Songs.Sort (tComparer.SortByComment);  	break;  case SortType.Path:  	_Songs.Sort (tComparer.SortByPath);  	break;  }  
Missing Default,TagLib.Aiff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\File.cs,GetTag,The following switch statement is missing a default case: switch (type) {  case TagTypes.Id3v2:  	if (tag == null && create) {  		tag = new Id3v2.Tag ();  		tag.Version = 2;  	}  	id32_tag = tag;  	break;  }  
Missing Default,TagLib.Aiff,StreamHeader,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Aiff\StreamHeader.cs,StreamHeader,The following switch statement is missing a default case: switch (sample_rate_tmp) {  case 44100:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 44100;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 22050;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 11025;  	}  	break;  case 48000:  	if (sample_rate_indicator == 0x0E) {  		sample_rate = 48000;  	}  	else if (sample_rate_indicator == 0x0D) {  		sample_rate = 24000;  	}  	break;  case 64000:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 32000;  	}  	else if (sample_rate_indicator == 0x0C) {  		sample_rate = 16000;  	}  	else if (sample_rate_indicator == 0x0B) {  		sample_rate = 8000;  	}  	break;  case 44510:  	if (sample_rate_indicator == 0x0D) {  		sample_rate = 22255;  	}  	break;  case 44508:  	if (sample_rate_indicator == 0x0C) {  		sample_rate = 11127;  	}  	break;  }  
Missing Default,TagLib,ByteVector,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\ByteVector.cs,StringTypeToEncoding,The following switch statement is missing a default case: switch (type) {  case StringType.UTF16:  	// If we have a BOM' return the appropriate  	// encoding. Otherwise' assume we're reading  	// from a string that was already identified. In  	// that case' the encoding will be stored as  	// last_utf16_encoding.  	if (bom == null)  		return last_utf16_encoding;  	if (bom [0] == 0xFF && bom [1] == 0xFE)  		return last_utf16_encoding = Encoding.Unicode;  	if (bom [1] == 0xFF && bom [0] == 0xFE)  		return last_utf16_encoding = Encoding.BigEndianUnicode;  	return last_utf16_encoding;  case StringType.UTF16BE:  	return Encoding.BigEndianUnicode;  case StringType.UTF8:  	return Encoding.UTF8;  case StringType.UTF16LE:  	return Encoding.Unicode;  }  
Missing Default,TagLib.Flac,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Flac\File.cs,GetTag,The following switch statement is missing a default case: switch (type) {  case TagTypes.Xiph:  	return metadata.GetComment (create' tag);  case TagTypes.FlacMetadata:  	return metadata;  }  
Missing Default,TagLib.NonContainer,EndTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\EndTag.cs,ReadTag,The following switch statement is missing a default case: switch (type) {  case TagTypes.Ape:  	tag = new TagLib.Ape.Tag (file' end - TagLib.Ape.Footer.Size);  	break;  case TagTypes.Id3v2:  	tag = new TagLib.Id3v2.Tag (file' start);  	break;  case TagTypes.Id3v1:  	tag = new TagLib.Id3v1.Tag (file' start);  	break;  }  
Missing Default,TagLib.NonContainer,StartTag,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\NonContainer\StartTag.cs,ReadTag,The following switch statement is missing a default case: switch (type) {  case TagTypes.Ape:  	tag = new TagLib.Ape.Tag (file' start);  	break;  case TagTypes.Id3v2:  	tag = new TagLib.Id3v2.Tag (file' start);  	break;  }  
Missing Default,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,GetTag,The following switch statement is missing a default case: switch (type) {  case TagTypes.Id3v2:  	if (id32_tag == null && create) {  		id32_tag = new Id3v2.Tag ();  		id32_tag.Version = 4;  		id32_tag.Flags |= Id3v2.HeaderFlags.FooterPresent;  		this.tag.CopyTo (id32_tag' true);  	}  	tag = id32_tag;  	break;  case TagTypes.RiffInfo:  	if (info_tag == null && create) {  		info_tag = new InfoTag ();  		this.tag.CopyTo (info_tag' true);  	}  	tag = info_tag;  	break;  case TagTypes.MovieId:  	if (mid_tag == null && create) {  		mid_tag = new MovieIdTag ();  		this.tag.CopyTo (mid_tag' true);  	}  	tag = mid_tag;  	break;  case TagTypes.DivX:  	if (divx_tag == null && create) {  		divx_tag = new DivXTag ();  		this.tag.CopyTo (divx_tag' true);  	}  	tag = divx_tag;  	break;  }  
Missing Default,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following switch statement is missing a default case: switch (fourcc) {  // "fmt " is used by Wave files to hold the  // WaveFormatEx structure.  case "fmt ":  	if (style == ReadStyle.None || stream_format != "WAVE")  		break;  	Seek (position + 8);  	codecs = new ICodec[] {  		new WaveFormatEx (ReadBlock (18)' 0)  	};  	break;  // "data" contains the audio data for wave  // files. It's contents represent the invariant  // portion of the file and is used to determine  // the duration of a file. It should always  // appear after "fmt ".  case "data":  	if (stream_format != "WAVE")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	if (style == ReadStyle.None || codecs.Length != 1 || !(codecs [0] is WaveFormatEx))  		break;  	duration += TimeSpan.FromSeconds ((double)size / (double)((WaveFormatEx)codecs [0]).AverageBytesPerSecond);  	break;  // Lists are used to store a variety of data  // collections. Read the type and act on it.  case "LIST": {  	switch (ReadBlock (4).ToString (StringType.UTF8)) {  	// "hdlr" is used by AVI files to hold  	// a media header and BitmapInfoHeader  	// and WaveFormatEx structures.  	case "hdrl":  		if (style == ReadStyle.None || stream_format != "AVI ")  			continue;  		AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  		duration = header_list.Header.Duration;  		codecs = header_list.Codecs;  		break;  	// "INFO" is a tagging format handled by  	// the InfoTag class.  	case "INFO":  		if (read_tags && info_tag == null)  			info_tag = new InfoTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "MID " is a tagging format handled by  	// the MovieIdTag class.  	case "MID ":  		if (read_tags && mid_tag == null)  			mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  		tag_found = true;  		break;  	// "movi" contains the media data for  	// and AVI and its contents represent  	// the invariant portion of the file.  	case "movi":  		if (stream_format != "AVI ")  			break;  		InvariantStartPosition = position;  		InvariantEndPosition = position + size;  		break;  	}  	break;  }  // "ID32" is a custom box for this format that  // contains an ID3v2 tag.  case "ID32":  	if (read_tags && id32_tag == null)  		id32_tag = new Id3v2.Tag (this' position + 8);  	tag_found = true;  	break;  // "IDVX" is used by DivX and holds an ID3v1-  // style tag.  case "IDVX":  	if (read_tags && divx_tag == null)  		divx_tag = new DivXTag (this' position + 8);  	tag_found = true;  	break;  // "JUNK" is a padding element that could be  // associated with tag data.  case "JUNK":  	if (tag_end == position)  		tag_end = position + 8 + size;  	break;  }  
Missing Default,TagLib.Riff,File,C:\repos\phlegma_TagMotion\TagMotion\Externals\TagLib\Riff\File.cs,Read,The following switch statement is missing a default case: switch (ReadBlock (4).ToString (StringType.UTF8)) {  // "hdlr" is used by AVI files to hold  // a media header and BitmapInfoHeader  // and WaveFormatEx structures.  case "hdrl":  	if (style == ReadStyle.None || stream_format != "AVI ")  		continue;  	AviHeaderList header_list = new AviHeaderList (this' position + 12' (int)(size - 4));  	duration = header_list.Header.Duration;  	codecs = header_list.Codecs;  	break;  // "INFO" is a tagging format handled by  // the InfoTag class.  case "INFO":  	if (read_tags && info_tag == null)  		info_tag = new InfoTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "MID " is a tagging format handled by  // the MovieIdTag class.  case "MID ":  	if (read_tags && mid_tag == null)  		mid_tag = new MovieIdTag (this' position + 12' (int)(size - 4));  	tag_found = true;  	break;  // "movi" contains the media data for  // and AVI and its contents represent  // the invariant portion of the file.  case "movi":  	if (stream_format != "AVI ")  		break;  	InvariantStartPosition = position;  	InvariantEndPosition = position + size;  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,ReadSourceDirectory,The following switch statement is missing a default case: switch (Settings.SortType) {  case "Path":  	_Collection.Sort (SortType.Path);  	break;  case "CreationTime":  	_Collection.Sort (SortType.CreationTime);  	break;  case "Artist":  	_Collection.Sort (SortType.Artist);  	break;  case "Year":  	_Collection.Sort (SortType.Year);  	break;  case "Comment":  	_Collection.Sort (SortType.Comment);  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,Settings_Click,The following switch statement is missing a default case: switch (Settings.SortType) {  case "Path":  	_Collection.Sort (SortType.Path);  	break;  case "CreationTime":  	_Collection.Sort (SortType.CreationTime);  	break;  case "Artist":  	_Collection.Sort (SortType.Artist);  	break;  case "Year":  	_Collection.Sort (SortType.Year);  	break;  case "Comment":  	_Collection.Sort (SortType.Comment);  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeView_AfterSelect,The following switch statement is missing a default case: switch ((NodeType)e.Node.Tag) {  case NodeType.Collection:  	_Collection.AfterSelect (ref tImage' ref this.PropertyGrid);  	break;  case NodeType.Record:  	_Collection.GetRecord (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid);  	break;  case NodeType.Song:  	_Collection.GetRecord (e.Node.Parent.Parent.Text).GetSong (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid);  	break;  case NodeType.Picture:  	_Collection.GetRecord (e.Node.Parent.Parent.Text).GetPicture (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid);  	break;  case NodeType.Info:  	_Collection.GetRecord (e.Node.Parent.Parent.Text).GetInfo (e.Node.Text).AfterSelect (ref tImage' ref this.PropertyGrid);  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,TreeViewNode_MouseClick,The following switch statement is missing a default case: switch ((NodeType)e.Node.Tag) {  // 0 == Copy  // 1 == Fill Tags  // 2 == FreeDB Query  // 3 == Store Image In Tags  // 4 == Extract Image To File  // 5 == AddPicture  // 6 == Delete  case NodeType.Collection:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = false;  	break;  case NodeType.Record:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = true;  	this.contextMenu.Items [2].Visible = true;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Song:  	this.contextMenu.Items [0].Visible = true;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = true;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Picture:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = true;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = true;  	this.contextMenu.Items [6].Visible = true;  	break;  case NodeType.Info:  	this.contextMenu.Items [0].Visible = false;  	this.contextMenu.Items [1].Visible = false;  	this.contextMenu.Items [2].Visible = false;  	this.contextMenu.Items [3].Visible = false;  	this.contextMenu.Items [4].Visible = false;  	this.contextMenu.Items [5].Visible = false;  	this.contextMenu.Items [6].Visible = true;  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,Copy_Click,The following switch statement is missing a default case: switch ((NodeType)this.TreeView.SelectedNode.Tag) {  case NodeType.Collection:  	_Thread = new Thread (CopyCollection);  	_Thread.Start ();  	break;  case NodeType.Record:  	_DirPath = this.TreeView.SelectedNode.Text;  	_Thread = new Thread (CopyRecord);  	_Thread.Start ();  	break;  case NodeType.Song:  	_DirPath = this.TreeView.SelectedNode.Parent.Parent.Text;  	_FilePath = this.TreeView.SelectedNode.Text;  	_Thread = new Thread (CopySong);  	_Thread.Start ();  	break;  case NodeType.Picture:  	_DirPath = this.TreeView.SelectedNode.Parent.Parent.Text;  	_FilePath = this.TreeView.SelectedNode.Text;  	_Thread = new Thread (CopyPicture);  	_Thread.Start ();  	break;  case NodeType.Info:  	_DirPath = this.TreeView.SelectedNode.Parent.Parent.Text;  	_FilePath = this.TreeView.SelectedNode.Text;  	_Thread = new Thread (CopyInfo);  	_Thread.Start ();  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,StoreImage_Click,The following switch statement is missing a default case: switch ((NodeType)this.TreeView.SelectedNode.Tag) {  case NodeType.Collection:  	_Thread = new Thread (StoreImages);  	_Thread.Start ();  	break;  case NodeType.Picture:  	_Thread = new Thread (StoreImage);  	_Thread.Start ();  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,ExtractImage_Click,The following switch statement is missing a default case: switch ((NodeType)this.TreeView.SelectedNode.Tag) {  case NodeType.Collection:  	_Thread = new Thread (ExtractImages);  	_Thread.Start ();  	break;  case NodeType.Song:  	tRecord = _Collection.GetRecord (_SelectedNode.Parent.Parent.Text);  	tSong = tRecord.GetSong (_SelectedNode.Text);  	if (tSong.Pictures.Count == 0) {  		MessageBox.Show ("Song has no embedded Pictures.");  		return;  	}  	tImagePath = System.IO.Path.Combine (tRecord.Path' tRecord.Artist + " - " + tRecord.Title + ".jpg");  	if (System.IO.File.Exists (tImagePath)) {  		MessageBox.Show (tImagePath + " exists already.");  		return;  	}  	try {  		tSong.SaveID3PictureToImage (tSong.Pictures [0]' tImagePath);  	}  	catch (Exception ex) {  		MessageBox.Show ("Could not extract image." + Environment.NewLine + ex.Message);  		return;  	}  	tRecord.ReadDirectory ();  	tRecord.UpdateForeColors ();  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,Delete_Click,The following switch statement is missing a default case: switch ((NodeType)this.TreeView.SelectedNode.Tag) {  case NodeType.Collection:  	MessageBox.Show ("Deleting the complete Collection is not supported.");  	break;  case NodeType.Record:  	this.DisposePictureBoxImage ();  	tRecord = _Collection.GetRecord (this.TreeView.SelectedNode.Text);  	_Collection.Records.Remove (tRecord);  	tRecord.Delete ();  	break;  case NodeType.Song:  	tRecord = _Collection.GetRecord (this.TreeView.SelectedNode.Parent.Parent.Text);  	Song tSong = tRecord.GetSong (this.TreeView.SelectedNode.Text);  	tRecord.Songs.Remove (tSong);  	tSong.Delete (true);  	tRecord.ReadDirectory ();  	break;  case NodeType.Picture:  	this.DisposePictureBoxImage ();  	tRecord = _Collection.GetRecord (this.TreeView.SelectedNode.Parent.Parent.Text);  	Picture tPicture = tRecord.GetPicture (this.TreeView.SelectedNode.Text);  	tRecord.Pictures.Remove (tPicture);  	tPicture.Delete (false);  	GC.Collect ();  	GC.SuppressFinalize (tPicture);  	tRecord.ReadDirectory ();  	break;  case NodeType.Info:  	tRecord = _Collection.GetRecord (this.TreeView.SelectedNode.Parent.Parent.Text);  	Info tInfo = tRecord.GetInfo (this.TreeView.SelectedNode.Text);  	tRecord.Infos.Remove (tInfo);  	tInfo.Delete (false);  	tRecord.ReadDirectory ();  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,PropertyGrid_ValueChanged,The following switch statement is missing a default case: switch ((NodeType)_SelectedNode.Tag) {  case NodeType.Collection:  	if (MessageBox.Show (String.Format ("Rename {0} Field of all Records to {1}?"' e.ChangedItem.Label' e.ChangedItem.Value)' "Rename"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) != DialogResult.Yes) {  		switch (e.ChangedItem.Label.ToString ()) {  		case "Artist":  			_Collection.Artist = e.OldValue.ToString ();  			break;  		case "Label":  			_Collection.Label = e.OldValue.ToString ();  			break;  		case "Comment":  			_Collection.Comment = e.OldValue.ToString ();  			break;  		case "Genre":  			_Collection.Genre = e.OldValue.ToString ();  			break;  		}  		return;  	}  	_PropertyLabel = e.ChangedItem.Label.ToString ();  	_PropertyValue = e.ChangedItem.Value.ToString ();  	_Thread = new Thread (SaveCollectionTags);  	_Thread.Start ();  	break;  case NodeType.Record:  	if (e.ChangedItem.Label == "Artist") {  		if (MessageBox.Show (String.Format ("Rename Song Artists of all Songs to {0}' too?"' e.ChangedItem.Value' e.ChangedItem.Value)' "Rename"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) == DialogResult.Yes) {  			Record tRecord = _Collection.GetRecord (this.TreeView.SelectedNode.Text);  			foreach (Song tSubSong in tRecord.Songs)  				tSubSong.Artist = tRecord.Artist;  		}  	}  	_DirPath = this.TreeView.SelectedNode.Text;  	_PropertyLabel = e.ChangedItem.Label.ToString ();  	_PropertyValue = e.ChangedItem.Value.ToString ();  	_Thread = new Thread (SaveRecordTags);  	_Thread.Start ();  	break;  case NodeType.Song:  	_DirPath = this.TreeView.SelectedNode.Parent.Parent.Text;  	_FilePath = this.TreeView.SelectedNode.Text;  	_Thread = new Thread (SaveSongTags);  	_Thread.Start ();  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,PropertyGrid_ValueChanged,The following switch statement is missing a default case: switch (e.ChangedItem.Label.ToString ()) {  case "Artist":  	_Collection.Artist = e.OldValue.ToString ();  	break;  case "Label":  	_Collection.Label = e.OldValue.ToString ();  	break;  case "Comment":  	_Collection.Comment = e.OldValue.ToString ();  	break;  case "Genre":  	_Collection.Genre = e.OldValue.ToString ();  	break;  }  
Missing Default,Chrismo.TagMotion.Forms,MainForm,C:\repos\phlegma_TagMotion\TagMotion\Forms\MainForm.cs,OnKeyPress,The following switch statement is missing a default case: switch (e.KeyChar) {  case (char)10:  case (char)13:  	if (tSelectedNode.IsExpanded)  		tSelectedNode.Collapse (true);  	else  		tSelectedNode.Expand ();  	break;  }  
