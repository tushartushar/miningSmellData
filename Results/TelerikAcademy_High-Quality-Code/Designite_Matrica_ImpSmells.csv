Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,Main,Cyclomatic complexity of the method is 14
Complex Conditional,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,Main,The conditional expression  "i + dx >= n || i + dx < 0 || j + dy >= n || j + dy < 0 || matrica [i + dx' j + dy] != 0"  is complex.
Complex Conditional,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,Main,The conditional expression  "i + dx >= n || i + dx < 0 || j + dy >= n || j + dy < 0 || matrica [i + dx' j + dy] != 0"  is complex.
Magic Number,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,change,The following statement contains a magic number: for (int count = 0; count < 8; count++)  	if (dirX [count] == dx && dirY [count] == dy) {  		cd = count;  		break;  	}  
Magic Number,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,change,The following statement contains a magic number: if (cd == 7) {  	dx = dirX [0];  	dy = dirY [0];  	return;  }  
Magic Number,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,proverka,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (x + dirX [i] >= arr.GetLength (0) || x + dirX [i] < 0)  		dirX [i] = 0;  	if (y + dirY [i] >= arr.GetLength (0) || y + dirY [i] < 0)  		dirY [i] = 0;  }  
Magic Number,Task3,WalkInMatrica,D:\newReposJune17\TelerikAcademy_High-Quality-Code\13. Refactoring\Homework\Matrica.cs,proverka,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	if (arr [x + dirX [i]' y + dirY [i]] == 0)  		return true;  
