Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PoppingBaloons,GameState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\GameState.cs,displayScoreboard,The length of the statement  "                Action<Tuple<string' int>> print = elem => { Console.WriteLine(elem.Item1 + "  " + elem.Item2.ToString() + " turns "); }; " is 121.
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,baloonsState,The following statement contains a magic number: poleto = new int[6' 10];
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,baloonsState,The following statement contains a magic number: poleto = new int[6' 10];
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,baloonsState,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  for (int j = 0; j < 10; j++)                  {                      poleto[i' j] = rnd.Next(1' 5);                  }              }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,baloonsState,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  for (int j = 0; j < 10; j++)                  {                      poleto[i' j] = rnd.Next(1' 5);                  }              }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,baloonsState,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  for (int j = 0; j < 10; j++)                  {                      poleto[i' j] = rnd.Next(1' 5);                  }              }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,pr,The following statement contains a magic number: switch (a)              {                  case 1:                      return '1';                    case 2:                      return '2';                    case 3:                      return '3';                    case 4:                      return '4';                    default:                      return '-';                }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,pr,The following statement contains a magic number: switch (a)              {                  case 1:                      return '1';                    case 2:                      return '2';                    case 3:                      return '3';                    case 4:                      return '4';                    default:                      return '-';                }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,pr,The following statement contains a magic number: switch (a)              {                  case 1:                      return '1';                    case 2:                      return '2';                    case 3:                      return '3';                    case 4:                      return '4';                    default:                      return '-';                }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,popBaloon,The following statement contains a magic number: if (poleto[x - 1' y - 1] == 0)              {                  Console.WriteLine("Invalid Move! Can not pop a baloon at that place!!");                  return false;              }              else              {                  cnt++;                  int state = poleto[x - 1' y - 1];                  int top = x - 1;                  int bottom = x - 1;                  int left = y - 1;                  int right = y - 1;                  while (top > 0 && (poleto[top - 1' y - 1] == state))                  {                      top--;                  }                    while (bottom < 5 && poleto[bottom + 1' y - 1] == state)                  {                      bottom++;                  }                  while (left > 0 && poleto[x - 1' left - 1] == state)                  {                      left--;                  }                  while (right < 9 && poleto[x - 1' right + 1] == state)                  {                      right++;                  }                    for (int i = left; i <= right; i++)                  {                        //first remove the elements on the same row and float the elemnts above down                      if (x == 1)                          poleto[x - 1' i] = 0;                        else                      {                          for (int j = x - 1; j > 0; j--)                          {                              poleto[j' i] = poleto[j - 1' i];                              poleto[j - 1' i] = 0;                          }                      }                  }                    //if that's enough'just stop                  if (top == bottom)                  {                      Console.WriteLine();                      this.printArray();                      Console.WriteLine();                      return kraj();                  }                  else                  {   //otherwise fix the problematic column as well                      for (int i = top; i > 0; --i)                      {//first float the elements above down and replace them                          poleto[i + bottom - top' y - 1] = poleto[i' y - 1];                          poleto[i' y - 1] = 0;                      }                      if (bottom - top > top - 1)                      {   //is there are more baloons to pop in the column than elements above them' need to pop them as well                          for (int i = top; i <= bottom; i++)                          {                              if (poleto[i' y - 1] == state)                                  poleto[i' y - 1] = 0;                          }                      }                  }                  Console.WriteLine();                  this.printArray();                  Console.WriteLine();                  return kraj();              }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,popBaloon,The following statement contains a magic number: if (poleto[x - 1' y - 1] == 0)              {                  Console.WriteLine("Invalid Move! Can not pop a baloon at that place!!");                  return false;              }              else              {                  cnt++;                  int state = poleto[x - 1' y - 1];                  int top = x - 1;                  int bottom = x - 1;                  int left = y - 1;                  int right = y - 1;                  while (top > 0 && (poleto[top - 1' y - 1] == state))                  {                      top--;                  }                    while (bottom < 5 && poleto[bottom + 1' y - 1] == state)                  {                      bottom++;                  }                  while (left > 0 && poleto[x - 1' left - 1] == state)                  {                      left--;                  }                  while (right < 9 && poleto[x - 1' right + 1] == state)                  {                      right++;                  }                    for (int i = left; i <= right; i++)                  {                        //first remove the elements on the same row and float the elemnts above down                      if (x == 1)                          poleto[x - 1' i] = 0;                        else                      {                          for (int j = x - 1; j > 0; j--)                          {                              poleto[j' i] = poleto[j - 1' i];                              poleto[j - 1' i] = 0;                          }                      }                  }                    //if that's enough'just stop                  if (top == bottom)                  {                      Console.WriteLine();                      this.printArray();                      Console.WriteLine();                      return kraj();                  }                  else                  {   //otherwise fix the problematic column as well                      for (int i = top; i > 0; --i)                      {//first float the elements above down and replace them                          poleto[i + bottom - top' y - 1] = poleto[i' y - 1];                          poleto[i' y - 1] = 0;                      }                      if (bottom - top > top - 1)                      {   //is there are more baloons to pop in the column than elements above them' need to pop them as well                          for (int i = top; i <= bottom; i++)                          {                              if (poleto[i' y - 1] == state)                                  poleto[i' y - 1] = 0;                          }                      }                  }                  Console.WriteLine();                  this.printArray();                  Console.WriteLine();                  return kraj();              }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,printArray,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  Console.Write(i.ToString() + " | ");                  for (int j = 0; j < 10; j++)                      Console.Write(pr(poleto[i' j]) + " ");                  Console.WriteLine("| ");                    }
Magic Number,PoppingBaloons,baloonsState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\baloonsState.cs,printArray,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  Console.Write(i.ToString() + " | ");                  for (int j = 0; j < 10; j++)                      Console.Write(pr(poleto[i' j]) + " ");                  Console.WriteLine("| ");                    }
Magic Number,PoppingBaloons,GameState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\GameState.cs,executeCommand,The following statement contains a magic number: if (s == "exit")              {                Console.WriteLine("Thanks for playing!!");      Environment.Exit(0);       }              else                  if (s == "restart")                      restart();                      else                  {                      if (s.Length == 3)                      {                          if (s == "top")                              displayScoreboard();                          else                          {//check input validation                              int fst' snd;                              bool first = Int32.TryParse(s.Remove(1)' out fst);                                    bool second = Int32.TryParse(s.Remove(0' 1)' out snd);                              if (first && second)                                  sendCommand(fst' snd);//sends command to the baloonsState game holder                          }                            }                      else Console.WriteLine("Unknown Command");                  }
Magic Number,PoppingBaloons,GameState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\GameState.cs,sendCommand,The following statement contains a magic number: if (fst > 5)                  Console.WriteLine("Indexes too big");              else                  end = __st.popBaloon(fst+1' snd+1);
Magic Number,PoppingBaloons,GameState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\GameState.cs,updateScoreboard,The following statement contains a magic number: if (scoreboard.Count < 5)              {                  add(__st.cnt);                  return;              }              else              {                        if (scoreboard.ElementAt<Tuple<string' int>>(4).Item2 >= __st.cnt)                  {                      add(__st.cnt);                      scoreboard.RemoveRange(4' 1);//if the new name replaces one of the old ones' remove the old one                  }              }
Magic Number,PoppingBaloons,GameState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\GameState.cs,updateScoreboard,The following statement contains a magic number: if (scoreboard.Count < 5)              {                  add(__st.cnt);                  return;              }              else              {                        if (scoreboard.ElementAt<Tuple<string' int>>(4).Item2 >= __st.cnt)                  {                      add(__st.cnt);                      scoreboard.RemoveRange(4' 1);//if the new name replaces one of the old ones' remove the old one                  }              }
Magic Number,PoppingBaloons,GameState,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Baloons-Pop\Baloons-Pop-1\GameState.cs,updateScoreboard,The following statement contains a magic number: if (scoreboard.Count < 5)              {                  add(__st.cnt);                  return;              }              else              {                        if (scoreboard.ElementAt<Tuple<string' int>>(4).Item2 >= __st.cnt)                  {                      add(__st.cnt);                      scoreboard.RemoveRange(4' 1);//if the new name replaces one of the old ones' remove the old one                  }              }
