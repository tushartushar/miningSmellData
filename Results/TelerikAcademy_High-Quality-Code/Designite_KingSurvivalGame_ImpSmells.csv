Implementation smell,Namespace,Class,File,Method,Description
Long Method,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The method has 111 lines of code.
Long Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The method has 224 lines of code.
Long Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The method has 141 lines of code.
Long Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The method has 160 lines of code.
Complex Method,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,Cyclomatic complexity of the method is 44
Complex Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,Cyclomatic complexity of the method is 76
Complex Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,Cyclomatic complexity of the method is 24
Complex Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,Cyclomatic complexity of the method is 11
Complex Method,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,Cyclomatic complexity of the method is 32
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: if (counter % 2 == 0) {  	int[] equal = new int[4];  	for (int i = 0; i < validKingInputs.Length; i++) {  		string reference = validKingInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	bool hasAnEqual = false;  	for (int i = 0; i < 4; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  } else {  	char startLetter = checkedString [0];  	int[] equal = new int[2];  	bool hasAnEqual = false;  	switch (startLetter) {  	case 'A':  		for (int i = 0; i < validAPawnInputs.Length; i++) {  			string reference = validAPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'B':  		for (int i = 0; i < validBPawnInputs.Length; i++) {  			string reference = validBPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'C':  		for (int i = 0; i < validCPawnInputs.Length; i++) {  			string reference = validCPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	case 'D':  		for (int i = 0; i < validDPawnInputs.Length; i++) {  			string reference = validDPawnInputs [i];  			int result = checkedString.CompareTo (reference);  			if (result != 0) {  				equal [i] = 0;  			} else {  				equal [i] = 1;  			}  		}  		for (int i = 0; i < 2; i++) {  			if (equal [i] == 1) {  				hasAnEqual = true;  			}  		}  		if (!hasAnEqual) {  			Console.WriteLine ("Invalid command name!");  		}  		return hasAnEqual;  	default:  		Console.WriteLine ("Invalid command name!");  		return false;  	//    break;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (equal [i] == 1) {  		hasAnEqual = true;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: switch (startLetter) {  case 'A':  	for (int i = 0; i < validAPawnInputs.Length; i++) {  		string reference = validAPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'B':  	for (int i = 0; i < validBPawnInputs.Length; i++) {  		string reference = validBPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'C':  	for (int i = 0; i < validCPawnInputs.Length; i++) {  		string reference = validCPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'D':  	for (int i = 0; i < validDPawnInputs.Length; i++) {  		string reference = validDPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  default:  	Console.WriteLine ("Invalid command name!");  	return false;  //    break;  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: switch (startLetter) {  case 'A':  	for (int i = 0; i < validAPawnInputs.Length; i++) {  		string reference = validAPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'B':  	for (int i = 0; i < validBPawnInputs.Length; i++) {  		string reference = validBPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'C':  	for (int i = 0; i < validCPawnInputs.Length; i++) {  		string reference = validCPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'D':  	for (int i = 0; i < validDPawnInputs.Length; i++) {  		string reference = validDPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  default:  	Console.WriteLine ("Invalid command name!");  	return false;  //    break;  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: switch (startLetter) {  case 'A':  	for (int i = 0; i < validAPawnInputs.Length; i++) {  		string reference = validAPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'B':  	for (int i = 0; i < validBPawnInputs.Length; i++) {  		string reference = validBPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'C':  	for (int i = 0; i < validCPawnInputs.Length; i++) {  		string reference = validCPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'D':  	for (int i = 0; i < validDPawnInputs.Length; i++) {  		string reference = validDPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  default:  	Console.WriteLine ("Invalid command name!");  	return false;  //    break;  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: switch (startLetter) {  case 'A':  	for (int i = 0; i < validAPawnInputs.Length; i++) {  		string reference = validAPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'B':  	for (int i = 0; i < validBPawnInputs.Length; i++) {  		string reference = validBPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'C':  	for (int i = 0; i < validCPawnInputs.Length; i++) {  		string reference = validCPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  case 'D':  	for (int i = 0; i < validDPawnInputs.Length; i++) {  		string reference = validDPawnInputs [i];  		int result = checkedString.CompareTo (reference);  		if (result != 0) {  			equal [i] = 0;  		} else {  			equal [i] = 1;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (equal [i] == 1) {  			hasAnEqual = true;  		}  	}  	if (!hasAnEqual) {  		Console.WriteLine ("Invalid command name!");  	}  	return hasAnEqual;  default:  	Console.WriteLine ("Invalid command name!");  	return false;  //    break;  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	if (equal [i] == 1) {  		hasAnEqual = true;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	if (equal [i] == 1) {  		hasAnEqual = true;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	if (equal [i] == 1) {  		hasAnEqual = true;  	}  }  
Magic Number,KingSurvivalGame,BasicGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\BasicGame.cs,proverka2,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	if (equal [i] == 1) {  		hasAnEqual = true;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (checkDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 0] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 0] = true;  			pMoves [0' 1] = true;  			break;  		case 'B':  			pMoves [1' 0] = true;  			pMoves [1' 1] = true;  			break;  		case 'C':  			pMoves [2' 0] = true;  			pMoves [2' 1] = true;  			break;  		case 'D':  			pMoves [3' 0] = true;  			pMoves [3' 1] = true;  			break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		return newCoords;  	} else {  		/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  		switch (currentPawn) {  		case 'A':  			pMoves [0' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'B':  			pMoves [1' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'C':  			pMoves [2' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		case 'D':  			pMoves [3' 1] = false;  			/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  		default:  			Console.WriteLine ("ERROR!");  			break;  		}  		for (int i = 0; i < 4; i++) {  			for (int j = 0; j < 2; j++) {  				if (pMoves [i' j] == true) {  					allAreFalse = false;  				}  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King wins!");  			gameIsFinished = true;  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/* switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 0] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 0] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 0] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 0] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 0] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [2' 0] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [2' 1] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [3' 0] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [3' 1] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'B':  	pMoves [1' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'C':  	pMoves [2' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'D':  	pMoves [3' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0'i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'B':  	pMoves [1' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'C':  	pMoves [2' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'D':  	pMoves [3' 0] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [2' 0] = false;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [3' 0] = false;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	for (int j = 0; j < 2; j++) {  		if (pMoves [i' j] == true) {  			allAreFalse = false;  		}  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	for (int j = 0; j < 2; j++) {  		if (pMoves [i' j] == true) {  			allAreFalse = false;  		}  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: for (int j = 0; j < 2; j++) {  	if (pMoves [i' j] == true) {  		allAreFalse = false;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 0] = true;  		pMoves [0' 1] = true;  		break;  	case 'B':  		pMoves [1' 0] = true;  		pMoves [1' 1] = true;  		break;  	case 'C':  		pMoves [2' 0] = true;  		pMoves [2' 1] = true;  		break;  	case 'D':  		pMoves [3' 0] = true;  		pMoves [3' 1] = true;  		break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	return newCoords;  } else {  	/*   switch (currentPawn)                     {                     case 'A':                     pawnExistingMoves[0' 1] = false;                     break;                     case 'B':                     pawnExistingMoves[1' 1] = false;                     break;                     case 'C':                     pawnExistingMoves[2' 1] = false;                     break;                     case 'D':                     pawnExistingMoves[3' 1] = false;                     break;                     default:                     Console.WriteLine("ERROR!");                     break;                     }*/bool allAreFalse = true;  	switch (currentPawn) {  	case 'A':  		pMoves [0' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'B':  		pMoves [1' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'C':  		pMoves [2' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	case 'D':  		pMoves [3' 1] = false;  		/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  	default:  		Console.WriteLine ("ERROR!");  		break;  	}  	for (int i = 0; i < 4; i++) {  		for (int j = 0; j < 2; j++) {  			if (pMoves [i' j] == true) {  				allAreFalse = false;  			}  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King wins!");  		gameIsFinished = true;  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 0] = true;  	pMoves [0' 1] = true;  	break;  case 'B':  	pMoves [1' 0] = true;  	pMoves [1' 1] = true;  	break;  case 'C':  	pMoves [2' 0] = true;  	pMoves [2' 1] = true;  	break;  case 'D':  	pMoves [3' 0] = true;  	pMoves [3' 1] = true;  	break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [2' 0] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [2' 1] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [3' 0] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [3' 1] = true;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'B':  	pMoves [1' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'C':  	pMoves [2' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'D':  	pMoves [3' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn) {  case 'A':  	pMoves [0' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[0' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'B':  	pMoves [1' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[1' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'C':  	pMoves [2' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[2' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  case 'D':  	pMoves [3' 1] = false;  	/*for (int i = 0; i < 2; i++)                             {                             if (pawnExistingMoves[3' i] == true)                             {                             allAreFalse = false;                             }                             }*/break;  default:  	Console.WriteLine ("ERROR!");  	break;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [2' 1] = false;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: pMoves [3' 1] = false;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	for (int j = 0; j < 2; j++) {  		if (pMoves [i' j] == true) {  			allAreFalse = false;  		}  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	for (int j = 0; j < 2; j++) {  		if (pMoves [i' j] == true) {  			allAreFalse = false;  		}  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The following statement contains a magic number: for (int j = 0; j < 2; j++) {  	if (pMoves [i' j] == true) {  		allAreFalse = false;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (firstDirection == 'U') {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [0] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [1] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  } else {  	if (secondDirection == 'L') {  		newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [2] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	} else {  		newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  		newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  		if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  			char sign = field [currentCoordinates [0]' currentCoordinates [1]];  			field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  			field [newCoords [0]' newCoords [1]] = sign;  			counter++;  			for (int i = 0; i < 4; i++) {  				kMoves [i] = true;  			}  			checkForKingExit (newCoords [0]);  			return newCoords;  		} else {  			kMoves [3] = false;  			bool allAreFalse = true;  			for (int i = 0; i < 4; i++) {  				if (kMoves [i] == true) {  					allAreFalse = false;  				}  			}  			if (allAreFalse) {  				gameIsFinished = true;  				Console.WriteLine ("King loses!");  				return null;  			}  			Console.WriteLine ("You can't go in this direction! ");  			return null;  		}  	}  	// checkForKingExit();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [0] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [1] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [0] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [1] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [0] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [1] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentUpLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [0] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentUpRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentUpRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [1] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [0] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [0] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	kMoves [i] = true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (kMoves [i] == true) {  		allAreFalse = false;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [1] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [1] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	kMoves [i] = true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (kMoves [i] == true) {  		allAreFalse = false;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [2] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [3] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [2] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [3] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [2] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [3] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [2] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [3] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [2] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [3] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (secondDirection == 'L') {  	newCoords [0] = currentCoordinates [0] + displasmentDownLeft [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownLeft [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [2] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  } else {  	newCoords [0] = currentCoordinates [0] + displasmentDownRight [0];  	newCoords [1] = currentCoordinates [1] + displasmentDownRight [1];  	if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  		char sign = field [currentCoordinates [0]' currentCoordinates [1]];  		field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  		field [newCoords [0]' newCoords [1]] = sign;  		counter++;  		for (int i = 0; i < 4; i++) {  			kMoves [i] = true;  		}  		checkForKingExit (newCoords [0]);  		return newCoords;  	} else {  		kMoves [3] = false;  		bool allAreFalse = true;  		for (int i = 0; i < 4; i++) {  			if (kMoves [i] == true) {  				allAreFalse = false;  			}  		}  		if (allAreFalse) {  			gameIsFinished = true;  			Console.WriteLine ("King loses!");  			return null;  		}  		Console.WriteLine ("You can't go in this direction! ");  		return null;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [2] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [2] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [2] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	kMoves [i] = true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: kMoves [2] = false;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (kMoves [i] == true) {  		allAreFalse = false;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [3] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [3] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: if (proverka (newCoords) && field [newCoords [0]' newCoords [1]] == ' ') {  	char sign = field [currentCoordinates [0]' currentCoordinates [1]];  	field [currentCoordinates [0]' currentCoordinates [1]] = ' ';  	field [newCoords [0]' newCoords [1]] = sign;  	counter++;  	for (int i = 0; i < 4; i++) {  		kMoves [i] = true;  	}  	checkForKingExit (newCoords [0]);  	return newCoords;  } else {  	kMoves [3] = false;  	bool allAreFalse = true;  	for (int i = 0; i < 4; i++) {  		if (kMoves [i] == true) {  			allAreFalse = false;  		}  	}  	if (allAreFalse) {  		gameIsFinished = true;  		Console.WriteLine ("King loses!");  		return null;  	}  	Console.WriteLine ("You can't go in this direction! ");  	return null;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	kMoves [i] = true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: kMoves [3] = false;  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkNextKingPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (kMoves [i] == true) {  		allAreFalse = false;  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkForKingExit,The following statement contains a magic number: if (currentKingXAxe == 2) {  	Console.WriteLine ("End!");  	Console.WriteLine ("King wins in {0} moves!"' counter / 2);  	gameIsFinished = true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkForKingExit,The following statement contains a magic number: if (currentKingXAxe == 2) {  	Console.WriteLine ("End!");  	Console.WriteLine ("King wins in {0} moves!"' counter / 2);  	gameIsFinished = true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,checkForKingExit,The following statement contains a magic number: Console.WriteLine ("King wins in {0} moves!"' counter / 2);  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int row = 0; row < field.GetLength (0); row++) {  	for (int col = 0; col < field.GetLength (1); col++) {  		int[] coordinates =  {  			row'  			col  		};  		bool isCellIn = proverka (coordinates);  		if (isCellIn) {  			if (row % 2 == 0) {  				if (col % 4 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 == 0) {  					Console.Write (field [row' col]);  				} else if (col % 2 != 0) {  					Console.Write (field [row' col]);  				}  			} else if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else {  			Console.Write (field [row' col]);  		}  	}  	Console.WriteLine ();  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: for (int col = 0; col < field.GetLength (1); col++) {  	int[] coordinates =  {  		row'  		col  	};  	bool isCellIn = proverka (coordinates);  	if (isCellIn) {  		if (row % 2 == 0) {  			if (col % 4 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 == 0) {  				Console.Write (field [row' col]);  			} else if (col % 2 != 0) {  				Console.Write (field [row' col]);  			}  		} else if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else {  		Console.Write (field [row' col]);  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (isCellIn) {  	if (row % 2 == 0) {  		if (col % 4 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 == 0) {  			Console.Write (field [row' col]);  		} else if (col % 2 != 0) {  			Console.Write (field [row' col]);  		}  	} else if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (row % 2 == 0) {  	if (col % 4 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 == 0) {  		Console.Write (field [row' col]);  	} else if (col % 2 != 0) {  		Console.Write (field [row' col]);  	}  } else if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 4 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 2 == 0) {  	Console.Write (field [row' col]);  } else if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,PokajiDyskata,The following statement contains a magic number: if (col % 2 != 0) {  	Console.Write (field [row' col]);  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (commandNameIsOK) {  	char startLetter = checkedInput [0];  	switch (startLetter) {  	case 'A':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [0' 0];  			oldCoordinates [1] = posPaws [0' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  			if (coords != null) {  				posPaws [0' 0] = coords [0];  				posPaws [0' 1] = coords [1];  			}  		}  		return true;  	case 'B':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [1' 0];  			oldCoordinates [1] = posPaws [1' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'C':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  			if (coords != null) {  				posPaws [2' 0] = coords [0];  				posPaws [2' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [2' 0];  			oldCoordinates [1] = posPaws [2' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  			if (coords != null) {  				posPaws [1' 0] = coords [0];  				posPaws [1' 1] = coords [1];  			}  		}  		return true;  	case 'D':  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		} else {  			//=='D'  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posPaws [3' 0];  			oldCoordinates [1] = posPaws [3' 1];  			int[] coords = new int[2];  			coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  			if (coords != null) {  				posPaws [3' 0] = coords [0];  				posPaws [3' 1] = coords [1];  			}  		}  		return true;  	case 'K':  		if (checkedInput [1] == 'U') {  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		} else {  			//=KD_  			if (checkedInput [2] == 'L') {  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			} else {  				//==KDD  				int[] oldCoordinates = new int[2];  				oldCoordinates [0] = posKing [0];  				oldCoordinates [1] = posKing [1];  				int[] coords = new int[2];  				coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  				if (coords != null) {  					posKing [0] = coords [0];  					posKing [1] = coords [1];  				}  			}  			return true;  		}  	default:  		Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  		return false;  	}  } else {  	return false;  	//message is from other  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter) {  case 'A':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [0' 0];  		oldCoordinates [1] = posPaws [0' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  		if (coords != null) {  			posPaws [0' 0] = coords [0];  			posPaws [0' 1] = coords [1];  		}  	}  	return true;  case 'B':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [1' 0];  		oldCoordinates [1] = posPaws [1' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'C':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  		if (coords != null) {  			posPaws [2' 0] = coords [0];  			posPaws [2' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [2' 0];  		oldCoordinates [1] = posPaws [2' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  		if (coords != null) {  			posPaws [1' 0] = coords [0];  			posPaws [1' 1] = coords [1];  		}  	}  	return true;  case 'D':  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	} else {  		//=='D'  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posPaws [3' 0];  		oldCoordinates [1] = posPaws [3' 1];  		int[] coords = new int[2];  		coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  		if (coords != null) {  			posPaws [3' 0] = coords [0];  			posPaws [3' 1] = coords [1];  		}  	}  	return true;  case 'K':  	if (checkedInput [1] == 'U') {  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	} else {  		//=KD_  		if (checkedInput [2] == 'L') {  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		} else {  			//==KDD  			int[] oldCoordinates = new int[2];  			oldCoordinates [0] = posKing [0];  			oldCoordinates [1] = posKing [1];  			int[] coords = new int[2];  			coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  			if (coords != null) {  				posKing [0] = coords [0];  				posKing [1] = coords [1];  			}  		}  		return true;  	}  default:  	Console.WriteLine ("Sorry' there are some errors' but I can't tell you anything! You broked my program!");  	return false;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [0' 0];  	oldCoordinates [1] = posPaws [0' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'A');  	if (coords != null) {  		posPaws [0' 0] = coords [0];  		posPaws [0' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [1' 0];  	oldCoordinates [1] = posPaws [1' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'B');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'C');  	if (coords != null) {  		posPaws [2' 0] = coords [0];  		posPaws [2' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [2' 0];  	oldCoordinates [1] = posPaws [2' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'C');  	if (coords != null) {  		posPaws [1' 0] = coords [0];  		posPaws [1' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [0] = posPaws [2' 0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [1] = posPaws [2' 1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (coords != null) {  	posPaws [2' 0] = coords [0];  	posPaws [2' 1] = coords [1];  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (coords != null) {  	posPaws [2' 0] = coords [0];  	posPaws [2' 1] = coords [1];  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: posPaws [2' 0] = coords [0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: posPaws [2' 1] = coords [1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [0] = posPaws [2' 0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [1] = posPaws [2' 1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'L'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  } else {  	//=='D'  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posPaws [3' 0];  	oldCoordinates [1] = posPaws [3' 1];  	int[] coords = new int[2];  	coords = CheckNextPownPosition (oldCoordinates' 'R'' 'D');  	if (coords != null) {  		posPaws [3' 0] = coords [0];  		posPaws [3' 1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [0] = posPaws [3' 0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [1] = posPaws [3' 1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (coords != null) {  	posPaws [3' 0] = coords [0];  	posPaws [3' 1] = coords [1];  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (coords != null) {  	posPaws [3' 0] = coords [0];  	posPaws [3' 1] = coords [1];  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: posPaws [3' 0] = coords [0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: posPaws [3' 1] = coords [1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [0] = posPaws [3' 0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: oldCoordinates [1] = posPaws [3' 1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (coords != null) {  	posPaws [3' 0] = coords [0];  	posPaws [3' 1] = coords [1];  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (coords != null) {  	posPaws [3' 0] = coords [0];  	posPaws [3' 1] = coords [1];  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: posPaws [3' 0] = coords [0];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: posPaws [3' 1] = coords [1];  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [1] == 'U') {  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  } else {  	//=KD_  	if (checkedInput [2] == 'L') {  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	} else {  		//==KDD  		int[] oldCoordinates = new int[2];  		oldCoordinates [0] = posKing [0];  		oldCoordinates [1] = posKing [1];  		int[] coords = new int[2];  		coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  		if (coords != null) {  			posKing [0] = coords [0];  			posKing [1] = coords [1];  		}  	}  	return true;  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'U'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	//==KDD  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	//==KDD  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	//==KDD  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	//==KDD  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,proverkaIProcess,The following statement contains a magic number: if (checkedInput [2] == 'L') {  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'L');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  } else {  	//==KDD  	int[] oldCoordinates = new int[2];  	oldCoordinates [0] = posKing [0];  	oldCoordinates [1] = posKing [1];  	int[] coords = new int[2];  	coords = checkNextKingPosition (oldCoordinates' 'D'' 'R');  	if (coords != null) {  		posKing [0] = coords [0];  		posKing [1] = coords [1];  	}  }  
Magic Number,KingSurvivalGame,KingPawsGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\KingPawsGame.cs,InteractWithUser,The following statement contains a magic number: if (gameIsFinished) {  	//igrata svyrshi  	Console.WriteLine ("Game is finished!");  	return;  } else {  	if (moveCounter % 2 == 0) {  		PokajiDyskata ();  		ProcessKingSide ();  	} else {  		PokajiDyskata ();  		ProcessPawnSide ();  	}  }  
Magic Number,KingSurvivalGame,KingPawsGame,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\KingPawsGame.cs,InteractWithUser,The following statement contains a magic number: if (moveCounter % 2 == 0) {  	PokajiDyskata ();  	ProcessKingSide ();  } else {  	PokajiDyskata ();  	ProcessPawnSide ();  }  
Duplicate Code,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 44)' (120' 150))
Duplicate Code,KingSurvivalGame,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-6\Game.cs,CheckNextPownPosition,The method contains a code clone-set at the following line numbers (starting from the method definition): ((90' 116)' (196' 222))
