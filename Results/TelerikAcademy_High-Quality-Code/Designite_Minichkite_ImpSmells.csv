Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GenerateMinesweeperMatrix,Cyclomatic complexity of the method is 10
Complex Method,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,procheti,Cyclomatic complexity of the method is 8
Complex Method,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,Cyclomatic complexity of the method is 12
Complex Conditional,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GetNeighbourMinesCount,The conditional expression  "currentNeighbourRow < 0                                             ||                                             currentNeighbourRow >= matrica.GetLength(0)                                             ||                          currentNeighbourCol < 0                                             ||                                            currentNeighbourCol >= matrica.GetLength(1)"  is complex.
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GenerateMinesweeperMatrix,The following statement contains a magic number: char['] matrix = new char[5' 10];
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GenerateMinesweeperMatrix,The following statement contains a magic number: char['] matrix = new char[5' 10];
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GenerateMinesweeperMatrix,The following statement contains a magic number: int minesToInsert = 15;
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GenerateMinesweeperMatrix,The following statement contains a magic number: while (minesToInsert > 0)              {                  for (int i = 0; i < matrix.GetLength(0); i++)                  {                      if (minesToInsert == 0)                      {                          break;                      }                        for (int j = 0; j < matrix.GetLength(1); j++)                      {                          if (minesToInsert == 0)                          {                              break;                                }                            int randomNumber = random.Next(0' 3);                          if (randomNumber == 1)                          {                              matrix[i' j] = '*';                              minesToInsert--;                          }                      }                  }              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,GetNeighbourMinesCount,The following statement contains a magic number: for (int position = 0; position < 8; position++)              {                    currentNeighbourRow = row + rowPositions[position];                    currentNeighbourCol = col + colPositions[position];                      if (currentNeighbourRow < 0                                             ||                                             currentNeighbourRow >= matrica.GetLength(0)                                             ||                          currentNeighbourCol < 0                                             ||                                            currentNeighbourCol >= matrica.GetLength(1))                  {                      continue;                  }                    if (matrica[currentNeighbourRow'                       currentNeighbourCol] == '*')                  {                                           minesCount++;                  }                }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,procheti,The following statement contains a magic number: if (input.Length != 3)              {                  Console.WriteLine("Illegal input!");                  return;              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,procheti,The following statement contains a magic number: proverka =                   int.TryParse(                  input[2].ToString()'                  out colInput);
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,NovaIgra,The following statement contains a magic number: playerMatrix = new char[5' 10];
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,NovaIgra,The following statement contains a magic number: playerMatrix = new char[5' 10];
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,NovaIgra,The following statement contains a magic number: matrica = new char[5' 10];
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,NovaIgra,The following statement contains a magic number: matrica = new char[5' 10];
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
Magic Number,Igrata_Minichki,Telerik,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Minesweeper\Minesweeper-7\Telerik.cs,DoMove,The following statement contains a magic number: if (matrica[row' col] == '*')              {                  for (int i = 0; i < matrica.GetLength(0); i++)                  {                      for (int j = 0; j < matrica.GetLength(1); j++)                      {                          if (matrica[i' j] == '*')                          {                              playerMatrix[i' j] = '*';                              continue;                          }                            if (playerMatrix[i' j] == '?')                          {                              playerMatrix[i' j] = '-';                          }                      }                  }                    PrintMatrix(playerMatrix);                  gameInProgress = false;                  Console.WriteLine();                  //oh izgyrmq                  Console.WriteLine("Booooom! You were killed by a mine. You revealed {0} cells without mines."' cellsOpened);                    if (topListCellsOpened.Count == 0)                  {                      topListCellsOpened.Add(new int());                      topListNames.Add(String.Empty);                  }                    for (int i = 0; i < topListCellsOpened.Count; i++)                  {                      if (cellsOpened >= topListCellsOpened[i])                      {                          topListCellsOpened.Insert(i' cellsOpened);                                                   Console.Write("Please enter your name for the top scoreboard: ");                          string igrach = Console.ReadLine();                          topListNames.Insert(i' igrach);                          if (emptyScoreboard || topListCellsOpened.Count == 6)                          {                              topListCellsOpened.RemoveAt(topListCellsOpened.Count - 1);                              topListNames.RemoveAt(topListNames.Count - 1);                              emptyScoreboard = false;                          }                          playerAddedToScoreboard = true;                          break;                      }                  }                  if (!playerAddedToScoreboard && topListCellsOpened.Count < 5)                  {                      topListCellsOpened.Add(cellsOpened);                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Add(playerName);                  }                    playerAddedToScoreboard = false;                  DaiRezultati(topListNames' topListCellsOpened);                  NovaIgra();              }              else              {                  cellsOpened++;                  if (cellsOpened == 35)                  {                      PrintMatrix(matrica);                      Console.WriteLine("Congratulations! You revealed all cells without mines!");                      gameInProgress = false;                      Console.Write("Please enter your name for the top scoreboard: ");                      string playerName = Console.ReadLine();                      topListNames.Insert(0' playerName);                      topListCellsOpened.Insert(0' 35);                        if (topListCellsOpened.Count == 6)                      {                          topListCellsOpened.RemoveAt(5);                          topListNames.RemoveAt(5);                      }                      DaiRezultati(topListNames' topListCellsOpened);                      NovaIgra();                      return;                  }                  playerMatrix[row' col] = matrica[row' col];                  PrintMatrix(playerMatrix);              }
