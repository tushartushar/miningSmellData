Implementation smell,Namespace,Class,File,Method,Description
Virtual Method Call from Constructor,SOLID_and_Other_Principles._3._Liskov_Substitution.VirtualCallInConstructor,BaseClass,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\3. Liskov Substitution\VirtualCallInConstructor\BaseClass.cs,BaseClass,The constructor "BaseClass" calls a virtual method "AddToDatabase".
Magic Number,SingleResponsibilityBooksAfter,Library,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\1. Single Responsibility\2. After - Books\Library.cs,FindBook,The following statement contains a magic number: return 42;  
Magic Number,OpenClosedFileDownloadAfter,Progress,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\1. After - File Stream\Progress.cs,CurrentPercent,The following statement contains a magic number: return this.result.Sent * 100 / this.result.Length;  
Magic Number,OpenClosedFileDownloadBefore,Progress,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\1. Before - File Stream\Progress.cs,CurrentPercent,The following statement contains a magic number: return this.file.Sent * 100 / this.file.Length;  
Magic Number,OpenClosedShoppingCartAfter,PerGramPriceRule,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. After - Shopping Cart\PerGramPriceRule.cs,CalculatePrice,The following statement contains a magic number: return item.Quantity * 4m / 1000;  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: foreach (OrderItem orderItem in this.Items) {  	if (orderItem.Sku.StartsWith ("EACH")) {  		total += orderItem.Quantity * 5m;  	} else if (orderItem.Sku.StartsWith ("WEIGHT")) {  		// quantity is in grams' price is per kg  		total += orderItem.Quantity * 4m / 1000;  	} else if (orderItem.Sku.StartsWith ("SPECIAL")) {  		// $0.40 each; 3 for a $1.00  		total += orderItem.Quantity * .4m;  		int setsOfThree = orderItem.Quantity / 3;  		total -= setsOfThree * .2m;  	}  	// more rules are coming!  }  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: foreach (OrderItem orderItem in this.Items) {  	if (orderItem.Sku.StartsWith ("EACH")) {  		total += orderItem.Quantity * 5m;  	} else if (orderItem.Sku.StartsWith ("WEIGHT")) {  		// quantity is in grams' price is per kg  		total += orderItem.Quantity * 4m / 1000;  	} else if (orderItem.Sku.StartsWith ("SPECIAL")) {  		// $0.40 each; 3 for a $1.00  		total += orderItem.Quantity * .4m;  		int setsOfThree = orderItem.Quantity / 3;  		total -= setsOfThree * .2m;  	}  	// more rules are coming!  }  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: if (orderItem.Sku.StartsWith ("EACH")) {  	total += orderItem.Quantity * 5m;  } else if (orderItem.Sku.StartsWith ("WEIGHT")) {  	// quantity is in grams' price is per kg  	total += orderItem.Quantity * 4m / 1000;  } else if (orderItem.Sku.StartsWith ("SPECIAL")) {  	// $0.40 each; 3 for a $1.00  	total += orderItem.Quantity * .4m;  	int setsOfThree = orderItem.Quantity / 3;  	total -= setsOfThree * .2m;  }  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: if (orderItem.Sku.StartsWith ("EACH")) {  	total += orderItem.Quantity * 5m;  } else if (orderItem.Sku.StartsWith ("WEIGHT")) {  	// quantity is in grams' price is per kg  	total += orderItem.Quantity * 4m / 1000;  } else if (orderItem.Sku.StartsWith ("SPECIAL")) {  	// $0.40 each; 3 for a $1.00  	total += orderItem.Quantity * .4m;  	int setsOfThree = orderItem.Quantity / 3;  	total -= setsOfThree * .2m;  }  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: if (orderItem.Sku.StartsWith ("WEIGHT")) {  	// quantity is in grams' price is per kg  	total += orderItem.Quantity * 4m / 1000;  } else if (orderItem.Sku.StartsWith ("SPECIAL")) {  	// $0.40 each; 3 for a $1.00  	total += orderItem.Quantity * .4m;  	int setsOfThree = orderItem.Quantity / 3;  	total -= setsOfThree * .2m;  }  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: if (orderItem.Sku.StartsWith ("WEIGHT")) {  	// quantity is in grams' price is per kg  	total += orderItem.Quantity * 4m / 1000;  } else if (orderItem.Sku.StartsWith ("SPECIAL")) {  	// $0.40 each; 3 for a $1.00  	total += orderItem.Quantity * .4m;  	int setsOfThree = orderItem.Quantity / 3;  	total -= setsOfThree * .2m;  }  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: total += orderItem.Quantity * 4m / 1000;  
Magic Number,OpenClosedShoppingCartBefore,Cart,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\2. Open - Closed\3. Before - Shopping Cart\Cart.cs,TotalAmount,The following statement contains a magic number: if (orderItem.Sku.StartsWith ("SPECIAL")) {  	// $0.40 each; 3 for a $1.00  	total += orderItem.Quantity * .4m;  	int setsOfThree = orderItem.Quantity / 3;  	total -= setsOfThree * .2m;  }  
Magic Number,DependencyInversionHelloWorldAfter,HelloWorld,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\5. Dependency Inversion\1. Hello World - After\HelloWorld.cs,Greet,The following statement contains a magic number: if (this.timeOfGreeting.Hour < 12) {  	return "Good morning' " + name;  }  
Magic Number,DependencyInversionHelloWorldAfter,HelloWorld,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\5. Dependency Inversion\1. Hello World - After\HelloWorld.cs,Greet,The following statement contains a magic number: if (this.timeOfGreeting.Hour < 18) {  	return "Good afternoon' " + name;  }  
Magic Number,DependencyInversionHelloWorldBefore,HelloWorld,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\5. Dependency Inversion\1. Hello World - Before\HelloWorld.cs,Greet,The following statement contains a magic number: if (DateTime.Now.Hour < 12) {  	return "Good morning' " + name;  }  
Magic Number,DependencyInversionHelloWorldBefore,HelloWorld,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\5. Dependency Inversion\1. Hello World - Before\HelloWorld.cs,Greet,The following statement contains a magic number: if (DateTime.Now.Hour < 18) {  	return "Good afternoon' " + name;  }  
Magic Number,KISSMp3MoverAfter,Mp3Mover,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\8. Keep It Simple, Stupid\1. MP3 Mover - After\Mp3Mover.cs,Main,The following statement contains a magic number: foreach (var fileName in Directory.EnumerateFiles (DirectoryPath)) {  	if (fileName.IndexOf (" - ") >= 0 && fileName.ToLower ().EndsWith ("mp3")) {  		File.Move (fileName' fileName.Substring (fileName.IndexOf (" - ") + 3));  		var artist = fileName.Substring (0' fileName.IndexOf (" - "));  		File.Move (fileName' artist + "/" + fileName);  	}  }  
Magic Number,KISSMp3MoverAfter,Mp3Mover,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\8. Keep It Simple, Stupid\1. MP3 Mover - After\Mp3Mover.cs,Main,The following statement contains a magic number: if (fileName.IndexOf (" - ") >= 0 && fileName.ToLower ().EndsWith ("mp3")) {  	File.Move (fileName' fileName.Substring (fileName.IndexOf (" - ") + 3));  	var artist = fileName.Substring (0' fileName.IndexOf (" - "));  	File.Move (fileName' artist + "/" + fileName);  }  
Magic Number,KISSMp3MoverAfter,Mp3Mover,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\8. Keep It Simple, Stupid\1. MP3 Mover - After\Mp3Mover.cs,Main,The following statement contains a magic number: File.Move (fileName' fileName.Substring (fileName.IndexOf (" - ") + 3));  
Magic Number,KISSMp3MoverBefore.Strategies.RenameStrategies,RemoveArtistRenameStrategy,D:\newReposJune17\TelerikAcademy_High-Quality-Code\16. SOLID and Other Principles\Demo\SOLID and Other Principles\8. Keep It Simple, Stupid\1. MP3 Mover - Before\Strategies\RenameStrategies\RemoveArtistRenameStrategy.cs,Rename,The following statement contains a magic number: File.Move (fileName' fileName.Substring (fileName.IndexOf (" - "' StringComparison.Ordinal) + 3));  
