Implementation smell,Namespace,Class,File,Method,Description
Long Method,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The method has 130 lines of code.
Complex Method,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,Cyclomatic complexity of the method is 44
Long Statement,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowTopScores,The length of the statement  "	if (topScores [0] == null && topScores [1] == null && topScores [2] == null && topScores [3] == null && topScores [4] == null) { " is 128.
Long Statement,EscapeFromLabyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Program.cs,Main,The length of the statement  "	string welcomeMessage = "Welcome to “Labirinth” game. Please try to escape. Use 'top' to view the top scoreboard' 'restart' to start a new game and 'exit' to quit the game."; " is 174.
Complex Conditional,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowTopScores,The conditional expression  "topScores [0] == null && topScores [1] == null && topScores [2] == null && topScores [3] == null && topScores [4] == null"  is complex.
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: for (i = 0; i < 7; i++) {  	for (j = 0; j < 7; j++) {  		ll [i' j] = random.Next (2);  	}  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: for (i = 0; i < 7; i++) {  	for (j = 0; j < 7; j++) {  		ll [i' j] = random.Next (2);  	}  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: for (i = 0; i < 7; i++) {  	for (j = 0; j < 7; j++) {  		ll [i' j] = random.Next (2);  	}  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: for (j = 0; j < 7; j++) {  	ll [i' j] = random.Next (2);  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: for (j = 0; j < 7; j++) {  	ll [i' j] = random.Next (2);  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: ll [i' j] = random.Next (2);  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: ll [3' 3] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: ll [3' 3] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,InitializeLabyrinth,The following statement contains a magic number: ll [3' 3] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: for (i = 0; i < 7; i++) {  	for (j = 0; j < 7; j++) {  		if (ll [i' j] == 0) {  			Console.Write ("- ");  		} else if (ll [i' j] == 2) {  			Console.Write ("* ");  		} else {  			Console.Write ("X ");  		}  	}  	Console.WriteLine ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: for (i = 0; i < 7; i++) {  	for (j = 0; j < 7; j++) {  		if (ll [i' j] == 0) {  			Console.Write ("- ");  		} else if (ll [i' j] == 2) {  			Console.Write ("* ");  		} else {  			Console.Write ("X ");  		}  	}  	Console.WriteLine ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: for (i = 0; i < 7; i++) {  	for (j = 0; j < 7; j++) {  		if (ll [i' j] == 0) {  			Console.Write ("- ");  		} else if (ll [i' j] == 2) {  			Console.Write ("* ");  		} else {  			Console.Write ("X ");  		}  	}  	Console.WriteLine ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: for (j = 0; j < 7; j++) {  	if (ll [i' j] == 0) {  		Console.Write ("- ");  	} else if (ll [i' j] == 2) {  		Console.Write ("* ");  	} else {  		Console.Write ("X ");  	}  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: for (j = 0; j < 7; j++) {  	if (ll [i' j] == 0) {  		Console.Write ("- ");  	} else if (ll [i' j] == 2) {  		Console.Write ("* ");  	} else {  		Console.Write ("X ");  	}  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: if (ll [i' j] == 0) {  	Console.Write ("- ");  } else if (ll [i' j] == 2) {  	Console.Write ("* ");  } else {  	Console.Write ("X ");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowLabyrinth,The following statement contains a magic number: if (ll [i' j] == 2) {  	Console.Write ("* ");  } else {  	Console.Write ("X ");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowTopScores,The following statement contains a magic number: if (topScores [0] == null && topScores [1] == null && topScores [2] == null && topScores [3] == null && topScores [4] == null) {  	Console.WriteLine ("The scoreboard is empty.");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowTopScores,The following statement contains a magic number: if (topScores [0] == null && topScores [1] == null && topScores [2] == null && topScores [3] == null && topScores [4] == null) {  	Console.WriteLine ("The scoreboard is empty.");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,ShowTopScores,The following statement contains a magic number: if (topScores [0] == null && topScores [1] == null && topScores [2] == null && topScores [3] == null && topScores [4] == null) {  	Console.WriteLine ("The scoreboard is empty.");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: while (_continue == true) {  	Console.Write (enterMove);  	string input = Console.ReadLine ();  	if (input.Length > 1 || input.Length == 0) {  		switch (input) {  		case "exit":  			Console.WriteLine ("Good Bye!");  			_continue = false;  			break;  		case "restart":  			InitializeLabyrinth ();  			ShowLabyrinth ();  			_continue = true;  			m = 3;  			n = 3;  			Move ();  			break;  		case "top":  			ShowTopScores ();  			_continue = true;  			break;  		default:  			Console.WriteLine ("Invalid command");  			_continue = true;  			break;  		}  		//end switch  	} //end if  	else {  		switch (input) {  		case "L":  			if (ll [m' n - 1] == 0) {  				ll [m' n - 1] = 2;  				ll [m' n] = 0;  				n -= 1;  				steps++;  				if (n - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "R":  			if (ll [m' n + 1] == 0) {  				ll [m' n + 1] = 2;  				ll [m' n] = 0;  				n += 1;  				steps++;  				if (n + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "U":  			if (ll [m - 1' n] == 0) {  				ll [m - 1' n] = 2;  				ll [m' n] = 0;  				m -= 1;  				steps++;  				if (m - 1 < 0) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		case "D":  			if (ll [m + 1' n] == 0) {  				ll [m + 1' n] = 2;  				ll [m' n] = 0;  				m += 1;  				steps++;  				if (m + 1 > 6) {  					Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  					InitializeLabyrinth ();  					Console.WriteLine ("\n" + welcome);  					Console.WriteLine (enterMove);  					ShowLabyrinth ();  					m = 3;  					n = 3;  					Move ();  				} else {  					ShowLabyrinth ();  				}  			} else {  				Console.WriteLine ("Invalid move!");  			}  			break;  		default:  			Console.WriteLine ("Invalid move");  			break;  		}  		//end switch  	}  	//end else  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (input.Length > 1 || input.Length == 0) {  	switch (input) {  	case "exit":  		Console.WriteLine ("Good Bye!");  		_continue = false;  		break;  	case "restart":  		InitializeLabyrinth ();  		ShowLabyrinth ();  		_continue = true;  		m = 3;  		n = 3;  		Move ();  		break;  	case "top":  		ShowTopScores ();  		_continue = true;  		break;  	default:  		Console.WriteLine ("Invalid command");  		_continue = true;  		break;  	}  	//end switch  } //end if  else {  	switch (input) {  	case "L":  		if (ll [m' n - 1] == 0) {  			ll [m' n - 1] = 2;  			ll [m' n] = 0;  			n -= 1;  			steps++;  			if (n - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "R":  		if (ll [m' n + 1] == 0) {  			ll [m' n + 1] = 2;  			ll [m' n] = 0;  			n += 1;  			steps++;  			if (n + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "U":  		if (ll [m - 1' n] == 0) {  			ll [m - 1' n] = 2;  			ll [m' n] = 0;  			m -= 1;  			steps++;  			if (m - 1 < 0) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	case "D":  		if (ll [m + 1' n] == 0) {  			ll [m + 1' n] = 2;  			ll [m' n] = 0;  			m += 1;  			steps++;  			if (m + 1 > 6) {  				Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  				InitializeLabyrinth ();  				Console.WriteLine ("\n" + welcome);  				Console.WriteLine (enterMove);  				ShowLabyrinth ();  				m = 3;  				n = 3;  				Move ();  			} else {  				ShowLabyrinth ();  			}  		} else {  			Console.WriteLine ("Invalid move!");  		}  		break;  	default:  		Console.WriteLine ("Invalid move");  		break;  	}  	//end switch  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "exit":  	Console.WriteLine ("Good Bye!");  	_continue = false;  	break;  case "restart":  	InitializeLabyrinth ();  	ShowLabyrinth ();  	_continue = true;  	m = 3;  	n = 3;  	Move ();  	break;  case "top":  	ShowTopScores ();  	_continue = true;  	break;  default:  	Console.WriteLine ("Invalid command");  	_continue = true;  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "exit":  	Console.WriteLine ("Good Bye!");  	_continue = false;  	break;  case "restart":  	InitializeLabyrinth ();  	ShowLabyrinth ();  	_continue = true;  	m = 3;  	n = 3;  	Move ();  	break;  case "top":  	ShowTopScores ();  	_continue = true;  	break;  default:  	Console.WriteLine ("Invalid command");  	_continue = true;  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: m = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: n = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: switch (input) {  case "L":  	if (ll [m' n - 1] == 0) {  		ll [m' n - 1] = 2;  		ll [m' n] = 0;  		n -= 1;  		steps++;  		if (n - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "R":  	if (ll [m' n + 1] == 0) {  		ll [m' n + 1] = 2;  		ll [m' n] = 0;  		n += 1;  		steps++;  		if (n + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "U":  	if (ll [m - 1' n] == 0) {  		ll [m - 1' n] = 2;  		ll [m' n] = 0;  		m -= 1;  		steps++;  		if (m - 1 < 0) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  case "D":  	if (ll [m + 1' n] == 0) {  		ll [m + 1' n] = 2;  		ll [m' n] = 0;  		m += 1;  		steps++;  		if (m + 1 > 6) {  			Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  			InitializeLabyrinth ();  			Console.WriteLine ("\n" + welcome);  			Console.WriteLine (enterMove);  			ShowLabyrinth ();  			m = 3;  			n = 3;  			Move ();  		} else {  			ShowLabyrinth ();  		}  	} else {  		Console.WriteLine ("Invalid move!");  	}  	break;  default:  	Console.WriteLine ("Invalid move");  	break;  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n - 1] == 0) {  	ll [m' n - 1] = 2;  	ll [m' n] = 0;  	n -= 1;  	steps++;  	if (n - 1 < 0) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n - 1] == 0) {  	ll [m' n - 1] = 2;  	ll [m' n] = 0;  	n -= 1;  	steps++;  	if (n - 1 < 0) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n - 1] == 0) {  	ll [m' n - 1] = 2;  	ll [m' n] = 0;  	n -= 1;  	steps++;  	if (n - 1 < 0) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: ll [m' n - 1] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (n - 1 < 0) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (n - 1 < 0) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: m = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: n = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n + 1] == 0) {  	ll [m' n + 1] = 2;  	ll [m' n] = 0;  	n += 1;  	steps++;  	if (n + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n + 1] == 0) {  	ll [m' n + 1] = 2;  	ll [m' n] = 0;  	n += 1;  	steps++;  	if (n + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n + 1] == 0) {  	ll [m' n + 1] = 2;  	ll [m' n] = 0;  	n += 1;  	steps++;  	if (n + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m' n + 1] == 0) {  	ll [m' n + 1] = 2;  	ll [m' n] = 0;  	n += 1;  	steps++;  	if (n + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: ll [m' n + 1] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (n + 1 > 6) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (n + 1 > 6) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (n + 1 > 6) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: m = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: n = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m - 1' n] == 0) {  	ll [m - 1' n] = 2;  	ll [m' n] = 0;  	m -= 1;  	steps++;  	if (m - 1 < 0) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m - 1' n] == 0) {  	ll [m - 1' n] = 2;  	ll [m' n] = 0;  	m -= 1;  	steps++;  	if (m - 1 < 0) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m - 1' n] == 0) {  	ll [m - 1' n] = 2;  	ll [m' n] = 0;  	m -= 1;  	steps++;  	if (m - 1 < 0) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: ll [m - 1' n] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (m - 1 < 0) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (m - 1 < 0) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: m = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: n = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m + 1' n] == 0) {  	ll [m + 1' n] = 2;  	ll [m' n] = 0;  	m += 1;  	steps++;  	if (m + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m + 1' n] == 0) {  	ll [m + 1' n] = 2;  	ll [m' n] = 0;  	m += 1;  	steps++;  	if (m + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m + 1' n] == 0) {  	ll [m + 1' n] = 2;  	ll [m' n] = 0;  	m += 1;  	steps++;  	if (m + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (ll [m + 1' n] == 0) {  	ll [m + 1' n] = 2;  	ll [m' n] = 0;  	m += 1;  	steps++;  	if (m + 1 > 6) {  		Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  		InitializeLabyrinth ();  		Console.WriteLine ("\n" + welcome);  		Console.WriteLine (enterMove);  		ShowLabyrinth ();  		m = 3;  		n = 3;  		Move ();  	} else {  		ShowLabyrinth ();  	}  } else {  	Console.WriteLine ("Invalid move!");  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: ll [m + 1' n] = 2;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (m + 1 > 6) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (m + 1 > 6) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: if (m + 1 > 6) {  	Console.WriteLine ("Congratulations! You escaped in {0} moves."' steps);  	InitializeLabyrinth ();  	Console.WriteLine ("\n" + welcome);  	Console.WriteLine (enterMove);  	ShowLabyrinth ();  	m = 3;  	n = 3;  	Move ();  } else {  	ShowLabyrinth ();  }  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: m = 3;  
Magic Number,EscapeFromLabyrinth,Labyrinth,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-6\Labyrinth.cs,Move,The following statement contains a magic number: n = 3;  
