Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Labyrinth,LabyrinthProcesor,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthProcesor.cs,Restart,The length of the statement  "            Console.WriteLine("Welcome to “Labirinth” game. Please try to escape. Use 'top' to view the top scoreboard' 'restart' to start a new game and 'exit' to quit the game."); " is 169.
Complex Conditional,Labyrinth,LabyrinthProcesor,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthProcesor.cs,IsFinished,The conditional expression  "matrix.MyPostionHorizontal == 0 ||                  matrix.MyPostionHorizontal == 6 ||                  matrix.MyPostionVertical == 0 ||                  matrix.MyPostionVertical == 6"  is complex.
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,LabyrinthMatrix,The following statement contains a magic number: myPostionHorizontal = 3;
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,LabyrinthMatrix,The following statement contains a magic number: myPostionVertical = 3;
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,LabyrinthMatrix,The following statement contains a magic number: matrix = new char[7][];
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,LabyrinthMatrix,The following statement contains a magic number: for (int i = 0; i <matrix.Length; i++)              {                  matrix[i] = new char[7];              }
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,LabyrinthMatrix,The following statement contains a magic number: matrix[3][3] = '-';
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,LabyrinthMatrix,The following statement contains a magic number: matrix[3][3] = '-';
Magic Number,Labyrinth,LabyrinthMatrix,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthMatrix.cs,GetRandomSymbol,The following statement contains a magic number: int random1 = random.Next(0'2);
Magic Number,Labyrinth,LabyrinthProcesor,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthProcesor.cs,IsFinished,The following statement contains a magic number: if (matrix.MyPostionHorizontal == 0 ||                  matrix.MyPostionHorizontal == 6 ||                  matrix.MyPostionVertical == 0 ||                  matrix.MyPostionVertical == 6)              {                  Console.WriteLine("Congratulations! You escaped in " + moveCount.ToString() + " moves.");                  scoreboard.HandleScoreboard(moveCount);                  Restart();              }
Magic Number,Labyrinth,LabyrinthProcesor,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthProcesor.cs,IsFinished,The following statement contains a magic number: if (matrix.MyPostionHorizontal == 0 ||                  matrix.MyPostionHorizontal == 6 ||                  matrix.MyPostionVertical == 0 ||                  matrix.MyPostionVertical == 6)              {                  Console.WriteLine("Congratulations! You escaped in " + moveCount.ToString() + " moves.");                  scoreboard.HandleScoreboard(moveCount);                  Restart();              }
Magic Number,Labyrinth,LabyrinthProcesor,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthProcesor.cs,moveDown,The following statement contains a magic number: if (!(matrix.MyPostionVertical == 6) &&                  this.matrix.Matrix[matrix.MyPostionHorizontal][matrix.MyPostionVertical + 1] == '-')              {                  matrix.MyPostionVertical++;                  moveCount++;                  return true;              }
Magic Number,Labyrinth,LabyrinthProcesor,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\LabyrinthProcesor.cs,moveRight,The following statement contains a magic number: if (!(matrix.MyPostionHorizontal == 6) &&                   this.matrix.Matrix[matrix.MyPostionHorizontal+ 1][matrix.MyPostionVertical] == '-')              {                  matrix.MyPostionHorizontal++;                  moveCount++;                  return true;              }
Magic Number,Labyrinth,Top5Scoreboard,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\Top5Scoreboard.cs,HandleScoreboard,The following statement contains a magic number: if (scoreboard.Count() >= 5 && moveCount > scoreboard.Last().Item1)              {                  Console.WriteLine("Your not good enough for the scoreboard :)");                  return;              }
Magic Number,Labyrinth,Top5Scoreboard,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\Top5Scoreboard.cs,HandleScoreboard,The following statement contains a magic number: if (scoreboard.Count == 0 ||                  (scoreboard.Count < 5) && scoreboard.Last().Item1 < moveCount)              {                  String nickname = ShowScoreboardInMessage();                  scoreboard.Add(new Tuple<uint' string>(moveCount' nickname));                  this.ShowScoreboard();                  return;              }
Magic Number,Labyrinth,Top5Scoreboard,C:\repos\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-4\Top5Scoreboard.cs,HandleScoreboard,The following statement contains a magic number: for (int i = 0; i < scoreboard.Count(); ++i)              {                  if (moveCount <= scoreboard[i].Item1)                  {                      String nickname = ShowScoreboardInMessage();                      scoreboard.Insert(i' new Tuple<uint' string>(moveCount' nickname));                      if (scoreboard.Count > 5)                      {                          scoreboard.Remove(scoreboard.Last());                      }                      this.ShowScoreboard();                      break;                  }              }
