Implementation smell,Namespace,Class,File,Method,Description
Long Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,The method has 164 lines of code.
Long Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The method has 205 lines of code.
Long Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The method has 254 lines of code.
Long Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The method has 174 lines of code.
Complex Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,PokajiDyskata,Cyclomatic complexity of the method is 11
Complex Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,Cyclomatic complexity of the method is 31
Complex Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,Cyclomatic complexity of the method is 26
Complex Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,Cyclomatic complexity of the method is 28
Complex Method,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,Cyclomatic complexity of the method is 24
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,check,The following statement contains a magic number: bool flag = (a >= ygliNaDyskata[0' 0]) && (a <= ygliNaDyskata[3' 0]);
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,check,The following statement contains a magic number: bool flag2 = (b >= ygliNaDyskata[0' 1]) && (b <= ygliNaDyskata[3' 1]);
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,PokajiDyskata,The following statement contains a magic number: col % 4 == 0
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,PokajiDyskata,The following statement contains a magic number: row  % 2 == 0
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,The following statement contains a magic number: int[] flag = new int[4];
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,The following statement contains a magic number: i < 4
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,The following statement contains a magic number: counter % 2 == 0
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverkaIProcess,The following statement contains a magic number: switch (startLetter)                  {                      case 'A':                              if (checkedInput[2] == 'L')                          {                                int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0'0];                                  oldCoordinates[1] = poziciqPeshki[0' 1];                                  int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'A');                              if (coords != null)                              {                                    poziciqPeshki[0'0]= coords[0];                                  poziciqPeshki[0' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[0' 0];                                oldCoordinates[1] = poziciqPeshki[0' 1];                              int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'R'' 'A');                              if (coords != null)                              {                                  poziciqPeshki[0' 0] = coords[0];                                    poziciqPeshki[0' 1] = coords[1];                              }                          }                          return true;                                            case 'B':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[1'0];                              oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                                coords = CheckNextPownPosition(oldCoordinates' 'L'' 'B');                              if (coords != null)                              {                                      poziciqPeshki[1' 0] = coords[0];                                        poziciqPeshki[1' 1] = coords[1];                                }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                                oldCoordinates[0] = poziciqPeshki[1' 0];                                    oldCoordinates[1] = poziciqPeshki[1' 1];                                int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'B');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                      poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                        case 'C':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2'0];                                  oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[2' 0] = coords[0];                                  poziciqPeshki[2' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[2' 0];                              oldCoordinates[1] = poziciqPeshki[2' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'C');                              if (coords != null)                              {                                  poziciqPeshki[1' 0] = coords[0];                                  poziciqPeshki[1' 1] = coords[1];                              }                          }                          return true;                                                case 'D':                          if (checkedInput[2] == 'L')                          {                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3'0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'L'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          else                           {                              //=='D'                              int[] oldCoordinates = new int[2];                              oldCoordinates[0] = poziciqPeshki[3' 0];                              oldCoordinates[1] = poziciqPeshki[3' 1];                              int[] coords = new int[2];                              coords = CheckNextPownPosition(oldCoordinates' 'R'' 'D');                              if (coords != null)                              {                                  poziciqPeshki[3' 0] = coords[0];                                  poziciqPeshki[3' 1] = coords[1];                              }                          }                          return true;                        case 'K':                          if (checkedInput[1] == 'U')                          {                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'U'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                          else                          {                              //=KD_                              if (checkedInput[2] == 'L')                              {                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'L');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              else                              {                                  //==KDD                                  int[] oldCoordinates = new int[2];                                  oldCoordinates[0] = poziciqCar[0];                                  oldCoordinates[1] = poziciqCar[1];                                  int[] coords = new int[2];                                  coords = checkNextKingPosition(oldCoordinates' 'D'' 'R');                                  if (coords != null)                                  {                                      poziciqCar[0] = coords[0];                                      poziciqCar[1] = coords[1];                                  }                              }                              return true;                          }                      default:                          Console.WriteLine("Sorry' there are some errors' but I can't tell you anything! You broked my program!"); return false;                  }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkForKingExit,The following statement contains a magic number: Console.WriteLine("King wins in {0} moves!"' counter / 2);
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkForKingExit,The following statement contains a magic number: currentKingXAxe == 2
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: int[] displasmentDownLeft = { 1' -2 };
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: int[] displasmentDownRight = { 1' 2 };
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: int[] newCoords = new int[2];
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn)                      {                          case 'A':                              pawnExistingMoves[0' 0] = true;                              pawnExistingMoves[0' 1] = true;                              break;                            case 'B':                              pawnExistingMoves[1' 0] = true;                              pawnExistingMoves[1' 1] = true;                              break;                          case 'C':                              pawnExistingMoves[2' 0] = true;                              pawnExistingMoves[2' 1] = true;                              break;                            case 'D':                              pawnExistingMoves[3' 0] = true;                              pawnExistingMoves[3' 1] = true;                              break;                            default:                              Console.WriteLine("ERROR!");                              break;                      }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn)                      {                          case 'A':                              pawnExistingMoves[0' 0] = true;                              pawnExistingMoves[0' 1] = true;                              break;                            case 'B':                              pawnExistingMoves[1' 0] = true;                              pawnExistingMoves[1' 1] = true;                              break;                          case 'C':                              pawnExistingMoves[2' 0] = true;                              pawnExistingMoves[2' 1] = true;                              break;                            case 'D':                              pawnExistingMoves[3' 0] = true;                              pawnExistingMoves[3' 1] = true;                              break;                            default:                              Console.WriteLine("ERROR!");                              break;                      }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn)                      {                          case 'A':                              pawnExistingMoves[0' 0] = true;                              pawnExistingMoves[0' 1] = true;                              break;                            case 'B':                              pawnExistingMoves[1' 0] = true;                              pawnExistingMoves[1' 1] = true;                              break;                          case 'C':                              pawnExistingMoves[2' 0] = true;                              pawnExistingMoves[2' 1] = true;                              break;                            case 'D':                              pawnExistingMoves[3' 0] = true;                              pawnExistingMoves[3' 1] = true;                              break;                            default:                              Console.WriteLine("ERROR!");                              break;                      }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The following statement contains a magic number: switch (currentPawn)                      {                          case 'A':                              pawnExistingMoves[0' 0] = true;                              pawnExistingMoves[0' 1] = true;                              break;                            case 'B':                              pawnExistingMoves[1' 0] = true;                              pawnExistingMoves[1' 1] = true;                              break;                          case 'C':                              pawnExistingMoves[2' 0] = true;                              pawnExistingMoves[2' 1] = true;                              break;                            case 'D':                              pawnExistingMoves[3' 0] = true;                              pawnExistingMoves[3' 1] = true;                              break;                            default:                              Console.WriteLine("ERROR!");                              break;                      }
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The following statement contains a magic number: int[] displasmentDownLeft = { 1' -2 };
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The following statement contains a magic number: int[] displasmentDownRight = { 1' 2 };
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The following statement contains a magic number: int[] displasmentUpLeft = { -1' -2 };
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The following statement contains a magic number: int[] displasmentUpRight = { -1' 2 };
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The following statement contains a magic number: int[] newCoords = new int[2];
Magic Number,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The following statement contains a magic number: i < 4
Duplicate Code,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 68)' (74' 97)' (102' 125)' (131' 154))
Duplicate Code,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,proverka2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 69)' (102' 126)' (131' 155))
Duplicate Code,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,CheckNextPownPosition,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 39)' (143' 173))
Duplicate Code,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The method contains a code clone-set at the following line numbers (starting from the method definition): ((30' 49)' (70' 89)' (153' 172)' (113' 132))
Duplicate Code,KingSurvivalGame,KingSurvivalGame,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-5\King.cs,checkNextKingPosition,The method contains a code clone-set at the following line numbers (starting from the method definition): ((30' 51)' (113' 134))
