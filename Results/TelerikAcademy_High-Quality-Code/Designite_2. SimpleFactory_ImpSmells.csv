Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SimpleFactory,Program,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\Program.cs,Main,The length of the statement  "            Console.WriteLine("Cappuccino - Milk content: {0} ml' Coffee content: {1} ml"' cappuccino.MilkContent' cappuccino.CoffeeContent); " is 129.
Long Statement,SimpleFactory,Program,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\Program.cs,Main,The length of the statement  "            Console.WriteLine("Regular coffee - Milk content: {0} ml' Coffee content: {1} ml"' regularCoffee.MilkContent' regularCoffee.CoffeeContent); " is 139.
Magic Number,SimpleFactory,CoffeeFactory,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\CoffeeFactory.cs,GetCoffee,The following statement contains a magic number: switch (coffeeType)              {                  case CoffeeType.Regular:                      // Can be subtype of Coffee                      return new Coffee(0' 150);                  case CoffeeType.Double:                      return new Coffee(0' 200);                  case CoffeeType.Cappuccino:                      return new Coffee(100' 100);                  case CoffeeType.Macchiato:                      return new Coffee(200' 100);                  default:                      throw new ArgumentException();              }
Magic Number,SimpleFactory,CoffeeFactory,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\CoffeeFactory.cs,GetCoffee,The following statement contains a magic number: switch (coffeeType)              {                  case CoffeeType.Regular:                      // Can be subtype of Coffee                      return new Coffee(0' 150);                  case CoffeeType.Double:                      return new Coffee(0' 200);                  case CoffeeType.Cappuccino:                      return new Coffee(100' 100);                  case CoffeeType.Macchiato:                      return new Coffee(200' 100);                  default:                      throw new ArgumentException();              }
Magic Number,SimpleFactory,CoffeeFactory,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\CoffeeFactory.cs,GetCoffee,The following statement contains a magic number: switch (coffeeType)              {                  case CoffeeType.Regular:                      // Can be subtype of Coffee                      return new Coffee(0' 150);                  case CoffeeType.Double:                      return new Coffee(0' 200);                  case CoffeeType.Cappuccino:                      return new Coffee(100' 100);                  case CoffeeType.Macchiato:                      return new Coffee(200' 100);                  default:                      throw new ArgumentException();              }
Magic Number,SimpleFactory,CoffeeFactory,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\CoffeeFactory.cs,GetCoffee,The following statement contains a magic number: switch (coffeeType)              {                  case CoffeeType.Regular:                      // Can be subtype of Coffee                      return new Coffee(0' 150);                  case CoffeeType.Double:                      return new Coffee(0' 200);                  case CoffeeType.Cappuccino:                      return new Coffee(100' 100);                  case CoffeeType.Macchiato:                      return new Coffee(200' 100);                  default:                      throw new ArgumentException();              }
Magic Number,SimpleFactory,CoffeeFactory,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\CoffeeFactory.cs,GetCoffee,The following statement contains a magic number: switch (coffeeType)              {                  case CoffeeType.Regular:                      // Can be subtype of Coffee                      return new Coffee(0' 150);                  case CoffeeType.Double:                      return new Coffee(0' 200);                  case CoffeeType.Cappuccino:                      return new Coffee(100' 100);                  case CoffeeType.Macchiato:                      return new Coffee(200' 100);                  default:                      throw new ArgumentException();              }
Magic Number,SimpleFactory,CoffeeFactory,D:\research\architectureSmells\repos1\TelerikAcademy_High-Quality-Code\17. Design Patterns\Demo\Creational\SimpleFactory\CoffeeFactory.cs,GetCoffee,The following statement contains a magic number: switch (coffeeType)              {                  case CoffeeType.Regular:                      // Can be subtype of Coffee                      return new Coffee(0' 150);                  case CoffeeType.Double:                      return new Coffee(0' 200);                  case CoffeeType.Cappuccino:                      return new Coffee(100' 100);                  case CoffeeType.Macchiato:                      return new Coffee(200' 100);                  default:                      throw new ArgumentException();              }
