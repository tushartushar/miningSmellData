Implementation smell,Namespace,Class,File,Method,Description
Long Method,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The method has 64 lines of code.
Complex Method,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MoveKingIfPossible,Cyclomatic complexity of the method is 15
Complex Method,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,Cyclomatic complexity of the method is 30
Complex Method,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,Main,Cyclomatic complexity of the method is 9
Long Statement,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,KingLost,The length of the statement  "	if (!proverka2 (kingRow + 1' kingColumn + 1) && !proverka2 (kingRow + 1' kingColumn - 1) && !proverka2 (kingRow - 1' kingColumn + 1) && !proverka2 (kingRow - 1' kingColumn - 1)) { " is 179.
Complex Conditional,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,proverka,The conditional expression  "row < 0 || row > dyska.GetLength (0) - 1 || colum < 0 || colum > dyska.GetLength (1) - 1"  is complex.
Complex Conditional,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,KingLost,The conditional expression  "!proverka2 (kingRow + 1' kingColumn + 1) && !proverka2 (kingRow + 1' kingColumn - 1) && !proverka2 (kingRow - 1' kingColumn + 1) && !proverka2 (kingRow - 1' kingColumn - 1)"  is complex.
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,KingSurvival,The following statement contains a magic number: dyska = new int[8' 8];  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,KingSurvival,The following statement contains a magic number: dyska = new int[8' 8];  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: for (int row = 0; row < dyska.GetLength (0); row++) {  	for (int colum = 0; colum < dyska.GetLength (1); colum++) {  		if ((row + colum) % 2 == 0) {  			dyska [row' colum] = whiteCell;  		} else {  			dyska [row' colum] = blackCell;  		}  	}  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: for (int colum = 0; colum < dyska.GetLength (1); colum++) {  	if ((row + colum) % 2 == 0) {  		dyska [row' colum] = whiteCell;  	} else {  		dyska [row' colum] = blackCell;  	}  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: if ((row + colum) % 2 == 0) {  	dyska [row' colum] = whiteCell;  } else {  	dyska [row' colum] = blackCell;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: dyska [pawnRows [2]' pawnColumns [2]] = 'C';  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: dyska [pawnRows [2]' pawnColumns [2]] = 'C';  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: dyska [pawnRows [3]' pawnColumns [3]] = 'D';  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,DaiMiDyskata,The following statement contains a magic number: dyska [pawnRows [3]' pawnColumns [3]] = 'D';  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MoveKingIfPossible,The following statement contains a magic number: if (command.Length != 3) {  	return false;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MoveKingIfPossible,The following statement contains a magic number: switch (commandMalka) {  case "kur":  	{  		indexOfChange = 0;  	}  	break;  case "kdr":  	{  		indexOfChange = 1;  	}  	break;  case "kdl":  	{  		indexOfChange = 2;  	}  	break;  case "kul":  	{  		indexOfChange = 3;  	}  	break;  default:  	return false;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MoveKingIfPossible,The following statement contains a magic number: switch (commandMalka) {  case "kur":  	{  		indexOfChange = 0;  	}  	break;  case "kdr":  	{  		indexOfChange = 1;  	}  	break;  case "kdl":  	{  		indexOfChange = 2;  	}  	break;  case "kul":  	{  		indexOfChange = 3;  	}  	break;  default:  	return false;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MoveKingIfPossible,The following statement contains a magic number: indexOfChange = 2;  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MoveKingIfPossible,The following statement contains a magic number: indexOfChange = 3;  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: if (command.Length != 3) {  	return false;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: switch (commandToLower) {  case "adr":  case "bdr":  case "cdr":  case "ddr":  	{  		indexOfChange = 1;  	}  	break;  case "adl":  case "bdl":  case "cdl":  case "ddl":  	{  		indexOfChange = 2;  	}  	break;  default:  	return false;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: indexOfChange = 2;  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: switch (command [0]) {  case 'a':  case 'A':  	{  		pawnIndex = 0;  	}  	break;  case 'b':  case 'B':  	{  		pawnIndex = 1;  	}  	break;  case 'c':  case 'C':  	{  		pawnIndex = 2;  	}  	break;  case 'd':  case 'D':  	{  		pawnIndex = 3;  	}  	break;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: switch (command [0]) {  case 'a':  case 'A':  	{  		pawnIndex = 0;  	}  	break;  case 'b':  case 'B':  	{  		pawnIndex = 1;  	}  	break;  case 'c':  case 'C':  	{  		pawnIndex = 2;  	}  	break;  case 'd':  case 'D':  	{  		pawnIndex = 3;  	}  	break;  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: pawnIndex = 2;  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following statement contains a magic number: pawnIndex = 3;  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,KingWon,The following statement contains a magic number: for (int i = 0; i < dyska.GetLength (0); i += 2)// check if all powns are on the last row   {  	if (dyska [dyska.GetLength (1) - 1' i] == whiteCell || dyska [dyska.GetLength (1) - 1' i] == blackCell) {  		return false;  	}  }  
Magic Number,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,KingWon,The following statement contains a magic number: i += 2
Missing Default,KingSurvival,KingSurvival,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\King-Survival\King-Survival-4\KingSurvival.cs,MovePawnIfPossible,The following switch statement is missing a default case: switch (command [0]) {  case 'a':  case 'A':  	{  		pawnIndex = 0;  	}  	break;  case 'b':  case 'B':  	{  		pawnIndex = 1;  	}  	break;  case 'c':  case 'C':  	{  		pawnIndex = 2;  	}  	break;  case 'd':  case 'D':  	{  		pawnIndex = 3;  	}  	break;  }  
