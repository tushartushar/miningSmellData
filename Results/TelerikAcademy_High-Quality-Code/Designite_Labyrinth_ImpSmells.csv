Implementation smell,Namespace,Class,File,Method,Description
Long Method,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The method has 153 lines of code.
Complex Method,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,Cyclomatic complexity of the method is 8
Complex Method,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,Cyclomatic complexity of the method is 72
Long Parameter List,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The method has 4 parameters.
Long Statement,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The length of the statement  "	if (labyrinth [x + 1' y] == "x" && labyrinth [x' y + 1] == "x" && labyrinth [x - 1' y] == "x" && labyrinth [x' y - 1] == "x") { " is 127.
Long Statement,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Main,The length of the statement  "		Console.WriteLine ("Welcome to \"Labyrinth\" game. Please try to escape. Use 'top' to view the top \nscoreboard''restart' to start a new game and 'exit' to quit the game.\n "); " is 176.
Complex Conditional,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The conditional expression  "labyrinth [x + 1' y] == "x" && labyrinth [x' y + 1] == "x" && labyrinth [x - 1' y] == "x" && labyrinth [x' y - 1] == "x""  is complex.
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,DisplayLabyrinth,The following statement contains a magic number: for (int linee = 0; linee < 7; linee++) {  	string s1 = labyrinth [linee' 0];  	string s2 = labyrinth [linee' 1];  	string s3 = labyrinth [linee' 2];  	string s4 = labyrinth [linee' 3];  	string s5 = labyrinth [linee' 4];  	string s6 = labyrinth [linee' 5];  	string s7 = labyrinth [linee' 6];  	Console.WriteLine ("{0} {1} {2} {3} {4} {5} {6} "' s1' s2' s3' s4' s5' s6' s7);  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,DisplayLabyrinth,The following statement contains a magic number: for (int linee = 0; linee < 7; linee++) {  	string s1 = labyrinth [linee' 0];  	string s2 = labyrinth [linee' 1];  	string s3 = labyrinth [linee' 2];  	string s4 = labyrinth [linee' 3];  	string s5 = labyrinth [linee' 4];  	string s6 = labyrinth [linee' 5];  	string s7 = labyrinth [linee' 6];  	Console.WriteLine ("{0} {1} {2} {3} {4} {5} {6} "' s1' s2' s3' s4' s5' s6' s7);  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,DisplayLabyrinth,The following statement contains a magic number: for (int linee = 0; linee < 7; linee++) {  	string s1 = labyrinth [linee' 0];  	string s2 = labyrinth [linee' 1];  	string s3 = labyrinth [linee' 2];  	string s4 = labyrinth [linee' 3];  	string s5 = labyrinth [linee' 4];  	string s6 = labyrinth [linee' 5];  	string s7 = labyrinth [linee' 6];  	Console.WriteLine ("{0} {1} {2} {3} {4} {5} {6} "' s1' s2' s3' s4' s5' s6' s7);  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,DisplayLabyrinth,The following statement contains a magic number: for (int linee = 0; linee < 7; linee++) {  	string s1 = labyrinth [linee' 0];  	string s2 = labyrinth [linee' 1];  	string s3 = labyrinth [linee' 2];  	string s4 = labyrinth [linee' 3];  	string s5 = labyrinth [linee' 4];  	string s6 = labyrinth [linee' 5];  	string s7 = labyrinth [linee' 6];  	Console.WriteLine ("{0} {1} {2} {3} {4} {5} {6} "' s1' s2' s3' s4' s5' s6' s7);  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,DisplayLabyrinth,The following statement contains a magic number: for (int linee = 0; linee < 7; linee++) {  	string s1 = labyrinth [linee' 0];  	string s2 = labyrinth [linee' 1];  	string s3 = labyrinth [linee' 2];  	string s4 = labyrinth [linee' 3];  	string s5 = labyrinth [linee' 4];  	string s6 = labyrinth [linee' 5];  	string s7 = labyrinth [linee' 6];  	Console.WriteLine ("{0} {1} {2} {3} {4} {5} {6} "' s1' s2' s3' s4' s5' s6' s7);  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,DisplayLabyrinth,The following statement contains a magic number: for (int linee = 0; linee < 7; linee++) {  	string s1 = labyrinth [linee' 0];  	string s2 = labyrinth [linee' 1];  	string s3 = labyrinth [linee' 2];  	string s4 = labyrinth [linee' 3];  	string s5 = labyrinth [linee' 4];  	string s6 = labyrinth [linee' 5];  	string s7 = labyrinth [linee' 6];  	Console.WriteLine ("{0} {1} {2} {3} {4} {5} {6} "' s1' s2' s3' s4' s5' s6' s7);  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,LabyrinthGenerator,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		labyrinth [i' j] = Convert.ToString (randomInt.Next (2));  		if (labyrinth [i' j] == "0") {  			labyrinth [i' j] = "-";  		} else {  			labyrinth [i' j] = "x";  		}  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,LabyrinthGenerator,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		labyrinth [i' j] = Convert.ToString (randomInt.Next (2));  		if (labyrinth [i' j] == "0") {  			labyrinth [i' j] = "-";  		} else {  			labyrinth [i' j] = "x";  		}  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,LabyrinthGenerator,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		labyrinth [i' j] = Convert.ToString (randomInt.Next (2));  		if (labyrinth [i' j] == "0") {  			labyrinth [i' j] = "-";  		} else {  			labyrinth [i' j] = "x";  		}  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,LabyrinthGenerator,The following statement contains a magic number: for (int j = 0; j < 7; j++) {  	labyrinth [i' j] = Convert.ToString (randomInt.Next (2));  	if (labyrinth [i' j] == "0") {  		labyrinth [i' j] = "-";  	} else {  		labyrinth [i' j] = "x";  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,LabyrinthGenerator,The following statement contains a magic number: for (int j = 0; j < 7; j++) {  	labyrinth [i' j] = Convert.ToString (randomInt.Next (2));  	if (labyrinth [i' j] == "0") {  		labyrinth [i' j] = "-";  	} else {  		labyrinth [i' j] = "x";  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,LabyrinthGenerator,The following statement contains a magic number: labyrinth [i' j] = Convert.ToString (randomInt.Next (2));  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: while (checking) {  	try {  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x + 1' y] = "0";  			x++;  		} else if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y + 1] = "0";  			y++;  		} else if (labyrinth [x - 1' y] == "-") {  			labyrinth [x - 1' y] = "0";  			x--;  		} else if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y - 1] = "0";  			y--;  		} else {  			checking = false;  		}  	} catch (Exception) {  		for (int i = 0; i < 7; i++) {  			for (int j = 0; j < 7; j++) {  				if (labyrinth [i' j] == "0") {  					labyrinth [i' j] = "-";  				}  			}  			checking = false;  			flag = true;  		}  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: while (checking) {  	try {  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x + 1' y] = "0";  			x++;  		} else if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y + 1] = "0";  			y++;  		} else if (labyrinth [x - 1' y] == "-") {  			labyrinth [x - 1' y] = "0";  			x--;  		} else if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y - 1] = "0";  			y--;  		} else {  			checking = false;  		}  	} catch (Exception) {  		for (int i = 0; i < 7; i++) {  			for (int j = 0; j < 7; j++) {  				if (labyrinth [i' j] == "0") {  					labyrinth [i' j] = "-";  				}  			}  			checking = false;  			flag = true;  		}  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: try {  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x + 1' y] = "0";  		x++;  	} else if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y + 1] = "0";  		y++;  	} else if (labyrinth [x - 1' y] == "-") {  		labyrinth [x - 1' y] = "0";  		x--;  	} else if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y - 1] = "0";  		y--;  	} else {  		checking = false;  	}  } catch (Exception) {  	for (int i = 0; i < 7; i++) {  		for (int j = 0; j < 7; j++) {  			if (labyrinth [i' j] == "0") {  				labyrinth [i' j] = "-";  			}  		}  		checking = false;  		flag = true;  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: try {  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x + 1' y] = "0";  		x++;  	} else if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y + 1] = "0";  		y++;  	} else if (labyrinth [x - 1' y] == "-") {  		labyrinth [x - 1' y] = "0";  		x--;  	} else if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y - 1] = "0";  		y--;  	} else {  		checking = false;  	}  } catch (Exception) {  	for (int i = 0; i < 7; i++) {  		for (int j = 0; j < 7; j++) {  			if (labyrinth [i' j] == "0") {  				labyrinth [i' j] = "-";  			}  		}  		checking = false;  		flag = true;  	}  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		if (labyrinth [i' j] == "0") {  			labyrinth [i' j] = "-";  		}  	}  	checking = false;  	flag = true;  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	for (int j = 0; j < 7; j++) {  		if (labyrinth [i' j] == "0") {  			labyrinth [i' j] = "-";  		}  	}  	checking = false;  	flag = true;  }  
Magic Number,Labyrinth,Game,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Game.cs,SolutionChecker,The following statement contains a magic number: for (int j = 0; j < 7; j++) {  	if (labyrinth [i' j] == "0") {  		labyrinth [i' j] = "-";  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Main,The following statement contains a magic number: positionX = positionY = 3;  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: if (s.Count == 5) {  	if (s [4].moves > m) {  		s.Remove (s [4]);  		Console.WriteLine ("Please enter your nickname");  		string name = Console.ReadLine ();  		s.Add (new Table (m' name));  		Table_ (s);  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: if (s.Count == 5) {  	if (s [4].moves > m) {  		s.Remove (s [4]);  		Console.WriteLine ("Please enter your nickname");  		string name = Console.ReadLine ();  		s.Add (new Table (m' name));  		Table_ (s);  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: if (s.Count == 5) {  	if (s [4].moves > m) {  		s.Remove (s [4]);  		Console.WriteLine ("Please enter your nickname");  		string name = Console.ReadLine ();  		s.Add (new Table (m' name));  		Table_ (s);  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: if (s [4].moves > m) {  	s.Remove (s [4]);  	Console.WriteLine ("Please enter your nickname");  	string name = Console.ReadLine ();  	s.Add (new Table (m' name));  	Table_ (s);  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: if (s [4].moves > m) {  	s.Remove (s [4]);  	Console.WriteLine ("Please enter your nickname");  	string name = Console.ReadLine ();  	s.Add (new Table (m' name));  	Table_ (s);  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: s.Remove (s [4]);  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Add,The following statement contains a magic number: if (s.Count < 5) {  	Console.WriteLine ("Please enter your nickname");  	string name = Console.ReadLine ();  	s.Add (new Table (m' name));  	Table_ (s);  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: while (flag_temp) {  	Console.Write ("\nEnter your move (L=left' R=right' D=down' U=up): ");  	string i = string.Empty;  	i = Console.ReadLine ();  	switch (i) {  	case "d":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "D":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "u":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "U":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "r":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "R":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "l":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "L":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "top":  		Table_ (scores);  		Console.WriteLine ("\n");  		DisplayLabyrinth (labyrinth);  		break;  	case "restart":  		flag_temp = false;  		break;  	case "exit":  		Console.WriteLine ("Good bye!");  		Environment.Exit (0);  		break;  	default:  		Console.WriteLine ("Invalid command!");  		break;  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: while (flag_temp) {  	Console.Write ("\nEnter your move (L=left' R=right' D=down' U=up): ");  	string i = string.Empty;  	i = Console.ReadLine ();  	switch (i) {  	case "d":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "D":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "u":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "U":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "r":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "R":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "l":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "L":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "top":  		Table_ (scores);  		Console.WriteLine ("\n");  		DisplayLabyrinth (labyrinth);  		break;  	case "restart":  		flag_temp = false;  		break;  	case "exit":  		Console.WriteLine ("Good bye!");  		Environment.Exit (0);  		break;  	default:  		Console.WriteLine ("Invalid command!");  		break;  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: while (flag_temp) {  	Console.Write ("\nEnter your move (L=left' R=right' D=down' U=up): ");  	string i = string.Empty;  	i = Console.ReadLine ();  	switch (i) {  	case "d":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "D":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "u":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "U":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "r":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "R":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "l":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "L":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "top":  		Table_ (scores);  		Console.WriteLine ("\n");  		DisplayLabyrinth (labyrinth);  		break;  	case "restart":  		flag_temp = false;  		break;  	case "exit":  		Console.WriteLine ("Good bye!");  		Environment.Exit (0);  		break;  	default:  		Console.WriteLine ("Invalid command!");  		break;  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: while (flag_temp) {  	Console.Write ("\nEnter your move (L=left' R=right' D=down' U=up): ");  	string i = string.Empty;  	i = Console.ReadLine ();  	switch (i) {  	case "d":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "D":  		if (labyrinth [x + 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x + 1' y] = "*";  			x++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "u":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "U":  		if (labyrinth [x - 1' y] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x - 1' y] = "*";  			x--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (x == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "r":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "R":  		if (labyrinth [x' y + 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y + 1] = "*";  			y++;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 6) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "l":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "L":  		if (labyrinth [x' y - 1] == "-") {  			labyrinth [x' y] = "-";  			labyrinth [x' y - 1] = "*";  			y--;  			currentMoves++;  		} else {  			Console.WriteLine ("\nInvalid move! \n ");  		}  		if (y == 0) {  			Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  			flag_temp = false;  			flag4 = true;  		}  		DisplayLabyrinth (labyrinth);  		break;  	case "top":  		Table_ (scores);  		Console.WriteLine ("\n");  		DisplayLabyrinth (labyrinth);  		break;  	case "restart":  		flag_temp = false;  		break;  	case "exit":  		Console.WriteLine ("Good bye!");  		Environment.Exit (0);  		break;  	default:  		Console.WriteLine ("Invalid command!");  		break;  	}  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: switch (i) {  case "d":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "D":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "u":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "U":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "r":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "R":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "l":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "L":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "top":  	Table_ (scores);  	Console.WriteLine ("\n");  	DisplayLabyrinth (labyrinth);  	break;  case "restart":  	flag_temp = false;  	break;  case "exit":  	Console.WriteLine ("Good bye!");  	Environment.Exit (0);  	break;  default:  	Console.WriteLine ("Invalid command!");  	break;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: switch (i) {  case "d":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "D":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "u":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "U":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "r":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "R":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "l":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "L":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "top":  	Table_ (scores);  	Console.WriteLine ("\n");  	DisplayLabyrinth (labyrinth);  	break;  case "restart":  	flag_temp = false;  	break;  case "exit":  	Console.WriteLine ("Good bye!");  	Environment.Exit (0);  	break;  default:  	Console.WriteLine ("Invalid command!");  	break;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: switch (i) {  case "d":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "D":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "u":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "U":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "r":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "R":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "l":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "L":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "top":  	Table_ (scores);  	Console.WriteLine ("\n");  	DisplayLabyrinth (labyrinth);  	break;  case "restart":  	flag_temp = false;  	break;  case "exit":  	Console.WriteLine ("Good bye!");  	Environment.Exit (0);  	break;  default:  	Console.WriteLine ("Invalid command!");  	break;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: switch (i) {  case "d":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "D":  	if (labyrinth [x + 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x + 1' y] = "*";  		x++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "u":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "U":  	if (labyrinth [x - 1' y] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x - 1' y] = "*";  		x--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (x == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "r":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "R":  	if (labyrinth [x' y + 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y + 1] = "*";  		y++;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 6) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "l":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "L":  	if (labyrinth [x' y - 1] == "-") {  		labyrinth [x' y] = "-";  		labyrinth [x' y - 1] = "*";  		y--;  		currentMoves++;  	} else {  		Console.WriteLine ("\nInvalid move! \n ");  	}  	if (y == 0) {  		Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  		flag_temp = false;  		flag4 = true;  	}  	DisplayLabyrinth (labyrinth);  	break;  case "top":  	Table_ (scores);  	Console.WriteLine ("\n");  	DisplayLabyrinth (labyrinth);  	break;  case "restart":  	flag_temp = false;  	break;  case "exit":  	Console.WriteLine ("Good bye!");  	Environment.Exit (0);  	break;  default:  	Console.WriteLine ("Invalid command!");  	break;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: if (x == 6) {  	Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  	flag_temp = false;  	flag4 = true;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: if (x == 6) {  	Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  	flag_temp = false;  	flag4 = true;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: if (y == 6) {  	Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  	flag_temp = false;  	flag4 = true;  }  
Magic Number,Labyrinth,Program,D:\newReposJune17\TelerikAcademy_High-Quality-Code\Teamwork\Labyrinth\Labyrinth-7\Labyrinth.cs,Test,The following statement contains a magic number: if (y == 6) {  	Console.WriteLine ("\nCongratulations you escaped with {0} moves.\n"' currentMoves);  	flag_temp = false;  	flag4 = true;  }  
