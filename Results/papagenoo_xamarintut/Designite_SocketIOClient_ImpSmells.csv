Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,Emit,Cyclomatic complexity of the method is 21
Complex Method,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,wsClient_MessageReceived,Cyclomatic complexity of the method is 22
Complex Method,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,requestHandshake,Cyclomatic complexity of the method is 8
Complex Method,SocketIOClient.Messages,Message,C:\repos\papagenoo_xamarintut\SocketIO\Messages\Message.cs,Factory,Cyclomatic complexity of the method is 12
Long Parameter List,SocketIOClient.Eventing,RegistrationManager,C:\repos\papagenoo_xamarintut\SocketIO\Messages\RegistrationManager.cs,AddOnEvent,The method has 5 parameters.
Long Statement,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,Connect,The length of the statement  "					this.wsClient = new WebSocket (string.Format ("{0}://{1}:{2}/socket.io/1/websocket/{3}"' wsScheme' uri.Host' uri.Port' this.HandShake.SID)' string.Empty' this.socketVersion); " is 174.
Long Statement,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,Emit,The length of the statement  "		throw new System.ArgumentOutOfRangeException (eventName' "Event name is reserved by socket.io' and cannot be used by clients or servers with this message type"); " is 161.
Long Statement,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,wsClient_OpenEvent,The length of the statement  "	this.socketHeartBeatTimer = new Timer (OnHeartBeatTimerCallback' new object ()' HandShake.HeartbeatInterval' HandShake.HeartbeatInterval); " is 138.
Long Statement,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,requestHandshake,The length of the statement  "			value = client.DownloadString (string.Format ("{0}://{1}:{2}/socket.io/1/{3}"' uri.Scheme' uri.Host' uri.Port' uri.Query)); " is 123.
Long Statement,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The length of the statement  "			if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) { " is 129.
Long Statement,SocketIOClient.Eventing,RegistrationManager,C:\repos\papagenoo_xamarintut\SocketIO\Messages\RegistrationManager.cs,AddCallBack,The length of the statement  "		this.callBackRegistry.AddOrUpdate (eventMessage.AckId.Value' eventMessage.Callback' (key' oldValue) => eventMessage.Callback); " is 126.
Long Statement,SocketIOClient.Eventing,RegistrationManager,C:\repos\papagenoo_xamarintut\SocketIO\Messages\RegistrationManager.cs,InvokeCallBack,The length of the statement  "		if (this.callBackRegistry.TryRemove (ackId.Value' out target))// use TryRemove - callbacks are one-shot event registrations " is 123.
Long Statement,SocketIOClient.Eventing,RegistrationManager,C:\repos\papagenoo_xamarintut\SocketIO\Messages\RegistrationManager.cs,AddOnEvent,The length of the statement  "	this.eventNameRegistry.AddOrUpdate (string.Format ("{0}::{1}"' eventName' endPoint)' callback' (key' oldValue) => callback); " is 124.
Empty Catch Block,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,OnErrorEvent,The method has an empty catch block.
Empty Catch Block,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,OnSocketConnectionClosedEvent,The method has an empty catch block.
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,closeOutboundQueue,The following statement contains a magic number: if (this.outboundQueue != null) {  	this.outboundQueue.CompleteAdding ();  	// stop adding any more items;  	this.dequeuOutBoundMsgTask.Wait (700);  	// wait for dequeue thread to stop  	this.outboundQueue.Dispose ();  	this.outboundQueue = null;  }  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,closeOutboundQueue,The following statement contains a magic number: this.dequeuOutBoundMsgTask.Wait (700);  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: while (this.outboundQueue != null && !this.outboundQueue.IsAddingCompleted) {  	if (this.ReadyState == WebSocketState.Open) {  		string msgString;  		try {  			if (this.outboundQueue.TryTake (out msgString' 500)) {  				//Trace.WriteLine(string.Format("webSocket_Send: {0}"' msgString));  				this.wsClient.Send (msgString);  			}  			else  				this.MessageQueueEmptyEvent.Set ();  		}  		catch (Exception ex) {  			Trace.WriteLine ("The outboundQueue is no longer open...");  		}  	}  	else {  		this.ConnectionOpenEvent.WaitOne (2000);  		// wait for connection event  	}  }  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: while (this.outboundQueue != null && !this.outboundQueue.IsAddingCompleted) {  	if (this.ReadyState == WebSocketState.Open) {  		string msgString;  		try {  			if (this.outboundQueue.TryTake (out msgString' 500)) {  				//Trace.WriteLine(string.Format("webSocket_Send: {0}"' msgString));  				this.wsClient.Send (msgString);  			}  			else  				this.MessageQueueEmptyEvent.Set ();  		}  		catch (Exception ex) {  			Trace.WriteLine ("The outboundQueue is no longer open...");  		}  	}  	else {  		this.ConnectionOpenEvent.WaitOne (2000);  		// wait for connection event  	}  }  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: if (this.ReadyState == WebSocketState.Open) {  	string msgString;  	try {  		if (this.outboundQueue.TryTake (out msgString' 500)) {  			//Trace.WriteLine(string.Format("webSocket_Send: {0}"' msgString));  			this.wsClient.Send (msgString);  		}  		else  			this.MessageQueueEmptyEvent.Set ();  	}  	catch (Exception ex) {  		Trace.WriteLine ("The outboundQueue is no longer open...");  	}  }  else {  	this.ConnectionOpenEvent.WaitOne (2000);  	// wait for connection event  }  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: if (this.ReadyState == WebSocketState.Open) {  	string msgString;  	try {  		if (this.outboundQueue.TryTake (out msgString' 500)) {  			//Trace.WriteLine(string.Format("webSocket_Send: {0}"' msgString));  			this.wsClient.Send (msgString);  		}  		else  			this.MessageQueueEmptyEvent.Set ();  	}  	catch (Exception ex) {  		Trace.WriteLine ("The outboundQueue is no longer open...");  	}  }  else {  	this.ConnectionOpenEvent.WaitOne (2000);  	// wait for connection event  }  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: try {  	if (this.outboundQueue.TryTake (out msgString' 500)) {  		//Trace.WriteLine(string.Format("webSocket_Send: {0}"' msgString));  		this.wsClient.Send (msgString);  	}  	else  		this.MessageQueueEmptyEvent.Set ();  }  catch (Exception ex) {  	Trace.WriteLine ("The outboundQueue is no longer open...");  }  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: if (this.outboundQueue.TryTake (out msgString' 500)) {  	//Trace.WriteLine(string.Format("webSocket_Send: {0}"' msgString));  	this.wsClient.Send (msgString);  }  else  	this.MessageQueueEmptyEvent.Set ();  
Magic Number,SocketIOClient,Client,C:\repos\papagenoo_xamarintut\SocketIO\Client.cs,dequeuOutboundMessages,The following statement contains a magic number: this.ConnectionOpenEvent.WaitOne (2000);  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	this.ErrorMessage = string.Empty;  	string[] items = value.Split (new char[] {  		':'  	});  	if (items.Count () == 4) {  		int hb = 0;  		int ct = 0;  		this.SID = items [0];  		if (int.TryParse (items [1]' out hb)) {  			var pct = (int)(hb * .75);  			// setup client time to occur 25% faster than needed  			this.HeartbeatTimeout = pct;  		}  		if (int.TryParse (items [2]' out ct))  			this.ConnectionTimeout = ct;  		this.Transports.AddRange (items [3].Split (new char[] {  			'''  		}));  	}  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	this.ErrorMessage = string.Empty;  	string[] items = value.Split (new char[] {  		':'  	});  	if (items.Count () == 4) {  		int hb = 0;  		int ct = 0;  		this.SID = items [0];  		if (int.TryParse (items [1]' out hb)) {  			var pct = (int)(hb * .75);  			// setup client time to occur 25% faster than needed  			this.HeartbeatTimeout = pct;  		}  		if (int.TryParse (items [2]' out ct))  			this.ConnectionTimeout = ct;  		this.Transports.AddRange (items [3].Split (new char[] {  			'''  		}));  	}  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	this.ErrorMessage = string.Empty;  	string[] items = value.Split (new char[] {  		':'  	});  	if (items.Count () == 4) {  		int hb = 0;  		int ct = 0;  		this.SID = items [0];  		if (int.TryParse (items [1]' out hb)) {  			var pct = (int)(hb * .75);  			// setup client time to occur 25% faster than needed  			this.HeartbeatTimeout = pct;  		}  		if (int.TryParse (items [2]' out ct))  			this.ConnectionTimeout = ct;  		this.Transports.AddRange (items [3].Split (new char[] {  			'''  		}));  	}  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	this.ErrorMessage = string.Empty;  	string[] items = value.Split (new char[] {  		':'  	});  	if (items.Count () == 4) {  		int hb = 0;  		int ct = 0;  		this.SID = items [0];  		if (int.TryParse (items [1]' out hb)) {  			var pct = (int)(hb * .75);  			// setup client time to occur 25% faster than needed  			this.HeartbeatTimeout = pct;  		}  		if (int.TryParse (items [2]' out ct))  			this.ConnectionTimeout = ct;  		this.Transports.AddRange (items [3].Split (new char[] {  			'''  		}));  	}  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (items.Count () == 4) {  	int hb = 0;  	int ct = 0;  	this.SID = items [0];  	if (int.TryParse (items [1]' out hb)) {  		var pct = (int)(hb * .75);  		// setup client time to occur 25% faster than needed  		this.HeartbeatTimeout = pct;  	}  	if (int.TryParse (items [2]' out ct))  		this.ConnectionTimeout = ct;  	this.Transports.AddRange (items [3].Split (new char[] {  		'''  	}));  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (items.Count () == 4) {  	int hb = 0;  	int ct = 0;  	this.SID = items [0];  	if (int.TryParse (items [1]' out hb)) {  		var pct = (int)(hb * .75);  		// setup client time to occur 25% faster than needed  		this.HeartbeatTimeout = pct;  	}  	if (int.TryParse (items [2]' out ct))  		this.ConnectionTimeout = ct;  	this.Transports.AddRange (items [3].Split (new char[] {  		'''  	}));  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (items.Count () == 4) {  	int hb = 0;  	int ct = 0;  	this.SID = items [0];  	if (int.TryParse (items [1]' out hb)) {  		var pct = (int)(hb * .75);  		// setup client time to occur 25% faster than needed  		this.HeartbeatTimeout = pct;  	}  	if (int.TryParse (items [2]' out ct))  		this.ConnectionTimeout = ct;  	this.Transports.AddRange (items [3].Split (new char[] {  		'''  	}));  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (items.Count () == 4) {  	int hb = 0;  	int ct = 0;  	this.SID = items [0];  	if (int.TryParse (items [1]' out hb)) {  		var pct = (int)(hb * .75);  		// setup client time to occur 25% faster than needed  		this.HeartbeatTimeout = pct;  	}  	if (int.TryParse (items [2]' out ct))  		this.ConnectionTimeout = ct;  	this.Transports.AddRange (items [3].Split (new char[] {  		'''  	}));  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (int.TryParse (items [1]' out hb)) {  	var pct = (int)(hb * .75);  	// setup client time to occur 25% faster than needed  	this.HeartbeatTimeout = pct;  }  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: if (int.TryParse (items [2]' out ct))  	this.ConnectionTimeout = ct;  
Magic Number,SocketIOClient,SocketIOHandshake,C:\repos\papagenoo_xamarintut\SocketIO\Helpers\SocketIOHandshake.cs,UpdateFromSocketIOResponse,The following statement contains a magic number: this.Transports.AddRange (items [3].Split (new char[] {  	'''  }));  
Magic Number,SocketIOClient.Messages,AckMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\AckMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	msg.Endpoint = args [2];  	int id;  	string[] parts = args [3].Split (new char[] {  		'+'  	});  	if (parts.Length > 1) {  		if (int.TryParse (parts [0]' out id)) {  			msg.AckId = id;  			msg.MessageText = parts [1];  			Match payloadMatch = reAckComplex.Match (msg.MessageText);  			if (payloadMatch.Success) {  				msg.Json = new JsonEncodedEventMessage ();  				msg.Json.Args = new string[] {  					payloadMatch.Groups ["payload"].Value  				};  			}  		}  	}  }  
Magic Number,SocketIOClient.Messages,AckMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\AckMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	msg.Endpoint = args [2];  	int id;  	string[] parts = args [3].Split (new char[] {  		'+'  	});  	if (parts.Length > 1) {  		if (int.TryParse (parts [0]' out id)) {  			msg.AckId = id;  			msg.MessageText = parts [1];  			Match payloadMatch = reAckComplex.Match (msg.MessageText);  			if (payloadMatch.Success) {  				msg.Json = new JsonEncodedEventMessage ();  				msg.Json.Args = new string[] {  					payloadMatch.Groups ["payload"].Value  				};  			}  		}  	}  }  
Magic Number,SocketIOClient.Messages,AckMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\AckMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	msg.Endpoint = args [2];  	int id;  	string[] parts = args [3].Split (new char[] {  		'+'  	});  	if (parts.Length > 1) {  		if (int.TryParse (parts [0]' out id)) {  			msg.AckId = id;  			msg.MessageText = parts [1];  			Match payloadMatch = reAckComplex.Match (msg.MessageText);  			if (payloadMatch.Success) {  				msg.Json = new JsonEncodedEventMessage ();  				msg.Json.Args = new string[] {  					payloadMatch.Groups ["payload"].Value  				};  			}  		}  	}  }  
Magic Number,SocketIOClient.Messages,AckMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\AckMessage.cs,Deserialize,The following statement contains a magic number: msg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,DisconnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\DisconnectMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 3) {  	if (!string.IsNullOrWhiteSpace (args [2]))  		msg.Endpoint = args [2];  }  
Magic Number,SocketIOClient.Messages,DisconnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\DisconnectMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 3) {  	if (!string.IsNullOrWhiteSpace (args [2]))  		msg.Endpoint = args [2];  }  
Magic Number,SocketIOClient.Messages,DisconnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\DisconnectMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 3) {  	if (!string.IsNullOrWhiteSpace (args [2]))  		msg.Endpoint = args [2];  }  
Magic Number,SocketIOClient.Messages,DisconnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\DisconnectMessage.cs,Deserialize,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (args [2]))  	msg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,DisconnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\DisconnectMessage.cs,Deserialize,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (args [2]))  	msg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,DisconnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\DisconnectMessage.cs,Deserialize,The following statement contains a magic number: msg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,Message,C:\repos\papagenoo_xamarintut\SocketIO\Messages\Message.cs,Message,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		this.AckId = id;  	this.Endpoint = args [2];  	this.MessageText = args [3];  }  
Magic Number,SocketIOClient.Messages,Message,C:\repos\papagenoo_xamarintut\SocketIO\Messages\Message.cs,Message,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		this.AckId = id;  	this.Endpoint = args [2];  	this.MessageText = args [3];  }  
Magic Number,SocketIOClient.Messages,Message,C:\repos\papagenoo_xamarintut\SocketIO\Messages\Message.cs,Message,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		this.AckId = id;  	this.Endpoint = args [2];  	this.MessageText = args [3];  }  
Magic Number,SocketIOClient.Messages,Message,C:\repos\papagenoo_xamarintut\SocketIO\Messages\Message.cs,Message,The following statement contains a magic number: this.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,Message,C:\repos\papagenoo_xamarintut\SocketIO\Messages\Message.cs,Message,The following statement contains a magic number: this.MessageText = args [3];  
Magic Number,SocketIOClient.Messages,ConnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ConnectMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 3) {  	string[] pq = args [2].Split (new char[] {  		'?'  	});  	if (pq.Length > 0)  		msg.Endpoint = pq [0];  	if (pq.Length > 1)  		msg.Query = pq [1];  }  
Magic Number,SocketIOClient.Messages,ConnectMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ConnectMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 3) {  	string[] pq = args [2].Split (new char[] {  		'?'  	});  	if (pq.Length > 0)  		msg.Endpoint = pq [0];  	if (pq.Length > 1)  		msg.Query = pq [1];  }  
Magic Number,SocketIOClient.Messages,ErrorMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ErrorMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	errMsg.Endpoint = args [2];  	errMsg.MessageText = args [3];  	string[] complex = args [3].Split (new char[] {  		'+'  	});  	if (complex.Length > 1) {  		errMsg.Advice = complex [1];  		errMsg.Reason = complex [0];  	}  }  
Magic Number,SocketIOClient.Messages,ErrorMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ErrorMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	errMsg.Endpoint = args [2];  	errMsg.MessageText = args [3];  	string[] complex = args [3].Split (new char[] {  		'+'  	});  	if (complex.Length > 1) {  		errMsg.Advice = complex [1];  		errMsg.Reason = complex [0];  	}  }  
Magic Number,SocketIOClient.Messages,ErrorMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ErrorMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	errMsg.Endpoint = args [2];  	errMsg.MessageText = args [3];  	string[] complex = args [3].Split (new char[] {  		'+'  	});  	if (complex.Length > 1) {  		errMsg.Advice = complex [1];  		errMsg.Reason = complex [0];  	}  }  
Magic Number,SocketIOClient.Messages,ErrorMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ErrorMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	errMsg.Endpoint = args [2];  	errMsg.MessageText = args [3];  	string[] complex = args [3].Split (new char[] {  		'+'  	});  	if (complex.Length > 1) {  		errMsg.Advice = complex [1];  		errMsg.Reason = complex [0];  	}  }  
Magic Number,SocketIOClient.Messages,ErrorMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ErrorMessage.cs,Deserialize,The following statement contains a magic number: errMsg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,ErrorMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\ErrorMessage.cs,Deserialize,The following statement contains a magic number: errMsg.MessageText = args [3];  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: try {  	string[] args = rawMessage.Split (SPLITCHARS' 4);  	// limit the number of pieces  	if (args.Length == 4) {  		int id;  		if (int.TryParse (args [1]' out id))  			evtMsg.AckId = id;  		evtMsg.Endpoint = args [2];  		evtMsg.MessageText = args [3];  		if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  			evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  			evtMsg.Event = evtMsg.Json.Name;  		}  		else  			evtMsg.Json = new JsonEncodedEventMessage ();  	}  }  catch (Exception ex) {  	Trace.WriteLine (ex);  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: try {  	string[] args = rawMessage.Split (SPLITCHARS' 4);  	// limit the number of pieces  	if (args.Length == 4) {  		int id;  		if (int.TryParse (args [1]' out id))  			evtMsg.AckId = id;  		evtMsg.Endpoint = args [2];  		evtMsg.MessageText = args [3];  		if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  			evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  			evtMsg.Event = evtMsg.Json.Name;  		}  		else  			evtMsg.Json = new JsonEncodedEventMessage ();  	}  }  catch (Exception ex) {  	Trace.WriteLine (ex);  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: try {  	string[] args = rawMessage.Split (SPLITCHARS' 4);  	// limit the number of pieces  	if (args.Length == 4) {  		int id;  		if (int.TryParse (args [1]' out id))  			evtMsg.AckId = id;  		evtMsg.Endpoint = args [2];  		evtMsg.MessageText = args [3];  		if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  			evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  			evtMsg.Event = evtMsg.Json.Name;  		}  		else  			evtMsg.Json = new JsonEncodedEventMessage ();  	}  }  catch (Exception ex) {  	Trace.WriteLine (ex);  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: try {  	string[] args = rawMessage.Split (SPLITCHARS' 4);  	// limit the number of pieces  	if (args.Length == 4) {  		int id;  		if (int.TryParse (args [1]' out id))  			evtMsg.AckId = id;  		evtMsg.Endpoint = args [2];  		evtMsg.MessageText = args [3];  		if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  			evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  			evtMsg.Event = evtMsg.Json.Name;  		}  		else  			evtMsg.Json = new JsonEncodedEventMessage ();  	}  }  catch (Exception ex) {  	Trace.WriteLine (ex);  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		evtMsg.AckId = id;  	evtMsg.Endpoint = args [2];  	evtMsg.MessageText = args [3];  	if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  		evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  		evtMsg.Event = evtMsg.Json.Name;  	}  	else  		evtMsg.Json = new JsonEncodedEventMessage ();  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		evtMsg.AckId = id;  	evtMsg.Endpoint = args [2];  	evtMsg.MessageText = args [3];  	if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  		evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  		evtMsg.Event = evtMsg.Json.Name;  	}  	else  		evtMsg.Json = new JsonEncodedEventMessage ();  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		evtMsg.AckId = id;  	evtMsg.Endpoint = args [2];  	evtMsg.MessageText = args [3];  	if (!string.IsNullOrEmpty (evtMsg.MessageText) && evtMsg.MessageText.Contains ("name") && evtMsg.MessageText.Contains ("args")) {  		evtMsg.Json = JsonEncodedEventMessage.Deserialize (evtMsg.MessageText);  		evtMsg.Event = evtMsg.Json.Name;  	}  	else  		evtMsg.Json = new JsonEncodedEventMessage ();  }  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: evtMsg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,EventMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\EventMessage.cs,Deserialize,The following statement contains a magic number: evtMsg.MessageText = args [3];  
Magic Number,SocketIOClient.Messages,JSONMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\JSONMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		jsonMsg.AckId = id;  	jsonMsg.Endpoint = args [2];  	jsonMsg.MessageText = args [3];  }  
Magic Number,SocketIOClient.Messages,JSONMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\JSONMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		jsonMsg.AckId = id;  	jsonMsg.Endpoint = args [2];  	jsonMsg.MessageText = args [3];  }  
Magic Number,SocketIOClient.Messages,JSONMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\JSONMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		jsonMsg.AckId = id;  	jsonMsg.Endpoint = args [2];  	jsonMsg.MessageText = args [3];  }  
Magic Number,SocketIOClient.Messages,JSONMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\JSONMessage.cs,Deserialize,The following statement contains a magic number: jsonMsg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,JSONMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\JSONMessage.cs,Deserialize,The following statement contains a magic number: jsonMsg.MessageText = args [3];  
Magic Number,SocketIOClient.Messages,TextMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\TextMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		msg.AckId = id;  	msg.Endpoint = args [2];  	msg.MessageText = args [3];  }  else  	msg.MessageText = rawMessage;  
Magic Number,SocketIOClient.Messages,TextMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\TextMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		msg.AckId = id;  	msg.Endpoint = args [2];  	msg.MessageText = args [3];  }  else  	msg.MessageText = rawMessage;  
Magic Number,SocketIOClient.Messages,TextMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\TextMessage.cs,Deserialize,The following statement contains a magic number: if (args.Length == 4) {  	int id;  	if (int.TryParse (args [1]' out id))  		msg.AckId = id;  	msg.Endpoint = args [2];  	msg.MessageText = args [3];  }  else  	msg.MessageText = rawMessage;  
Magic Number,SocketIOClient.Messages,TextMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\TextMessage.cs,Deserialize,The following statement contains a magic number: msg.Endpoint = args [2];  
Magic Number,SocketIOClient.Messages,TextMessage,C:\repos\papagenoo_xamarintut\SocketIO\Messages\TextMessage.cs,Deserialize,The following statement contains a magic number: msg.MessageText = args [3];  
