Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,OnApplyTemplate,Cyclomatic complexity of the method is 13
Complex Method,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,PrepareMeasureMode,Cyclomatic complexity of the method is 11
Long Identifier,Esri.ArcGISRuntime.Toolkit.UI.Controls,FeatureDataField,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\FeatureDataField\FeatureDataField.cs,,The length of the parameter TextBoxChangedListenerProperty is 30.
Long Identifier,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,OnMapViewTapped,The length of the parameter identifyGraphicsOverlaysResult is 30.
Long Identifier,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,GetGeometry,The length of the parameter identifyGraphicsOverlayResults is 30.
Long Statement,Esri.ArcGISRuntime.Toolkit.UI.Controls,FeatureDataField,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\FeatureDataField\FeatureDataField.cs,UpdateValidationState,The length of the statement  "            var deltaState = ValidationException == null ? "ValidState" : (_focused ? "InvalidFocusedState" : "InvalidUnfocusedState"); " is 123.
Long Statement,Esri.ArcGISRuntime.Toolkit.UI.Controls,FeatureDataField,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\FeatureDataField\FeatureDataField.cs,CommitChange,The length of the statement  "                Feature.Attributes[FieldName] = ConvertToFieldType((value is KeyValuePair<object' string>) ? ((KeyValuePair<object' string>)value).Key : value); " is 144.
Long Statement,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,Refresh,The length of the statement  "                kilometers >= 1 ? Properties.Resources.GetString("KilometerAbbreviation") : Properties.Resources.GetString("MeterAbbreviation")); " is 129.
Long Statement,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,MapView_PropertyChanged,The length of the statement  "            if ((e.PropertyName == nameof(MapView.VisibleArea) || e.PropertyName == nameof(MapView.IsNavigating)) && !view.IsNavigating) " is 124.
Long Statement,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,CalculateScale,The length of the statement  "            var result = Geometry.GeometryEngine.DistanceGeodetic(center' centerOnePixelOver' Geometry.LinearUnits.Inches' Geometry.AngularUnits.Degrees' Geometry.GeodeticCurveType.Geodesic); " is 179.
Complex Conditional,Esri.ArcGISRuntime.Toolkit.UI.Controls,FeatureDataField,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\FeatureDataField\FeatureDataField.cs,OnBindingValuePropertyChanged,The conditional expression  "string.IsNullOrEmpty(featureDataField.FieldName) || featureDataField.Feature?.Attributes == null                  || !featureDataField.Feature.Attributes.ContainsKey(featureDataField.FieldName)                  || featureDataField._dataItem == null"  is complex.
Empty Catch Block,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,OnToggleMeasureMode,The method has an empty catch block.
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,Compass,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\Compass\Compass.cs,UpdateCompassRotation,The following statement contains a magic number: if (Math.Round(heading % 360) == 0 && autoHide)              {                  if (_isVisible)                  {                      _isVisible = false;                      VisualStateManager.GoToState(this' "HideCompass"' useTransitions);                  }              }              else if (!_isVisible)              {                  _isVisible = true;                  VisualStateManager.GoToState(this' "ShowCompass"' useTransitions);              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,OnMapViewTapped,The following statement contains a magic number: var identifyLayersResult = await MapView.IdentifyLayersAsync(e.Position' 2' false);
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,OnMapViewTapped,The following statement contains a magic number: if (geometry == null)              {                  var identifyGraphicsOverlaysResult = await MapView.IdentifyGraphicsOverlaysAsync(e.Position' 2' false);                  geometry = GetGeometry(identifyGraphicsOverlaysResult);              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,ConvertInchesTo,The following statement contains a magic number: return LinearUnits.Inches.ConvertTo(unit' (TargetWidth / 96) * GetScale());
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetScale,The following statement contains a magic number: if (DesignTime.IsDesignMode && double.IsNaN(MapScale))              {                  return 50000; // In design-mode we'll just return a dummy 1:50000 if the scale isn't set              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetRoundedValue,The following statement contains a magic number: if (double.IsNaN(value))              {                  return 0;              }              else if (value >= 1000)              {                  return value - (value % 1000);              }              else if (value >= 100)              {                  return value - (value % 100);              }              else if (value >= 10)              {                  return value - (value % 10);              }              else if (value >= 1)              {                  return (int)value;              }              else              {                  return value;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetRoundedValue,The following statement contains a magic number: if (double.IsNaN(value))              {                  return 0;              }              else if (value >= 1000)              {                  return value - (value % 1000);              }              else if (value >= 100)              {                  return value - (value % 100);              }              else if (value >= 10)              {                  return value - (value % 10);              }              else if (value >= 1)              {                  return (int)value;              }              else              {                  return value;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetRoundedValue,The following statement contains a magic number: if (double.IsNaN(value))              {                  return 0;              }              else if (value >= 1000)              {                  return value - (value % 1000);              }              else if (value >= 100)              {                  return value - (value % 100);              }              else if (value >= 10)              {                  return value - (value % 10);              }              else if (value >= 1)              {                  return (int)value;              }              else              {                  return value;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetRoundedValue,The following statement contains a magic number: if (double.IsNaN(value))              {                  return 0;              }              else if (value >= 1000)              {                  return value - (value % 1000);              }              else if (value >= 100)              {                  return value - (value % 100);              }              else if (value >= 10)              {                  return value - (value % 10);              }              else if (value >= 1)              {                  return (int)value;              }              else              {                  return value;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetRoundedValue,The following statement contains a magic number: if (double.IsNaN(value))              {                  return 0;              }              else if (value >= 1000)              {                  return value - (value % 1000);              }              else if (value >= 100)              {                  return value - (value % 100);              }              else if (value >= 10)              {                  return value - (value % 10);              }              else if (value >= 1)              {                  return (int)value;              }              else              {                  return value;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,GetRoundedValue,The following statement contains a magic number: if (double.IsNaN(value))              {                  return 0;              }              else if (value >= 1000)              {                  return value - (value % 1000);              }              else if (value >= 100)              {                  return value - (value % 100);              }              else if (value >= 10)              {                  return value - (value % 10);              }              else if (value >= 1)              {                  return (int)value;              }              else              {                  return value;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,ScaleLine,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\ScaleLine\ScaleLine.cs,CalculateScale,The following statement contains a magic number: return distanceInInches * 96;
Magic Number,Esri.ArcGISRuntime.Toolkit.UI.Controls,SymbolDisplay,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\SymbolDisplay\SymbolDisplay.cs,RefreshSymbol,The following statement contains a magic number: if (Symbol == null)              {                  img.Source = null;                  img.Width = 0;                  img.Height = 0;              }              else              {  #pragma warning disable ESRI1800 // Add ConfigureAwait(false) - This is UI Dependent code and must return to UI Thread                  try                  {                      var scale = GetScaleFactor();                      var imageData = await Symbol.CreateSwatchAsync(scale * 96);                      img.Width = imageData.Width / scale;                      img.Height = imageData.Height / scale;                      img.Source = await imageData.ToImageSourceAsync();                  }                  catch                  {                      img.Source = null;                  }  #pragma warning restore ESRI1800              }
Missing Default,Esri.ArcGISRuntime.Toolkit.UI.Controls,FeatureDataField,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\FeatureDataField\FeatureDataField.cs,Refresh,The following switch statement is missing a default case: switch (_field.FieldType)              {                  case FieldType.Blob:                  case FieldType.Geometry:                  case FieldType.Raster:                  case FieldType.Xml:                      {                          Visibility = Visibility.Collapsed;                          break;                      }              }
Missing Default,Esri.ArcGISRuntime.Toolkit.UI.Controls,FeatureDataField,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\FeatureDataField\FeatureDataField.cs,ConvertToFieldType,The following switch statement is missing a default case: switch (_field.FieldType)              {                  case FieldType.Date:                      {                          if (value is DateTimeOffset)                          {                              return value;                          }                            if (string.IsNullOrEmpty(valueString))                          {                              return null;                          }                            return DateTimeOffset.Parse(valueString);                      }                    case FieldType.Float32:                  case FieldType.Float64:                      {                          if (value is double)                          {                              return value;                          }                            return Convert.ToDouble(valueString' CultureInfo.InvariantCulture);                      }                    case FieldType.Guid:                      {                          if (value is Guid)                          {                              return value;                          }                            if (string.IsNullOrEmpty(valueString))                          {                              return null;                          }                            return Guid.Parse(valueString);                      }                    case FieldType.Int16:                      {                          if (value is short)                          {                              return value;                          }                            return Convert.ToInt16(valueString' CultureInfo.InvariantCulture);                      }                    case FieldType.Int32:                      {                          if (value is int)                          {                              return value;                          }                            return Convert.ToInt32(valueString' CultureInfo.InvariantCulture);                      }                    case FieldType.OID:                      {                          if (value is long)                          {                              return value;                          }                            return Convert.ToInt64(valueString' CultureInfo.InvariantCulture);                      }                    case FieldType.Text:                      {                          return valueString;                      }              }
Missing Default,Esri.ArcGISRuntime.Toolkit.UI.Controls,MeasureToolbar,C:\repos\Esri_arcgis-toolkit-dotnet\src\Esri.ArcGISRuntime.Toolkit\Shared\UI\Controls\MeasureToolbar\MeasureToolbar.cs,DisplayResult,The following switch statement is missing a default case: switch (Mode)                      {                          case MeasureToolbarMode.Line:                              {                                  geometry = LineSketchEditor.Geometry;                                  break;                              }                            case MeasureToolbarMode.Area:                              {                                  geometry = AreaSketchEditor.Geometry;                                  break;                              }                            case MeasureToolbarMode.Feature:                              {                                  geometry = _measureFeatureResultOverlay.Graphics.FirstOrDefault()?.Geometry;                                  break;                              }                      }
