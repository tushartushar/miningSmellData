Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ArcGISRuntime.Toolkit.Samples.Phone.SymbolDisplay,SymbolDisplaySample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\SymbolDisplay\SymbolDisplaySample.xaml.cs,LoadFeatures,The length of the statement  "		var damageAssessmentTable = await ServiceFeatureTable.OpenAsync (new Uri ("http://sampleserver6.arcgisonline.com/arcgis/rest/services/DamageAssessment/FeatureServer/0")); " is 170.
Empty Catch Block,ArcGISRuntime.Toolkit.Samples.Phone.TemplatePicker,TemplatePickerSample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\TemplatePicker\TemplatePickerSample.xaml.cs,MyTemplatePicker_TemplatePicked,The method has an empty catch block.
Empty Catch Block,ArcGISRuntime.Toolkit.Samples.Phone.TemplatePicker,TemplatePickerWithLayerSelectionSample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\TemplatePicker\TemplatePickerWithLayerSelectionSample.xaml.cs,MyTemplatePicker_TemplatePicked,The method has an empty catch block.
Magic Number,ArcGISRuntime.Toolkit.Samples.Phone.FeatureDataForm,FeatureDataFormSample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\FeatureDataForm\FeatureDataFormSample.xaml.cs,MyMapView_MapViewTapped,The following statement contains a magic number: try {  	if (MyDataForm.ResetCommand.CanExecute (null))  		MyDataForm.ResetCommand.Execute (null);  	MyDataForm.GeodatabaseFeature = null;  	if (_editedLayer != null)  		_editedLayer.ClearSelection ();  	foreach (var layer in MyMapView.Map.Layers.OfType<FeatureLayer> ().Reverse ()) {  		// Get possible features and if none found' move to next layer  		var foundFeatures = await layer.HitTestAsync (MyMapView' new Rect (e.Position' new Size (10' 10))' 1);  		if (foundFeatures.Count () == 0)  			continue;  		// Get feature from table  		var feature = await layer.FeatureTable.QueryAsync (foundFeatures [0]);  		// Change UI  		DataFormView.Visibility = Visibility.Visible;  		ToggleAppBar ();  		_editedFeature = feature as GeodatabaseFeature;  		_editedLayer = layer;  		_editedLayer.SelectFeatures (new long[] {  			foundFeatures [0]  		});  		// Set feature that is being edited to data form  		MyDataForm.GeodatabaseFeature = _editedFeature;  		return;  	}  } catch (Exception ex) {  	var _x = new MessageDialog (string.Format ("Error occured : {0}"' ex.ToString ())' "Sample error").ShowAsync ();  }  
Magic Number,ArcGISRuntime.Toolkit.Samples.Phone.FeatureDataForm,FeatureDataFormSample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\FeatureDataForm\FeatureDataFormSample.xaml.cs,MyMapView_MapViewTapped,The following statement contains a magic number: try {  	if (MyDataForm.ResetCommand.CanExecute (null))  		MyDataForm.ResetCommand.Execute (null);  	MyDataForm.GeodatabaseFeature = null;  	if (_editedLayer != null)  		_editedLayer.ClearSelection ();  	foreach (var layer in MyMapView.Map.Layers.OfType<FeatureLayer> ().Reverse ()) {  		// Get possible features and if none found' move to next layer  		var foundFeatures = await layer.HitTestAsync (MyMapView' new Rect (e.Position' new Size (10' 10))' 1);  		if (foundFeatures.Count () == 0)  			continue;  		// Get feature from table  		var feature = await layer.FeatureTable.QueryAsync (foundFeatures [0]);  		// Change UI  		DataFormView.Visibility = Visibility.Visible;  		ToggleAppBar ();  		_editedFeature = feature as GeodatabaseFeature;  		_editedLayer = layer;  		_editedLayer.SelectFeatures (new long[] {  			foundFeatures [0]  		});  		// Set feature that is being edited to data form  		MyDataForm.GeodatabaseFeature = _editedFeature;  		return;  	}  } catch (Exception ex) {  	var _x = new MessageDialog (string.Format ("Error occured : {0}"' ex.ToString ())' "Sample error").ShowAsync ();  }  
Magic Number,ArcGISRuntime.Toolkit.Samples.Phone.FeatureDataForm,FeatureDataFormSample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\FeatureDataForm\FeatureDataFormSample.xaml.cs,MyMapView_MapViewTapped,The following statement contains a magic number: foreach (var layer in MyMapView.Map.Layers.OfType<FeatureLayer> ().Reverse ()) {  	// Get possible features and if none found' move to next layer  	var foundFeatures = await layer.HitTestAsync (MyMapView' new Rect (e.Position' new Size (10' 10))' 1);  	if (foundFeatures.Count () == 0)  		continue;  	// Get feature from table  	var feature = await layer.FeatureTable.QueryAsync (foundFeatures [0]);  	// Change UI  	DataFormView.Visibility = Visibility.Visible;  	ToggleAppBar ();  	_editedFeature = feature as GeodatabaseFeature;  	_editedLayer = layer;  	_editedLayer.SelectFeatures (new long[] {  		foundFeatures [0]  	});  	// Set feature that is being edited to data form  	MyDataForm.GeodatabaseFeature = _editedFeature;  	return;  }  
Magic Number,ArcGISRuntime.Toolkit.Samples.Phone.FeatureDataForm,FeatureDataFormSample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\FeatureDataForm\FeatureDataFormSample.xaml.cs,MyMapView_MapViewTapped,The following statement contains a magic number: foreach (var layer in MyMapView.Map.Layers.OfType<FeatureLayer> ().Reverse ()) {  	// Get possible features and if none found' move to next layer  	var foundFeatures = await layer.HitTestAsync (MyMapView' new Rect (e.Position' new Size (10' 10))' 1);  	if (foundFeatures.Count () == 0)  		continue;  	// Get feature from table  	var feature = await layer.FeatureTable.QueryAsync (foundFeatures [0]);  	// Change UI  	DataFormView.Visibility = Visibility.Visible;  	ToggleAppBar ();  	_editedFeature = feature as GeodatabaseFeature;  	_editedLayer = layer;  	_editedLayer.SelectFeatures (new long[] {  		foundFeatures [0]  	});  	// Set feature that is being edited to data form  	MyDataForm.GeodatabaseFeature = _editedFeature;  	return;  }  
Magic Number,ArcGISRuntime.Toolkit.Samples.Phone.SymbolDisplay,SymbolDisplaySample,F:\newReposMay17\Esri_arcgis-toolkit-dotnet\samples\WinPhone\ArcGISRuntime.Toolkit.Samples.Phone\SymbolDisplay\SymbolDisplaySample.xaml.cs,LoadFeatures,The following statement contains a magic number: try {  	var damageAssessmentTable = await ServiceFeatureTable.OpenAsync (new Uri ("http://sampleserver6.arcgisonline.com/arcgis/rest/services/DamageAssessment/FeatureServer/0"));  	damageAssessmentTable.OutFields = OutFields.All;  	// Get incidents that has incidentid  	var damageAssessments = await damageAssessmentTable.QueryAsync (new QueryFilter () {  		WhereClause = "incidentid <> ''"'  		MaximumRows = 10  	});  	var assessments = new List<Assessment> ();  	// Create assessment items from search results  	foreach (var assessment in damageAssessments) {  		var feature = assessment as GeodatabaseFeature;  		assessments.Add (new Assessment {  			Feature = feature'  			Symbol = damageAssessmentTable.ServiceInfo.DrawingInfo.Renderer.GetSymbol (feature)  		});  	}  	FeatureList.ItemsSource = assessments;  } catch (Exception exception) {  	var _x = new MessageDialog (string.Format ("Error occured : {0}"' exception.ToString ())' "Sample error").ShowAsync ();  }  
