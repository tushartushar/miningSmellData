Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Esri.ArcGISRuntime.Toolkit.Samples,MainWindow,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Esri.ArcGISRuntime.Toolkit.Samples.WPF;component/mainwindow.xaml"' System.UriKind.Relative); " is 138.
Long Statement,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,EditFeatureSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\EditFeatureSample.xaml.cs,ApplyButton_Click,The length of the statement  "            if(DamageField.ValidationException != null || OccupantsField.ValidationException != null || DescriptionField.ValidationException != null) " is 137.
Long Statement,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,DataGridSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\DatagridSample.xaml.cs,LoadFeaturesAsync,The length of the statement  "                table = new ServiceFeatureTable(new Uri("http://sampleserver6.arcgisonline.com/arcgis/rest/services/DamageAssessment/FeatureServer/0")); " is 136.
Long Statement,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,DataGridSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\DatagridSample.xaml.cs,LoadFeaturesAsync,The length of the statement  "                var outFields = new string[] { "objectid"' "incidentid"' "typdamage"' "habitable"' "predisval"' "inspdate"' "lastupdate" }; " is 123.
Empty Catch Block,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,EditFeatureSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\EditFeatureSample.xaml.cs,mapView_GeoViewTapped,The method has an empty catch block.
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples,MainWindow,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.menu = ((System.Windows.Controls.Menu)(target));              return;              case 2:              this.SampleContainer = ((System.Windows.Controls.Border)(target));              return;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.Compass,SceneViewCompassSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\Compass\SceneViewCompassSample.xaml.cs,RotateLeft_Click,The following statement contains a magic number: RotateToHeadingAsync(-30' true);
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.Compass,SceneViewCompassSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\Compass\SceneViewCompassSample.xaml.cs,RotateRight_Click,The following statement contains a magic number: RotateToHeadingAsync(30' true);
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.Compass,MapViewCompassSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\Compass\MapViewCompassSample.xaml.cs,RotateLeft_Click,The following statement contains a magic number: await mapView.SetViewpointRotationAsync(mapView.MapRotation - 30);
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.Compass,MapViewCompassSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\Compass\MapViewCompassSample.xaml.cs,RotateRight_Click,The following statement contains a magic number: await mapView.SetViewpointRotationAsync(mapView.MapRotation + 30);
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,EditFeatureSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\EditFeatureSample.xaml.cs,mapView_GeoViewTapped,The following statement contains a magic number: try              {                  var features = await mapView.IdentifyLayerAsync(mapView.Map.OperationalLayers[0]' e.Position' 3' false' 1' tcs.Token);                  var feature = features.GeoElements.FirstOrDefault() as ArcGISFeature;                  if (feature == null)                      return;                  ShowEditPanel(feature);              }              catch(System.Exception)              {              }              finally              {                  mapView.Cursor = Cursors.Arrow;              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,EditFeatureSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\EditFeatureSample.xaml.cs,ShowEditPanel,The following statement contains a magic number: mapView.Effect = new BlurEffect() { Radius = 10 };
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.FeatureDataField,DataGridSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\FeatureDataField\DatagridSample.xaml.cs,LoadFeaturesAsync,The following statement contains a magic number: try              {                  table = new ServiceFeatureTable(new Uri("http://sampleserver6.arcgisonline.com/arcgis/rest/services/DamageAssessment/FeatureServer/0"));                  table.FeatureRequestMode = FeatureRequestMode.ManualCache;                  await table.LoadAsync();                  var queryParameters = new QueryParameters()                  {                      WhereClause = "incidentid <> ''"'                      MaxFeatures = 100                  };                  // Request for the same fields defined in the ListView.ItemTemplate.                  var outFields = new string[] { "objectid"' "incidentid"' "typdamage"' "habitable"' "predisval"' "inspdate"' "lastupdate" };                  var features = await table.PopulateFromServiceAsync(queryParameters' true' outFields);                  FeatureList.ItemsSource = features.ToList();              }              catch (Exception exception)              {                  MessageBox.Show($"Error occured : {exception.Message}"' "Sample error");              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.MeasureToolbar,MeasureToolbarSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\MeasureToolbar\MeasureToolbarSample.xaml.cs,AddRandomGraphics,The following statement contains a magic number: if (overlay != null)              {                  for (int i = 0; i < 10; i++)                  {                      var mp = new MapPoint(random.Next(-180' 180)' random.Next(-90' 90)' SpatialReferences.Wgs84);                      var geometry = GeometryEngine.Buffer(mp' random.Next(1' 10));                      overlay.Graphics.Add(new Graphic(geometry));                  }              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.MeasureToolbar,MeasureToolbarSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\MeasureToolbar\MeasureToolbarSample.xaml.cs,AddRandomGraphics,The following statement contains a magic number: if (overlay != null)              {                  for (int i = 0; i < 10; i++)                  {                      var mp = new MapPoint(random.Next(-180' 180)' random.Next(-90' 90)' SpatialReferences.Wgs84);                      var geometry = GeometryEngine.Buffer(mp' random.Next(1' 10));                      overlay.Graphics.Add(new Graphic(geometry));                  }              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.MeasureToolbar,MeasureToolbarSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\MeasureToolbar\MeasureToolbarSample.xaml.cs,AddRandomGraphics,The following statement contains a magic number: if (overlay != null)              {                  for (int i = 0; i < 10; i++)                  {                      var mp = new MapPoint(random.Next(-180' 180)' random.Next(-90' 90)' SpatialReferences.Wgs84);                      var geometry = GeometryEngine.Buffer(mp' random.Next(1' 10));                      overlay.Graphics.Add(new Graphic(geometry));                  }              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.MeasureToolbar,MeasureToolbarSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\MeasureToolbar\MeasureToolbarSample.xaml.cs,AddRandomGraphics,The following statement contains a magic number: if (overlay != null)              {                  for (int i = 0; i < 10; i++)                  {                      var mp = new MapPoint(random.Next(-180' 180)' random.Next(-90' 90)' SpatialReferences.Wgs84);                      var geometry = GeometryEngine.Buffer(mp' random.Next(1' 10));                      overlay.Graphics.Add(new Graphic(geometry));                  }              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.MeasureToolbar,MeasureToolbarSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\MeasureToolbar\MeasureToolbarSample.xaml.cs,AddRandomGraphics,The following statement contains a magic number: if (overlay != null)              {                  for (int i = 0; i < 10; i++)                  {                      var mp = new MapPoint(random.Next(-180' 180)' random.Next(-90' 90)' SpatialReferences.Wgs84);                      var geometry = GeometryEngine.Buffer(mp' random.Next(1' 10));                      overlay.Graphics.Add(new Graphic(geometry));                  }              }
Magic Number,Esri.ArcGISRuntime.Toolkit.Samples.MeasureToolbar,MeasureToolbarSample,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\Samples\MeasureToolbar\MeasureToolbarSample.xaml.cs,AddRandomGraphics,The following statement contains a magic number: if (overlay != null)              {                  for (int i = 0; i < 10; i++)                  {                      var mp = new MapPoint(random.Next(-180' 180)' random.Next(-90' 90)' SpatialReferences.Wgs84);                      var geometry = GeometryEngine.Buffer(mp' random.Next(1' 10));                      overlay.Graphics.Add(new Graphic(geometry));                  }              }
Missing Default,Esri.ArcGISRuntime.Toolkit.Samples,MainWindow,C:\repos\Esri_arcgis-toolkit-dotnet\src\Samples\Toolkit.SampleApp.WPF\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.menu = ((System.Windows.Controls.Menu)(target));              return;              case 2:              this.SampleContainer = ((System.Windows.Controls.Border)(target));              return;              }
