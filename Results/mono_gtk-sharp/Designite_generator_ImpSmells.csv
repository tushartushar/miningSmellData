Implementation smell,Namespace,Class,File,Method,Description
Long Method,GtkSharp.Generation,ObjectGen,C:\repos\mono_gtk-sharp\generator\ObjectGen.cs,Generate,The method has 109 lines of code.
Long Method,GtkSharp.Generation,OpaqueGen,C:\repos\mono_gtk-sharp\generator\OpaqueGen.cs,Generate,The method has 141 lines of code.
Long Method,GtkSharp.Generation,SymbolTable,C:\repos\mono_gtk-sharp\generator\SymbolTable.cs,SymbolTable,The method has 113 lines of code.
Complex Method,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenWrapper,Cyclomatic complexity of the method is 9
Complex Method,GtkSharp.Generation,ClassBase,C:\repos\mono_gtk-sharp\generator\ClassBase.cs,Validate,Cyclomatic complexity of the method is 19
Complex Method,GtkSharp.Generation,CodeGenerator,C:\repos\mono_gtk-sharp\generator\CodeGenerator.cs,Main,Cyclomatic complexity of the method is 14
Complex Method,GtkSharp.Generation,DefaultSignalHandler,C:\repos\mono_gtk-sharp\generator\DefaultSignalHandler.cs,GenerateChainVirtualMethod,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateUnmanagedInvocation_glue,Cyclomatic complexity of the method is 11
Complex Method,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,Cyclomatic complexity of the method is 9
Complex Method,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,Generate,Cyclomatic complexity of the method is 13
Complex Method,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateBody,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,MethodBody,C:\repos\mono_gtk-sharp\generator\MethodBody.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,GtkSharp.Generation,ObjectBase,C:\repos\mono_gtk-sharp\generator\ObjectBase.cs,ObjectBase,Cyclomatic complexity of the method is 9
Complex Method,GtkSharp.Generation,ObjectBase,C:\repos\mono_gtk-sharp\generator\ObjectBase.cs,Validate,Cyclomatic complexity of the method is 13
Complex Method,GtkSharp.Generation,ObjectGen,C:\repos\mono_gtk-sharp\generator\ObjectGen.cs,Generate,Cyclomatic complexity of the method is 23
Complex Method,GtkSharp.Generation,OpaqueGen,C:\repos\mono_gtk-sharp\generator\OpaqueGen.cs,Generate,Cyclomatic complexity of the method is 15
Complex Method,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,IsHidden,Cyclomatic complexity of the method is 10
Complex Method,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,Cyclomatic complexity of the method is 13
Complex Method,GtkSharp.Generation,Parser,C:\repos\mono_gtk-sharp\generator\Parser.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,Property,C:\repos\mono_gtk-sharp\generator\Property.cs,Generate,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,Signal,C:\repos\mono_gtk-sharp\generator\Signal.cs,GenCallback,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,VirtualMethod,C:\repos\mono_gtk-sharp\generator\VirtualMethod.cs,GenerateCallback,Cyclomatic complexity of the method is 14
Complex Method,GtkSharp.Generation,Option,C:\repos\mono_gtk-sharp\generator\Options.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,Option,C:\repos\mono_gtk-sharp\generator\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Complex Method,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,GtkSharp.Generation,GenerationInfo,C:\repos\mono_gtk-sharp\generator\GenerationInfo.cs,GenerationInfo,The method has 5 parameters. Parameters: dir' assembly_name' glue_filename' glue_includes' gluelib_name
Long Parameter List,GtkSharp.Generation,MarshalGen,C:\repos\mono_gtk-sharp\generator\MarshalGen.cs,MarshalGen,The method has 6 parameters. Parameters: ctype' type' mtype' call_fmt' from_fmt' default_value
Long Parameter List,GtkSharp.Generation,MarshalGen,C:\repos\mono_gtk-sharp\generator\MarshalGen.cs,MarshalGen,The method has 5 parameters. Parameters: ctype' type' mtype' call_fmt' from_fmt
Long Parameter List,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Parameter List,GtkSharp.Generation,ActionOption,C:\repos\mono_gtk-sharp\generator\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' description' count' action' hidden
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenInvoker,The length of the statement  "			sw.WriteLine ("\t\tinternal " + Name + "Invoker (" + Name + "Native native_cb) : this (native_cb' IntPtr.Zero' null) {}"); " is 122.
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenInvoker,The length of the statement  "			sw.WriteLine ("\t\tinternal " + Name + "Invoker (" + Name + "Native native_cb' IntPtr data) : this (native_cb' data' null) {}"); " is 128.
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenInvoker,The length of the statement  "			sw.WriteLine ("\t\tinternal " + Name + "Invoker (" + Name + "Native native_cb' IntPtr data' GLib.DestroyNotify notify)"); " is 121.
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenWrapper,The length of the statement  "				sw.WriteLine ("\t\t\t\t{0} = {1}{2};"' cnt.Name' cnt.CSType == "int" ? String.Empty : "(" + cnt.MarshalType + ")(" + cnt.CSType + ")"' "__ret.Length"); " is 151.
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenWrapper,The length of the statement  "			/* If the function expects one or more "out" parameters(error parameters are excluded) or has a return value different from void and bool' exceptions " is 149.
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,GenWrapper,The length of the statement  "			*  thrown in the managed function have to be considered fatal meaning that an exception is to be thrown and the function call cannot not return " is 143.
Long Statement,GtkSharp.Generation,CallbackGen,C:\repos\mono_gtk-sharp\generator\CallbackGen.cs,Generate,The length of the statement  "			sw.WriteLine ("\t{0} delegate " + retval.CSType + " " + Name + "(" + sig.ToString() + ");"' IsInternal ? "internal" : "public"); " is 128.
Long Statement,GtkSharp.Generation,Ctor,C:\repos\mono_gtk-sharp\generator\Ctor.cs,Generate,The length of the statement  "				sw.WriteLine("\t\t{0} {1}{2} ({3}) {4}"' Protection' Safety' name' Signature.ToString()' needs_chaining ? ": base (IntPtr.Zero)" : ""); " is 135.
Long Statement,GtkSharp.Generation,DefaultSignalHandler,C:\repos\mono_gtk-sharp\generator\DefaultSignalHandler.cs,GenerateChainVirtualMethod,The length of the statement  "							sw.WriteLine ("\t\t\tIntPtr " + p.Name + "_ptr = GLib.Marshaller.StructureToPtrAlloc (" + p.Generatable.CallByName (p.Name) + ");"); " is 132.
Long Statement,GtkSharp.Generation,DefaultSignalHandler,C:\repos\mono_gtk-sharp\generator\DefaultSignalHandler.cs,GenerateChainVirtualMethod,The length of the statement  "							sw.WriteLine ("\t\t\tIntPtr " + p.Name + "_ptr = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (" + p.MarshalType + ")));"); " is 123.
Long Statement,GtkSharp.Generation,DefaultSignalHandler,C:\repos\mono_gtk-sharp\generator\DefaultSignalHandler.cs,GenerateChainVirtualMethod,The length of the statement  "						cleanup += "\t\t\t" + p.Name + " = " + p.FromNative ("(" + p.MarshalType + ") Marshal.PtrToStructure (" + p.Name + "_ptr' typeof (" + p.MarshalType + "))") + ";\n"; " is 164.
Long Statement,GtkSharp.Generation,DefaultSignalHandler,C:\repos\mono_gtk-sharp\generator\DefaultSignalHandler.cs,GenerateChainVirtualMethod,The length of the statement  "					sw.WriteLine ("\t\t\tvals [" + (i + 1) + "] = new GLib.Value (System.Text.Encoding.UTF8.GetByteCount (" + parms [i-1].Name + "));"); " is 132.
Long Statement,GtkSharp.Generation,DefaultSignalHandler,C:\repos\mono_gtk-sharp\generator\DefaultSignalHandler.cs,GenerateChainVirtualMethod,The length of the statement  "				sw.WriteLine ("\t\t\t" + retval.CSType + " result = (" + (igen is EnumGen ? retval.CSType + ") (Enum" : retval.CSType) + ") ret;"); " is 131.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,CheckGlue,The length of the statement  "			string prefix = (container_type.NS + "Sharp_" + container_type.NS + "_" + container_type.Name).Replace("."' "__").ToLower (); " is 125.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "				sw.WriteLine (indent + "\t\t" + CSType + " result = " + table.FromNative (ctype' getterName + " (" + container_type.CallByName () + ")") + ";"); " is 144.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "					sw.WriteLine (indent + "\t\t\tIntPtr* raw_ptr = (IntPtr*)(((byte*)" + container_type.CallByName () + ") + " + offsetName + ");"); " is 129.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "					sw.WriteLine (indent + "\t\t\t {0} del = ({0})Marshal.GetDelegateForFunctionPointer(*raw_ptr' typeof({0}));"' table.GetMarshalType (CType)); " is 140.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "					sw.WriteLine (indent + "\t\t\t" + table.GetMarshalType (CType) + "* raw_ptr = (" + table.GetMarshalType (CType) + "*)(((byte*)" + container_type.CallByName () + ") + " + offsetName + ");"); " is 189.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "			string to_native = (gen is IManualMarshaler) ? (gen as IManualMarshaler).AllocNative ("value") : gen.CallByName ("value"); " is 122.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "					sw.WriteLine (indent + "\t\t\tIntPtr* raw_ptr = (IntPtr*)(((byte*)" + container_type.CallByName () + ") + " + offsetName + ");"); " is 129.
Long Statement,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The length of the statement  "					sw.WriteLine (indent + "\t\t\t" + table.GetMarshalType (CType) + "* raw_ptr = (" + table.GetMarshalType (CType) + "*)(((byte*)" + container_type.CallByName () + ") + " + offsetName + ");"); " is 189.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,Generate,The length of the statement  "				throw new NotSupportedException (String.Format ("Cannot generate virtual method {0}.{1}. Make sure a writable glue path was provided to the generator."' container_type.Name' this.CallString)); " is 192.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,CanGenerate,The length of the statement  "			if (implementor != null || this.CName.Length == 0 || CodeType == VMCodeType.None || (CodeType == VMCodeType.Glue && !gen_info.GlueEnabled)) " is 139.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateOverrideBody,The length of the statement  "				sw.WriteLine ("\t\t\t\tOverride{0} ((GLib.GType) typeof ({1})' value == null ? null : {0}VMCallback);"' Name' container_type.Name); " is 131.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateMethodBody,The length of the statement  "			sw.WriteLine ("\t\t[GLib.DefaultSignalHandler(Type=typeof(" + (implementor != null ? implementor.QualifiedName : container_type.QualifiedName) + ")' ConnectionMethod=\"Override" + this.Name +"\")]"); " is 199.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateMethodBody,The length of the statement  "			sw.WriteLine ("\t\t\t{0}Internal{1} ({2});"' retval.IsVoid ? "" : "return "' this.Name' Signature.GetCallString (false)); " is 121.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateUnmanagedInvocation_managed,The length of the statement  "			sw.WriteLine ("\t\t\t{0}NativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType ()' true).{0};"' this.Name); " is 132.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateOverride_glue,The length of the statement  "			string glue_name = String.Format ("{0}sharp_{1}_override_{2}"' container_type.NS.ToLower ().Replace ("."' "_")' container_type.Name.ToLower ()' CName); " is 151.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,GenerateUnmanagedInvocation_glue,The length of the statement  "			string glue_name = String.Format ("{0}sharp_{1}_invoke_{2}"' container_type.NS.ToLower ().Replace ("."' "_")' container_type.Name.ToLower ()' CName); " is 149.
Long Statement,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,Validate,The length of the statement  "					log.Warn ("Static virtual methods can only be generated if you provide info on how to override this method via the metadata "); " is 127.
Long Statement,GtkSharp.Generation,InterfaceGen,C:\repos\mono_gtk-sharp\generator\InterfaceGen.cs,GenerateCtors,The length of the statement  "			sw.WriteLine ("\t\t\t\tthrow new ArgumentException (\"The gobject doesn't implement the GInterface of this adapter\"' \"handle\");"); " is 133.
Long Statement,GtkSharp.Generation,ManagedCallString,C:\repos\mono_gtk-sharp\generator\ManagedCallString.cs,Setup,The length of the statement  "						ret += indent + String.Format ("{0} {1}_invoker = new {0} ({1}' {2});\n"' (igen as CallbackGen).InvokerName' p.Name' user_data_param); " is 134.
Long Statement,GtkSharp.Generation,ManagedCallString,C:\repos\mono_gtk-sharp\generator\ManagedCallString.cs,Setup,The length of the statement  "						ret += indent + String.Format ("{0} {1}_invoker = new {0} ({1}' {2}' {3});\n"' (igen as CallbackGen).InvokerName' p.Name' user_data_param' destroy_param); " is 154.
Long Statement,GtkSharp.Generation,ManagedCallString,C:\repos\mono_gtk-sharp\generator\ManagedCallString.cs,Finish,The length of the statement  "					ret += indent + String.Format ("if ({0} != IntPtr.Zero) System.Runtime.InteropServices.Marshal.StructureToPtr (my{0}' {0}' false);\n"' p.Name); " is 143.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,Validate,The length of the statement  "			call = "(" + (IsStatic ? "" : container_type.CallByName () + (parms.Count > 0 ? "' " : "")) + Body.GetCallString (is_set) + ")"; " is 128.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The length of the statement  "			else if (Name == "GetGType" && (container_type is ObjectGen || (container_type.Parent != null && container_type.Parent.Methods.ContainsKey ("GetType")))) " is 153.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The length of the statement  "			else if (Modifiers == "new " || (dup != null && ((dup.Signature != null && Signature != null && dup.Signature.ToString() == Signature.ToString()) || (dup.Signature == null && Signature == null)))) " is 196.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateImport,The length of the statement  "				sw.WriteLine("\t\t" + retval.MarshalType + " static extern " + Safety + retval.CSType + " " + CName + "(" + import_sig + ");"); " is 127.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateImport,The length of the statement  "					sw.WriteLine("\t\t" + retval.MarshalType + " static extern " + Safety + retval.CSType + " " + CName + "_utf8(" + import_sig + ");"); " is 132.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateOverloads,The length of the statement  "			sw.WriteLine ("\t\t\t{0}{1} ({2});"' !retval.IsVoid ? "return " : String.Empty' Name' Signature.CallWithoutOptionals ()); " is 121.
Long Statement,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,Generate,The length of the statement  "						call = "(" + (IsStatic ? "" : container_type.CallByName () + (parms.Count > 0 ? "' " : "")) + Body.GetCallString (false) + ")"; " is 127.
Long Statement,GtkSharp.Generation,MethodBody,C:\repos\mono_gtk-sharp\generator\MethodBody.cs,Initialize,The length of the statement  "						sw.WriteLine (indent + "\t\t\t\t{0} = GLib.DestroyHelper.NotifyHandler;"' parameters [destroyNotify].Name' parameters [destroyNotify].CSType); " is 142.
Long Statement,GtkSharp.Generation,MethodBody,C:\repos\mono_gtk-sharp\generator\MethodBody.cs,Initialize,The length of the statement  "							Console.WriteLine (gen_info.CurrentMember + " - defaulting " + gen.Name + " param to 'call' scope. Specify callback scope (call|async|notified) attribute with fixup."); " is 168.
Long Statement,GtkSharp.Generation,ObjectBase,C:\repos\mono_gtk-sharp\generator\ObjectBase.cs,AddVM,The length of the statement  "				string target_name = vm_elem.HasAttribute ("target_method") ? vm_elem.GetAttribute ("target_method") : vm_elem.GetAttribute ("name"); " is 133.
Long Statement,GtkSharp.Generation,ObjectGen,C:\repos\mono_gtk-sharp\generator\ObjectGen.cs,GenCtors,The length of the statement  "			string defaultconstructoraccess = Elem.HasAttribute ("defaultconstructoraccess") ? Elem.GetAttribute ("defaultconstructoraccess") : "public"; " is 141.
Long Statement,GtkSharp.Generation,ObjectGen,C:\repos\mono_gtk-sharp\generator\ObjectGen.cs,GenChildProperties,The length of the statement  "			sw.WriteLine ("\t\tpublic class " + Name + "Child : " + child_ancestor.NS + "." + child_ancestor.Name + "." + child_ancestor.Name + "Child {"); " is 143.
Long Statement,GtkSharp.Generation,ObjectGen,C:\repos\mono_gtk-sharp\generator\ObjectGen.cs,GenChildProperties,The length of the statement  "			sw.WriteLine ("\t\t\tprotected internal " + Name + "Child (Gtk.Container parent' Gtk.Widget child) : base (parent' child) {}"); " is 127.
Long Statement,GtkSharp.Generation,OpaqueGen,C:\repos\mono_gtk-sharp\generator\OpaqueGen.cs,FromNative,The length of the statement  "			return var + " == IntPtr.Zero ? null : (" + QualifiedName + ") GLib.Opaque.GetOpaque (" + var + "' typeof (" + QualifiedName + ")' " + (owned ? "true" : "false") + ")"; " is 168.
Long Statement,GtkSharp.Generation,OpaqueGen,C:\repos\mono_gtk-sharp\generator\OpaqueGen.cs,Generate,The length of the statement  "			sw.Write ("\t{0} partial {1}class " + Name' IsInternal ? "internal" : "public"' IsAbstract ? "abstract " : String.Empty); " is 121.
Long Statement,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The length of the statement  "			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify) " is 134.
Long Statement,GtkSharp.Generation,Parser,C:\repos\mono_gtk-sharp\generator\Parser.cs,Parse,The length of the statement  "					Console.WriteLine ("ERROR: Unable to parse parser_version attribute value \"{0}\" to a number. Input file {1} will be ignored"' root.GetAttribute ("parser_version")' filename); " is 176.
Long Statement,GtkSharp.Generation,Parser,C:\repos\mono_gtk-sharp\generator\Parser.cs,Parse,The length of the statement  "				Console.WriteLine ("WARNING: The input file {0} was created by a parser that was released after this version of the generator. Consider updating the code generator if you experience problems."' filename); " is 204.
Long Statement,GtkSharp.Generation,ReturnValue,C:\repos\mono_gtk-sharp\generator\ReturnValue.cs,FromNative,The length of the statement  "					return String.Format ("({0}[]) GLib.Marshaller.ListPtrToArray ({1}' typeof({2})' {3}' typeof({4}))"' ElementType' var' IGen.QualifiedName' args' element_ctype == "gfilename*" ? "GLib.ListBase.FilenameString" : ElementType); " is 223.
Long Statement,GtkSharp.Generation,ReturnValue,C:\repos\mono_gtk-sharp\generator\ReturnValue.cs,FromNative,The length of the statement  "				return String.Format ("({0}) GLib.Marshaller.ArrayPtrToArray ({1}' typeof ({2})' (int){3}native_{4}' true)"' CSType' var' IGen.QualifiedName' CountParameter.CSType == "int" ? String.Empty : "(" + CountParameter.CSType + ")"' CountParameter.Name); " is 246.
Long Statement,GtkSharp.Generation,ReturnValue,C:\repos\mono_gtk-sharp\generator\ReturnValue.cs,ToNative,The length of the statement  "				string args = "' typeof (" + ElementType + ")' " + (owned ? "true" : "false") + "' " + (elements_owned ? "true" : "false"); " is 123.
Long Statement,GtkSharp.Generation,ReturnValue,C:\repos\mono_gtk-sharp\generator\ReturnValue.cs,Validate,The length of the statement  "				log.Warn ("Returns an array with undeterminable length. Add null_term_array or array_length_param attribute with gapi-fixup."); " is 127.
Long Statement,GtkSharp.Generation,Signal,C:\repos\mono_gtk-sharp\generator\Signal.cs,GenerateDecl,The length of the statement  "			if (elem.GetAttributeAsBoolean ("new_flag") || (container_type != null && container_type.GetSignalRecursively (Name) != null)) " is 126.
Long Statement,GtkSharp.Generation,Signal,C:\repos\mono_gtk-sharp\generator\Signal.cs,GenArgsInitialization,The length of the statement  "					finish += "\t\t\t\tif (arg" + idx + " != IntPtr.Zero) System.Runtime.InteropServices.Marshal.StructureToPtr (args.Args[" + idx + "]' arg" + idx + "' false);\n"; " is 160.
Long Statement,GtkSharp.Generation,Signal,C:\repos\mono_gtk-sharp\generator\Signal.cs,GenArgsInitialization,The length of the statement  "					finish += String.Format ("\t\t\t\targ{0} = {1};\n"' idx' (igen as IManualMarshaler).AllocNative ("args.Args[" + idx + "]")); " is 124.
Long Statement,GtkSharp.Generation,Signal,C:\repos\mono_gtk-sharp\generator\Signal.cs,GenArgsCleanup,The length of the statement  "			sw.WriteLine ("\t\t\t\tException ex = new Exception (\"args.RetVal or 'out' property unset or set to incorrect type in " + EventHandlerQualifiedName + " callback\");"); " is 168.
Long Statement,GtkSharp.Generation,Statistics,C:\repos\mono_gtk-sharp\generator\Statistics.cs,Report,The length of the statement  "			Console.WriteLine("Total Nodes: " + (enums+structs+boxed+opaques+interfaces+cbs+objects+props+sigs+methods+ctors+throttled)); " is 125.
Long Statement,GtkSharp.Generation,StructBase,C:\repos\mono_gtk-sharp\generator\StructBase.cs,FromNative,The length of the statement  "				return var + " == IntPtr.Zero ? " + QualifiedName + ".Zero : (" + QualifiedName + ") System.Runtime.InteropServices.Marshal.PtrToStructure (" + var + "' typeof (" + QualifiedName + "))"; " is 186.
Long Statement,GtkSharp.Generation,StructBase,C:\repos\mono_gtk-sharp\generator\StructBase.cs,Prepare,The length of the statement  "			sw.WriteLine (indent + "IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));"); " is 158.
Long Statement,GtkSharp.Generation,NativeStructGen,C:\repos\mono_gtk-sharp\generator\NativeStructGen.cs,Generate,The length of the statement  "			sw.WriteLine ("\t" + access + " partial class {0} : {1} IEquatable<{0}> {{"' Name' Parent == null ? "GLib.IWrapper'" : (Parent.QualifiedName + "'")); " is 149.
Long Statement,GtkSharp.Generation,NativeStructGen,C:\repos\mono_gtk-sharp\generator\NativeStructGen.cs,GenFields,The length of the statement  "					sw.WriteLine ("\t\t\tset {{ NativeStruct native = Native; native.{0} = value;  Marshal.StructureToPtr (native' this.Handle' false); }}"' field.StudlyName); " is 155.
Complex Conditional,GtkSharp.Generation,CodeGenerator,C:\repos\mono_gtk-sharp\generator\CodeGenerator.cs,Main,The conditional expression  "dir != "" || assembly_name != "" || glue_filename != "" || glue_includes != "" || gluelib_name != """  is complex.
Complex Conditional,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,CheckGlue,The conditional expression  "(Readable && Getter == null) || (Writable && Setter == null)"  is complex.
Complex Conditional,GtkSharp.Generation,FieldBase,C:\repos\mono_gtk-sharp\generator\FieldBase.cs,Generate,The conditional expression  "(getterName != null || setterName != null || getOffsetName != null) && gen_info.GlueWriter == null"  is complex.
Complex Conditional,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,CanGenerate,The conditional expression  "implementor != null || this.CName.Length == 0 || CodeType == VMCodeType.None || (CodeType == VMCodeType.Glue && !gen_info.GlueEnabled)"  is complex.
Complex Conditional,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The conditional expression  "Name == "ToString" && Parameters.Count == 0 && (!(container_type is InterfaceGen)|| implementor != null)"  is complex.
Complex Conditional,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The conditional expression  "Name == "GetGType" && (container_type is ObjectGen || (container_type.Parent != null && container_type.Parent.Methods.ContainsKey ("GetType")))"  is complex.
Complex Conditional,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The conditional expression  "Modifiers == "new " || (dup != null && ((dup.Signature != null && Signature != null && dup.Signature.ToString() == Signature.ToString()) || (dup.Signature == null && Signature == null)))"  is complex.
Complex Conditional,GtkSharp.Generation,MethodBody,C:\repos\mono_gtk-sharp\generator\MethodBody.cs,GetCallString,The conditional expression  "i > 0 && parameters [i - 1].IsString && p.IsLength && p.PassAs == String.Empty"  is complex.
Complex Conditional,GtkSharp.Generation,MethodBody,C:\repos\mono_gtk-sharp\generator\MethodBody.cs,GetCallString,The conditional expression  "p.IsUserData && parameters.IsHidden (p) && !parameters.HideData &&  					   (i == 0 || parameters [i - 1].Scope != "notified")"  is complex.
Complex Conditional,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,IsHidden,The conditional expression  "idx > 0 && p.IsLength && p.PassAs == String.Empty && this [idx - 1].IsString"  is complex.
Complex Conditional,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The conditional expression  "(p.CSType == "") || (p.Name == "") ||   				    (p.MarshalType == "") || (SymbolTable.Table.CallByName(p.CType' p.Name) == "")"  is complex.
Complex Conditional,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The conditional expression  "Parser.GetVersion (elem.OwnerDocument.DocumentElement) < 3 &&  			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify"  is complex.
Complex Conditional,GtkSharp.Generation,Property,C:\repos\mono_gtk-sharp\generator\Property.cs,Generate,The conditional expression  "IsDeprecated ||  			    (Getter != null && Getter.IsDeprecated) ||  			    (Setter != null && Setter.IsDeprecated)"  is complex.
Complex Conditional,GtkSharp.Generation,Property,C:\repos\mono_gtk-sharp\generator\Property.cs,Generate,The conditional expression  "v_type != "" && !(table.IsObject (CType) || table.IsInterface (CType) || table.IsOpaque (CType))"  is complex.
Complex Conditional,GtkSharp.Generation,StructField,C:\repos\mono_gtk-sharp\generator\StructField.cs,Generate,The conditional expression  "IsPointer && (gen is StructGen || gen is BoxedGen || gen is UnionGen)"  is complex.
Complex Conditional,GtkSharp.Generation,VMSignature,C:\repos\mono_gtk-sharp\generator\VMSignature.cs,VMSignature,The conditional expression  "p.IsCount && ((i > 0 && parms [i - 1].IsArray) || (i < parms.Count - 1 && parms [i + 1].IsArray))"  is complex.
Complex Conditional,GtkSharp.Generation,Option,C:\repos\mono_gtk-sharp\generator\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Virtual Method Call from Constructor,GtkSharp.Generation,StructBase,C:\repos\mono_gtk-sharp\generator\StructBase.cs,StructBase,The constructor "StructBase" calls a virtual method "IsNodeNameHandled".
Virtual Method Call from Constructor,GtkSharp.Generation,NativeStructGen,C:\repos\mono_gtk-sharp\generator\NativeStructGen.cs,NativeStructGen,The constructor "NativeStructGen" calls a virtual method "IsNodeNameHandled".
Magic Number,GtkSharp.Generation,ClassBase,C:\repos\mono_gtk-sharp\generator\ClassBase.cs,IgnoreMethod,The following statement contains a magic number: return ((method.IsSetter || (method.IsGetter && mname.StartsWith("Get"))) &&  				((props != null) && props.ContainsKey(mname.Substring(3)) ||  				 (fields != null) && fields.ContainsKey(mname.Substring(3))));
Magic Number,GtkSharp.Generation,ClassBase,C:\repos\mono_gtk-sharp\generator\ClassBase.cs,IgnoreMethod,The following statement contains a magic number: return ((method.IsSetter || (method.IsGetter && mname.StartsWith("Get"))) &&  				((props != null) && props.ContainsKey(mname.Substring(3)) ||  				 (fields != null) && fields.ContainsKey(mname.Substring(3))));
Magic Number,GtkSharp.Generation,CodeGenerator,C:\repos\mono_gtk-sharp\generator\CodeGenerator.cs,Main,The following statement contains a magic number: try {  				extra = options.Parse (args);  			}  			catch (OptionException e) {  				Console.Write ("gapi-codegen: ");  				Console.WriteLine (e.Message);  				Console.WriteLine ("Try `gapi-codegen --help' for more information.");  				return 64;  			}
Magic Number,GtkSharp.Generation,CodeGenerator,C:\repos\mono_gtk-sharp\generator\CodeGenerator.cs,Main,The following statement contains a magic number: if (filenames.Count == 0) {  				Console.WriteLine ("You need to specify a file to process using the --generate option.");  				Console.WriteLine ("Try `gapi-codegen --help' for more information.");  				return 64;  			}
Magic Number,GtkSharp.Generation,CodeGenerator,C:\repos\mono_gtk-sharp\generator\CodeGenerator.cs,Main,The following statement contains a magic number: if (extra.Exists (v => { return v.StartsWith ("--customdir"); })) {  				Console.WriteLine ("Using .custom files is not supported anymore' use partial classes instead.");  				return 64;  			}
Magic Number,GtkSharp.Generation,InterfaceGen,C:\repos\mono_gtk-sharp\generator\InterfaceGen.cs,GenerateImplementorIface,The following statement contains a magic number: foreach (InterfaceVM vm in interface_vms) {  				if (!vm_table.ContainsKey (vm.Name)) {  					continue;  				} else if (!vm.Validate (new LogWriter (QualifiedName))) {  					vm_table.Remove (vm.Name);  					continue;  				} else if (vm.IsGetter || vm.IsSetter) {  					string cmp_name = (vm.IsGetter ? "Set" : "Get") + vm.Name.Substring (3);  					InterfaceVM cmp = null;  					if (vm_table.TryGetValue (cmp_name' out cmp) && (cmp.IsGetter || cmp.IsSetter)) {  						if (vm.IsSetter)  							cmp.GenerateDeclaration (sw' vm);  						else  							vm.GenerateDeclaration (sw' cmp);  						vm_table.Remove (cmp.Name);  					} else  						vm.GenerateDeclaration (sw' null);  					vm_table.Remove (vm.Name);  				} else {  					vm.GenerateDeclaration (sw' null);  					vm_table.Remove (vm.Name);  				}  			}
Magic Number,GtkSharp.Generation,InterfaceVM,C:\repos\mono_gtk-sharp\generator\InterfaceVM.cs,GenerateDeclaration,The following statement contains a magic number: if (IsGetter) {  				string name = Name.StartsWith ("Get") ? Name.Substring (3) : Name;  				string type = retval.IsVoid ? parms [0].CSType : retval.CSType;  				if (complement != null && complement.parms [0].CSType == type)  					sw.WriteLine ("\t\t" + type + " " + name + " { get; set; }");  				else {  					sw.WriteLine ("\t\t" + type + " " + name + " { get; }");  					if (complement != null)  						sw.WriteLine ("\t\t" + complement.retval.CSType + " " + complement.Name + " (" + complement.Signature + ");");  				}  			} else if (IsSetter)   				sw.WriteLine ("\t\t" + parms[0].CSType + " " + Name.Substring (3) + " { set; }");  			else  				sw.WriteLine ("\t\t" + retval.CSType + " " + Name + " (" + Signature + ");");
Magic Number,GtkSharp.Generation,InterfaceVM,C:\repos\mono_gtk-sharp\generator\InterfaceVM.cs,GenerateDeclaration,The following statement contains a magic number: if (IsGetter) {  				string name = Name.StartsWith ("Get") ? Name.Substring (3) : Name;  				string type = retval.IsVoid ? parms [0].CSType : retval.CSType;  				if (complement != null && complement.parms [0].CSType == type)  					sw.WriteLine ("\t\t" + type + " " + name + " { get; set; }");  				else {  					sw.WriteLine ("\t\t" + type + " " + name + " { get; }");  					if (complement != null)  						sw.WriteLine ("\t\t" + complement.retval.CSType + " " + complement.Name + " (" + complement.Signature + ");");  				}  			} else if (IsSetter)   				sw.WriteLine ("\t\t" + parms[0].CSType + " " + Name.Substring (3) + " { set; }");  			else  				sw.WriteLine ("\t\t" + retval.CSType + " " + Name + " (" + Signature + ");");
Magic Number,GtkSharp.Generation,ManagedCallString,C:\repos\mono_gtk-sharp\generator\ManagedCallString.cs,ManagedCallString,The following statement contains a magic number: for (int i = 0; i < parms.Count; i ++) {  				Parameter p = parms [i];  				if (p.IsLength && i > 0 && parms [i-1].IsString)   					continue;  				else if (p.Scope == "notified") {  					user_data_param = parms[i+1].Name;  					destroy_param = parms[i+2].Name;  					i += 2;  				} else if ((p.IsCount || p.IsUserData) && parms.IsHidden (p)) {  					user_data_param = p.Name;  					continue;  				} else if (p is ErrorParameter) {  					error_param = p.Name;  					continue;  				}    				bool special = false;  				if (p.PassAs != String.Empty && (p.Name != p.FromNative (p.Name)))  					special = true;  				else if (p.Generatable is CallbackGen)  					special = true;    				this.parms.Add (p' special);    				if (p.IsOwnable) {  					dispose_params.Add (p);  				}  			}
Magic Number,GtkSharp.Generation,ManagedCallString,C:\repos\mono_gtk-sharp\generator\ManagedCallString.cs,ManagedCallString,The following statement contains a magic number: for (int i = 0; i < parms.Count; i ++) {  				Parameter p = parms [i];  				if (p.IsLength && i > 0 && parms [i-1].IsString)   					continue;  				else if (p.Scope == "notified") {  					user_data_param = parms[i+1].Name;  					destroy_param = parms[i+2].Name;  					i += 2;  				} else if ((p.IsCount || p.IsUserData) && parms.IsHidden (p)) {  					user_data_param = p.Name;  					continue;  				} else if (p is ErrorParameter) {  					error_param = p.Name;  					continue;  				}    				bool special = false;  				if (p.PassAs != String.Empty && (p.Name != p.FromNative (p.Name)))  					special = true;  				else if (p.Generatable is CallbackGen)  					special = true;    				this.parms.Add (p' special);    				if (p.IsOwnable) {  					dispose_params.Add (p);  				}  			}
Magic Number,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The following statement contains a magic number: if (is_get || is_set) {  				if (retval.IsVoid)  					sw.Write (Parameters.AccessorReturnType);  				else  					sw.Write(retval.CSType);  				sw.Write(" ");  				if (Name.StartsWith ("Get") || Name.StartsWith ("Set"))  					sw.Write (Name.Substring (3));  				else {  					int dot = Name.LastIndexOf ('.');  					if (dot != -1 && (Name.Substring (dot + 1' 3) == "Get" || Name.Substring (dot + 1' 3) == "Set"))  						sw.Write (Name.Substring (0' dot + 1) + Name.Substring (dot + 4));  					else  						sw.Write (Name);  				}  				sw.WriteLine(" { ");  			} else if (IsAccessor) {  				sw.Write (Signature.AccessorType + " " + Name + "(" + Signature.AsAccessor + ")");  			} else {  				sw.Write(retval.CSType + " " + Name + "(" + (Signature != null ? Signature.ToString() : "") + ")");  			}
Magic Number,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The following statement contains a magic number: if (is_get || is_set) {  				if (retval.IsVoid)  					sw.Write (Parameters.AccessorReturnType);  				else  					sw.Write(retval.CSType);  				sw.Write(" ");  				if (Name.StartsWith ("Get") || Name.StartsWith ("Set"))  					sw.Write (Name.Substring (3));  				else {  					int dot = Name.LastIndexOf ('.');  					if (dot != -1 && (Name.Substring (dot + 1' 3) == "Get" || Name.Substring (dot + 1' 3) == "Set"))  						sw.Write (Name.Substring (0' dot + 1) + Name.Substring (dot + 4));  					else  						sw.Write (Name);  				}  				sw.WriteLine(" { ");  			} else if (IsAccessor) {  				sw.Write (Signature.AccessorType + " " + Name + "(" + Signature.AsAccessor + ")");  			} else {  				sw.Write(retval.CSType + " " + Name + "(" + (Signature != null ? Signature.ToString() : "") + ")");  			}
Magic Number,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The following statement contains a magic number: if (is_get || is_set) {  				if (retval.IsVoid)  					sw.Write (Parameters.AccessorReturnType);  				else  					sw.Write(retval.CSType);  				sw.Write(" ");  				if (Name.StartsWith ("Get") || Name.StartsWith ("Set"))  					sw.Write (Name.Substring (3));  				else {  					int dot = Name.LastIndexOf ('.');  					if (dot != -1 && (Name.Substring (dot + 1' 3) == "Get" || Name.Substring (dot + 1' 3) == "Set"))  						sw.Write (Name.Substring (0' dot + 1) + Name.Substring (dot + 4));  					else  						sw.Write (Name);  				}  				sw.WriteLine(" { ");  			} else if (IsAccessor) {  				sw.Write (Signature.AccessorType + " " + Name + "(" + Signature.AsAccessor + ")");  			} else {  				sw.Write(retval.CSType + " " + Name + "(" + (Signature != null ? Signature.ToString() : "") + ")");  			}
Magic Number,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,GenerateDeclCommon,The following statement contains a magic number: if (is_get || is_set) {  				if (retval.IsVoid)  					sw.Write (Parameters.AccessorReturnType);  				else  					sw.Write(retval.CSType);  				sw.Write(" ");  				if (Name.StartsWith ("Get") || Name.StartsWith ("Set"))  					sw.Write (Name.Substring (3));  				else {  					int dot = Name.LastIndexOf ('.');  					if (dot != -1 && (Name.Substring (dot + 1' 3) == "Get" || Name.Substring (dot + 1' 3) == "Set"))  						sw.Write (Name.Substring (0' dot + 1) + Name.Substring (dot + 4));  					else  						sw.Write (Name);  				}  				sw.WriteLine(" { ");  			} else if (IsAccessor) {  				sw.Write (Signature.AccessorType + " " + Name + "(" + Signature.AsAccessor + ")");  			} else {  				sw.Write(retval.CSType + " " + Name + "(" + (Signature != null ? Signature.ToString() : "") + ")");  			}
Magic Number,GtkSharp.Generation,Method,C:\repos\mono_gtk-sharp\generator\Method.cs,Generate,The following statement contains a magic number: if (is_set || is_get)  			{  				if (Modifiers != "new " && container_type.GetPropertyRecursively (Name.Substring (3)) != null)  					return;  				comp = GetComplement ();  				if (comp != null && is_set) {  					if (Parameters.AccessorReturnType == comp.ReturnType)  						return;  					else {  						is_set = false;  						call = "(" + (IsStatic ? "" : container_type.CallByName () + (parms.Count > 0 ? "' " : "")) + Body.GetCallString (false) + ")";  						comp = null;  					}  				}  				/* some setters take more than one arg */  				if (comp != null && !comp.is_set)  					comp = null;  			}
Magic Number,GtkSharp.Generation,MethodBody,C:\repos\mono_gtk-sharp\generator\MethodBody.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < parameters.Count; i++) {  				Parameter p = parameters [i];    				IGeneratable gen = p.Generatable;  				string name = p.Name;  				if (is_set)  					name = "value";    				p.CallName = name;  				foreach (string prep in p.Prepare)  					sw.WriteLine (indent + "\t\t\t" + prep);    				if (gen is CallbackGen) {  					CallbackGen cbgen = gen as CallbackGen;  					string wrapper = cbgen.GenWrapper(gen_info);    					int closure = i + 1;  					if (p.Closure >= 0)  						closure = p.Closure;    					int destroyNotify = i + 2;  					if (p.DestroyNotify >= 0)  						destroyNotify = p.DestroyNotify;    					switch (p.Scope) {  					case "notified":  						sw.WriteLine (indent + "\t\t\t{0} {1}_wrapper = new {0} ({1});"' wrapper' name);  						sw.WriteLine (indent + "\t\t\tIntPtr {0};"' parameters [closure].Name);  						sw.WriteLine (indent + "\t\t\t{0} {1};"' parameters [destroyNotify].CSType' parameters [destroyNotify].Name);  						sw.WriteLine (indent + "\t\t\tif ({0} == null) {{"' name);  						sw.WriteLine (indent + "\t\t\t\t{0} = IntPtr.Zero;"' parameters [closure].Name);  						sw.WriteLine (indent + "\t\t\t\t{0} = null;"' parameters [destroyNotify].Name);  						sw.WriteLine (indent + "\t\t\t} else {");  						sw.WriteLine (indent + "\t\t\t\t{0} = (IntPtr) GCHandle.Alloc ({1}_wrapper);"' parameters [closure].Name' name);  						sw.WriteLine (indent + "\t\t\t\t{0} = GLib.DestroyHelper.NotifyHandler;"' parameters [destroyNotify].Name' parameters [destroyNotify].CSType);  						sw.WriteLine (indent + "\t\t\t}");  						break;    					case "async":  						sw.WriteLine (indent + "\t\t\t{0} {1}_wrapper = new {0} ({1});"' wrapper' name);  						sw.WriteLine (indent + "\t\t\t{0}_wrapper.PersistUntilCalled ();"' name);  						break;  					case "call":  					default:  						if (p.Scope == String.Empty)  							Console.WriteLine (gen_info.CurrentMember + " - defaulting " + gen.Name + " param to 'call' scope. Specify callback scope (call|async|notified) attribute with fixup.");  						sw.WriteLine (indent + "\t\t\t{0} {1}_wrapper = new {0} ({1});"' wrapper' name);  						break;  					}  				}  			}
Magic Number,GtkSharp.Generation,ObjectGen,C:\repos\mono_gtk-sharp\generator\ObjectGen.cs,Generate,The following statement contains a magic number: if (interfaces.Count != 0) {  				var all_methods = new Dictionary<string' Method> ();  				foreach (Method m in Methods.Values) {  					all_methods[m.Name] = m;  				}  				var collisions = new Dictionary<string' bool> ();  				foreach (string iface in interfaces) {  					ClassBase igen = table.GetClassGen (iface);  					foreach (Method m in igen.Methods.Values) {  						if (m.Name.StartsWith ("Get") || m.Name.StartsWith ("Set")) {  							if (GetProperty (m.Name.Substring (3)) != null) {  								collisions[m.Name] = true;  								continue;  							}  						}  						Method collision = null;  						all_methods.TryGetValue (m.Name' out collision);  						if (collision != null && collision.Signature.Types == m.Signature.Types)  							collisions[m.Name] = true;  						else  							all_methods[m.Name] = m;  					}  				}  					  				foreach (string iface in interfaces) {  					if (Parent != null && Parent.Implements (iface))  						continue;  					InterfaceGen igen = table.GetClassGen (iface) as InterfaceGen;  					igen.GenMethods (gen_info' collisions' this);  					igen.GenProperties (gen_info' this);  					igen.GenSignals (gen_info' this);  					igen.GenVirtualMethods (gen_info' this);  				}  			}
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,IsHidden,The following statement contains a magic number: if (HasCB || HideData) {    				if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) >= 3) {  					foreach (Parameter param in param_list) {  						if (param.Closure == idx)  							return true;  						if (param.DestroyNotify == idx)  							return true;  					}  				} else {  					if (p.IsUserData && (idx == Count - 1))  						return true;  					if (p.IsUserData && (idx == Count - 2) && this [Count - 1] is ErrorParameter)  						return true;  					if (p.IsUserData && idx > 0 && this [idx - 1].Generatable is CallbackGen)  						return true;  					if (p.IsDestroyNotify && (idx == Count - 1) && this [idx - 1].IsUserData)  						return true;  				}  			}
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,IsHidden,The following statement contains a magic number: if (HasCB || HideData) {    				if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) >= 3) {  					foreach (Parameter param in param_list) {  						if (param.Closure == idx)  							return true;  						if (param.DestroyNotify == idx)  							return true;  					}  				} else {  					if (p.IsUserData && (idx == Count - 1))  						return true;  					if (p.IsUserData && (idx == Count - 2) && this [Count - 1] is ErrorParameter)  						return true;  					if (p.IsUserData && idx > 0 && this [idx - 1].Generatable is CallbackGen)  						return true;  					if (p.IsDestroyNotify && (idx == Count - 1) && this [idx - 1].IsUserData)  						return true;  				}  			}
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The following statement contains a magic number: if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) < 3 &&  			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify)  				this [Count - 3].Scope = "notified";
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The following statement contains a magic number: if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) < 3 &&  			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify)  				this [Count - 3].Scope = "notified";
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The following statement contains a magic number: if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) < 3 &&  			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify)  				this [Count - 3].Scope = "notified";
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The following statement contains a magic number: if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) < 3 &&  			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify)  				this [Count - 3].Scope = "notified";
Magic Number,GtkSharp.Generation,Parameters,C:\repos\mono_gtk-sharp\generator\Parameters.cs,Validate,The following statement contains a magic number: if (Parser.GetVersion (elem.OwnerDocument.DocumentElement) < 3 &&  			    has_cb && Count > 2 && this [Count - 3].Generatable is CallbackGen && this [Count - 2].IsUserData && this [Count - 1].IsDestroyNotify)  				this [Count - 3].Scope = "notified";
Magic Number,GtkSharp.Generation,SimpleBase,C:\repos\mono_gtk-sharp\generator\SimpleBase.cs,SimpleBase,The following statement contains a magic number: if (toks.Length > 2)  				this.ns = String.Join ("."' toks' 0' toks.Length - 1);  			else if (toks.Length == 2)  				this.ns = toks[0];
Magic Number,GtkSharp.Generation,SimpleBase,C:\repos\mono_gtk-sharp\generator\SimpleBase.cs,SimpleBase,The following statement contains a magic number: if (toks.Length > 2)  				this.ns = String.Join ("."' toks' 0' toks.Length - 1);  			else if (toks.Length == 2)  				this.ns = toks[0];
Magic Number,GtkSharp.Generation,SymbolTable,C:\repos\mono_gtk-sharp\generator\SymbolTable.cs,Trim,The following statement contains a magic number: if (trim_type.StartsWith("const-")) return trim_type.Substring(6);
Magic Number,GtkSharp.Generation,VMSignature,C:\repos\mono_gtk-sharp\generator\VMSignature.cs,VMSignature,The following statement contains a magic number: for (int i = 0; i < parms.Count; i++) {  				Parameter p = parms [i];    				if (i > 0 && p.IsLength && parms [i - 1].IsString)  					continue;    				if (p.IsCount && ((i > 0 && parms [i - 1].IsArray) || (i < parms.Count - 1 && parms [i + 1].IsArray)))  					continue;    				has_cb = has_cb || p.Generatable is CallbackGen;  				if (p.IsUserData && has_cb)  					continue;    				if (p.CType == "GError**")  					continue;    				if (p.Scope == "notified")  					i += 2;    				this.parms.Add (p);  			}
Magic Number,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);}' hidden);
Magic Number,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  				string[] names = s.GetNames ();  				if (names == null || names.Length == 0)  					continue;    				int written = 0;    				Write (o' ref written' "  ");  				Write (o' ref written' names [0]);  				for (int i = 1; i < names.Length; ++i) {  					Write (o' ref written' "' ");  					Write (o' ref written' names [i]);  				}    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' s.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,GtkSharp.Generation,Constant,C:\repos\mono_gtk-sharp\generator\Constant.cs,Validate,The following statement contains a magic number: if (SymbolTable.Table.GetMarshalType (ctype) == "int" && value.Length >= 20) {  				return false;  			}
Missing Default,GtkSharp.Generation,EnumGen,C:\repos\mono_gtk-sharp\generator\EnumGen.cs,EnumGen,The following switch statement is missing a default case: switch (match.Groups[1].Value.ToUpper ()) {  							case "U": enum_type = " : uint"; break;  							case "L": enum_type = " : long"; break;  							case "UL": enum_type = " : ulong"; break;  						}
Missing Default,GtkSharp.Generation,GObjectVM,C:\repos\mono_gtk-sharp\generator\GObjectVM.cs,Validate,The following switch statement is missing a default case: switch (OverrideType) {  				case VMOverrideType.Unspecified:  					log.Warn ("Static virtual methods can only be generated if you provide info on how to override this method via the metadata ");  					is_valid = false;  					break;  				case VMOverrideType.ImplementingClass:  					log.Warn ("Overriding static virtual methods in the implementing class is not supported yet ");  					is_valid = false;  					break;  				}
Missing Default,GtkSharp.Generation,MethodBase,C:\repos\mono_gtk-sharp\generator\MethodBase.cs,MethodBase,The following switch statement is missing a default case: switch (attr) {  					case "public":  					case "protected":  					case "internal":  					case "private":  					case "protected internal":  						protection = attr;  						break;  				}
Missing Default,GtkSharp.Generation,ObjectBase,C:\repos\mono_gtk-sharp\generator\ObjectBase.cs,ObjectBase,The following switch statement is missing a default case: switch (node.Name) {  				case "virtual_method":  					if (this.ParserVersion == 1) {  						if (is_interface) // Generating non-signal GObject virtual methods is not supported in compatibility mode  							AddVM (member' false' is_interface);  					} else  						vms.Add (member.GetAttribute ("cname")' member);  					break;    				case "signal":  					if (this.ParserVersion == 1 || member.GetAttribute ("field_name") == "")  						AddVM (member' true' is_interface);  					else  						signal_vms.Add (member.GetAttribute ("field_name")' member);    					if (!member.GetAttributeAsBoolean ("hidden")) {  						string name = member.GetAttribute("name");  						while (sigs.ContainsKey(name))  							name += "mangled";  						sigs.Add (name' new Signal (member' this));  					}  					break;    				case "class_struct":  					class_elem = member;  					break;  				}
Missing Default,GtkSharp.Generation,Parser,C:\repos\mono_gtk-sharp\generator\Parser.cs,ValidationEventHandler,The following switch statement is missing a default case: switch (e.Severity)  			{  			case XmlSeverityType.Error:  				Console.WriteLine("Error: {0}"' e.Message);  				break;  			case XmlSeverityType.Warning:  				Console.WriteLine("Warning: {0}"' e.Message);  				break;  			}
Missing Default,GtkSharp.Generation,OptionSet,C:\repos\mono_gtk-sharp\generator\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
