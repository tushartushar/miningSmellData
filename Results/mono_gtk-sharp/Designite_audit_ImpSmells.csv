Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.AssemblyCompare,TypeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,DoOutput,The method has 102 lines of code.
Complex Method,Mono.AssemblyCompare,XMLData,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,AddCountersAttributes,Cyclomatic complexity of the method is 15
Complex Method,Mono.AssemblyCompare,XMLNameGroup,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTo,Cyclomatic complexity of the method is 9
Complex Method,Mono.AssemblyCompare,XMLAssembly,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareNamespaces,Cyclomatic complexity of the method is 8
Complex Method,Mono.AssemblyCompare,XMLNamespace,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTypes,Cyclomatic complexity of the method is 8
Complex Method,Mono.AssemblyCompare,XMLClass,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,LoadData,Cyclomatic complexity of the method is 17
Complex Method,Mono.AssemblyCompare,XMLClass,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTo,Cyclomatic complexity of the method is 27
Complex Method,Mono.AssemblyCompare,XMLParameter,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,LoadData,Cyclomatic complexity of the method is 9
Complex Method,Mono.AssemblyCompare,XMLParameter,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTo,Cyclomatic complexity of the method is 12
Complex Method,Mono.AssemblyCompare,XMLMember,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareToInner,Cyclomatic complexity of the method is 11
Complex Method,Mono.AssemblyCompare,XMLParameters,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTo,Cyclomatic complexity of the method is 9
Complex Method,Mono.AssemblyCompare,XMLMethods,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,LoadExtraData,Cyclomatic complexity of the method is 13
Complex Method,Mono.AssemblyCompare,AssemblyData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,DoOutput,Cyclomatic complexity of the method is 9
Complex Method,Mono.AssemblyCompare,TypeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,DoOutput,Cyclomatic complexity of the method is 26
Complex Method,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,DoOutput,Cyclomatic complexity of the method is 11
Complex Method,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IsInvalid,Cyclomatic complexity of the method is 8
Long Statement,GtkSharp.Auditing,ExtractMissing,C:\repos\mono_gtk-sharp\audit\extract-missing.cs,Main,The length of the statement  "					Console.WriteLine ("Missing " + node.Name + " " + (node.ParentNode.ParentNode as XmlElement).GetAttribute ("name") + "." + node.GetAttribute ("name")); " is 151.
Long Statement,GtkSharp.Auditing,ExtractMissing,C:\repos\mono_gtk-sharp\audit\extract-missing.cs,Main,The length of the statement  "						Console.WriteLine ("Missing attribute (" + (node as XmlElement).GetAttribute ("name") + ") on type: " + (node.ParentNode.ParentNode as XmlElement).GetAttribute ("name")); " is 170.
Long Statement,GtkSharp.Auditing,ExtractMissing,C:\repos\mono_gtk-sharp\audit\extract-missing.cs,Main,The length of the statement  "						Console.WriteLine ("Missing attribute (" + (node as XmlElement).GetAttribute ("name") + ") on " + (node.ParentNode.ParentNode.ParentNode.ParentNode as XmlElement).GetAttribute ("name") + "." + (node.ParentNode.ParentNode as XmlElement).GetAttribute ("name")); " is 259.
Long Statement,Mono.AssemblyCompare,XMLParameter,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTo,The length of the statement  "				AddWarning (parent' "Parameter default value different: {0} != {1}"' (defaultValue == null) ? "(no default value)" : defaultValue' (oparm.defaultValue == null) ? "(no default value)" : oparm.defaultValue); " is 205.
Long Statement,Mono.AssemblyCompare,ParameterData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,DoOutput,The length of the statement  "				AddAttribute (paramNode' "position"' parameter.Method.Parameters.IndexOf(parameter).ToString(CultureInfo.InvariantCulture)); " is 124.
Long Statement,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,CreatePropertyFieldMapping,The length of the statement  "			Dictionary<PropertyDefinition' FieldReference> property_mapping = new Dictionary<PropertyDefinition' FieldReference> (); " is 120.
Long Statement,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The length of the statement  "					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) : " is 128.
Long Statement,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The length of the statement  "					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value); " is 130.
Complex Conditional,Mono.AssemblyCompare,XMLData,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,IsTODOAttribute,The conditional expression  "s.EndsWith ("MonoDocumentationNoteAttribute") ||  			    s.EndsWith ("MonoExtensionAttribute") ||  			    s.EndsWith ("MonoLimitationAttribute") ||  			    s.EndsWith ("MonoNotSupportedAttribute")"  is complex.
Complex Conditional,Mono.AssemblyCompare,XMLClass,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,CompareTo,The conditional expression  "(isAbstract && isSealed) || (oclass.isAbstract && oclass.isSealed)"  is complex.
Complex Conditional,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IndexOfInvalid,The conditional expression  "!allowSurrogate ||  					    i + 1 == s.Length ||  					    s [i] < '\uD800' ||  					    s [i] >= '\uDC00' ||  					    s [i + 1] < '\uDC00' ||  					    s [i + 1] >= '\uE000'"  is complex.
Complex Conditional,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IndexOfInvalid,The conditional expression  "!allowSurrogate ||  					    i + 1 == end ||  					    s [i] < '\uD800' ||  					    s [i] >= '\uDC00' ||  					    s [i + 1] < '\uDC00' ||  					    s [i + 1] >= '\uE000'"  is complex.
Magic Number,Mono.AssemblyCompare,Driver,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,Main,The following statement contains a magic number: if (args.Length != 2) {  				Console.WriteLine ("Usage: mono mono-api-diff.exe <assembly 1 xml> <assembly 2 xml>");  				return 1;  			}
Magic Number,Mono.AssemblyCompare,Driver,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,Main,The following statement contains a magic number: if (args.Length != 2) {  				Console.WriteLine ("Usage: mono gen-apidiff-html.exe <diff_dir> <html_file>");  				return 1;  			}
Magic Number,Mono.AssemblyCompare,XMLData,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,AddCountersAttributes,The following statement contains a magic number: if (counters.Total > 0) {  				int percent = (100 * counters.Ok / counters.Total);  				AddAttribute (node' "complete"' percent.ToString ());  			}
Magic Number,Mono.AssemblyCompare,XMLData,C:\repos\mono_gtk-sharp\audit\mono-api-diff.cs,AddCountersAttributes,The following statement contains a magic number: if (counters.AbsTotal > 0) {  				int percent = (100 * counters.OkTotal / counters.AbsTotal);  				AddAttribute (node' "complete_total"' percent.ToString ());  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,CreateArgumentFieldMapping,The following statement contains a magic number: foreach (Instruction instruction in constructor.Body.Instructions) {  				switch (instruction.OpCode.Code) {  				case Code.Ldarg_1:  					argument = 1;  					break;  				case Code.Ldarg_2:  					argument = 2;  					break;  				case Code.Ldarg_3:  					argument = 3;  					break;  				case Code.Ldarg:  				case Code.Ldarg_S:  					argument = ((ParameterDefinition) instruction.Operand).Index + 1;  					break;    				case Code.Stfld:  					FieldReference field = (FieldReference) instruction.Operand;  					if (field.DeclaringType.FullName != constructor.DeclaringType.FullName)  						continue;    					if (!argument.HasValue)  						break;    					if (!field_mapping.ContainsKey (field))  						field_mapping.Add (field' (int) argument - 1);    					argument = null;  					break;  				}  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,CreateArgumentFieldMapping,The following statement contains a magic number: foreach (Instruction instruction in constructor.Body.Instructions) {  				switch (instruction.OpCode.Code) {  				case Code.Ldarg_1:  					argument = 1;  					break;  				case Code.Ldarg_2:  					argument = 2;  					break;  				case Code.Ldarg_3:  					argument = 3;  					break;  				case Code.Ldarg:  				case Code.Ldarg_S:  					argument = ((ParameterDefinition) instruction.Operand).Index + 1;  					break;    				case Code.Stfld:  					FieldReference field = (FieldReference) instruction.Operand;  					if (field.DeclaringType.FullName != constructor.DeclaringType.FullName)  						continue;    					if (!argument.HasValue)  						break;    					if (!field_mapping.ContainsKey (field))  						field_mapping.Add (field' (int) argument - 1);    					argument = null;  					break;  				}  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following statement contains a magic number: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Magic Number,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IsInvalid,The following statement contains a magic number: switch (ch) {  			case 9:  			case 10:  			case 13:  				return false;  			}
Magic Number,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IsInvalid,The following statement contains a magic number: switch (ch) {  			case 9:  			case 10:  			case 13:  				return false;  			}
Magic Number,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IsInvalid,The following statement contains a magic number: switch (ch) {  			case 9:  			case 10:  			case 13:  				return false;  			}
Magic Number,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IsInvalid,The following statement contains a magic number: if (ch < 32)  				return true;
Missing Default,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,CreateArgumentFieldMapping,The following switch statement is missing a default case: switch (instruction.OpCode.Code) {  				case Code.Ldarg_1:  					argument = 1;  					break;  				case Code.Ldarg_2:  					argument = 2;  					break;  				case Code.Ldarg_3:  					argument = 3;  					break;  				case Code.Ldarg:  				case Code.Ldarg_S:  					argument = ((ParameterDefinition) instruction.Operand).Index + 1;  					break;    				case Code.Stfld:  					FieldReference field = (FieldReference) instruction.Operand;  					if (field.DeclaringType.FullName != constructor.DeclaringType.FullName)  						continue;    					if (!argument.HasValue)  						break;    					if (!field_mapping.ContainsKey (field))  						field_mapping.Add (field' (int) argument - 1);    					argument = null;  					break;  				}
Missing Default,Mono.AssemblyCompare,AttributeData,C:\repos\mono_gtk-sharp\audit\mono-api-info.cs,PopulateMapping,The following switch statement is missing a default case: switch (constructor.DeclaringType.FullName) {  			case "System.Runtime.CompilerServices.DecimalConstantAttribute":  				var dca = constructor.Parameters[2].ParameterType == constructor.Module.TypeSystem.Int32 ?  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (int) ca[2].Value' (int) ca[3].Value' (int) ca[4].Value) :  					new DecimalConstantAttribute ((byte) ca[0].Value' (byte) ca[1].Value' (uint) ca[2].Value' (uint) ca[3].Value' (uint) ca[4].Value);    				mapping.Add ("Value"' dca.Value);  				return;  			case "System.ComponentModel.BindableAttribute":  				if (ca.Count != 1)  					break;    				if (constructor.Parameters[0].ParameterType == constructor.Module.TypeSystem.Boolean) {  					mapping.Add ("Bindable"' ca[0].Value);  				} else {  					throw new NotImplementedException ();  				}    				return;  			}
Missing Default,Mono.AssemblyCompare,WellFormedXmlWriter,C:\repos\mono_gtk-sharp\audit\WellFormedXmlWriter.cs,IsInvalid,The following switch statement is missing a default case: switch (ch) {  			case 9:  			case 10:  			case 13:  				return false;  			}
