Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,CheckNameAvailability,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,SetupStorageAccount,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,SetupStorageAccountAsync,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,UpdateStorageAccount,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,GetStorageAccountConnectionString,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,RegenerateKeys,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,GetStorageAccountProperties,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,ListStorageAccounts,The length of the parameter managementControllerParameters is 30.
Long Identifier,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,TearDownStorageAccount,The length of the parameter managementControllerParameters is 30.
Long Statement,DeployManageAzureStorage,ManagementController,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\ManagementController.cs,GetSubscriptionCloudCredentials,The length of the statement  "            return CertificateAuthenticationHelper.GetCredentials(_publishSettingCreds.SubscriptionId' _publishSettingCreds.ManagementCertificate); " is 135.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,CheckNameAvailability,The length of the statement  "                Console.WriteLine("{1}. Check availability of the requested name: {0}"' managementControllerParameters.StorageAccountName' step); " is 129.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,CheckNameAvailability,The length of the statement  "                Console.WriteLine("   The requested name {0} {1} available."' managementControllerParameters.StorageAccountName' (available ? "is" : "is not")); " is 144.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,SetupStorageAccount,The length of the statement  "                Console.WriteLine("\n{2}. Create Storage Account named {0} in Region {1}"' managementControllerParameters.StorageAccountName' managementControllerParameters.Region' step); " is 171.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,SetupStorageAccountAsync,The length of the statement  "                Console.WriteLine("\n{2}. Create Storage Account (async) named {0} in Region {1}"' managementControllerParameters.StorageAccountName' managementControllerParameters.Region' step); " is 179.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,UpdateStorageAccount,The length of the statement  "                Console.WriteLine("\n{1}. Update Storage Account named {0}.\n   Updates Description' Label' and GeoReplication status."' managementControllerParameters.StorageAccountName' step); " is 178.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,GetStorageAccountConnectionString,The length of the statement  "                Console.WriteLine("\n{1}. Get connection string for Storage Account named {0}."' managementControllerParameters.StorageAccountName' step); " is 138.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,RegenerateKeys,The length of the statement  "                Console.WriteLine("\n{1}. Regenerate primary key for Storage Account named {0}."' managementControllerParameters.StorageAccountName' step); " is 139.
Long Statement,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,GetStorageAccountProperties,The length of the statement  "                Console.WriteLine("\n{1}. Get properties for Storage Account named {0}."' managementControllerParameters.StorageAccountName' step); " is 131.
Magic Number,DeployManageAzureStorage,Program,C:\repos\Azure_AzureQuickStartsProjects\Data Services\DeployManageAzureStorage\Program.cs,SetupStorageAccountAsync,The following statement contains a magic number: using (var controller = new ManagementController(managementControllerParameters))              {                  Console.WriteLine("\n{2}. Create Storage Account (async) named {0} in Region {1}"' managementControllerParameters.StorageAccountName' managementControllerParameters.Region' step);                  ConsoleContinuePrompt("Create");                    Task t = Task.Run(() => controller.CreateStorageAccountAsync());                  while (t.Status != TaskStatus.RanToCompletion &&                         t.Status != TaskStatus.Canceled &&                         t.Status != TaskStatus.Faulted)                  {                      Console.WriteLine("   Working - status is {0}"' t.Status.ToString());                      Thread.Sleep(5000);                  }                    Console.WriteLine("...Complete");              }
