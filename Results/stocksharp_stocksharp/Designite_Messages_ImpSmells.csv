Implementation smell,Namespace,Class,File,Method,Description
Long Method,StockSharp.Messages,MessageAdapter,C:\repos\stocksharp_stocksharp\Messages\MessageAdapter.cs,SendInMessage,The method has 103 lines of code.
Long Statement,StockSharp.Messages,CandleMessage,C:\repos\stocksharp_stocksharp\Messages\CandleMessage.cs,ToString,The length of the statement  "			return $"{Type}'Sec={SecurityId}'A={Arg}'T={OpenTime:yyyy/MM/dd HH:mm:ss.fff}'O={OpenPrice}'H={HighPrice}'L={LowPrice}'C={ClosePrice}'V={TotalVolume}'S={State}"; " is 161.
Long Statement,StockSharp.Messages,ExecutionMessage,C:\repos\stocksharp_stocksharp\Messages\ExecutionMessage.cs,ToString,The length of the statement  "			return base.ToString() + $"'T(S)={ServerTime:yyyy/MM/dd HH:mm:ss.fff}'({ExecutionType})'Sec={SecurityId}'Ord={OrderId}/{TransactionId}/{OriginalTransactionId}'Fail={Error}'Price={OrderPrice}'OrdVol={OrderVolume}'TrVol={TradeVolume}'Bal={Balance}'TId={TradeId}'Pf={PortfolioName}'TPrice={TradePrice}'UId={UserOrderId}'State={OrderState}"; " is 337.
Long Statement,StockSharp.Messages,MessageAdapter,C:\repos\stocksharp_stocksharp\Messages\MessageAdapter.cs,InitMessageLocalTime,The length of the statement  "				case ExecutionMessage execMsg when execMsg.ExecutionType == ExecutionTypes.Transaction && execMsg.ServerTime.IsDefault(): " is 121.
Long Statement,StockSharp.Messages,OrderRegisterMessage,C:\repos\stocksharp_stocksharp\Messages\OrderRegisterMessage.cs,ToString,The length of the statement  "			return base.ToString() + $"'TransId={TransactionId}'Price={Price}'Side={Side}'OrdType={OrderType}'Vol={Volume}'Sec={SecurityId}'Pf={PortfolioName}"; " is 148.
Long Statement,StockSharp.Messages,PositionChangeMessage,C:\repos\stocksharp_stocksharp\Messages\PositionChangeMessage.cs,ToString,The length of the statement  "			return base.ToString() + $"'Sec={SecurityId}'P={PortfolioName}'CL={ClientCode}'Changes={Changes.Select(c => c.ToString()).Join("'")}"; " is 134.
Long Statement,StockSharp.Messages,MarketDataMessage,C:\repos\stocksharp_stocksharp\Messages\MarketDataMessage.cs,ToString,The length of the statement  "			return base.ToString() + $"'Sec={SecurityId}'Type={DataType}'IsSubscribe={IsSubscribe}'Arg={Arg}'TransId={TransactionId}'OrigId={OriginalTransactionId}"; " is 153.
Long Statement,StockSharp.Messages,CandleMessageVolumeProfile,C:\repos\stocksharp_stocksharp\Messages\CandleMessageVolumeProfile.cs,Calculate,The length of the statement  "			// Νΰ ρλεδσώωει θςεπΰφθθ αεπσςρ ρλεδσώωθε δβΰ ξαϊεμΰ ρσμμθπσώςρ θ ρπΰβνθβΰώςρ' θ ξοςό αξλόψΰ ρσμμΰ λξζθςρ β ξαωθι ξαϊεμ " is 125.
Long Statement,StockSharp.Messages,CandleMessageVolumeProfile,C:\repos\stocksharp_stocksharp\Messages\CandleMessageVolumeProfile.cs,Calculate,The length of the statement  "			// Ερλθ POC Vol νΰυξδθςρ νΰ γπΰνθφε φενξβξγξ δθΰοΰηξνΰ' ςξ ρβεπυσ/ρνθησ απΰςό νεχεγξ' ςξ "νΰαξπ" ξαϊεμξβ ςξλόκξ β ξδνσ ρςξπξνσ. " is 128.
Long Statement,StockSharp.Messages,CandleMessageVolumeProfile,C:\repos\stocksharp_stocksharp\Messages\CandleMessageVolumeProfile.cs,Calculate,The length of the statement  "			// Ερλθ POC Vol νΰυξδθςρ νΰ ξδθν ψΰγ νθζε/βϋψε φενξβξγξ δθΰοΰηξνΰ' ςξ ρβεπυσ/ρνθησ μξζνξ βηςό ςξλόκξ ξδνξ ηνΰχενθε δλ ρπΰβνενθ ρ δβσμ δπσγθμθ ηνΰχενθμθ. " is 158.
Long Statement,StockSharp.Messages,CandleMessageVolumeProfile,C:\repos\stocksharp_stocksharp\Messages\CandleMessageVolumeProfile.cs,Calculate,The length of the statement  "			// εξπεςθχερκθ β φενξβξμ δθΰοΰηξνε μξζες αϋςό νερκξλόκξ POC Vol' ερλθ ασδες νερκξλόκξ φενξβϋυ σπξβνει ρ ξδθνΰκξβϋμθ ξαϊεμξμ' " is 125.
Long Statement,StockSharp.Messages,CandleMessageVolumeProfile,C:\repos\stocksharp_stocksharp\Messages\CandleMessageVolumeProfile.cs,Calculate,The length of the statement  "			//   β ςΰκξμ ρλσχΰε δξλζεν απΰςόρ POC Vol κξςξπϋι αλθζε κ φενςπσ. εξπεςθχερκθ ξνθ μξγσς αϋςό πΰβνξ σδΰλενϋ ξς φενςπΰ.))) " is 122.
Long Statement,StockSharp.Messages,WorkingTime,C:\repos\stocksharp_stocksharp\Messages\WorkingTime.cs,Load,The length of the statement  "			Periods = storage.GetValue<IEnumerable<SettingsStorage>>(nameof(Periods)).Select(s => s.Load<WorkingTimePeriod>()).ToList(); " is 124.
Magic Number,StockSharp.Messages,Extensions,C:\repos\stocksharp_stocksharp\Messages\Extensions.cs,GetSpreadMiddle,The following statement contains a magic number: if (bestBidPrice != null && bestAskPrice != null)  				return (bestAskPrice + bestBidPrice).Value / 2;
Magic Number,StockSharp.Messages,Extensions,C:\repos\stocksharp_stocksharp\Messages\Extensions.cs,Convert,The following statement contains a magic number: var info = _rateInfo.SafeAdd(date' key =>  			{  				var i = _dailyInfoFactory.Invoke(c => c.GetCursOnDate(key));  				return i.Tables[0].Rows.Cast<DataRow>().ToDictionary(r => r[4].To<CurrencyTypes>()' r => r[2].To<decimal>());  			});
Magic Number,StockSharp.Messages,Extensions,C:\repos\stocksharp_stocksharp\Messages\Extensions.cs,Convert,The following statement contains a magic number: var info = _rateInfo.SafeAdd(date' key =>  			{  				var i = _dailyInfoFactory.Invoke(c => c.GetCursOnDate(key));  				return i.Tables[0].Rows.Cast<DataRow>().ToDictionary(r => r[4].To<CurrencyTypes>()' r => r[2].To<decimal>());  			});
Magic Number,StockSharp.Messages,CandleMessageVolumeProfile,C:\repos\stocksharp_stocksharp\Messages\CandleMessageVolumeProfile.cs,Calculate,The following statement contains a magic number: var maxVolume = Math.Round(PriceLevels.Sum(p => p.BuyVolume + p.SellVolume) * VolumePercent / 100' 0);
Missing Default,StockSharp.Messages,Extensions,C:\repos\stocksharp_stocksharp\Messages\Extensions.cs,IsObsolete,The following switch statement is missing a default case: switch (field)  			{  				case Level1Fields.LastTrade:  				case Level1Fields.BestBid:  				case Level1Fields.BestAsk:  				case Level1Fields.ExtensionInfo:  					return true;  			}
Missing Default,StockSharp.Messages,MessageAdapter,C:\repos\stocksharp_stocksharp\Messages\MessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  					_prevTime = default(DateTimeOffset);  					break;    				case MessageTypes.PortfolioLookup:  				{  					if (!IsSupportNativePortfolioLookup)  						_pfLookupTimeOut.StartTimeOut(((PortfolioLookupMessage)message).TransactionId);    					break;  				}  				case MessageTypes.SecurityLookup:  				{  					if (!IsSupportNativeSecurityLookup)  						_secLookupTimeOut.StartTimeOut(((SecurityLookupMessage)message).TransactionId);    					break;  				}  			}
Missing Default,StockSharp.Messages,MessageAdapter,C:\repos\stocksharp_stocksharp\Messages\MessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  				{  					case MessageTypes.Connect:  						SendOutMessage(new ConnectMessage { Error = ex });  						return;    					case MessageTypes.Disconnect:  						SendOutMessage(new DisconnectMessage { Error = ex });  						return;    					case MessageTypes.OrderRegister:  					case MessageTypes.OrderReplace:  					case MessageTypes.OrderCancel:  					case MessageTypes.OrderGroupCancel:  					{  						var replyMsg = ((OrderMessage)message).CreateReply();  						SendOutErrorExecution(replyMsg' ex);  						return;  					}  					case MessageTypes.OrderPairReplace:  					{  						var replyMsg = ((OrderPairReplaceMessage)message).Message1.CreateReply();  						SendOutErrorExecution(replyMsg' ex);  						return;  					}    					case MessageTypes.MarketData:  					{  						var reply = (MarketDataMessage)message.Clone();  						reply.OriginalTransactionId = reply.TransactionId;  						reply.Error = ex;  						SendOutMessage(reply);  						return;  					}    					case MessageTypes.SecurityLookup:  					{  						var lookupMsg = (SecurityLookupMessage)message;  						SendOutMessage(new SecurityLookupResultMessage  						{  							OriginalTransactionId = lookupMsg.TransactionId'  							Error = ex  						});  						return;  					}    					case MessageTypes.PortfolioLookup:  					{  						var lookupMsg = (PortfolioLookupMessage)message;  						SendOutMessage(new PortfolioLookupResultMessage  						{  							OriginalTransactionId = lookupMsg.TransactionId'  							Error = ex  						});  						return;  					}    					case MessageTypes.ChangePassword:  					{  						var pwdMsg = (ChangePasswordMessage)message;  						SendOutMessage(new ChangePasswordMessage  						{  							OriginalTransactionId = pwdMsg.TransactionId'  							Error = ex  						});  						return;  					}  				}
Missing Default,StockSharp.Messages,MessageAdapter,C:\repos\stocksharp_stocksharp\Messages\MessageAdapter.cs,InitMessageLocalTime,The following switch statement is missing a default case: switch (message)  			{  				case BaseChangeMessage<PositionChangeTypes> posMsg when posMsg.ServerTime.IsDefault():  					posMsg.ServerTime = CurrentTime;  					break;  				case ExecutionMessage execMsg when execMsg.ExecutionType == ExecutionTypes.Transaction && execMsg.ServerTime.IsDefault():  					execMsg.ServerTime = CurrentTime;  					break;  			}
Missing Default,StockSharp.Messages,Unit,C:\repos\stocksharp_stocksharp\Messages\Unit.cs,Convert,The following switch statement is missing a default case: switch (destinationType)  				{  					case UnitTypes.Point:  						var point = getTypeValue(UnitTypes.Point);    						if (point == null || point == 0)  							throw new InvalidOperationException(LocalizedStrings.PriceStepIsZeroKey);    						value /= point.Value;  						break;  					case UnitTypes.Step:  						var step = getTypeValue(UnitTypes.Step);    						if (step == null || step == 0)  							throw new InvalidOperationException(LocalizedStrings.Str2925);    						value /= step.Value;  						break;  				}
