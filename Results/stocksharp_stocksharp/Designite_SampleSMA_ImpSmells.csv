Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SampleSMA,App,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\App.xaml.cs,InitializeComponent,The length of the statement  "            this.DispatcherUnhandledException += new System.Windows.Threading.DispatcherUnhandledExceptionEventHandler(this.ApplicationDispatcherUnhandledException); " is 153.
Long Statement,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The length of the statement  "				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 }) " is 133.
Long Statement,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The length of the statement  "				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line => " is 129.
Long Statement,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The length of the statement  "				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min)); " is 122.
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,MainWindow,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\MainWindow.xaml.cs,StartClick,The following statement contains a magic number: if (_strategy == null)  			{  				if (Portfolios.SelectedPortfolio == null)  				{  					MessageBox.Show(this' LocalizedStrings.Str3009);  					return;  				}    				// регистрируем наш тайм-фрейм  				var series = new CandleSeries(typeof(TimeFrameCandle)' _lkoh' _timeFrame);    				// создаем торговую стратегию' скользящие средние на 80 5-минуток и 10 5-минуток  				_strategy = new SmaStrategy(_candleManager' series' new SimpleMovingAverage { Length = 80 }' new SimpleMovingAverage { Length = 10 })  				{  					Volume = 1'  					Security = _lkoh'  					Portfolio = Portfolios.SelectedPortfolio'  					Connector = _trader'  				};  				_strategy.Log += OnLog;  				_strategy.PropertyChanged += OnStrategyPropertyChanged;    				_candlesElem = new ChartCandleElement();  				_area.Elements.Add(_candlesElem);    				_longMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Long'  					Color = Colors.OrangeRed  				};  				_area.Elements.Add(_longMaElem);    				_shortMaElem = new ChartIndicatorElement  				{  					Title = LocalizedStrings.Short'  					Color = Colors.RoyalBlue  				};  				_area.Elements.Add(_shortMaElem);    				IEnumerable<Candle> candles = CultureInfo.InvariantCulture.DoInCulture(() => File.ReadAllLines("LKOH_history.txt").Select(line =>  				{  					var parts = line.Split(''');  					var time = (parts[0] + parts[1]).ToDateTime("yyyyMMddHHmmss").ApplyTimeZone(TimeHelper.Moscow);  					return (Candle)new TimeFrameCandle  					{  						OpenPrice = parts[2].To<decimal>()'  						HighPrice = parts[3].To<decimal>()'  						LowPrice = parts[4].To<decimal>()'  						ClosePrice = parts[5].To<decimal>()'  						TimeFrame = _timeFrame'  						OpenTime = time'  						CloseTime = time + _timeFrame'  						TotalVolume = parts[6].To<decimal>()'  						Security = _lkoh'  						State = CandleStates.Finished'  					};  				}).ToArray());    				var lastCandleTime = default(DateTimeOffset);    				// начинаем вычислять скользящие средние  				foreach (var candle in candles)  				{  					ProcessCandle(candle);  					lastCandleTime = candle.OpenTime;  				}    				_candleManager.Start(series);    				// вычисляем временные отрезки текущей свечи  				var bounds = _timeFrame.GetCandleBounds(_trader.CurrentTime);    				candles = _candleManager.Container.GetCandles(series' new Range<DateTimeOffset>(lastCandleTime + _timeFrame' bounds.Min));    				foreach (var candle in candles)  				{  					ProcessCandle(candle);  				}    				_isTodaySmaDrawn = true;    				Report.IsEnabled = true;  			}
Magic Number,SampleSMA,SmaStrategy,C:\repos\stocksharp_stocksharp\Samples\Quik\DDE\SampleSMA\SmaStrategy.cs,ProcessCandle,The following statement contains a magic number: if (_isShortLessThenLong != isShortLessThenLong)  			{  				// ερλθ κξπξςκΰ μενόψε χεμ δλθννΰ' ςξ οπξδΰζΰ' θνΰχε' οξκσοκΰ.  				var direction = isShortLessThenLong ? Sides.Sell : Sides.Buy;    				// βϋχθρλεμ πΰημεπ δλ ξςκπϋςθ θλθ οεπεβξπξςΰ οξηϋ  				var volume = Position == 0 ? Volume : Position.Abs() * 2;    				// πεγθρςπθπσεμ ηΰβκσ (ξαϋχνϋμ ροξρξαξμ - λθμθςθπξβΰννξι ηΰβκξι)  				//RegisterOrder(this.CreateOrder(direction' (decimal)Security.GetCurrentPrice(direction)' volume));    				// οεπεβξπΰχθβΰεμ οξηθφθώ χεπεη κξςθπξβΰνθε  				var strategy = new MarketQuotingStrategy(direction' volume);  				ChildStrategies.Add(strategy);    				// ηΰοξμθνΰεμ ςεκσωεε οξλξζενθε ξςνξρθςελόνξ δπσγ δπσγΰ  				_isShortLessThenLong = isShortLessThenLong;  			}
